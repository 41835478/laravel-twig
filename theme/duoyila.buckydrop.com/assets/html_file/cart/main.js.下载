webpackJsonp([ 1 ], {
    0: function(module, exports, __webpack_require__) {
        window.main = true;
        if (!window.prefetch) {
            window.beacon("info", [ "angular_bootstrap_start" ]);
            angular.bootstrap(document.body, [ "app" ]);
            window.beacon("info", [ "angular_bootstrap_end" ]);
            __webpack_require__("./js/app.js");
        }
    },
    "./pages/xo-checkout/template.html": function(module, exports) {
        module.exports = '<div class="outerWrapper" ng-class="[locale.country, locale.lang, miniBrowser?\'minibrowser\':\'\', isApp?\'mobileApp\':\'\']" id="outerWrapper" >\n    <!-- Messenger BA .. HIDE this -->\n    <xo-merchant-header ng-if="!isMessengerBAIntegration" token="token"></xo-merchant-header>\n    <div id="wrapper" class="clearfix">\n        <div id="sliding-area" tabindex="-1">\n            <div id="main" role="main" tabindex="-1">\n                <xo-header ng-if="displayHeader" is-venmo-flow="showVenmoExperience" token="token" redirectiframe="redirectiframe" redirect-lightbox="redirectLightbox"></xo-header>\n                <div id="contents">\n                    <div ui-view></div>\n                </div>\n            </div>\n        </div>\n        <xo-spinner></xo-spinner>\n    </div>\n    <!-- Messenger BA .. HIDE this -->\n    <xo-footer ng-if="!isMessengerBAIntegration" token="token" escape-hatch-incontext="escapeHatchInContext" show-venmo-legal-links="showVenmoExperience"></xo-footer>\n    <xo-login-overlay  token="token"></xo-login-overlay>\n</div>\n';
    },
    "./css/app.less": function(module, exports) {},
    "./components/xo-beaver/dist/logger.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/xo-beaver/dist/level.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("beaver", [ "beaver.level" ]).factory("$Logger", function($injector, $http, $window, $interval, $timeout, $log, $q, $rootScope, $logLevel, $consoleLogLevel) {
                    var logger = {};
                    var HERMES_DEV_COOKIE = "hermesdev";
                    angular.forEach($logLevel, function(level) {
                        logger[level] = function(event, payload, settings) {
                            return this.log(level, event, payload, settings);
                        };
                    });
                    var hostname = $window.location && $window.location.hostname || "";
                    var uniqueEvents = [];
                    angular.extend(logger, {
                        autoLog: [ $logLevel.WARNING, $logLevel.ERROR ],
                        flushInterval: 10 * 60 * 1e3,
                        heartbeatInterval: 5e3,
                        sizeLimit: 300,
                        debounceInterval: 10,
                        uri: "/api/log",
                        hearbeatMaxThreshold: 50,
                        deploy: {
                            isLocal: function isLocal() {
                                return hostname === "localhost" || hostname === "localhost.paypal.com";
                            },
                            isStage: function isStage() {
                                return Boolean(hostname.match(/^.*\.qa\.paypal\.com$/));
                            },
                            isLive: function isLive() {
                                return hostname === "www.paypal.com";
                            }
                        },
                        init: function init() {
                            var self = this;
                            this.buffer = [];
                            var previousBeforeUnloadHandler = $window.onbeforeunload;
                            $window.onbeforeunload = function(event) {
                                if (self.isDone) {
                                    return;
                                }
                                self.info("window_beforeunload");
                                if (previousBeforeUnloadHandler) {
                                    return previousBeforeUnloadHandler.apply(this, arguments);
                                }
                            };
                            var previousUnloadHandler = $window.onunload;
                            $window.onunload = function(event) {
                                if (self.isDone) {
                                    return;
                                }
                                self.info("window_unload");
                                self._flush();
                                self.done();
                                if (previousUnloadHandler) {
                                    return previousUnloadHandler.apply(this, arguments);
                                }
                            };
                            this.heartbeat();
                            this.daemon();
                        },
                        heartbeat: function heartbeat() {
                            var self = this;
                            if (!window.enablePerformance) {
                                return;
                            }
                            function timestamp() {
                                var perf = window.performance;
                                return parseInt(perf.now() - (perf.timing.connectEnd - perf.timing.navigationStart), 10);
                            }
                            var howBusy = {
                                lastSampledTime: timestamp(),
                                lastLag: 0,
                                maxLag: 0,
                                dampendedLag: 0
                            };
                            var count = 0;
                            $interval(function() {
                                if (!self.buffer.length || self.buffer[self.buffer.length - 1].event !== "heartbeat") {
                                    count = 0;
                                }
                                if (!self.buffer.length || count > self.hearbeatMaxThreshold) {
                                    return;
                                }
                                count += 1;
                                var payload = {
                                    count: count
                                };
                                var now = timestamp();
                                howBusy.lastLag = now - howBusy.lastSampledTime - self.heartbeatInterval;
                                howBusy.maxLag = howBusy.lastLag > howBusy.maxLag ? howBusy.lastLag : howBusy.maxLag;
                                howBusy.dampendedLag = (howBusy.lastLag + howBusy.dampendedLag * 2) / 3;
                                howBusy.lastSampledTime = now;
                                payload.lastLag = howBusy.lastLag.toFixed(4);
                                payload.maxLag = howBusy.maxLag.toFixed(4);
                                payload.dampendedLag = howBusy.dampendedLag.toFixed(4);
                                payload.lastSampledTime = howBusy.lastSampledTime.toFixed(4);
                                if (howBusy.lastLag > 1e4) {
                                    self.info("toobusy", {}, {
                                        noConsole: true,
                                        unique: true
                                    });
                                }
                                self.info("heartbeat", payload, {
                                    noConsole: true
                                });
                            }, this.heartbeatInterval);
                        },
                        done: function done() {
                            this.isDone = true;
                        },
                        addPerformanceData: function addPerformanceData(payload) {
                            if (window.enablePerformance) {
                                var performance = window.performance;
                                var timing = window.performance.timing || {};
                                var now = performance.now();
                                if (window.clientStartTime && angular.isUndefined(payload.client_elapsed)) {
                                    payload.client_elapsed = parseInt(now - window.clientStartTime, 10);
                                }
                                if (timing.connectEnd && timing.navigationStart && angular.isUndefined(payload.req_elapsed)) {
                                    payload.req_elapsed = parseInt(now - (timing.connectEnd - timing.navigationStart), 10);
                                }
                            }
                        },
                        addLocaleData: function addLocaleData(payload) {
                            var context = {};
                            try {
                                context = $injector.get("$metaBuilder").buildContext();
                            } catch (err) {
                                return;
                            }
                            if (context.locale && context.locale.country) {
                                payload.site_cntry = context.locale.country;
                            }
                        },
                        log: function log(level, event, payload, settings) {
                            var self = this;
                            payload = payload || {};
                            if (angular.isArray(payload) || !angular.isObject(payload)) {
                                payload = {
                                    payload: payload
                                };
                            }
                            settings = settings || {};
                            if (settings.unique) {
                                var hash = event + ":" + angular.toJson(payload);
                                if (uniqueEvents.indexOf(hash) > -1) {
                                    return self;
                                }
                                uniqueEvents.push(hash);
                            }
                            payload.pageID = window.meta && window.meta.pageID;
                            this.addPerformanceData(payload);
                            this.addLocaleData(payload);
                            self.print(level, event, payload, settings);
                            if (this.buffer.length >= this.sizeLimit) {
                                if (this.buffer.length === this.sizeLimit) {
                                    return self.enqueue("info", "logger_max_buffer_length");
                                }
                                return self;
                            }
                            return self.enqueue(level, event, payload, settings);
                        },
                        getTimestamp: function getTimestamp() {
                            var now = Date.now();
                            return window.logOffset ? window.logOffset + now : now;
                        },
                        enqueue: function enqueue(level, event, payload, settings) {
                            payload = payload || {};
                            settings = settings || {};
                            var data = {
                                level: level,
                                event: event,
                                timestamp: this.getTimestamp(),
                                payload: payload
                            };
                            this.buffer.push(data);
                            if (this.autoLog.indexOf(level) > -1) {
                                this.flush();
                            }
                            return this;
                        },
                        shouldPrintLogsToConsole: function shouldPrintLogsToConsole(settings) {
                            if (settings.noConsole) {
                                return false;
                            }
                            if (window.meta && window.meta.corp) {
                                return true;
                            }
                            if (this.deploy.isLocal() || this.deploy.isStage()) {
                                return true;
                            }
                            var cookies = window.cookies || {};
                            if (cookies[HERMES_DEV_COOKIE] && cookies[HERMES_DEV_COOKIE] === "1") {
                                return true;
                            }
                            return false;
                        },
                        print: function print(level, event, payload, settings) {
                            if (!this.shouldPrintLogsToConsole(settings)) {
                                return;
                            }
                            var args = [ event ];
                            if (payload) {
                                args.push(payload);
                                if (payload.stack || payload.error || payload.warning) {
                                    args.push("\n\n", payload.stack || payload.error || payload.warning);
                                }
                            }
                            $log[$consoleLogLevel[level] || "info"].apply($log, args);
                        },
                        flush: function flush(immediate) {
                            var self = this;
                            if (!this.buffer.length) {
                                return $q.when();
                            }
                            if (immediate) {
                                return $q.when(this._flush());
                            }
                            if (self.debouncer_timeout) {
                                $timeout.cancel(self.debouncer_timeout);
                            }
                            self.debouncer_timeout = $timeout(function() {
                                var resolver = self.debouncer_resolver;
                                delete self.debouncer_promise;
                                delete self.debouncer_resolver;
                                delete self.debouncer_timeout;
                                self._flush().then(function() {
                                    resolver();
                                });
                            }, this.debounceInterval);
                            self.debouncer_promise = self.debouncer_promise || $q(function(resolver) {
                                self.debouncer_resolver = resolver;
                            });
                            return self.debouncer_promise;
                        },
                        _flush: function _flush() {
                            var self = this;
                            if (!self.buffer.length) {
                                return $q.when();
                            }
                            var meta = {};
                            try {
                                meta = $injector.get("$metaBuilder").build();
                            } catch (err) {}
                            var req = this.ajax("post", $window.meta.logURL || $window.config.urls.baseUrl + this.uri, {
                                data: {
                                    events: self.buffer
                                },
                                meta: meta
                            });
                            self.buffer = [];
                            return req;
                        },
                        ajax: function ajax(method, url, json) {
                            return $q(function(resolve) {
                                var XRequest = window.XMLHttpRequest || ActiveXObject;
                                var req = new XRequest("MSXML2.XMLHTTP.3.0");
                                var logAppName = $window.meta.logAppName;
                                req.open(method.toUpperCase(), url);
                                req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                                req.setRequestHeader("Content-type", "application/json");
                                if (logAppName) {
                                    req.setRequestHeader("x-app-name", logAppName);
                                }
                                req.onreadystatechange = function() {
                                    if (req.readyState > 3) {
                                        resolve();
                                    }
                                };
                                req.send(angular.toJson(json).replace(/&/g, "%26"));
                            });
                        },
                        daemon: function daemon() {
                            this.stop();
                            var self = this;
                            this.timer = $interval(function() {
                                self.flush();
                            }, this.flushInterval);
                        },
                        stop: function stop() {
                            if (this.timer) {
                                $interval.cancel(this.timer);
                            }
                        }
                    });
                    function Logger(val) {
                        angular.extend(this, val);
                        this.init();
                    }
                    Logger.prototype = logger;
                    Logger.prototype.constructor = Logger;
                    return Logger;
                }).factory("$logger", function($Logger) {
                    return new $Logger();
                }).run(function($logger) {
                    angular.forEach(window.beaconQueue, function(payload) {
                        $logger.log(payload.level, payload.event, payload);
                    });
                    window.beacon = function(level, events, payload) {
                        angular.forEach(events, function(event) {
                            $logger.log(level, event, payload);
                        });
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-beaver/dist", "components/xo-beaver/dist/logger.js");
    },
    "./components/xo-beaver/dist/level.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("beaver.level", []).factory("$logLevel", function() {
                    return {
                        INFO: "info",
                        DEBUG: "debug",
                        ERROR: "error",
                        WARN: "warn",
                        ALERT: "alert"
                    };
                }).factory("$consoleLogLevel", function() {
                    return {
                        info: "info",
                        debug: "debug",
                        error: "error",
                        warn: "warn",
                        alert: "info"
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-beaver/dist", "components/xo-beaver/dist/level.js");
    },
    "./pages/xo-checkout/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        __webpack_require__("./components/jquery/dist/jquery.min.js");
        __webpack_require__("./components/angular-shims-placeholder/dist/angular-shims-placeholder.min.js");
        __webpack_require__("./js/lib/index.js");
        __webpack_require__("./components/xo-tracking/dist/index.js");
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _middleware = __webpack_require__("./js/lib/middleware.js");
        __webpack_require__("./pages/xo-landing/route.js");
        __webpack_require__("./pages/xo-login/route.js");
        __webpack_require__("./pages/xo-generic-error/route.js");
        __webpack_require__("./pages/xo-generic-message/route.js");
        __webpack_require__("./pages/xo-select-fi/route.js");
        __webpack_require__("./pages/xo-review/route.js");
        __webpack_require__("./pages/xo-authorization-message/route.js");
        __webpack_require__("./pages/xo-add-card/route.js");
        __webpack_require__("./pages/xo-add-fi/route.js");
        __webpack_require__("./pages/xo-add-card-meft/route.js");
        __webpack_require__("./pages/xo-add-tax-id/route.js");
        __webpack_require__("./pages/xo-add-shipping/route.js");
        __webpack_require__("./pages/xo-add-national-id/route.js");
        __webpack_require__("./pages/xo-update-card/route.js");
        var _route = __webpack_require__("./pages/xo-eConsent/route.js");
        var _route2 = _interopRequireDefault(_route);
        __webpack_require__("./pages/xo-travel-rule/route.js");
        var _route3 = __webpack_require__("./pages/xo-nbr/route.js");
        var _route4 = _interopRequireDefault(_route3);
        var _route5 = __webpack_require__("./pages/xo-framebust/route.js");
        __webpack_require__("./pages/xo-sepa/route.js");
        __webpack_require__("./pages/xo-end/route.js");
        __webpack_require__("./pages/xo-de-guest/route.js");
        __webpack_require__("./components/xo-login-components/src/fullpage-onetouch-upsell/route.js");
        __webpack_require__("./components/xo-login-components/src/onetouch-interstitial/route.js");
        var _route6 = __webpack_require__("./pages/xo-create-password/route.js");
        var _route7 = _interopRequireDefault(_route6);
        var _route8 = __webpack_require__("./pages/xo-tokenization-info/route.js");
        var _route9 = _interopRequireDefault(_route8);
        var _route10 = __webpack_require__("./pages/xo-pin-setup/route.js");
        var _route11 = _interopRequireDefault(_route10);
        var _route12 = __webpack_require__("./pages/xo-venmo/route.js");
        var _route13 = _interopRequireDefault(_route12);
        var _route14 = __webpack_require__("./pages/xo-third-party-wallet/route.js");
        var _route15 = _interopRequireDefault(_route14);
        var _route16 = __webpack_require__("./pages/xo-pay-with-card/route.js");
        var _route17 = _interopRequireDefault(_route16);
        var _route18 = __webpack_require__("./pages/xo-ship-to/route.js");
        var _route19 = _interopRequireDefault(_route18);
        var _route20 = __webpack_require__("./pages/xo-third-party-info/route.js");
        var _route21 = _interopRequireDefault(_route20);
        __webpack_require__("./pages/xo-inventory-soldout/route.js");
        __webpack_require__("./components/xo-page-components/src/done/route.js");
        __webpack_require__("./components/xo-form-components/src/phone/route.js");
        var _route22 = __webpack_require__("./components/xo-credit-components/src/banner-interstitial/route.js");
        var _route23 = _interopRequireDefault(_route22);
        __webpack_require__("./components/xo-credit-components/src/bml-display/route.js");
        __webpack_require__("./components/xo-credit-components/src/choose-credit-offer/route.js");
        __webpack_require__("./components/xo-credit-components/src/redirect-to-cape/route.js");
        __webpack_require__("./pages/xo-pay-with-selection/route.js");
        __webpack_require__("./pages/xo-checkout/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$xoCheckoutRoute", {
            path: "checkout",
            directive: "xo-checkout",
            titleContent: "base.payPal",
            defaultState: "checkout.landing",
            middleware: _middleware.$Middleware,
            children: [ {
                name: "$LandingRoute"
            }, {
                name: "$LoginRoute",
                attributes: {
                    token: "token"
                }
            }, {
                name: "$PayWithSelectionRoute",
                attributes: {
                    token: "token"
                }
            }, {
                route: _route19["default"],
                props: function props() {
                    return {
                        token: this.token
                    };
                }
            }, {
                route: _route17["default"],
                props: function props() {
                    return {
                        token: this.token
                    };
                }
            }, {
                route: _route13["default"],
                attributes: {
                    token: "token"
                }
            }, {
                route: _route23["default"],
                attributes: {
                    token: "token"
                }
            }, {
                route: _route15["default"],
                attributes: {
                    token: "token"
                }
            }, {
                route: _route21["default"],
                attributes: {
                    token: "token"
                }
            }, {
                name: "$GenericErrorRoute"
            }, {
                name: "$ChooseCreditOfferRoute",
                attributes: {
                    token: "token"
                }
            }, {
                name: "$RedirectToCapeRoute",
                attributes: {
                    token: "token"
                }
            }, {
                name: "$GenericMessageRoute"
            }, {
                name: "$FullpageOnetouchUpsellRoute"
            }, {
                name: "$OneTouchUpsellRoute",
                attributes: {
                    token: "token"
                }
            }, {
                name: "$SelectFiRoute",
                props: function props() {
                    return {
                        token: this.token
                    };
                }
            }, {
                name: "$ReviewRoute"
            }, {
                name: "$AuthorizationMessageRoute"
            }, {
                name: "$AddPhoneRoute"
            }, {
                name: "$AddCardPageRoute"
            }, {
                name: "$AddFiPageRoute"
            }, {
                route: _route9["default"],
                props: function props() {
                    return {
                        token: this.token
                    };
                }
            }, {
                route: _route11["default"],
                props: function props() {
                    return {
                        token: this.token
                    };
                }
            }, {
                name: "$AddCardMeftRoute"
            }, {
                name: "$AddTaxIdRoute"
            }, {
                name: "$TravelRuleRoute"
            }, {
                name: "$AddNationalIdRoute"
            }, {
                name: "$UpdateCardPageRoute"
            }, {
                name: "$AddShippingPageRoute",
                attributes: {
                    token: "token"
                }
            }, {
                name: "$xoSoldOutPageRoute"
            }, {
                route: _route2["default"],
                props: function props() {
                    var _this = this;
                    return {
                        token: this.token,
                        success: function success() {
                            return _this.goto("this.review");
                        }
                    };
                }
            }, {
                route: _route4["default"],
                props: function props() {
                    return {
                        token: this.token
                    };
                }
            }, {
                route: _route5.$xoFrameBustRoute
            }, {
                name: "$SepaPageRoute",
                attributes: {
                    token: "token"
                }
            }, {
                name: "$EndRoute"
            }, {
                name: "$xoDeGuest"
            }, {
                name: "$BMLDisplay",
                attributes: {
                    "review-url": "reviewUrl"
                }
            }, {
                name: "$DoneRoute"
            }, {
                route: _route7["default"],
                props: function props() {
                    return {
                        token: this.token
                    };
                }
            } ]
        });
        _index.$Route;
        _middleware.$Middleware;
        _route5.$xoFrameBustRoute;
        module.exports = exports["default"];
    },
    "./js/lib/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _error = __webpack_require__("./js/lib/error.js");
        Object.keys(_error).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _error[key];
                }
            });
        });
        var _fallback = __webpack_require__("./js/lib/fallback.js");
        Object.keys(_fallback).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _fallback[key];
                }
            });
        });
        var _contingency = __webpack_require__("./js/lib/contingency.js");
        Object.keys(_contingency).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _contingency[key];
                }
            });
        });
        var _metaBuilder = __webpack_require__("./js/lib/metaBuilder.js");
        Object.keys(_metaBuilder).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _metaBuilder[key];
                }
            });
        });
        var _middleware = __webpack_require__("./js/lib/middleware.js");
        Object.keys(_middleware).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _middleware[key];
                }
            });
        });
        var _miniBrowser = __webpack_require__("./js/lib/miniBrowser.js");
        Object.keys(_miniBrowser).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _miniBrowser[key];
                }
            });
        });
        var _security = __webpack_require__("./js/lib/security.js");
        Object.keys(_security).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _security[key];
                }
            });
        });
        var _stateChangeListener = __webpack_require__("./js/lib/stateChangeListener.js");
        Object.keys(_stateChangeListener).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _stateChangeListener[key];
                }
            });
        });
        var _cplIntegration = __webpack_require__("./js/lib/cplIntegration.js");
        Object.keys(_cplIntegration).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _cplIntegration[key];
                }
            });
        });
    },
    "./js/lib/error.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$forbiddenHandler = $forbiddenHandler;
        exports.$exceptionHandler = $exceptionHandler;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _index = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _fallback = __webpack_require__("./js/lib/fallback.js");
        var _contingency = __webpack_require__("./js/lib/contingency.js");
        var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
        function constructEventName(toState, fromState) {
            var from = fromState.name.replace(/\./g, "_") || "start";
            var to = toState.name.replace(/\./g, "_") || "end";
            return "state_change_" + from + "_to_" + to;
        }
        function $forbiddenHandler(err) {
            _logger.$logger.warn("forbidden_handler");
            if (!err.transient) {
                _index.$AuthModel.instance().invalidate();
                if (_angular.$rootScope.paymentComplete) {
                    throw new _squid.$Contingency("PAYMENT_ALREADY_DONE");
                }
                _uiRouter.$state.go("checkout.login");
            }
        }
        function handleThirdPartyErrors(err, cause) {
            var errType = (err && err.constructor && err.constructor.name || "error").toLowerCase();
            var experience = _thirdPartyInfo.thirdPartyExperience.getExperience(_angular.$rootScope.token);
            var errName = "ui_" + experience.toLowerCase() + "_" + errType;
            _logger.$logger.error(errName, cause);
            _index.$AuthModel.instance().logout();
            _thirdPartyInfo.thirdPartyExperience.resetThirdPartyExperience();
            if (experience === "VENMO_EXPERIENCE") {
                _uiRouter.$state.go("checkout.login", {
                    venmoError: true
                });
            }
            if (experience === "BAIDU_EXPERIENCE") {
                _uiRouter.$state.go("checkout.login", {
                    baiduError: true
                });
            }
        }
        function isThirdPartyFlow() {
            return _thirdPartyInfo.thirdPartyExperience.isThirdPartyExperience(_angular.$rootScope.token);
        }
        var ERROR_HANDLERS = [ {
            type: _squid.$FallbackError,
            handler: _fallback.$fallbackErrorHandler
        }, {
            type: _squid.$Contingency,
            handler: _contingency.$contingencyHandler
        }, {
            type: _squid.$Forbidden,
            handler: $forbiddenHandler
        } ];
        function $exceptionHandler(err, cause) {
            if (_angular.$rootScope.ERROR_STATE) {
                if (_angular.$rootScope.ERROR_PREVENTED) {
                    throw err;
                }
                return;
            }
            if (isThirdPartyFlow()) {
                if (err instanceof _squid.$Forbidden) {
                    return $forbiddenHandler(err);
                } else {
                    return handleThirdPartyErrors(err, cause);
                }
            }
            var handled = _squid.$util.some(ERROR_HANDLERS, function(errorHandler) {
                if (err instanceof errorHandler.type) {
                    errorHandler.handler(err);
                    return true;
                }
            });
            if (handled) {
                return;
            } else if (!err.transient) {
                _angular.$rootScope.ERROR_STATE = err;
            }
            var errType = (err.constructor.name || "error").toLowerCase();
            var errName = "ui_unhandled_" + errType;
            var errMsg = err.message || "";
            if (errMsg.indexOf("infdig") > -1) {
                errName = "infinite_digest";
            } else if (errMsg.indexOf("inprog") > -1) {
                errName = "digest_inprog";
            } else if (errMsg.indexOf("badparse") > -1) {
                errName = "sanitize_badparse";
            } else if (errMsg.match(/^[\w_]+$/)) {
                errName = "ui_unhandled_" + errMsg;
            }
            if ([ "ui_unhandled_error", "ui_unhandled_typeerror" ].indexOf(errName) > -1) {
                if (err.stack && err.stack.indexOf("framework") > -1 && err.stack.indexOf("main.js") === -1) {
                    errName = "ui_unhandled_framework_error";
                }
            }
            if (err.transient) {
                errName += "_transient";
            }
            var payload = {
                error: err.stack || err.toString(),
                message: errMsg,
                cause: cause && cause.toString(),
                state: _uiRouter.$state.current.name,
                url: window.location.toString()
            };
            angular.extend(payload, err.payload || {});
            _logger.$logger.error(errName, payload);
            var event = _angular.$rootScope.$emit("unhandled_error", {
                err: err,
                route: (_uiRouter.$state || {}).current,
                message: payload.error,
                code: payload.cause
            });
            if (event.defaultPrevented) {
                _angular.$rootScope.ERROR_PREVENTED = true;
                throw err;
            } else if (!err.transient) {
                return (0, _fallback.$fallbackErrorHandler)(new _squid.$FallbackError({
                    reason: errName
                }));
            }
        }
        _angular.$rootScope.$on("$stateChangeError", function(event, toState, toParams, fromState, fromParams, err) {
            event.preventDefault();
            $exceptionHandler(err, constructEventName(toState, fromState));
        });
        _angular.$rootScope.$on("$windowError", function(event, details) {
            _logger.$logger.error("window_error", details, {
                unique: true
            });
        });
        angular.value("$forbiddenHandler", $forbiddenHandler);
        angular.value("$exceptionHandlerLazy", $exceptionHandler);
        _angular.$rootScope;
        _uiRouter.$state;
        _squid.$util;
        _squid.$FallbackError;
        _squid.$Forbidden;
        _squid.$Contingency;
        _logger.$logger;
        _index.$AuthModel;
        _fallback.$fallbackErrorHandler;
        _contingency.$contingencyHandler;
        _thirdPartyInfo.thirdPartyExperience;
    },
    "./components/squid/dist/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _ng = __webpack_require__("./components/squid/dist/ng/index.js");
        Object.keys(_ng).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _ng[key];
                }
            });
        });
        var _core = __webpack_require__("./components/squid/dist/core/index.js");
        Object.keys(_core).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _core[key];
                }
            });
        });
        var _locale = __webpack_require__("./components/squid/dist/locale/index.js");
        Object.keys(_locale).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _locale[key];
                }
            });
        });
        var _paypal = __webpack_require__("./components/squid/dist/paypal/index.js");
        Object.keys(_paypal).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _paypal[key];
                }
            });
        });
    },
    "./components/squid/dist/ng/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _core = __webpack_require__("./components/squid/dist/ng/core.js");
        Object.keys(_core).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _core[key];
                }
            });
        });
        var _route = __webpack_require__("./components/squid/dist/ng/route.js");
        Object.keys(_route).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _route[key];
                }
            });
        });
        var _component = __webpack_require__("./components/squid/dist/ng/component.js");
        Object.keys(_component).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _component[key];
                }
            });
        });
        var _feature = __webpack_require__("./components/squid/dist/ng/feature.js");
        Object.keys(_feature).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _feature[key];
                }
            });
        });
        var _locale = __webpack_require__("./components/squid/dist/ng/locale.js");
        Object.keys(_locale).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _locale[key];
                }
            });
        });
        var _module = __webpack_require__("./components/squid/dist/ng/module.js");
        Object.keys(_module).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _module[key];
                }
            });
        });
        var _ng = __webpack_require__("./components/squid/dist/ng/ng.js");
        Object.keys(_ng).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _ng[key];
                }
            });
        });
        var _directive = __webpack_require__("./components/squid/dist/ng/directive.js");
        Object.keys(_directive).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _directive[key];
                }
            });
        });
        var _events = __webpack_require__("./components/squid/dist/ng/events.js");
        Object.keys(_events).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _events[key];
                }
            });
        });
        var _pxp = __webpack_require__("./components/squid/dist/ng/pxp.js");
        Object.keys(_pxp).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _pxp[key];
                }
            });
        });
    },
    "./components/squid/dist/ng/core.js": function(module, exports, __webpack_require__) {
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _core = __webpack_require__("./components/squid/dist/core/index.js");
        _core.$event.use({
            on: function on() {
                return _angular.$rootScope.$on.apply(_angular.$rootScope, arguments);
            },
            once: function once(name, handler) {
                var cancel = _core.$event.on(name, function() {
                    cancel();
                    handler.apply(this, arguments);
                }, true);
                return cancel;
            },
            emit: function emit() {
                return _angular.$rootScope.$emit.apply(_angular.$rootScope, arguments);
            },
            broadcast: function broadcast() {
                return _angular.$rootScope.$broadcast.apply(_angular.$rootScope, arguments);
            }
        });
        _core.$promise.use(_angular.$q);
        _angular.$q;
        _angular.$rootScope;
        _core.$event;
        _core.$promise;
    },
    "./components/squid/dist/core/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _api = __webpack_require__("./components/squid/dist/core/api.js");
        Object.keys(_api).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _api[key];
                }
            });
        });
        var _class = __webpack_require__("./components/squid/dist/core/class.js");
        Object.keys(_class).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _class[key];
                }
            });
        });
        var _config = __webpack_require__("./components/squid/dist/core/config.js");
        Object.keys(_config).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _config[key];
                }
            });
        });
        var _error = __webpack_require__("./components/squid/dist/core/error.js");
        Object.keys(_error).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _error[key];
                }
            });
        });
        var _event = __webpack_require__("./components/squid/dist/core/event.js");
        Object.keys(_event).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _event[key];
                }
            });
        });
        var _integration = __webpack_require__("./components/squid/dist/core/integration.js");
        Object.keys(_integration).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _integration[key];
                }
            });
        });
        var _model = __webpack_require__("./components/squid/dist/core/model.js");
        Object.keys(_model).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _model[key];
                }
            });
        });
        var _promise = __webpack_require__("./components/squid/dist/core/promise.js");
        Object.keys(_promise).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _promise[key];
                }
            });
        });
        var _util = __webpack_require__("./components/squid/dist/core/util.js");
        Object.keys(_util).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _util[key];
                }
            });
        });
        var _loader = __webpack_require__("./components/squid/dist/core/loader.js");
        Object.keys(_loader).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _loader[key];
                }
            });
        });
        var _dom = __webpack_require__("./components/squid/dist/core/dom.js");
        Object.keys(_dom).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _dom[key];
                }
            });
        });
    },
    "./components/squid/dist/core/api.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$Api = undefined;
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
        } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        exports.$getLatestCorrelationID = $getLatestCorrelationID;
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _event = __webpack_require__("./components/squid/dist/core/event.js");
        var _class = __webpack_require__("./components/squid/dist/core/class.js");
        var _util = __webpack_require__("./components/squid/dist/core/util.js");
        var _promise = __webpack_require__("./components/squid/dist/core/promise.js");
        var _config = __webpack_require__("./components/squid/dist/core/config.js");
        var _error = __webpack_require__("./components/squid/dist/core/error.js");
        var _loader = __webpack_require__("./components/squid/dist/core/loader.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        _config.$meta.headers = _config.$meta.headers || {};
        _config.$meta.headers["x-cookies"] = _typeof(_config.$meta.headers["x-cookies"]) !== "object" ? JSON.parse(_config.$meta.headers["x-cookies"] || "{}") : _config.$meta.headers["x-cookies"];
        function cookiesEnabled() {
            return _util.$util.cookiesEnabled() && window.location.hostname.indexOf(".paypal.com") > -1;
        }
        var cache = {};
        var standardHeaders = {};
        var latestCorrelationID = _config.$meta.correlationId;
        var windowLoad = _util.$util.memoize(function() {
            return _promise.$promise.resolver(function(resolve) {
                if (document.readyState === "complete") {
                    resolve();
                } else {
                    window.addEventListener("load", resolve);
                }
            });
        });
        var batchQueue = {};
        window.pre = {};
        var transientCache = {};
        var transientCacheResolvers = {};
        var metaBuilder = void 0;
        window.preload = function(method, url, data, name) {
            if (name) {
                window.pre[name] = {
                    method: method,
                    uri: url,
                    res: data
                };
            }
            var key = method + ":" + url;
            var resolvers = transientCacheResolvers[key] || [];
            transientCache[key] = data;
            while (resolvers.length) {
                resolvers.pop().call();
            }
        };
        var preloadComplete = false;
        window.preloadComplete = function() {
            preloadComplete = true;
            Object.keys(transientCacheResolvers).forEach(function(key) {
                var resolvers = transientCacheResolvers[key] || [];
                while (resolvers.length) {
                    resolvers.pop().call();
                }
            });
        };
        _logger.$logger.info(cookiesEnabled() ? "cookies_enabled" : "cookies_disabled");
        var $Api = exports.$Api = _class.$Class.extend("$Api", {
            cache: false,
            timeout: 45e3,
            getAttempts: 3,
            postAttempts: 1,
            action: function action(_action, options) {
                options.action = _action;
                return this.post(options);
            },
            retrieve: function retrieve(options) {
                options.method = "get";
                return this.call(options);
            },
            post: function post(options) {
                options.method = "post";
                return this.call(options);
            },
            call: function call(options) {
                var self = this;
                options.api = this;
                options.uri = this.getURI(options.model, options.action);
                options.params = options.params || {};
                options.cache = options.cache || self.cache && options.method === "get";
                options.name = this.buildAPIName(options);
                options.meta = this.buildMeta();
                options.transientError = options.transientError || false;
                options.cacheKey = _util.$util.buildURL(options.uri, options.params);
                _logger.$logger.info(options.name + "_call", {
                    name: options.name,
                    method: options.method,
                    uri: options.uri
                });
                if (!options.silent) {
                    _event.$event.emit("loading");
                }
                return _promise.$promise.first([ function() {
                    if (options.cache && cache[options.cacheKey]) {
                        return cache[options.cacheKey];
                    }
                }, function() {
                    return _promise.$promise.providing(self.hasTransientCacheData(options), function() {
                        return self.attemptRequest(options);
                    });
                }, function() {
                    if (options.batch) {
                        return self.batchRequest(options);
                    }
                }, function() {
                    return self.attemptRequest(options);
                } ])["finally"](function() {
                    if (!options.silent) {
                        _event.$event.emit("loaded");
                    }
                }).then(function(res) {
                    if (options.cache) {
                        cache[options.cacheKey] = res;
                    }
                    return self.handleResponse(res.data, options);
                }, function(err) {
                    if (err instanceof _error.$BatchShortCircuit) {
                        return _promise.$promise.reject(err);
                    }
                    return self.handleErrorResponse(err, options);
                });
            },
            batchRequest: function batchRequest(options) {
                _util.$util.assert(options.batch.name, 'Must define a "name" for batch request: ' + options.batch);
                _util.$util.assert(options.batch.id, 'Must define a "id" for batch request: ' + options.batch);
                var name = options.batch.name;
                var id = options.batch.id;
                var batch = batchQueue[name] = batchQueue[name] || {};
                batch[id] = options;
                return this.buildBatchRequest(name).then(function(results) {
                    return results[id].then(function(result) {
                        return result || _promise.$promise.reject(new _error.$BatchShortCircuit());
                    });
                });
            },
            buildBatchRequest: _promise.$promise.debounce(function(name) {
                var self = this;
                var batch = batchQueue[name];
                var batchIds = _class.$Class.keys(batch);
                var batchData = {};
                var headers = {};
                delete batchQueue[name];
                if (batchIds.length === 1) {
                    var batchId = batchIds[0];
                    var opts = batch[batchId];
                    var results = {};
                    results[batchId] = opts.api.attemptRequest(opts);
                    return results;
                }
                _util.$util.forEach(batch, function(options, id) {
                    batchData[id] = {
                        method: options.method,
                        uri: options.api.getURI(options.model, options.action, true),
                        data: options.data,
                        params: options.params,
                        dependencies: options.batch.dependencies
                    };
                    _util.$util.extend(headers, options.headers);
                });
                return $batchApi.action(name, {
                    data: batchData,
                    headers: headers
                }).then(function(res) {
                    return self.handleBatchResponse(batch, res.data);
                });
            }),
            handleBatchResponse: function handleBatchResponse(batch, data) {
                var self = this;
                var promises = {};
                _util.$util.forEach(batch, function(options, id) {
                    promises[id] = _promise.$promise.run(function() {
                        var depsPresent = _promise.$promise.every(options.batch.dependencies || [], function(depName) {
                            if (!batch[depName]) {
                                _logger.$logger.info("missing_batch_dependency", {
                                    dependency: depName,
                                    available: Object.keys(batch).join("|")
                                });
                            }
                            return !batch[depName] || promises[depName].then(function(dependency) {
                                return dependency && dependency.data && dependency.data.ack === "success";
                            });
                        });
                        return _promise.$promise.providing(depsPresent, function() {
                            return _promise.$promise.providing(data[id], function(result) {
                                var uri = options.api.getURI(options.model, options.action);
                                uri = _util.$util.buildURL(uri, options.params);
                                self.addTransientCacheData(options.method, uri, result);
                            }).then(function() {
                                return options.api.attemptRequest(options);
                            });
                        });
                    });
                });
                return promises;
            },
            attemptRequest: function attemptRequest(options) {
                var self = this;
                var attempts = options.method === "get" ? this.getAttempts : this.postAttempts;
                return _promise.$promise.attempt(attempts, function(remaining) {
                    return self.getTransientCacheResponse(options).then(function(res) {
                        if (res) {
                            return res;
                        }
                        return self.getHttpResponse(options);
                    })["catch"](function(res) {
                        if ((!res || !res.status) && attempts === 1) {
                            _logger.$logger.warn("api_retry_aborted", {
                                method: options.method,
                                uri: options.uri
                            });
                            return self.getHttpResponse(options);
                        }
                        return _promise.$promise.reject(res);
                    })["catch"](function(res) {
                        if (res.status === 401) {
                            _logger.$logger.warn("api_retry_401", {
                                method: options.method,
                                uri: options.uri
                            });
                            return self.getHttpResponse(options);
                        }
                        return _promise.$promise.reject(res);
                    })["catch"](function(res) {
                        if (res.status === 401) {
                            return {
                                data: {
                                    ack: "permission_denied"
                                }
                            };
                        }
                        if (res.status === 429) {
                            return {
                                data: {
                                    ack: "contingency",
                                    contingency: "TOO_MANY_REQUESTS"
                                }
                            };
                        }
                        if (remaining) {
                            _logger.$logger.warn("api_retry", {
                                method: options.method,
                                uri: options.uri
                            });
                            return _promise.$promise.reject(res);
                        }
                        if (res && res.data && res.data.ack === "error") {
                            return _promise.$promise.reject(new _error.$ApiError("api_error", {
                                name: options.name,
                                method: options.method,
                                uri: options.uri,
                                stack: res.data.stack,
                                transient: options.transientError
                            }));
                        } else if (res && res.status) {
                            return _promise.$promise.reject(new _error.$ApiError("response_status_" + res.status, {
                                uri: options.uri,
                                transient: options.transientError
                            }));
                        } else if (res && res.error) {
                            return _promise.$promise.reject(new _error.$ApiError("request_" + res.error, {
                                uri: options.uri,
                                transient: options.transientError
                            }));
                        } else {
                            return _promise.$promise.reject(new _error.$ApiError("request_aborted", {
                                uri: options.uri,
                                transient: options.transientError
                            }));
                        }
                    });
                });
            },
            getHttpResponse: function getHttpResponse(options) {
                var self = this;
                var startTime = _util.$util.now();
                var request = this.http(options);
                return request["finally"](function() {
                    options.duration = _util.$util.now() - startTime;
                })["catch"](function(res) {
                    if (res && res.status && res.data && res.data.ack && res.data.ack !== "error") {
                        return res;
                    }
                    return _promise.$promise.reject(res);
                }).then(function(res) {
                    self.saveResponseState(res);
                    var loggerPayload = {
                        name: options.name,
                        method: options.method,
                        uri: options.uri,
                        server: res.data.server,
                        time: options.duration,
                        duration: options.duration,
                        corrid: res && res.headers("Paypal-Debug-Id")
                    };
                    if (window.performance && window.performance.getEntries) {
                        _util.$util.forEach(window.performance.getEntries(), function(resource) {
                            if (resource.name && resource.name.indexOf(options.uri) > -1) {
                                _util.$util.extend(loggerPayload, resource);
                            }
                        });
                    }
                    _logger.$logger.info("api_response", loggerPayload);
                    if (res && res.status) {
                        _logger.$logger.info("http_response_" + res.status);
                    }
                    return res;
                }, function(res) {
                    self.saveResponseState(res);
                    if (res && res.status) {
                        _logger.$logger.info("http_response_" + res.status);
                    }
                    return _promise.$promise.reject(res);
                });
            },
            setTransientCache: function setTransientCache(data) {
                throw new Error("NotImplemented");
            },
            getTransientCacheData: function getTransientCacheData(options, pop) {
                if (!_config.$config.enablePreload) {
                    return _promise.$promise.resolve();
                }
                var preMethod = options.method.toLowerCase();
                var preUri = _util.$util.buildURL(options.uri, options.params);
                var key = preMethod + ":" + preUri;
                return _promise.$promise.resolver(function(resolve) {
                    function res() {
                        var data = transientCache[key];
                        if (pop) {
                            delete transientCache[key];
                        }
                        resolve(data);
                    }
                    if (transientCache[key] || document.readyState === "complete" || preloadComplete) {
                        return res();
                    }
                    transientCacheResolvers[key] = transientCacheResolvers[key] || [];
                    transientCacheResolvers[key].push(res);
                    windowLoad().then(res);
                });
            },
            hasTransientCacheData: function hasTransientCacheData(options) {
                return this.getTransientCacheData(options, false).then(function(data) {
                    return Boolean(data);
                });
            },
            addTransientCacheData: function addTransientCacheData(method, uri, data) {
                var key = method + ":" + uri;
                transientCache[key] = data;
            },
            getTransientCacheResponse: function getTransientCacheResponse(options) {
                return this.getTransientCacheData(options, true).then(function(data) {
                    if (data) {
                        if (data.ack === "error") {
                            return _promise.$promise.reject({
                                status: 500,
                                data: data
                            });
                        } else if (data.ack === "permission_denied") {
                            return _promise.$promise.reject({
                                status: 401,
                                data: data
                            });
                        } else if (data.ack === "contingency" || data.ack === "validation_error") {
                            return {
                                status: 400,
                                data: data
                            };
                        } else {
                            return {
                                status: 200,
                                data: data
                            };
                        }
                    } else if (options.method === "get" && !_loader.$loader.firstLoad() && !options.silent) {
                        _logger.$logger.info("preload_cache_miss", {
                            uri: options.uri
                        });
                    }
                });
            },
            getHeaders: function getHeaders(options) {
                if (!_config.$meta.headers["x-csrf-jwt"] && !_config.$meta.csrfJwt) {
                    _logger.$logger.warn("missing_csrf_jwt");
                }
                var headers = {
                    "X-Requested-With": "XMLHttpRequest",
                    "x-csrf-jwt": _config.$meta.headers["x-csrf-jwt"] || _config.$meta.csrfJwt
                };
                _util.$util.extend(headers, standardHeaders);
                if (!cookiesEnabled()) {
                    headers["x-cookies"] = JSON.stringify(_config.$meta.headers["x-cookies"]);
                }
                if (options.headers) {
                    _util.$util.extend(headers, options.headers);
                }
                return headers;
            },
            http: function http(options) {
                return this.httpJQuery(options);
            },
            httpJQuery: function httpJQuery(options) {
                var request = {
                    method: options.method,
                    data: options.method === "get" ? options.params : JSON.stringify({
                        data: options.data,
                        meta: options.meta || {}
                    }),
                    headers: this.getHeaders(options),
                    timeout: this.timeout
                };
                if (options.method === "post") {
                    request.headers["Content-Type"] = "application/json;charset=UTF-8";
                } else if (options.method === "get") {
                    request.data.meta = JSON.stringify(options.meta);
                }
                return _promise.$promise.resolver(function(resolve, reject) {
                    function getRes(res, data) {
                        return {
                            status: res.status,
                            data: data,
                            headers: function headers(name) {
                                return res.getResponseHeader(name);
                            }
                        };
                    }
                    request.success = function(data, status, res) {
                        return resolve(getRes(res, data));
                    };
                    request.error = function(res) {
                        if (res && res.status) {
                            if (res.status >= 400) {
                                return reject(getRes(res, res.responseJSON));
                            } else {
                                return resolve(getRes(res, res.responseJSON));
                            }
                        }
                        return reject({
                            status: 0,
                            headers: _util.$util.noop,
                            error: res && res.statusText
                        });
                    };
                    _jquery2["default"].ajax(options.uri, request);
                });
            },
            saveResponseState: function saveResponseState(res) {
                if (res.headers("x-csrf-jwt")) {
                    _config.$meta.headers["x-csrf-jwt"] = res.headers("x-csrf-jwt");
                    _config.$meta.csrfJwt = res.headers("x-csrf-jwt");
                    _config.$meta.headers["x-csrf-jwt-hash"] = res.headers("x-csrf-jwt-hash");
                }
                if (res.headers("X-cookies")) {
                    _config.$meta.headers["x-cookies-hash"] = res.headers("x-cookies-hash");
                    _util.$util.extend(_config.$meta.headers["x-cookies"], JSON.parse(res.headers("X-cookies") || "{}"));
                }
                latestCorrelationID = res.headers("Paypal-Debug-Id") || latestCorrelationID;
            },
            handleResponse: function handleResponse(res, options) {
                var loggerName = "ui_" + options.name;
                var loggerPayload = {
                    name: options.name,
                    method: options.method,
                    uri: options.uri,
                    time: options.duration,
                    duration: options.duration
                };
                var resultModel = options.resultModel || options.model;
                return _promise.$promise.call(function() {
                    if (res.data && resultModel) {
                        if (resultModel.populate) {
                            resultModel.populate(res.data);
                        } else {
                            _util.$util.extend(resultModel, res.data);
                        }
                    }
                    if (res && res.ack === "success" && resultModel && resultModel.fetchChildren) {
                        return _promise.$promise.resolve(resultModel.fetchChildren()).then(function(children) {
                            return _util.$util.extend(resultModel, children);
                        });
                    }
                }).then(function() {
                    if (res.ack === "success") {
                        _logger.$logger.info(loggerName + "_success", loggerPayload);
                        if (options.success) {
                            if (options.success instanceof Function) {
                                return options.success(res.data);
                            }
                            return options.success;
                        }
                        return res;
                    }
                    if (options.failSilently) {
                        return;
                    }
                    if (res.ack === "contingency") {
                        _logger.$logger.info(loggerName + "_contingency", _util.$util.extend(loggerPayload, {
                            contingency: res.contingency
                        }));
                        if (!res.contingency) {
                            throw new _error.$ApiError("expected_contingency_name", {
                                api: options.name
                            });
                        }
                        var contingency = new _error.$Contingency(res.contingency, {
                            transient: options.transientError
                        });
                        if (resultModel) {
                            resultModel.errorData = res.errorData || {};
                        }
                        var handler = options.contingencies && (options.contingencies[contingency.message] || options.contingencies["DEFAULT"]);
                        _util.$util.extend(contingency, res.errorData);
                        if (handler) {
                            if (handler instanceof Function) {
                                return handler(contingency.message, contingency);
                            }
                            return handler;
                        }
                        throw contingency;
                    } else if (res.ack === "validation") {
                        _logger.$logger.info(loggerName + "_validation", _util.$util.extend(loggerPayload, {
                            validation: res.validation
                        }));
                        if (options.validation) {
                            return options.validation(res.validation);
                        }
                        throw new _error.$ApiError("validation", {
                            transient: options.transientError
                        });
                    } else if (res.ack === "permission_denied") {
                        _logger.$logger.info(loggerName + "_denied", loggerPayload);
                        throw new _error.$Forbidden(options.uri + ": forbidden", {
                            transient: options.transientError
                        });
                    } else {
                        _logger.$logger.info(loggerName + "_noack", loggerPayload);
                        throw new _error.$ApiError("noack", {
                            transient: options.transientError
                        });
                    }
                });
            },
            handleErrorResponse: function handleErrorResponse(err, options) {
                return _promise.$promise.run(function() {
                    if (options.error) {
                        return options.error(err);
                    }
                    throw err;
                });
            },
            getURI: function getURI(model, action, relative) {
                var self = this;
                var uri = [];
                uri.push(this.uri.replace(/\/:[\w\.]+\?/g, function(key) {
                    key = key.slice(2);
                    key = key.substring(0, key.length - 1);
                    var component = model.get ? model.get(key) : model[key];
                    if (!component) {
                        return "";
                    }
                    return "/" + component;
                }).replace(/:[\w\.]+/g, function(key) {
                    key = key.slice(1);
                    var component = model.get ? model.get(key) : model[key];
                    if (!component) {
                        throw new Error('Property "' + key + '" not found in model for: ' + self.uri);
                    }
                    return component;
                }));
                if (action) {
                    uri.push(action);
                }
                if (this.ext) {
                    uri[uri.length - 1] += "." + this.ext;
                }
                uri = "/" + uri.join("/").replace(/\/{2,}/g, "/").replace(/^\//, "");
                if (!relative) {
                    uri = (this.baseURI || _config.$config.urls.baseUrl) + uri;
                }
                return uri;
            },
            buildMeta: function buildMeta() {
                if (metaBuilder) {
                    return metaBuilder();
                }
            },
            buildAPIName: function buildAPIName(options) {
                var self = this;
                var apiName = self.uri.replace(/^\/+/, "").replace(/\//g, "_").replace(/\?(.*)/, "").replace(/[^a-zA-Z0-9_]/g, "");
                apiName = options.action ? apiName + "_" + options.action : apiName;
                apiName = apiName.charAt(0) === "_" ? apiName.slice(1) : apiName;
                return apiName;
            }
        });
        $Api.reopenClass({
            clearCache: function clearCache() {
                cache = {};
            }
        });
        $Api.registerMetaBuilder = function(builder) {
            metaBuilder = builder;
        };
        $Api.addHeader = function(name, value) {
            standardHeaders[name] = value;
        };
        var $batchApi = new $Api({
            uri: "/api/batch",
            postAttempts: 3
        });
        function $getLatestCorrelationID() {
            return latestCorrelationID;
        }
        angular.value("$Api", $Api);
        angular.value("$getLatestCorrelationID", $getLatestCorrelationID);
        _logger.$logger;
        _event.$event;
        _class.$Class;
        _util.$util;
        _promise.$promise;
        _config.$config;
        _config.$meta;
        _error.$Contingency;
        _error.$Forbidden;
        _error.$ApiError;
        _error.$BatchShortCircuit;
        _loader.$loader;
    },
    "./components/squid/dist/core/event.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$event = undefined;
        var _promise = __webpack_require__("./components/squid/dist/core/promise.js");
        var handlers = {};
        var customEventEmitter = void 0;
        var $event = exports.$event = {
            use: function use(eventEmitter) {
                customEventEmitter = eventEmitter;
                for (var _iterator = Object.keys(handlers), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ;) {
                    var _ref;
                    if (_isArray) {
                        if (_i >= _iterator.length) break;
                        _ref = _iterator[_i++];
                    } else {
                        _i = _iterator.next();
                        if (_i.done) break;
                        _ref = _i.value;
                    }
                    var eventName = _ref;
                    if (handlers[eventName]) {
                        for (var _iterator2 = handlers[eventName], _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator](); ;) {
                            var _ref2;
                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }
                            var handler = _ref2;
                            customEventEmitter.on(eventName, handler);
                        }
                    }
                }
            },
            on: function on(eventName, method) {
                if (customEventEmitter) {
                    return customEventEmitter.on(eventName, method);
                }
                handlers[eventName] = handlers[eventName] || [];
                handlers[eventName].push(method);
                var cancelled = false;
                function cancel() {
                    if (!cancelled) {
                        handlers[eventName].splice(handlers[eventName].indexOf(method), 1);
                        cancelled = true;
                    }
                }
                cancel.cancel = cancel;
                return cancel;
            },
            once: function once(eventName, method) {
                if (customEventEmitter) {
                    return customEventEmitter.once(eventName, method);
                }
                var listener = $event.on(eventName, function() {
                    listener.cancel();
                    return method.apply(this, arguments);
                });
                return listener;
            },
            emit: function emit(eventName) {
                if (customEventEmitter) {
                    var _customEventEmitter;
                    return (_customEventEmitter = customEventEmitter).emit.apply(_customEventEmitter, arguments);
                }
                var event = {
                    preventDefault: function preventDefault() {
                        event.defaultPrevented = true;
                    }
                };
                if (handlers[eventName]) {
                    for (var _iterator3 = Array.prototype.slice.apply(handlers[eventName]), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator](); ;) {
                        var _ref3;
                        if (_isArray3) {
                            if (_i3 >= _iterator3.length) break;
                            _ref3 = _iterator3[_i3++];
                        } else {
                            _i3 = _iterator3.next();
                            if (_i3.done) break;
                            _ref3 = _i3.value;
                        }
                        var handler = _ref3;
                        handler.apply(this, [ event ].concat(Array.prototype.slice.call(arguments)));
                    }
                }
                return event;
            },
            broadcast: function broadcast(eventName) {
                if (customEventEmitter) {
                    var _customEventEmitter2;
                    return (_customEventEmitter2 = customEventEmitter).broadcast.apply(_customEventEmitter2, arguments);
                }
                return $event.emit.apply($event, arguments);
            },
            refCount: function refCount($scope, start, stop) {
                return _promise.$promise.resolver(function(resolve) {
                    var count = 0;
                    var cancelStartListener = $scope.$on(start, function(event, data) {
                        count += 1;
                    });
                    var cancelStopListener = $scope.$on(stop, function(event, data) {
                        setTimeout(function() {
                            count -= 1;
                            res();
                        }, 50);
                    });
                    function res() {
                        if (!count) {
                            if (cancelStartListener && cancelStopListener) {
                                cancelStartListener();
                                cancelStopListener();
                            }
                            return resolve();
                        }
                    }
                    setTimeout(res, 50);
                });
            },
            compose: function compose(start, end, startAll, endAll) {
                var debounce = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                var count = 0;
                var active = false;
                $event.on(start, function() {
                    if (!count) {
                        setTimeout(function() {
                            if (count && !active) {
                                active = true;
                                $event.emit(startAll);
                            }
                        }, debounce);
                    }
                    count += 1;
                });
                $event.on(end, function() {
                    setTimeout(function() {
                        count -= 1;
                        if (!count && active) {
                            active = false;
                            $event.emit(endAll);
                        }
                    }, 0);
                });
                return {
                    getCount: function getCount() {
                        return count;
                    },
                    isActive: function isActive() {
                        return Boolean(count);
                    },
                    reset: function reset() {
                        count = 0;
                    }
                };
            }
        };
        angular.value("$event", $event);
        _promise.$promise;
    },
    "./components/squid/dist/core/promise.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$promise = $promise;
        var _util = __webpack_require__("./components/squid/dist/core/util.js");
        var Promise = window.Promise;
        function $promise(obj) {
            return Promise.resolve(obj);
        }
        _util.$util.extend($promise, {
            use: function use(CustomPromise) {
                Promise = CustomPromise;
            },
            resolver: function resolver(method) {
                return new Promise(method);
            },
            resolve: function resolve(value) {
                return Promise.resolve(value);
            },
            reject: function reject(value) {
                return Promise.reject(value);
            },
            run: function run(method) {
                return Promise.resolve().then(method);
            },
            call: function call(method) {
                return Promise.resolve().then(method);
            },
            sequential: function sequential(methods) {
                var prom = Promise.resolve();
                _util.$util.forEach(methods, function(method) {
                    prom = prom.then(method);
                });
                return prom;
            },
            sleep: function sleep(time) {
                return new Promise(function(resolve) {
                    setTimeout(resolve, time);
                });
            },
            map: function map(items, method) {
                var promises = void 0;
                if (items instanceof Array) {
                    promises = [];
                } else if (items instanceof Object) {
                    promises = {};
                } else {
                    return Promise.resolve();
                }
                return this.all(_util.$util.map(items, function(item, key) {
                    promises[key] = Promise.resolve(item).then(function(result) {
                        return method(result, key, promises);
                    });
                    return promises[key];
                }));
            },
            all: function all(items) {
                if (items instanceof Array) {
                    return Promise.all(items);
                } else if (items instanceof Object) {
                    return this.hash(items);
                }
                return Promise.resolve([]);
            },
            hash: function hash(obj) {
                var results = {};
                return Promise.all(_util.$util.map(obj, function(item, key) {
                    return Promise.resolve(item).then(function(result) {
                        results[key] = result;
                    });
                })).then(function() {
                    return results;
                });
            },
            extend: function extend(obj, hash) {
                return this.hash(hash || {}).then(function(data) {
                    _util.$util.extend(obj, data);
                });
            },
            attempt: function attempt(attempts, method) {
                attempts -= 1;
                return Promise.resolve().then(function() {
                    return method(attempts);
                })["catch"](function(err) {
                    if (attempts) {
                        return $promise.attempt(attempts, method);
                    }
                    return Promise.reject(err);
                });
            },
            debounce: function debounce(method, time) {
                var timeout = void 0;
                var resolvers = {};
                return function() {
                    var self = this;
                    var args = arguments;
                    var key = JSON.stringify(args);
                    resolvers[key] = resolvers[key] || [];
                    return new Promise(function(resolve) {
                        resolvers[key].push(resolve);
                        clearTimeout(timeout);
                        timeout = setTimeout(function() {
                            var result = method.apply(self, args);
                            _util.$util.forEach(resolvers[key], function(resolver) {
                                resolver(result);
                            });
                            delete resolvers[key];
                        }, time);
                    });
                };
            },
            every: function every(collection, handler) {
                return this.map(collection, function(item) {
                    return handler(item);
                }).then(function(results) {
                    return _util.$util.every(results);
                });
            },
            providing: function providing(condition, handler) {
                return Promise.resolve(condition).then(function(result) {
                    if (result) {
                        return handler(result);
                    }
                });
            },
            until: function until(condition, pollTime, timeout, alwaysResolve) {
                return new Promise(function(resolve, reject) {
                    if (condition()) {
                        return resolve();
                    }
                    var interval = setInterval(function() {
                        if (condition()) {
                            clearInterval(interval);
                            return resolve();
                        }
                    }, pollTime);
                    if (timeout) {
                        setTimeout(function() {
                            clearInterval(interval);
                            return alwaysResolve ? resolve() : reject();
                        }, timeout);
                    }
                });
            },
            first: function first(handlers) {
                var prom = $promise.resolve();
                var result = void 0;
                _util.$util.forEach(handlers, function(handler) {
                    prom = prom.then(function() {
                        return result || handler();
                    }).then(function(handlerResult) {
                        result = handlerResult;
                        return result;
                    });
                });
                return prom;
            }
        });
        angular.value("$promise", $promise);
        _util.$util;
    },
    "./components/squid/dist/core/util.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$unresolved = exports.$util = undefined;
        exports.$getRedirectUrl = $getRedirectUrl;
        exports.$dispatch = $dispatch;
        exports.$experiment = $experiment;
        var _event = __webpack_require__("./components/squid/dist/core/event.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _base = __webpack_require__("./components/base64/base64.min.js");
        var base64 = _interopRequireWildcard(_base);
        var _config = __webpack_require__("./components/squid/dist/core/config.js");
        var _integration = __webpack_require__("./components/squid/dist/core/integration.js");
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj["default"] = obj;
                return newObj;
            }
        }
        var redirected = false;
        var paramCache = {};
        if (typeof window.atob === "undefined" || typeof window.btoa === "undefined") {
            window.atob = base64.atob;
            window.btoa = base64.btoa;
        }
        var $util = exports.$util = {
            forEach: function forEach(collection, method) {
                if (collection instanceof Array) {
                    for (var i = 0; i < collection.length; i++) {
                        method(collection[i], i);
                    }
                } else if (collection instanceof Object) {
                    for (var key in collection) {
                        if (collection.hasOwnProperty(key)) {
                            method(collection[key], key);
                        }
                    }
                }
            },
            idleTimeout: function idleTimeout(time) {
                setTimeout(function() {
                    _logger.$logger.info("page_idle");
                    $util.reload();
                }, time);
            },
            reload: function reload() {
                _logger.$logger.info("reload");
                _event.$event.emit("loading");
                location.reload();
            },
            replace: function replace(params) {
                if (params) {
                    var url = $util.buildURL(location.href, params);
                    _logger.$logger.info("replace", {
                        url: url
                    });
                    _event.$event.emit("loading");
                    location.replace(url);
                } else {
                    $util.reload();
                }
            },
            redirect: function redirect(url, options) {
                if (url.toLowerCase().indexOf("javascript:") !== -1) {
                    _logger.$logger.error("unsafe_redirect_url", {
                        url: url
                    });
                    throw new Error("Unsafe redirect url: " + url);
                }
                _logger.$logger.info("redirect", {
                    url: url
                });
                _event.$event.on("$stateChangeStart", function(event) {
                    _logger.$logger.info("state_change_after_redirect");
                    event.preventDefault();
                });
                function redir() {
                    if (redirected) {
                        return;
                    }
                    _logger.$logger.info("redirect", {
                        url: url
                    });
                    window.onunload = window.onbeforeunload = function() {};
                    if (_integration.$integration.getConfig("REDIRECT_TOP") !== false) {
                        window.top.location = url;
                    } else {
                        window.location = url;
                    }
                    redirected = true;
                }
                _event.$event.emit("loading");
                _logger.$logger.flush().then(redir);
                setTimeout(redir, 500);
                _logger.$logger.done();
            },
            cookiesEnabled: function cookiesEnabled() {
                var cookiesEnabled = void 0;
                document.cookie = "_cookiecheck=1";
                cookiesEnabled = Boolean(document.cookie.indexOf("_cookiecheck") > -1);
                document.cookie = "_cookiecheck=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";
                document.cookie = "_cookiecheck; expires=Thu, 01 Jan 1970 00:00:01 GMT;";
                return cookiesEnabled;
            },
            storageEnabled: function storageEnabled(api) {
                try {
                    window[api].setItem("__feature_test__", "0");
                    window[api].removeItem("__feature_test__");
                    return true;
                } catch (e) {
                    return false;
                }
            },
            sessionStorageEnabled: function sessionStorageEnabled() {
                return this.storageEnabled("sessionStorage");
            },
            localStorageEnabled: function localStorageEnabled() {
                return this.storageEnabled("localStorage");
            },
            params: function params(string) {
                if (typeof string !== "string") {
                    string = this.queryString().slice(1);
                }
                var params = {};
                if (!string) {
                    return params;
                }
                if (paramCache[string]) {
                    return $util.extend({}, paramCache[string]);
                }
                $util.forEach(string.split("&"), function(pair) {
                    pair = pair.split("=");
                    if (pair[0]) {
                        params[decodeURIComponent(pair[0])] = pair[1] && decodeURIComponent(pair[1]);
                    }
                });
                paramCache[string] = params;
                return params;
            },
            queryString: function queryString() {
                if (window.location.search) {
                    return window.location.search;
                } else {
                    var string = window.location.href;
                    var idx = string.indexOf("&");
                    var rIdx = string.lastIndexOf("#");
                    if (idx) {
                        return "?" + string.substring(idx, rIdx >= 0 ? rIdx : string.length);
                    }
                }
                return "";
            },
            queryStringSplice: function queryStringSplice(qs, insert, remove) {
                if (qs.indexOf("?") === 0) {
                    qs = qs.slice(1);
                }
                var params = $util.extend(this.params(qs), insert);
                $util.forEach(remove, function(key) {
                    delete params[key];
                });
                return "?" + this.paramToQueryString(params);
            },
            extend: function extend(obj, source) {
                if (!source) {
                    return obj;
                }
                for (var key in source) {
                    if (source.hasOwnProperty(key)) {
                        obj[key] = source[key];
                    }
                }
                return obj;
            },
            paramToQueryString: function paramToQueryString(params) {
                return this.filter(this.map(Object.keys(params).sort(), function(key) {
                    if (!params[key]) {
                        return;
                    }
                    return encodeURIComponent(key) + "=" + encodeURIComponent(params[key]);
                })).join("&");
            },
            param: function $param(name) {
                return this.params()[name];
            },
            hashParam: function hashParam(name) {
                return this.params(window.location.hash.slice(1))[name];
            },
            base64Decode: function base64Decode(encodedString) {
                return encodedString && window.atob(encodedString);
            },
            base64Encode: function base64Encode(decodedString) {
                return decodedString && window.btoa(decodedString);
            },
            decodeAndParse: function decodeAndParse(encodedString) {
                if (encodedString) {
                    return this.params(decodeURIComponent(this.base64Decode(encodedString)));
                }
            },
            assert: function $assert(value, message, payload) {
                if (!value) {
                    throw new Error(message, payload || {});
                }
            },
            map: function $map(array, method) {
                array = array || [];
                var results = void 0;
                if (array instanceof Array) {
                    results = [];
                    $util.forEach(array, function() {
                        results.push(method.apply(this, arguments));
                    });
                    return results;
                } else if (array instanceof Object) {
                    results = {};
                    $util.forEach(array, function(val, key) {
                        results[key] = method.apply(this, arguments);
                    });
                    return results;
                } else {
                    throw new Error("$util.map expects array or object");
                }
            },
            filter: function $filter(array, method) {
                method = method || Boolean;
                var results = [];
                $util.forEach(array, function(item) {
                    if (method.apply(this, arguments)) {
                        results.push(item);
                    }
                });
                return results;
            },
            find: function $find(array, method) {
                if (!array) {
                    return;
                }
                for (var i = 0; i < array.length; i++) {
                    if (method(array[i])) {
                        return array[i];
                    }
                }
            },
            findIndex: function $find(array, method) {
                if (!array) {
                    return;
                }
                for (var i = 0; i < array.length; i++) {
                    if (method(array[i])) {
                        return i;
                    }
                }
            },
            range: function range(start, end) {
                if (!end) {
                    end = start;
                    start = 0;
                }
                var result = [];
                for (var i = start; i < end; i++) {
                    result.push(i);
                }
                return result;
            },
            pad: function $pad(string, n, char) {
                n = n || 0;
                char = char || "0";
                var padding = Array(n + 1).join(char.toString());
                return (padding + string).slice(-n);
            },
            some: function $some(array, method) {
                if (_config.$config.deploy.isLocal() || _config.$config.deploy.isStage()) {
                    _angular.$log.warn("deprecated_method: squid.$util.some() is deprecated, use Array#some or\n                        lodash/underscore.some() instead.");
                }
                var result = void 0;
                $util.forEach(array, function(item, key) {
                    if (!result) {
                        result = method(item, key);
                    }
                });
                return result;
            },
            every: function $every(array, method) {
                method = method || Boolean;
                var result = true;
                $util.forEach(array, function(item) {
                    if (!method(item)) {
                        result = false;
                    }
                });
                return result;
            },
            reduce: function $reduce(array, method, intial) {
                $util.forEach(array, function(item) {
                    intial = method(intial, item);
                });
                return intial;
            },
            isPopup: function isPopup() {
                return _integration.$integration.isPopup();
            },
            isIFrame: function isIFrame() {
                return _integration.$integration.isIFrame();
            },
            buildURL: function buildURL(url, params) {
                this.assert(url, "buildURL :: expected url");
                var paramKeys = Object.keys(params || {});
                if (JSON.stringify(params) === "{}") {
                    return url;
                }
                if (!paramKeys.length) {
                    return url;
                }
                if (url.indexOf("?") === -1) {
                    url += "?";
                } else {
                    url += "&";
                }
                url += this.paramToQueryString(params);
                return url;
            },
            paypalURL: function paypalURL(url, params) {
                url = "https://" + (_config.$meta.stage ? _config.$meta.stage : window.location.host) + url;
                return this.buildURL(url, params);
            },
            override: function override(obj, methodName, handler) {
                var existing = obj[methodName];
                obj[methodName] = function() {
                    if (existing) {
                        try {
                            existing.apply(obj, arguments);
                        } catch (err) {
                            _logger.$logger.error(methodName + "event_error", {
                                error: err.toString
                            });
                        }
                    }
                    return handler.apply(obj, arguments);
                };
            },
            result: function result(method) {
                return method();
            },
            memoize: function memoize(method) {
                var result = void 0;
                var called = false;
                function memoized() {
                    if (!called) {
                        result = method.apply(this, arguments);
                    }
                    called = true;
                    return result;
                }
                memoized.flush = function() {
                    called = false;
                };
                return memoized;
            },
            now: function now() {
                return window.enablePerformance ? parseInt(window.performance.now(), 10) : Date.now();
            },
            bindObject: function bindObject(obj, self) {
                return $util.map(obj, function(method) {
                    return method.bind(self);
                });
            },
            hashStr: function hashStr(str) {
                var hash = 0;
                var i = void 0;
                var chr = void 0;
                var len = void 0;
                if (str.length === 0) {
                    return hash;
                }
                for (i = 0, len = str.length; i < len; i++) {
                    chr = str.charCodeAt(i);
                    hash = (hash << 5) - hash + chr;
                    hash |= 0;
                }
                return Math.abs(hash);
            },
            hash: function hash() {
                return this.hashStr(Math.random());
            },
            popup: function popup(name, url, options, callback) {
                callback = $util.once(callback);
                var win = window.open(url, name, $util.map(Object.keys(options), function(key) {
                    return key + "=" + options[key];
                }).join(", "));
                var interval = void 0;
                function checkWindowClosed() {
                    if (win.closed) {
                        clearInterval(interval);
                        callback();
                    }
                }
                interval = setInterval(checkWindowClosed, 50);
                setTimeout(checkWindowClosed);
                try {
                    var close = win.close;
                    win.close = function() {
                        close.apply(this, arguments);
                        checkWindowClosed();
                    };
                } catch (err) {}
                return win;
            },
            unique: function unique(collection) {
                return collection.filter(function(value, index, self) {
                    return self.indexOf(value) === index;
                });
            },
            monkeyPatch: function monkeyPatch(mod, prop, method) {
                var original = mod[prop];
                mod[prop] = function() {
                    var _this = this, _arguments = arguments;
                    return method.call(this, arguments, function(self, args) {
                        if (original) {
                            return original.apply(self || _this, args || _arguments);
                        }
                    });
                };
            },
            once: function once(method) {
                var called = false;
                return function() {
                    if (!called) {
                        called = true;
                        return method.apply(this, arguments);
                    }
                };
            },
            camelToDasherize: function camelToDasherize(string) {
                return string.replace(/([A-Z])/g, function(g) {
                    return "-" + g.toLowerCase();
                });
            },
            camelToCapsUnderscore: function camelToCapsUnderscore(string) {
                return string.replace(/([a-z][A-Z])/g, function(g) {
                    return g[0] + "_" + g[1];
                }).toUpperCase();
            },
            dasherizeToCamel: function dasherizeToCamel(string) {
                return string.replace(/-([a-z])/g, function(g) {
                    return g[1].toUpperCase();
                });
            },
            parentWindow: function parentWindow() {
                if (window.opener) {
                    return window.opener;
                } else if (window.parent !== window) {
                    return window.parent;
                }
            },
            hasRTL: function hasRTL(str) {
                return new RegExp("[֐-޿]").test(str);
            },
            noop: function noop() {}
        };
        var $unresolved = exports.$unresolved = {
            then: $util.noop,
            catch: $util.noop
        };
        function $getRedirectUrl(product, params) {
            var url = "";
            var urlParams = $util.params();
            if (_config.$config.deploy.isLocal() || _config.$config.deploy.isStage()) {
                url = _config.$config.urls.dispatch && _config.$config.urls.dispatch[product] || "";
            }
            url += _config.$config.urls.fallbackUrl[product];
            $util.extend(urlParams, params || {});
            if (urlParams.cmd) {
                delete urlParams.cmd;
            }
            return $util.buildURL(url, urlParams);
        }
        function $dispatch(product, params, stateChange) {
            $util.assert(product, "expected product");
            _logger.$logger.log("info", "dispatch", {
                product: product
            });
            _event.$event.emit("loading");
            var url = "";
            url = $getRedirectUrl(product, params);
            if (stateChange) {
                _event.$event.emit("page_loaded", stateChange.fromState, stateChange.toState);
            }
            return $util.redirect(url);
        }
        function $experiment(name, sample, id, loggerPayload) {
            var throttle = $util.hashStr(name + "_" + id) % 100;
            var group = void 0;
            if ($util.param(name) === "true") {
                group = "test_forced";
            } else if ($util.param(name) === "false") {
                group = "control_forced";
            } else if (throttle < sample) {
                group = "test";
            } else if (sample >= 50 || sample <= throttle && throttle < sample * 2) {
                group = "control";
            } else {
                group = "throttle";
            }
            _logger.$logger.info("fpti_pxp_check", {
                from: "PXP_CHECK",
                to: "process_pxp_check",
                pxp_exp_id: name,
                pxp_trtmnt_id: group
            });
            _logger.$logger.info(name + "_" + group, loggerPayload || {});
            if (group === "test" || group === "test_forced") {
                return true;
            } else if (group === "control") {
                return false;
            }
        }
        angular.value("$util", $util);
        angular.value("$unresolved", $unresolved);
        angular.value("$getRedirectUrl", $getRedirectUrl);
        angular.value("$dispatch", $dispatch);
        angular.value("$experiment", $experiment);
        _event.$event;
        _logger.$logger;
        _config.$config;
        _config.$meta;
        _integration.$integration;
        _angular.$log;
    },
    "./components/base64/base64.min.js": function(module, exports, __webpack_require__) {
        !function() {
            function t(t) {
                this.message = t;
            }
            var r = true ? exports : this, e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            t.prototype = new Error(), t.prototype.name = "InvalidCharacterError", r.btoa || (r.btoa = function(r) {
                for (var o, n, a = String(r), i = 0, c = e, d = ""; a.charAt(0 | i) || (c = "=", 
                i % 1); d += c.charAt(63 & o >> 8 - i % 1 * 8)) {
                    if (n = a.charCodeAt(i += .75), n > 255) throw new t("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
                    o = o << 8 | n;
                }
                return d;
            }), r.atob || (r.atob = function(r) {
                var o = String(r).replace(/=+$/, "");
                if (o.length % 4 == 1) throw new t("'atob' failed: The string to be decoded is not correctly encoded.");
                for (var n, a, i = 0, c = 0, d = ""; a = o.charAt(c++); ~a && (n = i % 4 ? 64 * n + a : a, 
                i++ % 4) ? d += String.fromCharCode(255 & n >> (-2 * i & 6)) : 0) a = e.indexOf(a);
                return d;
            });
        }();
    },
    "./components/squid/dist/core/config.js": function(module, exports) {
        exports.__esModule = true;
        var $meta = exports.$meta = window.meta || {};
        var $cookies = exports.$cookies = window.cookies || {};
        var $config = exports.$config = window.config || {};
        angular.value("$meta", $meta);
        angular.value("$cookies", $cookies);
        angular.value("$config", $config);
    },
    "./components/squid/dist/core/integration.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$integration = exports.$CONTEXT = exports.$DEFAULT = undefined;
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var $DEFAULT = exports.$DEFAULT = "DEFAULT";
        var $CONTEXT = exports.$CONTEXT = {
            FULLPAGE: "FULLPAGE",
            POPUP: "POPUP",
            LIGHTBOX: "LIGHTBOX",
            WEBVIEW: "WEBVIEW",
            NATIVE_CHECKOUT: "NATIVE_CHECKOUT"
        };
        var $integration = exports.$integration = {
            flow: $DEFAULT,
            init: function init(flow, config) {
                this.config = config || {};
                if (flow) {
                    this.setFlow(flow);
                }
                this.setContext(this.getContext());
            },
            getContext: function getContext() {
                if (this.isIFrame()) {
                    return $CONTEXT.LIGHTBOX;
                } else if (this.isPopup()) {
                    return $CONTEXT.POPUP;
                } else {
                    return $CONTEXT.FULLPAGE;
                }
            },
            isPopup: function isPopup() {
                return Boolean(window.opener);
            },
            isIFrame: function isIFrame() {
                return window.top !== window.self;
            },
            setContext: function setContext(context) {
                _logger.$logger.info("integration_context_" + context);
                this.context = context;
            },
            setFlow: function setFlow(flow) {
                _logger.$logger.info("integration_flow_" + flow);
                this.flow = flow;
            },
            is: function is(context, flow) {
                return this.isContext(context) && this.isFlow(flow);
            },
            isContext: function isContext(context) {
                return this.context === context;
            },
            isFlow: function isFlow(flow) {
                return this.flow === flow;
            },
            getConfig: function getConfig(key) {
                this.context = this.getContext();
                if (!this.config) {
                    return;
                }
                if (this.config.hasOwnProperty(this.context) && this.config[this.context].hasOwnProperty(this.flow) && this.config[this.context][this.flow].hasOwnProperty(key)) {
                    return this.config[this.context][this.flow][key];
                }
                if (this.config.hasOwnProperty(this.context) && this.config[this.context].hasOwnProperty(key)) {
                    return this.config[this.context][key];
                }
                if (this.config.hasOwnProperty($DEFAULT) && this.config[$DEFAULT].hasOwnProperty(this.flow) && this.config[$DEFAULT][this.flow].hasOwnProperty(key)) {
                    return this.config[$DEFAULT][this.flow][key];
                }
                if (this.config.hasOwnProperty($DEFAULT) && this.config[$DEFAULT].hasOwnProperty(key)) {
                    return this.config[$DEFAULT][key];
                }
            },
            error: function error(message) {
                return new Error("Integration error: " + this.context + " / " + this.flow + " :: " + message);
            }
        };
        angular.value("$integration", $integration);
        _logger.$logger;
    },
    "./components/squid/dist/core/class.js": function(module, exports) {
        exports.__esModule = true;
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
        } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        var EmptyConstructor = function EmptyConstructor() {};
        var create = Object.create || function create(obj) {
            EmptyConstructor.prototype = obj;
            var instance = new EmptyConstructor();
            EmptyConstructor.prototype = null;
            return instance;
        };
        function _extend(obj, source) {
            if (!source) {
                return obj;
            }
            for (var key in source) {
                if (source.hasOwnProperty(key)) {
                    obj[key] = source[key];
                }
            }
            return obj;
        }
        function isobject(obj) {
            return obj && (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" && obj instanceof Object;
        }
        function transpose(recipient, args) {
            for (var i = 0; i < args.length; i++) {
                var ob = args[i];
                if (!isobject(ob)) {
                    continue;
                }
                for (var key in ob) {
                    if (!ob.hasOwnProperty(key)) {
                        continue;
                    }
                    var item = ob[key];
                    if (item instanceof Function) {
                        item.__name__ = key;
                    }
                    recipient[key] = item;
                }
            }
        }
        function construct() {
            if (this.construct) {
                var ob = this.construct.apply(this, arguments);
                if (isobject(ob)) {
                    return ob;
                }
            }
            transpose(this, arguments);
            if (this.init) {
                this.init();
            }
        }
        function reopen() {
            transpose(this.prototype, arguments);
            return this;
        }
        function reopenClass() {
            transpose(this, arguments);
            transpose(this.__classmethods__, arguments);
            return this;
        }
        function isChild(Cls) {
            return Cls && Cls.prototype instanceof this;
        }
        var id = 0;
        function extend(name) {
            var Cls = void 0;
            var className = void 0;
            var args = void 0;
            var argsLength = void 0;
            var startIndex = void 0;
            if (typeof name === "string") {
                if (!name.match(/^[\w$][\w\d]*$/)) {
                    throw new Error("Class name can not include special characters: " + name);
                }
                className = name;
                argsLength = arguments.length && arguments.length - 1;
                startIndex = 1;
            } else {
                className = this.name || "Object";
                argsLength = arguments.length;
                startIndex = 0;
            }
            args = new Array(argsLength);
            for (var i = startIndex; i < arguments.length; i++) {
                args[i - startIndex] = arguments[i];
            }
            eval("Cls = function " + className + "() { return construct.apply(this, arguments) }");
            Cls.__name__ = className;
            Cls.__classmethods__ = {
                extend: extend,
                reopen: reopen,
                reopenClass: reopenClass,
                isChild: isChild
            };
            id += 1;
            Cls.id = id;
            if (this && this !== window) {
                Cls.prototype = create(this.prototype);
                Cls.prototype.constructor = Cls;
                Cls.prototype._super = this.prototype;
                _extend(Cls.__classmethods__, this.__classmethods__);
            }
            _extend(Cls, Cls.__classmethods__);
            transpose(Cls.prototype, args);
            if (className.indexOf("$") === 0) {
                window[className] = Cls;
            } else {
                window["$" + className] = Cls;
            }
            return Cls;
        }
        function _get(item, path, def) {
            if (!path) {
                return def;
            }
            path = path.split(".");
            for (var i = 0; i < path.length; i++) {
                if (isobject(item)) {
                    item = item[path[i]];
                } else {
                    return def;
                }
            }
            return item === undefined ? def : item;
        }
        function _set(item, path, value) {
            path = path.split(".");
            for (var i = 0; i < path.length - 1; i++) {
                item = item[path[i]];
                if (isobject(item)) {
                    continue;
                } else {
                    throw new Error(path[i - 1] + "." + path[i] + " is not an object");
                }
            }
            item[path[path.length - 1]] = value;
        }
        function each(ob, callback) {
            for (var key in ob) {
                if (ob.hasOwnProperty(key)) {
                    callback.call(ob, key, ob[key]);
                }
            }
        }
        function _keys(ob) {
            if (Object.keys) {
                return Object.keys(ob);
            }
            var result = [];
            for (var key in ob) {
                if (ob.hasOwnProperty(key)) {
                    result.push(key);
                }
            }
            return result;
        }
        var $Class = exports.$Class = extend("Class", {
            init: function init() {},
            get: function get(path, def) {
                return _get(this, path, def);
            },
            set: function set(path, value) {
                _set(this, path, value);
            },
            setProperties: function setProperties() {
                transpose(this, arguments);
            },
            forEach: function forEach(callback) {
                each(this, callback);
            },
            keys: function keys() {
                return _keys(this);
            }
        });
        $Class.get = _get;
        $Class.set = _set;
        $Class.keys = _keys;
        angular.value("$Class", $Class);
    },
    "./components/squid/dist/core/error.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$FallbackError = exports.$BatchShortCircuit = exports.$ApiError = exports.$Forbidden = exports.$Contingency = exports.$Error = undefined;
        var _event = __webpack_require__("./components/squid/dist/core/event.js");
        var _class = __webpack_require__("./components/squid/dist/core/class.js");
        var _util = __webpack_require__("./components/squid/dist/core/util.js");
        _util.$util.monkeyPatch(window, "onerror", function(_ref, original) {
            var message = _ref[0], file = _ref[1], line = _ref[2], col = _ref[3], err = _ref[4];
            original();
            _event.$event.emit("$windowError", {
                message: message && (message.stack || message).toString(),
                file: file && file.toString(),
                line: line && line.toString(),
                col: col && col.toString(),
                stack: err && (err.stack || err).toString()
            });
        });
        var $Error = exports.$Error = _class.$Class.extend.call(Error, "$Error", {
            construct: function construct(err, properties) {
                if (err instanceof Error) {
                    err = err.message;
                }
                if (properties) {
                    _util.$util.extend(this, properties);
                }
                this.payload = properties;
                this.message = err;
            }
        });
        var $Contingency = exports.$Contingency = $Error.extend("$Contingency", {
            handle: function handle(handlers) {
                var handler = handlers[this.message] || handlers["DEFAULT"];
                if (handler) {
                    var result = handler.call(this, this.message, this);
                    if (typeof result !== "undefined") {
                        return result;
                    }
                    return true;
                }
            }
        });
        var $Forbidden = exports.$Forbidden = $Error.extend("$Forbidden");
        var $ApiError = exports.$ApiError = $Error.extend("$ApiError");
        var $BatchShortCircuit = exports.$BatchShortCircuit = $Error.extend("$BatchShortCircuit");
        var $FallbackError = exports.$FallbackError = $Error.extend("$FallbackError", {
            init: function init() {
                this.reason = this.reason || "";
                this.product = this.product || "";
                this.entryPoint = this.entryPoint || "";
            }
        });
        angular.value("$Error", $Error);
        angular.value("$Contingency", $Contingency);
        angular.value("$Forbidden", $Forbidden);
        angular.value("$ApiError", $ApiError);
        angular.value("$BatchShortCircuit", $BatchShortCircuit);
        angular.value("$FallbackError", $FallbackError);
        _event.$event;
        _class.$Class;
        _util.$util;
    },
    "./components/squid/dist/core/loader.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$loader = undefined;
        var _event = __webpack_require__("./components/squid/dist/core/event.js");
        var _firstLoad = false;
        var loader = _event.$event.compose("loading", "loaded", "startLoad", "allLoaded", 100);
        var $loader = exports.$loader = {
            isLoading: function isLoading() {
                return Boolean(loader.getCount());
            },
            firstLoad: function firstLoad() {
                return _firstLoad;
            },
            reset: function reset() {
                loader.reset();
            }
        };
        _event.$event.on("allLoaded", function() {
            _firstLoad = true;
        });
        angular.value("$loader", $loader);
        _event.$event;
    },
    "./components/squid/dist/core/model.js": function(module, exports, __webpack_require__) {
        (function(console) {
            exports.__esModule = true;
            exports.$Model = undefined;
            var _class = __webpack_require__("./components/squid/dist/core/class.js");
            var _util = __webpack_require__("./components/squid/dist/core/util.js");
            var _promise = __webpack_require__("./components/squid/dist/core/promise.js");
            var $Model = exports.$Model = _class.$Class.extend("$Model", {
                init: function init() {
                    if (this.keys().length) {
                        this.onPopulate();
                    }
                    if (this.id) {
                        var _cache = this.constructor._modelCache = this.constructor._modelCache || {};
                        _cache[this.id] = this;
                    }
                    this.meta = {
                        populated: false
                    };
                },
                populate: function populate() {
                    this.meta.populated = true;
                    this.setProperties.apply(this, arguments);
                    delete this.meta.invalidated;
                    this.onPopulate();
                    return this;
                },
                fetchChildren: function fetchChildren() {
                    return _promise.$promise.resolve();
                },
                onPopulate: function onPopulate() {},
                fetchMock: function fetchMock() {},
                retrieve: function retrieve(options) {
                    var self = this;
                    options = options || {};
                    if (self.meta.populated) {
                        if (options.success) {
                            return _promise.$promise.resolve(options.success(self));
                        }
                        return _promise.$promise.resolve(this);
                    }
                    if (this.retriever) {
                        return this.retriever;
                    }
                    if (!this.api) {
                        throw new Error("Tried to populate a model with no api");
                    }
                    options.model = this;
                    this.retriever = this.api.retrieve(options).then(function(res) {
                        return self;
                    })["finally"](function() {
                        delete self.retriever;
                    });
                    return this.retriever;
                },
                save: function save(options) {
                    options = options || {};
                    options.model = this;
                    options.data = options.data || this.serialize();
                    return this.api.post(options);
                },
                action: function action(_action, options) {
                    options = options || {};
                    options.model = this;
                    return this.api.action(_action, options);
                },
                reload: function reload(options) {
                    this.meta.populated = false;
                    return this.retrieve(options);
                },
                stringify: function stringify() {
                    return JSON.stringify(this, 2);
                },
                log: function log() {
                    console.log(this.stringify());
                },
                serialize: function serialize() {},
                invalidate: function invalidate() {
                    this.meta.populated = false;
                    this.meta.invalidated = true;
                },
                child: function child(Cls, _child) {
                    if (!_child) {
                        return;
                    }
                    return Cls.create(_child.id || this.id, {
                        parent: this
                    }).populate(_child);
                },
                children: function children(Cls, _children) {
                    var self = this;
                    if (!_children) {
                        return _children;
                    }
                    return _util.$util.map(_children, function(child) {
                        return self.child(Cls, child);
                    });
                }
            });
            var cache = {};
            $Model.reopenClass({
                instance: function instance(id) {
                    var modelCache = cache[this.id] = cache[this.id] || {};
                    var instance = modelCache[id || 0] || this.create.apply(this, arguments);
                    return instance;
                },
                retrieveInstance: function retrieveInstance() {
                    return this.instance.apply(this, arguments).retrieve();
                },
                create: function create(id) {
                    var modelCache = cache[this.id] = cache[this.id] || {};
                    var instance = modelCache[id || 0] = new this({
                        id: id || 0
                    });
                    instance.setProperties.apply(instance, Array.prototype.slice.call(arguments, 1));
                    return instance;
                },
                fetch: function fetch() {
                    console.warn("Model.fetch is deprecated, please use Model.instance");
                    return this.instance.apply(this, arguments);
                },
                clearCache: function clearCache() {
                    cache = {};
                },
                bulkInvalidate: function bulkInvalidate(invalidationKey) {
                    if (!invalidationKey) {
                        return;
                    }
                    _util.$util.forEach(cache, function(modelCache, key) {
                        _util.$util.forEach(modelCache, function(modelInstance, instanceId) {
                            if (modelInstance[invalidationKey]) {
                                modelInstance.invalidate();
                            }
                        });
                    });
                }
            });
            angular.value("$Model", $Model);
            _class.$Class;
            _util.$util;
            _promise.$promise;
        }).call(exports, __webpack_require__("../node_modules/console-browserify/index.js"));
    },
    "./components/squid/dist/core/dom.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$dom = undefined;
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _promise = __webpack_require__("./components/squid/dist/core/promise.js");
        var _util = __webpack_require__("./components/squid/dist/core/util.js");
        var $dom = exports.$dom = {
            elementReady: function elementReady(id) {
                return _promise.$promise.resolver(function(resolve, reject) {
                    if (document.getElementById(id)) {
                        return resolve();
                    }
                    var interval = setInterval(function() {
                        if (document.getElementById(id)) {
                            clearInterval(interval);
                            return resolve();
                        }
                    }, 10);
                    setTimeout(6e4, reject);
                });
            },
            loadScript: function loadScript(name, src, timeout) {
                var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                return _promise.$promise.resolver(function(resolve, reject) {
                    var script = document.createElement("script");
                    var loadTimeout = void 0;
                    function clearScriptLoadTimeout() {
                        if (loadTimeout) {
                            clearTimeout(loadTimeout);
                            loadTimeout = undefined;
                        }
                    }
                    script.onload = function() {
                        clearScriptLoadTimeout();
                        setTimeout(resolve, 10);
                    };
                    script.onreadystatechange = function() {
                        if (this.readyState === "complete" || this.readyState === "loaded") {
                            clearScriptLoadTimeout();
                            setTimeout(resolve, 10);
                        }
                    };
                    script.onerror = function(event) {
                        _logger.$logger.info("script_error", {
                            script: src
                        });
                        return reject(new Error(name + "_loading_error"));
                    };
                    if (timeout) {
                        loadTimeout = setTimeout(function() {
                            _logger.$logger.info("script_load_timedout", {
                                script: src
                            });
                            return reject(new Error(name + "_loading_timed_out"));
                        }, timeout);
                    }
                    script.setAttribute("src", src);
                    for (var _iterator = Object.keys(attributes), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ;) {
                        var _ref;
                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }
                        var attribute = _ref;
                        script.setAttribute(attribute, attributes[attribute]);
                    }
                    document.body.appendChild(script);
                });
            },
            cssReady: function cssReady(id) {
                var el = document.getElementById(id);
                return _promise.$promise.resolver(function(resolve, reject) {
                    var timeout = void 0;
                    var interval = void 0;
                    function check() {
                        _util.$util.forEach(document.styleSheets, function(stylesheet) {
                            if (stylesheet.href === el.href) {
                                clearInterval(interval);
                                clearTimeout(timeout);
                                resolve();
                            }
                        });
                    }
                    timeout = setTimeout(function() {
                        clearInterval(interval);
                        reject();
                        throw new Error("css_loading_timed_out");
                    }, 3e4);
                    interval = setInterval(check, 20);
                    check();
                });
            }
        };
        angular.value("$dom", $dom);
        _logger.$logger;
        _promise.$promise;
        _util.$util;
    },
    "./components/squid/dist/ng/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$ComponentRoute = exports.$Route = undefined;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _core = __webpack_require__("./components/squid/dist/core/index.js");
        var _locale = __webpack_require__("./components/squid/dist/locale/index.js");
        var _component = __webpack_require__("./components/squid/dist/ng/component.js");
        var _ng = __webpack_require__("./components/squid/dist/ng/ng.js");
        var $Route = exports.$Route = _core.$Class.extend("$ComponentRoute", {
            childSpec: {},
            init: function init() {
                var _this = this;
                this.validate();
                this.url = "/" + (this.path || this.name);
                if (this.query) {
                    this.url += "?" + this.query.join("&");
                }
                this.hasResolver = Boolean(this.resolve);
                var controller = this.controller = function($scope) {
                    $scope.route = _this;
                    if ($scope.componentScope) {
                        delete $scope.componentScope.view;
                    }
                };
                if (this.get("resolve.action")) {
                    this.controller = function($scope, action) {
                        _angular.$injector.invoke(controller, this, {
                            $scope: $scope
                        });
                        if (action) {
                            if (!action.newState) {
                                _angular.$location.replace();
                            }
                            if (angular.isObject(action) && action.to) {
                                _uiRouter.$state.go(action.to, action.params);
                            } else {
                                _uiRouter.$state.go(action);
                            }
                        }
                    };
                }
            },
            validate: function validate() {
                if (_core.$config.deploy.isLive() && !_core.$config.deploy.isTest()) {
                    return;
                }
                var routeName = this.constructor.name;
                if (!this.name && !this.path) {
                    throw new Error(routeName + " :: expected property 'path'");
                }
                if (this.url) {
                    _logger.$logger.warn(routeName + " :: unexpected property 'url' :: " + this.url);
                }
                if (this.query && !(this.query instanceof Array)) {
                    throw new Error(routeName + " :: expected property 'query' to be array of query params");
                }
                if (this.controller) {}
                if (this.resolve) {
                    if (this.resolve.action && !(this.resolve.action instanceof Function)) {
                        throw new Error(routeName + " :: expected property 'resolve.action' to be a function");
                    }
                    Object.keys(this.resolve).forEach(function(name) {
                        if (name === "data") {
                            _logger.$logger.warn(routeName + " :: unexpected resolver :: " + name);
                        } else if (name !== "action") {
                            throw new Error(routeName + " :: unexpected resolver :: " + name);
                        }
                    });
                }
                if (this.template) {
                    throw new Error(routeName + " :: unexpected property 'template'");
                }
                if (!this.directive && !this.resolve && !this.resolve.action) {
                    throw new Error(routeName + " :: expected property 'directive'");
                }
                if (this.directive && angular.isString(this.directive) && !this.getDirective()) {
                    throw new Error(routeName + " :: unknown directive '" + this.directive + "'");
                }
                if (this.directive && !angular.isString(this.directive) && !_component.$Component.isChild(this.directive)) {
                    throw new Error(routeName + " :: expected directive to be subclass of $Component");
                }
                if (this.children) {
                    this.children.forEach(function(childSpec) {
                        if (!childSpec.route && !childSpec.name) {
                            throw new Error(routeName + " :: child expected property 'route'");
                        }
                        var ChildRoute = childSpec.route;
                        var childName = childSpec.name || ChildRoute.name;
                        if (!ChildRoute && childSpec.name) {
                            try {
                                ChildRoute = _angular.$injector.get(childSpec.name);
                            } catch (err) {
                                throw new Error(routeName + " :: could not find child route '" + childName + "'");
                            }
                        }
                        if (!$Route.isChild(ChildRoute)) {
                            throw new Error(routeName + " :: " + childName + " :: expected child to be instance of $Route");
                        }
                    });
                }
            },
            goto: function goto(route) {
                return _uiRouter.$state.go(route.replace("this.", this.absolutePath + "."));
            },
            getDirective: function getDirective() {
                return _angular.$injector.get(_core.$util.dasherizeToCamel(this.getDirectiveTag() + "Directive"))[0];
            },
            getDirectiveTag: function getDirectiveTag() {
                return angular.isString(this.directive) ? this.directive : this.directive.prototype.tag;
            },
            bootstrap: function bootstrap(defaultState, middleware) {
                var _this2 = this;
                return (0, _ng.$angularInvoke)(function() {
                    var element = angular.element(document.body);
                    if (!element.injector()) {
                        angular.bootstrap(element, [ "app" ]);
                    }
                    return _this2.load(defaultState, middleware);
                });
            },
            load: function load(defaultState, middleware) {
                defaultState = defaultState || this.defaultState;
                middleware = middleware || this.middleware;
                _logger.$logger.info("bootstrap_route", {
                    route: this.path || this.name
                });
                (0, _ng.$once)("$stateNotFound", function(event, unfoundState, fromState, fromParams) {
                    event.preventDefault();
                    _logger.$logger.error("state_not_found", {
                        name: unfoundState.to,
                        from: fromState.name,
                        fromParams: fromParams,
                        hash: window.location.hash
                    });
                    throw new Error("state_not_found: " + unfoundState.to);
                });
                this.register();
                _uiRouter.$urlRouterProvider.otherwise(function() {
                    return _logger.$logger.info("otherwise_after_bootstrap", {
                        hash: window.location.hash
                    });
                });
                this.runMiddleware(middleware).then(function() {
                    var targetState = void 0;
                    var targetParams = void 0;
                    if (window.location.hash && window.location.hash.indexOf("#/") === 0) {
                        targetState = window.location.hash.slice(2).split("?")[0].replace(/^\/+/, "").replace(/\/+$/, "").replace(/\//g, ".");
                        targetParams = _core.$util.params(window.location.hash.slice(2).split("?")[1] || "");
                    }
                    _logger.$logger.info("initializing_route", {
                        target: targetState,
                        defaultState: defaultState,
                        hash: window.location.hash
                    });
                    _angular.$location.replace();
                    if (targetState) {
                        if (_uiRouter.$state.get(targetState)) {
                            _logger.$logger.info("existing_state", {
                                stateName: targetState
                            });
                            return _uiRouter.$state.go(targetState, targetParams)["catch"](function(err) {
                                if (err.message === "transition prevented") {
                                    _logger.$logger.warn("transition_prevented", {
                                        targetState: targetState
                                    });
                                    return _core.$promise.resolve();
                                }
                                return _core.$promise.reject(err);
                            });
                        }
                        _logger.$logger.info("unknown_state", {
                            stateName: targetState
                        });
                    }
                    if (_uiRouter.$state.get(defaultState)) {
                        _logger.$logger.info("default_state", {
                            stateName: defaultState
                        });
                        return _uiRouter.$state.go(defaultState)["catch"](function(err) {
                            if (err.message === "transition prevented") {
                                _logger.$logger.warn("transition_prevented", {
                                    targetState: defaultState
                                });
                                return _core.$promise.resolve();
                            }
                            return _core.$promise.reject(err);
                        });
                    }
                    throw new Error("Default state not found: " + defaultState);
                })["catch"](function(err) {
                    return _angular.$injector.get("$exceptionHandler")(err);
                });
            },
            runMiddleware: function runMiddleware(middleware) {
                _logger.$logger.info("middleware", {
                    priority: _core.$util.map(middleware, function(method) {
                        return method.name;
                    }).join("|")
                });
                var promise = _core.$promise.resolve();
                angular.forEach(middleware, function(method) {
                    promise = promise.then(function() {
                        if (method.name) {
                            _logger.$logger.info("middleware_" + method.name);
                        }
                        return method();
                    });
                });
                return promise;
            },
            register: function register() {
                var _this3 = this;
                this.template = this.constructTemplate(this.childAttributes || {});
                this.absolutePath = this.path || this.name;
                if (this.parent) {
                    this.absolutePath = this.parent.absolutePath + "." + this.absolutePath;
                }
                if (!_uiRouter.$state.get(this.absolutePath)) {
                    _uiRouter.$stateProvider.state(this.absolutePath, this);
                }
                angular.forEach(this.children, function(childSpec) {
                    var ChildRoute = childSpec.route || _angular.$injector.get(childSpec.name);
                    var childRoute = new ChildRoute({
                        parent: _this3,
                        childSpec: childSpec,
                        childAttributes: childSpec.attributes
                    });
                    childRoute.register();
                });
            },
            constructTemplate: function constructTemplate(attributes) {
                var self = this;
                if (!self.directive) {
                    return;
                }
                attributes["component-route"] = "route";
                if (this.parent) {
                    attributes["export"] = "view";
                }
                var tag = this.getDirectiveTag();
                var paramString = "";
                angular.forEach(attributes, function(value, key) {
                    paramString += " " + key + '="' + value + '"';
                });
                return "<div " + tag + " " + paramString + "></div>";
            }
        });
        _uiRouter.$stateProvider.state("default", {
            auth: false
        });
        $Route.reopenClass({
            render: function render() {
                _core.$Model.clearCache();
                _core.$Api.clearCache();
                _core.$event.emit("$resetState");
                (0, _locale.$flushContent)();
                _core.$loader.reset();
                _uiRouter.$state.go("default");
                setTimeout.flush();
                var $scope = _angular.$rootScope.$new();
                var cleanRootScope = (0, _ng.$cleanRootScope)(_angular.$rootScope);
                var element = (0, _angular.$compile)("<div><ui-view></ui-view></div>")($scope);
                afterEach(_core.$util.once(function() {
                    $scope.$destroy();
                    cleanRootScope();
                    _core.$loader.reset();
                    _core.$Model.clearCache();
                    _core.$Api.clearCache();
                }));
                var route = new this();
                route.bootstrap();
                setTimeout.flush();
                element.isolateScope = function() {
                    throw new Error("Please test this element by interfacing with its public api: define mock endpoints, and interact with html links, buttons and form fields");
                };
                return element;
            },
            assertActive: function assertActive() {
                assert(_uiRouter.$state.current instanceof this, 'Current state should be "' + (this.prototype.path || this.prototype.name) + '", found "' + _uiRouter.$state.current.name + '"');
            }
        });
        function getPageTitle(stateName) {
            var state = _uiRouter.$state.get(stateName);
            if (!state) {
                return;
            }
            if (state.titleContent) {
                return _locale.$locale.content.get(state.titleContent);
            }
        }
        function changePageTitle() {
            document.documentElement.setAttribute("lang", _locale.$locale.lang);
            if (!_uiRouter.$state.current || !_uiRouter.$state.current.name) {
                return;
            }
            var fullStateTitle = [];
            _uiRouter.$state.current.name.split(".").reduce(function(a, b) {
                var stateName = [ a, b ].filter(Boolean).join(".");
                var stateTitle = getPageTitle(stateName);
                if (stateTitle) {
                    fullStateTitle.push(stateTitle);
                }
                return stateName;
            }, null);
            document.title = _core.$util.unique(fullStateTitle).join(" - ");
        }
        _core.$event.on("$stateChangeSuccess", changePageTitle);
        _core.$event.on("contentChange", changePageTitle);
        var $ComponentRoute = exports.$ComponentRoute = $Route;
        angular.value("$Route", $Route);
        angular.value("$ComponentRoute", $ComponentRoute);
        _angular.$rootScope;
        _angular.$location;
        _angular.$injector;
        _angular.$compile;
        _uiRouter.$state;
        _uiRouter.$stateProvider;
        _uiRouter.$urlRouterProvider;
        _logger.$logger;
        _core.$config;
        _core.$Class;
        _core.$Model;
        _core.$Api;
        _core.$util;
        _core.$promise;
        _core.$event;
        _core.$loader;
        _locale.$locale;
        _locale.$flushContent;
        _component.$Component;
        _ng.$cleanRootScope;
        _ng.$once;
        _ng.$angularInvoke;
    },
    "./components/squid/dist/locale/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _locale = __webpack_require__("./components/squid/dist/locale/locale.js");
        Object.keys(_locale).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _locale[key];
                }
            });
        });
        var _currency = __webpack_require__("./components/squid/dist/locale/currency.js");
        Object.keys(_currency).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _currency[key];
                }
            });
        });
        var _feature = __webpack_require__("./components/squid/dist/locale/feature.js");
        Object.keys(_feature).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _feature[key];
                }
            });
        });
        var _name = __webpack_require__("./components/squid/dist/locale/name.js");
        Object.keys(_name).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _name[key];
                }
            });
        });
        var _quantity = __webpack_require__("./components/squid/dist/locale/quantity.js");
        Object.keys(_quantity).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _quantity[key];
                }
            });
        });
    },
    "./components/squid/dist/locale/locale.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$localeHelper = exports.$locale = exports.$LocaleModel = exports.$MetadataModel = exports.$ContentModel = undefined;
        exports.sanitize = sanitize;
        exports.Content = Content;
        exports.$contentVersion = $contentVersion;
        exports.$renderContent = $renderContent;
        exports.$flushContent = $flushContent;
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _core = __webpack_require__("./components/squid/dist/core/index.js");
        function sanitize(html) {
            return html && html.toString().replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/\//g, "&#x2F;");
        }
        var JSONStringify = JSON.stringify;
        JSON.stringify = function(item) {
            if (item instanceof Content) {
                return item.toString();
            }
            return JSONStringify.apply(this, arguments);
        };
        function Content(key, props) {
            this.key = key;
            this.props = props;
        }
        Content.cache = {};
        Content.get = function(key, props) {
            if (!key) {
                return "";
            }
            props = props || {};
            var cacheKey = $locale.country + "_" + $locale.lang + "_" + key + "_" + JSONStringify.call(JSON, props);
            var cacheVal = Content.cache[cacheKey];
            if (cacheVal !== undefined) {
                return cacheVal;
            }
            cacheVal = Content.cache[cacheKey] = new Content(key, props);
            return cacheVal;
        };
        Content.prototype.toString = Content.prototype.valueOf = function() {
            if (this.string) {
                return this.string;
            }
            this.string = this.render(false);
            return this.string;
        };
        Content.prototype.toSafeString = function() {
            if (this.safeString) {
                return this.safeString;
            }
            this.safeString = this.render(true);
            return this.safeString;
        };
        Content.prototype.render = function(safe) {
            var _this = this;
            if (!this.key) {
                return "";
            }
            var value = contentCache[$locale.country] && contentCache[$locale.country][$locale.lang];
            var keys = this.key.split(".");
            for (var i = 0; i < keys.length; i++) {
                if (value) {
                    value = value[keys[i]];
                } else {
                    break;
                }
            }
            if (!value) {
                return "";
            }
            return value.replace(/\{\w+\}/g, function(prop) {
                prop = prop.slice(1, prop.length - 1);
                if (prop === "country") {
                    return $locale.country;
                }
                if (prop === "lang") {
                    return $locale.lang;
                }
                if (_this.props[prop] === undefined) {
                    if (!_core.$loader.isLoading()) {
                        _logger.$logger.warn("missing_content_prop", {
                            key: _this.key,
                            prop: prop
                        }, {
                            unique: true
                        });
                    }
                    return "";
                }
                var propStr = _this.props[prop].toString();
                if (safe) {
                    return sanitize(propStr);
                }
                return propStr;
            });
        };
        var contentCache = {};
        var currentVersion = void 0;
        window.addContent = function(country, lang, content, version) {
            var countryCache = contentCache[country] = contentCache[country] || {};
            countryCache[lang] = content;
            currentVersion = version;
        };
        var metadataCache = {};
        window.addMetadata = function(country, lang, metadata) {
            var countryCache = metadataCache[country] = metadataCache[country] || {};
            countryCache[lang] = metadata;
        };
        function $contentVersion() {
            return currentVersion || "";
        }
        var PP_SPECIAL_COUNTRIES_ISO_CODES = {
            C2: "CN"
        };
        var $ContentModel = exports.$ContentModel = _core.$Model.extend("$ContentModel", {
            api: new _core.$Api({
                baseURI: _core.$meta.staticUrl,
                uri: "/locales/:countryCode/:lang",
                ext: "js",
                retrieve: function retrieve(options) {
                    var self = this;
                    var model = options.model;
                    var uri = self.getURI(model);
                    return _core.$promise.resolve().then(function() {
                        if (contentCache[model.countryCode] && contentCache[model.countryCode][model.lang]) {
                            _logger.$logger.info("cached_content");
                            return contentCache[model.countryCode][model.lang];
                        }
                        _logger.$logger.info("retrieve_content", {
                            uri: uri
                        });
                        _core.$event.emit("loading");
                        return _core.$promise.attempt(3, function() {
                            return _core.$dom.loadScript("content", uri, 1e4).then(function() {
                                if (contentCache[model.countryCode] && contentCache[model.countryCode][model.lang]) {
                                    _logger.$logger.info("content_retrieved");
                                    return contentCache[model.countryCode][model.lang];
                                }
                                throw new Error("content_not_available");
                            });
                        })["catch"](function(err) {
                            throw err;
                        })["finally"](function() {
                            _core.$event.emit("loaded");
                        });
                    }).then(function(content) {
                        model.setProperties(content);
                        return content;
                    });
                }
            }),
            change: function change(country, lang) {
                if (country === this.countryCode && lang === this.lang) {
                    return _core.$promise.resolve(this);
                }
                this.countryCode = country;
                this.lang = lang;
                return this.reload().then(function() {
                    _core.$event.broadcast("contentChange");
                });
            }
        });
        var $MetadataModel = exports.$MetadataModel = _core.$Model.extend("$MetadataModel", {
            api: new _core.$Api({
                baseURI: _core.$meta.staticUrl,
                uri: "/metadata/:country/:lang/metadata",
                ext: "js",
                retrieve: function retrieve(options) {
                    var self = this;
                    var model = options.model;
                    var uri = self.getURI(model);
                    return _core.$promise.resolve().then(function() {
                        if (metadataCache[model.country] && metadataCache[model.country][model.lang]) {
                            _logger.$logger.info("cached_metadata");
                            return metadataCache[model.country][model.lang];
                        }
                        _logger.$logger.info("retrieve_metadata", {
                            uri: uri
                        });
                        _core.$event.emit("loading");
                        return _core.$promise.attempt(3, function() {
                            return _core.$dom.loadScript("metadata", uri, 1e4).then(function() {
                                if (metadataCache[model.country] && metadataCache[model.country][model.lang]) {
                                    _logger.$logger.info("metadata_retrieved", {
                                        uri: uri
                                    });
                                    return metadataCache[model.country][model.lang];
                                }
                                _logger.$logger.info("metadata_not_available", {
                                    uri: uri
                                });
                                return _core.$promise.reject(new Error("metadata_not_available"));
                            });
                        })["catch"](function(err) {
                            throw err;
                        })["finally"](function() {
                            _core.$event.emit("loaded");
                        });
                    }).then(function(metadata) {
                        model.setProperties(metadata);
                        return metadata;
                    });
                }
            }),
            change: function change(country, lang) {
                var _this2 = this;
                this.country = country;
                this.lang = lang;
                return this.reload().then(function() {
                    if (!_this2.noBroadcast) {
                        _core.$event.broadcast("metadataChange");
                    }
                });
            },
            choose: function choose(country, lang, override) {
                if (country && (!this.chosenCountry || override !== false)) {
                    this.chosenCountry = country;
                }
                if (lang && (!this.chosenLang || override !== false)) {
                    this.chosenLang = lang;
                }
                country = this.chosenCountry || this.country;
                lang = this.chosenLang;
                if (_core.$config.supportedCountries) {
                    if (!_core.$config.supportedCountries[country]) {
                        country = this.country;
                    }
                    if (_core.$config.supportedCountries[country].indexOf(lang) === -1) {
                        lang = _core.$config.supportedCountries[country][0];
                    }
                }
                if (!lang) {
                    lang = this.lang;
                }
                return this.change(country, lang);
            },
            normalizeAddressFields: function normalizeAddressFields(content) {
                var CONTENT_MAPPING = {
                    line1Label: "streetAddress",
                    line2Label: "streetAddress2",
                    cityLabel: "city",
                    stateLabel: "state",
                    postcodeLabel: "postalCode"
                };
                for (var prop in CONTENT_MAPPING) {
                    if (this.addressEntry && this.addressEntry.strings[prop]) {
                        this.addressEntry.strings[prop] = this.addressEntry.strings[prop] || content.get("common." + CONTENT_MAPPING[prop]);
                    }
                }
            }
        });
        function mapLanguage(lang) {
            var unselectableLanguages = _core.$config.unselectableLanguages || [];
            if (unselectableLanguages.indexOf(lang) !== -1) {
                if (!(_core.$meta.corp && _core.$config.betaLanguages && _core.$config.betaLanguages.indexOf(lang) !== -1)) {
                    return "en";
                }
            }
            var unsupportedLanguages = _core.$config.unsupportedLanguages || [];
            if (unsupportedLanguages.indexOf(lang) !== -1) {
                if (!(_core.$meta.corp && _core.$config.betaLanguages && _core.$config.betaLanguages.indexOf(lang) !== -1)) {
                    var s = lang + "_locale_not_supported";
                    throw new Error(s);
                }
            }
            return lang;
        }
        var $LocaleModel = exports.$LocaleModel = _core.$Model.extend("LocaleModel", {
            api: new _core.$Api({
                uri: "/api/locale"
            }),
            init: function init() {
                this._super.init.apply(this);
                this.content = $ContentModel.instance();
                this.metadata = $MetadataModel.instance();
            },
            retrieve: function retrieve() {
                var self = this;
                return this._super.retrieve.apply(this, arguments).then(function(result) {
                    self.lang = mapLanguage(self.lang);
                    return _core.$promise.all([ self.content.change(self.country, self.lang), self.metadata.change(self.country, self.lang) ]).then(function() {
                        self.metadata.normalizeAddressFields(self.content);
                        return result;
                    });
                });
            },
            change: function change(country, lang) {
                var self = this;
                lang = mapLanguage(lang);
                if (country === this.country && lang === this.lang) {
                    return _core.$promise.resolve(this);
                }
                _logger.$logger.info("locale_change", {
                    country: country,
                    lang: lang
                });
                this.country = country;
                this.lang = lang;
                return _core.$promise.all([ this.content.change(country, lang), this.metadata.change(country, lang) ]).then(function(loadedData) {
                    self.metadata.normalizeAddressFields(self.content);
                    _core.$event.broadcast("localeChange");
                    return loadedData;
                });
            },
            choose: function choose(country, lang, override) {
                if (country && (!this.chosenCountry || override !== false)) {
                    this.chosenCountry = country;
                }
                if (lang && (!this.chosenLang || override !== false)) {
                    this.chosenLang = lang;
                }
                country = this.chosenCountry || this.country;
                lang = this.chosenLang;
                if (!_core.$config.supportedCountries[country]) {
                    country = this.country;
                }
                if (_core.$config.supportedCountries[country].indexOf(lang) === -1) {
                    lang = _core.$config.supportedCountries[country][0];
                }
                if (!lang) {
                    lang = this.lang;
                }
                return this.change(country, lang);
            },
            chooseCountry: function chooseCountry(country) {
                return this.choose(country, null);
            },
            chooseLang: function chooseLang(lang) {
                return this.choose(null, lang);
            },
            getLocaleCode: function getLocaleCode() {
                return this.lang + "_" + this.country;
            },
            getCountryCodeISO: function getCountryCodeISO() {
                return PP_SPECIAL_COUNTRIES_ISO_CODES[this.country] || this.country;
            }
        });
        var $locale = exports.$locale = $LocaleModel.instance();
        function $renderContent(key, props) {
            return Content.get(key, props);
        }
        function $flushContent() {
            contentCache = {};
            Content.cache = {};
            $locale.content = $ContentModel.create();
            $locale.metadata = $MetadataModel.create();
            metadataCache = {};
        }
        var $localeHelper = exports.$localeHelper = {
            normalizeLocale: function normalizeLocale(locale) {
                if (!locale) {
                    return {};
                }
                locale = locale.replace("-", "_");
                var country = void 0;
                var language = void 0;
                if (locale.match(/^\w{2}_\w{2}$/)) {
                    locale = locale.split("_");
                    language = locale[0];
                    country = locale[1];
                } else {
                    language = locale;
                }
                return {
                    country: country,
                    language: language
                };
            }
        };
        angular.value("sanitize", sanitize);
        angular.value("Content", Content);
        angular.value("$contentVersion", $contentVersion);
        angular.value("$ContentModel", $ContentModel);
        angular.value("$MetadataModel", $MetadataModel);
        angular.value("$LocaleModel", $LocaleModel);
        angular.value("$locale", $locale);
        angular.value("$renderContent", $renderContent);
        angular.value("$flushContent", $flushContent);
        angular.value("$localeHelper", $localeHelper);
        _logger.$logger;
        _core.$event;
        _core.$Model;
        _core.$Api;
        _core.$meta;
        _core.$promise;
        _core.$config;
        _core.$loader;
        _core.$dom;
    },
    "./components/squid/dist/locale/currency.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.roundingAndSeparators = roundingAndSeparators;
        exports.formatCurrency = formatCurrency;
        var _locale = __webpack_require__("./components/squid/dist/locale/locale.js");
        var ALL_NON_BREAKING_SPACE = new RegExp(" +", "g");
        var CODE_IN_FRONT = new RegExp("^([^¤#]*)(C[\\s]*)(.*)$");
        var ENDS_IN_WHITESPACE = new RegExp("s$");
        var THOUSANDS_SPLITTER = /\B(?=(\d{3})+(?!\d))/g;
        var HUNDREDS_SPLITTER = /(\d)(?=(\d\d)+\d$)/g;
        var STYLE_EXCEPTION = {
            "tr TR TRY": "# ¤;-# ¤"
        };
        var HUNDREDS_SEPARATOR_EXCEPTION = [ "IN", "BT", "MV", "NP" ];
        function maybeIgnoreSymbol(style, symbol, code) {
            function fuzzyMatch(code, symbol) {
                if (code === symbol) {
                    return 100;
                } else {
                    var codeParts = code.split("");
                    var symbolParts = symbol.split("");
                    var equivalency = codeParts.reduce(function(equiv, codePart) {
                        var symbolPos = symbolParts.indexOf(codePart);
                        if (symbolPos !== -1) {
                            symbolParts.splice(symbolPos, 1);
                            return equiv + 1;
                        }
                        return equiv;
                    }, 0);
                    var weight = equivalency / codeParts.length;
                    return weight * 100;
                }
            }
            var ignoreSymbol = symbol.length > 1 && fuzzyMatch(code, symbol) >= 66;
            return ignoreSymbol ? style.replace(/¤\s*/g, "") : style;
        }
        function roundingAndSeparators(amountString, _ref, _ref2) {
            var lang = _ref.lang, country = _ref.country;
            var decimalPlaces = _ref2.decimalPlaces, dot = _ref2.dot, comma = _ref2.comma;
            var value = parseFloat(amountString);
            var truncate = decimalPlaces === 0;
            var amountParts = truncate && !isNaN(value) ? Math.round(value).toString().split(".") : amountString.split(".");
            var exception = HUNDREDS_SEPARATOR_EXCEPTION.indexOf(country) > -1;
            var wholeString = exception ? amountParts[0].replace(HUNDREDS_SPLITTER, "$1,") : amountParts[0].replace(THOUSANDS_SPLITTER, comma);
            var decimalString = amountParts[1] || "00";
            return truncate ? wholeString : "" + wholeString + dot + decimalString;
        }
        function forceCodeToRight(style) {
            var parts = CODE_IN_FRONT.exec(style) || [];
            var endsWithWhitespace = ENDS_IN_WHITESPACE.test(style);
            var newStyle = style;
            if (parts.length === 4) {
                newStyle = parts[1] + parts[3] + (endsWithWhitespace ? "C" : " C");
            }
            return newStyle;
        }
        function getFinalStyle() {
            var styleString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ";";
            var _ref3 = arguments[1];
            var lang = _ref3.lang, country = _ref3.country;
            var _ref4 = arguments[2];
            var value = _ref4.value, _ref4$symbol = _ref4.symbol, symbol = _ref4$symbol === undefined ? "" : _ref4$symbol, code = _ref4.code;
            var exception = STYLE_EXCEPTION[[ lang, country, code ].join(" ")];
            var currencyStyle = exception || styleString;
            var _currencyStyle$split = currencyStyle.split(";"), positiveStyle = _currencyStyle$split[0], negativeStyle = _currencyStyle$split[1];
            var baseStyle = value < 0 ? negativeStyle || "-¤# C" : positiveStyle || "¤# C";
            var griffinStyle = exception ? baseStyle : maybeIgnoreSymbol(baseStyle, symbol, code);
            return forceCodeToRight(griffinStyle);
        }
        function applyCurrencyStyle(finalStyle, amountFormatted, _ref5) {
            var symbol = _ref5.symbol, code = _ref5.code, _ref5$wrapCodeInSpan = _ref5.wrapCodeInSpan, wrapCodeInSpan = _ref5$wrapCodeInSpan === undefined ? false : _ref5$wrapCodeInSpan;
            var absoluteAmountFormatted = amountFormatted.replace("-", "");
            return finalStyle.split("").map(function(char) {
                switch (char) {
                  case "C":
                    return wrapCodeInSpan ? '<span class="currencyCode">' + code + "</span>" : code;

                  case "¤":
                    return symbol;

                  case "#":
                    return absoluteAmountFormatted;

                  default:
                    return char;
                }
            }).join("").replace(ALL_NON_BREAKING_SPACE, " ");
        }
        function formatCurrency(amount, code, wrapCodeInSpan) {
            var style = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "SymbolISOCurrency";
            var _ref6 = _locale.$locale.metadata || {}, _ref6$number = _ref6.number, numberConfig = _ref6$number === undefined ? {} : _ref6$number, _ref6$currency = _ref6.currency, currencyConfig = _ref6$currency === undefined ? {} : _ref6$currency;
            var _currencyConfig$digit = currencyConfig.digits, digits = _currencyConfig$digit === undefined ? {} : _currencyConfig$digit, _currencyConfig$style = currencyConfig.styles, styles = _currencyConfig$style === undefined ? {} : _currencyConfig$style, _currencyConfig$suppo = currencyConfig.supportedSymbols, currencySymbols = _currencyConfig$suppo === undefined ? {} : _currencyConfig$suppo;
            var value = parseFloat(amount);
            var dot = numberConfig.DECIMAL_SEP === undefined ? "." : numberConfig.DECIMAL_SEP;
            var comma = numberConfig.GROUP_SEP === undefined ? "," : numberConfig.GROUP_SEP;
            var amountFormatted = roundingAndSeparators(amount.toString(), _locale.$locale, {
                decimalPlaces: digits[code],
                dot: dot,
                comma: comma
            });
            if (code) {
                var symbol = currencySymbols[code];
                var finalStyle = getFinalStyle(styles[style], _locale.$locale, {
                    value: value,
                    symbol: symbol,
                    code: code
                });
                return applyCurrencyStyle(finalStyle, amountFormatted, {
                    symbol: symbol,
                    code: code,
                    wrapCodeInSpan: wrapCodeInSpan
                });
            }
            return amountFormatted;
        }
        _locale.$locale;
    },
    "./components/squid/dist/locale/feature.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$feature = $feature;
        exports.$featureCountries = $featureCountries;
        var _core = __webpack_require__("./components/squid/dist/core/index.js");
        var _locale = __webpack_require__("./components/squid/dist/locale/locale.js");
        function $feature(prop, def, country) {
            var features = _core.$config.features || {};
            country = country || _locale.$locale.country;
            var result = _core.$Class.get(features[country], prop);
            if (result !== undefined) {
                return result;
            }
            Object.keys(_core.$config.regions).some(function(region) {
                if (_core.$config.regions[region].indexOf(country) !== -1) {
                    result = _core.$Class.get(features[region], prop);
                    return result !== undefined;
                }
                return false;
            });
            if (result !== undefined) {
                return result;
            }
            result = _core.$Class.get(features.DEFAULT, prop);
            if (result !== undefined) {
                return result;
            }
            return def;
        }
        var allCountries = _core.$Class.keys(_core.$config.features || {}).filter(function(country) {
            return country !== "DEFAULT" && !(_core.$config.regions && _core.$config.regions.hasOwnProperty(country));
        });
        _core.$util.forEach(_core.$config.regions, function(countries, region) {
            _core.$util.forEach(countries, function(country) {
                if (allCountries.indexOf(country) === -1) {
                    allCountries.push(country);
                }
            });
        });
        function $featureCountries(prop) {
            return allCountries.filter(function(country) {
                return $feature(prop, false, country);
            });
        }
        angular.value("$feature", $feature);
        angular.value("$featureCountries", $featureCountries);
        _core.$config;
        _core.$Class;
        _core.$util;
        _locale.$locale;
    },
    "./components/squid/dist/locale/name.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.formatNameInformal = formatNameInformal;
        var _locale = __webpack_require__("./components/squid/dist/locale/locale.js");
        var SUBSTITUTED_FIELDS = {
            givenName: "first_name",
            surname: "last_name"
        };
        function isLatin(str) {
            if (!str) {
                return true;
            }
            for (var i = 0; i < str.length; i++) {
                if (str.charCodeAt(i) > 591) {
                    return false;
                }
            }
            return true;
        }
        function formatNameInformal(name) {
            var layoutMetadata = _locale.$locale.metadata.nameInformal;
            var layout = null;
            if (!layoutMetadata) {
                return name.first_name || null;
            }
            if (layoutMetadata["latinLayout"] && isLatin(name.first_name) && isLatin(name.last_name)) {
                layout = layoutMetadata["latinLayout"];
            } else {
                layout = layoutMetadata["layout"];
            }
            var formattedName = [];
            for (var i = 0; i < layout.length; i++) {
                var namePart = layout[i];
                if (name[SUBSTITUTED_FIELDS[namePart["$"]]]) {
                    formattedName.push(name[SUBSTITUTED_FIELDS[namePart["$"]]]);
                } else if (namePart["$"] === "separator") {
                    formattedName.push(namePart._);
                }
            }
            return formattedName.join("");
        }
        _locale.$locale;
    },
    "./components/squid/dist/locale/quantity.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.formatQuantity = formatQuantity;
        var _locale = __webpack_require__("./components/squid/dist/locale/locale.js");
        var _currency = __webpack_require__("./components/squid/dist/locale/currency.js");
        function formatQuantity(quantity) {
            var _ref = _locale.$locale.metadata || {}, _ref$number = _ref.number, numberConfig = _ref$number === undefined ? {} : _ref$number;
            var dot = "";
            var comma = numberConfig.GROUP_SEP === undefined ? "," : numberConfig.GROUP_SEP;
            return (0, _currency.roundingAndSeparators)(quantity.toString(), _locale.$locale, {
                decimalPlaces: 0,
                dot: dot,
                comma: comma
            });
        }
        _locale.$locale;
        _currency.roundingAndSeparators;
    },
    "./components/squid/dist/ng/component.js": function(module, exports, __webpack_require__) {
        (function(console) {
            exports.__esModule = true;
            exports.$Component = undefined;
            exports.$populate = $populate;
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _core = __webpack_require__("./components/squid/dist/core/index.js");
            var _ng = __webpack_require__("./components/squid/dist/ng/ng.js");
            var _directive = __webpack_require__("./components/squid/dist/ng/directive.js");
            (0, _directive.$registerDirective)("prevent-default", function() {
                return {
                    restrict: "A",
                    link: function link($scope, $element, $attrs) {
                        $element.on("click", function(event) {
                            event.preventDefault();
                        });
                    }
                };
            });
            (0, _directive.$registerDirective)("stop-propagation", function() {
                return {
                    restrict: "A",
                    link: function link($scope, $element, $attrs) {
                        $element.on("click keydown keypress keyup", function(event) {
                            event.stopPropagation();
                        });
                    }
                };
            });
            (0, _directive.$registerDirective)("validate-submit", function() {
                return {
                    link: function link($scope, $element, $attrs) {
                        var $form = $element.closest("form");
                        var form = $scope[$form.prop("name")];
                        $element.on("click", function(event) {
                            event.preventDefault();
                            $form.addClass("validated");
                            $scope.validated = true;
                            form.$setSubmitted();
                            if (form.$valid) {
                                try {
                                    $scope.$eval($attrs.validateSubmit);
                                } catch (err) {
                                    _angular.$injector.get("$exceptionHandler")(err);
                                }
                            } else {
                                $form.find(".ng-invalid:first").focus();
                            }
                        });
                    }
                };
            });
            function assertModelsRetrievedOrEmpty(items) {
                if (_core.$config.deploy.isLocal() || _core.$config.deploy.isStage()) {
                    angular.forEach(items, function(item, name) {
                        if (item instanceof _core.$Model) {
                            if (item.meta.populated) {
                                throw new Error(name + " is already populated. Please call .retrieve() to ensure your code is not relying on cache being present.");
                            }
                        }
                    });
                }
            }
            function setUpComponentRoute($scope, $Component, angular) {
                var componentRoute = $scope.componentRoute;
                componentRoute.scope = $scope;
                componentRoute.scope.goto = function(route) {
                    componentRoute.goto(route);
                };
                var parentRoute = componentRoute.parent;
                if (parentRoute) {
                    var parentScope = parentRoute.scope;
                    var parentDirective = parentRoute.getDirective();
                    var childSpec = componentRoute.childSpec;
                    if (childSpec.config) {
                        if (parentDirective instanceof $Component) {
                            parentScope.viewConfig = childSpec.config.call(parentScope);
                        } else {
                            throw new Error("In order to use config() for child routes,\n                    " + parentRoute.getDirectiveTag() + " must be instance of new\n                    style $Component");
                        }
                    }
                    if (childSpec.props) {
                        if (parentDirective instanceof $Component) {
                            angular.extend($scope, childSpec.props.call(parentScope));
                        } else {
                            throw new Error("In order to use props() for child routes,\n                    " + parentRoute.getDirectiveTag() + " must be instance of new\n                    style $Component");
                        }
                    }
                }
            }
            var $Component = exports.$Component = _core.$Class.extend("$Component", {
                onPopulate: angular.noop,
                init: function init() {
                    var _this = this, _arguments = arguments;
                    this.validate();
                    this.name = _core.$util.dasherizeToCamel(this.tag);
                    var wrapperType = this.wrapperType === "span" ? "span" : "div";
                    this.template = "<" + wrapperType + ' class="' + this.tag + '-wrapper" ng-if="populated && display">' + this.template + "</" + wrapperType + ">";
                    this.scope = this.scope || {};
                    this.resolve = this.resolve || {};
                    this.props = this.props || {};
                    this.rootEvents = this.rootEvents || {};
                    this.actions = this.actions || {};
                    this.lifecycle = this.lifecycle || {};
                    this.lifecycle.enter = this.lifecycle.enter || angular.noop;
                    this.lifecycle.reenter = this.lifecycle.reenter || angular.noop;
                    this.lifecycle.exit = this.lifecycle.exit || angular.noop;
                    this.lifecycle.populate = this.lifecycle.populate || angular.noop;
                    if (this.scope && Object.keys(this.scope).length) {
                        if (this.props && Object.keys(this.props).length) {
                            throw new Error("Can not defined scope and props on the same component");
                        }
                        this.scope.componentRoute = "=";
                        this.scope["export"] = "@";
                        this.props = _core.$util.map(this.scope, function(type, key) {
                            return {
                                type: {
                                    "=": "var",
                                    "@": "str"
                                }[type],
                                required: false
                            };
                        });
                    } else {
                        this.props.componentRoute = {
                            type: "var",
                            required: false
                        };
                        this.props["export"] = {
                            type: "str",
                            required: false
                        };
                        this.scope = _core.$util.map(this.props, function(spec, key) {
                            return {
                                var: "=",
                                str: "@"
                            }[spec.type || "var"];
                        });
                    }
                    var originalController = this.controller || angular.noop;
                    this.controller = function($scope, $element) {
                        $scope.$element = $element;
                        $scope.$on("$destroy", function() {
                            if ($scope.componentRoute && $scope.componentRoute.parent && $scope.componentRoute.parent.scope) {
                                delete $scope.componentRoute.parent.scope.viewConfig;
                            }
                            _this.lifecycle.exit.call($scope);
                        });
                        $scope.props = {};
                        if ($scope.componentRoute) {
                            setUpComponentRoute($scope, $Component, angular);
                        }
                        angular.forEach(_this.props, function(type, key) {
                            var prop = _this.props[key];
                            var required = prop.required !== false;
                            var def = void 0;
                            if (prop["default"] instanceof Function) {
                                def = _core.$util.memoize(prop["default"].bind($scope));
                            } else {
                                def = function def() {
                                    return prop["default"];
                                };
                            }
                            var UNDEFINED = {
                                var: undefined,
                                str: ""
                            }[prop.type];
                            Object.defineProperty($scope.props, key, {
                                get: function get() {
                                    var val = $scope[key];
                                    if (val === UNDEFINED) {
                                        if (required) {
                                            throw new Error("Prop required for component :: " + _this.tag + " :: " + key);
                                        }
                                        return def();
                                    }
                                    return val;
                                },
                                set: function set() {
                                    throw new Error("Prop is immutable :: " + _this.tag + " :: " + key);
                                }
                            });
                        });
                        $scope.fields = {};
                        $scope.actions = _core.$util.bindObject(_this.actions, $scope);
                        Object.keys(_this.rootEvents).forEach(function(eventName) {
                            var cancel = _core.$event.on(eventName, function(event) {
                                _this.rootEvents[eventName].apply($scope, _arguments);
                            });
                            $scope.$on("$destroy", cancel);
                        });
                        $scope.display = true;
                        $scope.reload = function() {
                            if (!$scope.populated) {
                                throw new Error("Can not reload unpopulated component");
                            }
                            $scope.display = false;
                            setTimeout(function() {
                                $scope.display = true;
                            });
                        };
                        $scope.componentScope = $scope;
                        if ($scope.props["export"] && $scope.$parent.componentScope) {
                            $scope.exports = angular.extend({}, _this.exports || {}, {
                                reload: $scope.reload
                            });
                            Object.defineProperty($scope.$parent.componentScope, $scope.props["export"], {
                                get: function get() {
                                    return $scope.exports;
                                },
                                configurable: true
                            });
                        }
                        $scope._enablePopulateEvents = true;
                        _angular.$injector.invoke(originalController, _this, {
                            $scope: $scope,
                            $element: $element
                        });
                        _this.lifecycle.enter.call($scope);
                        $scope._enablePopulateEvents = false;
                        var cancelReEnterEvent = _core.$event.on("$stateChangeSuccess", function(event, toState) {
                            if (toState === $scope.props.componentRoute) {
                                _this.lifecycle.reenter.call($scope);
                            }
                        });
                        $scope.$on("$destroy", cancelReEnterEvent);
                        return _core.$promise.sequential([ function() {
                            $scope.$emit("_populating");
                        }, function() {
                            return _core.$promise.map(_this.resolve, function(resolver, name, resolverPromises) {
                                if (angular.isObject(resolver)) {
                                    $scope[name] = resolver;
                                    return resolver;
                                }
                                return _core.$promise.resolve(resolver.call($scope, resolverPromises)).then(function(data) {
                                    assertModelsRetrievedOrEmpty(data);
                                    return _core.$promise.hash(data).then(function(resolvedData) {
                                        $scope[name] = resolvedData;
                                        return resolvedData;
                                    });
                                });
                            });
                        }, function() {
                            $scope.populated = true;
                            $scope.$emit("_populated");
                            _core.$event.refCount($scope, "_populating", "_populated").then(function() {
                                $scope.$on("populated", function(populatedEvent) {
                                    populatedEvent.stopPropagation();
                                });
                                $scope.$emit("populated");
                                _this.onPopulate.call($scope);
                                _this.lifecycle.populate.call($scope);
                            });
                        } ]);
                    };
                },
                validate: function validate() {
                    if (_core.$config.deploy.isLive() && !_core.$config.deploy.isTest()) {
                        return;
                    }
                    var componentName = this.constructor.name;
                    if (!this.tag) {
                        throw new Error(componentName + " :: expected property 'tag'");
                    }
                    if (!this.tag.match(/^[a-z0-9-]+$/)) {
                        throw new Error(componentName + " :: tag should contain only lowercase alphanumeric characters and dashes");
                    }
                    if (!this.template) {
                        throw new Error(componentName + " :: expected property 'template'");
                    }
                    if (this.resolve) {
                        angular.forEach(this.resolve, function(resolver, name) {
                            if (!(resolver instanceof Function)) {
                                throw new Error(componentName + " :: expected 'resolve." + name + "' to be a function");
                            }
                        });
                    }
                    if (this.props) {
                        angular.forEach(this.props, function(prop, name) {
                            if (!(prop instanceof Object)) {
                                throw new Error(componentName + " :: expected 'props." + name + "' to be a function");
                            }
                            if (prop.type && [ "var", "str" ].indexOf(prop.type) === -1) {
                                throw new Error(componentName + " :: expected 'props." + name + ".type' to be one of var, str");
                            }
                            if (prop["default"] && prop.required) {
                                throw new Error(componentName + " :: unnecessary 'props." + name + ".default', since prop is required");
                            }
                            if (prop["default"] && prop["default"] instanceof Object && !(prop["default"] instanceof Function)) {
                                throw new Error(componentName + " :: expected 'props." + name + ".default' to be a primitive or a function - please do not pass mutable objects");
                            }
                        });
                    }
                    if (this.actions) {
                        angular.forEach(this.actions, function(action, name) {
                            if (!(action instanceof Function)) {
                                throw new Error(componentName + " :: expected 'actions." + name + "' to be a function");
                            }
                        });
                    }
                    if (this.lifecycle) {
                        Object.keys(this.lifecycle).forEach(function(name) {
                            if ([ "enter", "populate", "exit", "reenter" ].indexOf(name) === -1) {
                                throw new Error(componentName + " :: unexpected 'lifecycle." + name + "'");
                            }
                        });
                    }
                }
            });
            $Component.reopenClass({
                extend: function extend() {
                    var SubClass = _core.$Class.extend.apply(this, arguments);
                    var spec = new SubClass();
                    angular.module().directive(spec.name, function() {
                        return spec;
                    });
                    return SubClass;
                },
                render: function render(scope) {
                    _core.$event.emit("$resetState");
                    var $scope = _angular.$rootScope.$new();
                    angular.extend($scope, scope);
                    var attrs = Object.keys(scope).map(function(key) {
                        return _core.$util.camelToDasherize(key) + '="' + (this.prototype.props[key].type === "var" ? key : scope[key]) + '"';
                    }.bind(this)).join(" ");
                    var cleanRootScope = (0, _ng.$cleanRootScope)(_angular.$rootScope);
                    var html = "<" + this.prototype.tag + " " + attrs + "></" + this.prototype.tag + ">";
                    console.log("RENDER", html, scope);
                    var element = (0, _angular.$compile)(html)($scope);
                    afterEach(_core.$util.once(function() {
                        $scope.$destroy();
                        cleanRootScope();
                    }));
                    setTimeout.flush();
                    element.isolateScope = function() {
                        throw new Error("Please test this element by interfacing with its public api: define mock endpoints, and interact with html links, buttons and form fields");
                    };
                    return element;
                }
            });
            function autoConvertDirectiveToComponent(_ref, original) {
                var name = _ref[0], factory = _ref[1];
                if (!angular.isFunction(factory)) {
                    return original();
                }
                var tag = _core.$util.camelToDasherize(name);
                var spec = _angular.$injector.invoke(factory);
                if (spec.controller) {
                    var originalController = spec.controller;
                    spec.controller = function($scope, $element) {
                        $scope._enablePopulateEvents = true;
                        var result = _angular.$injector.invoke(originalController, this, {
                            $scope: $scope,
                            $element: $element
                        });
                        $scope._enablePopulateEvents = false;
                        return result;
                    };
                }
                if (spec instanceof $Component || !spec.template || !spec.controller || name.indexOf("xo") !== 0 || spec.transclude) {
                    return original(this, [ name, function() {
                        return spec;
                    } ]);
                }
                if (spec.componentize) {
                    $Component.extend("$" + name + "Component", spec, {
                        tag: tag
                    });
                    return this;
                }
                return original(this, [ name, function() {
                    return spec;
                } ]);
            }
            _core.$util.monkeyPatch(_angular.$compileProvider, "directive", autoConvertDirectiveToComponent);
            _core.$util.monkeyPatch(angular.module(), "directive", autoConvertDirectiveToComponent);
            function $populate($scope, instances) {
                $scope.$on = $scope.$on || angular.noop;
                $scope.$emit = $scope.$emit || angular.noop;
                var _enablePopulateEvents = $scope._enablePopulateEvents;
                if (_enablePopulateEvents) {
                    _core.$event.refCount($scope, "_populating", "_populated").then(function() {
                        $scope.$emit("populated");
                    });
                }
                $scope.$on("populated", function(populatedEvent) {
                    populatedEvent.stopPropagation();
                });
                if (_enablePopulateEvents) {
                    $scope.$emit("_populating");
                }
                return _core.$promise.all(_core.$util.map(instances, function(instance, name) {
                    var promise = void 0;
                    if (instance.then) {
                        promise = instance;
                    } else {
                        promise = instance.retrieve();
                        $scope[name] = instance;
                    }
                    return promise.then(function(result) {
                        $scope[name] = result;
                        return result;
                    });
                })).then(function(result) {
                    if (_enablePopulateEvents) {
                        $scope.$emit("_populated");
                    }
                    return result;
                });
            }
            angular.value("$Component", $Component);
            angular.value("$populate", $populate);
            _angular.$rootScope;
            _angular.$compile;
            _angular.$injector;
            _angular.$compileProvider;
            _core.$Class;
            _core.$Model;
            _core.$util;
            _core.$promise;
            _core.$config;
            _core.$event;
            _ng.$cleanRootScope;
            _directive.$registerDirective;
        }).call(exports, __webpack_require__("../node_modules/console-browserify/index.js"));
    },
    "./components/squid/dist/ng/ng.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$angularInvoke = $angularInvoke;
        exports.$once = $once;
        exports.$cleanRootScope = $cleanRootScope;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _core = __webpack_require__("./components/squid/dist/core/index.js");
        function $angularInvoke(method) {
            try {
                return method();
            } catch (err) {
                _angular.$injector.get("$exceptionHandler")(err);
            }
        }
        function $once(name, handler) {
            var cancel = _core.$event.on(name, function() {
                cancel();
                handler.apply(this, arguments);
            }, true);
        }
        function $cleanRootScope(rootScope) {
            var keys = Object.keys(rootScope);
            var autoCleanupEventHandlers = [];
            var eventHandlers = [];
            var eventCancelers = [];
            _core.$util.monkeyPatch(rootScope, "$on", function(_ref, original) {
                var name = _ref[0], handler = _ref[1], once = _ref[2];
                var cancel = original();
                var $state = void 0;
                try {
                    $state = _angular.$injector.get("$state");
                } catch (err) {}
                if (name === "$destroy" || !$state || !$state.current || !$state.current.name || $state.current.name === "default") {
                    autoCleanupEventHandlers.push(cancel);
                    return function autoCleanedUpCancel() {};
                }
                if (once) {
                    eventCancelers.push(cancel);
                    return cancel;
                }
                if (handler.toString().indexOf("updateView") !== -1) {
                    return cancel;
                }
                var stack = void 0;
                try {
                    throw new Error("$rootScope.$on");
                } catch (err) {
                    stack = err.stack;
                }
                var reference = {
                    name: name,
                    handler: handler.toString(),
                    stack: stack
                };
                eventHandlers.push(reference);
                return function() {
                    cancel();
                    eventHandlers.splice(eventHandlers.indexOf(reference), 1);
                };
            });
            return function() {
                _core.$event.emit("$destroy");
                autoCleanupEventHandlers.forEach(function(canceler) {
                    return canceler();
                });
                autoCleanupEventHandlers = [];
                Object.keys(rootScope).forEach(function(key) {
                    if (keys.indexOf(key) === -1) {
                        delete rootScope[key];
                    }
                });
                if (eventHandlers.length) {
                    throw new Error("$rootScope event handlers not cleaned up:\n\n" + eventHandlers.map(function(eventHandler) {
                        return eventHandler.name + "\n\n" + eventHandler.handler + "\n\n" + eventHandler.stack;
                    }).join("\n\n"));
                }
                eventCancelers.forEach(function(cancel) {
                    return cancel();
                });
            };
        }
        angular.value("$angularInvoke", $angularInvoke);
        angular.value("$once", $once);
        angular.value("$cleanRootScope", $cleanRootScope);
        _angular.$injector;
        _core.$util;
        _core.$event;
    },
    "./components/squid/dist/ng/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$registerDirective = $registerDirective;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _angular2 = _interopRequireDefault(_angular);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function $registerDirective(tag, definition) {
            var directiveName = tag.replace(/-([a-z])/g, function(g) {
                return g[1].toUpperCase();
            });
            return _angular2["default"].module().directive(directiveName, definition);
        }
        _angular2["default"].value("$registerDirective", $registerDirective);
    },
    "./components/squid/dist/ng/feature.js": function(module, exports, __webpack_require__) {
        var _directive = __webpack_require__("./components/squid/dist/ng/directive.js");
        var _locale = __webpack_require__("./components/squid/dist/locale/index.js");
        var _core = __webpack_require__("./components/squid/dist/core/index.js");
        (0, _directive.$registerDirective)("feature", function() {
            return {
                restrict: "A",
                transclude: true,
                scope: {},
                template: '<span ng-if="enabled()" ng-transclude></span>',
                link: function link($scope, element, attr) {
                    $scope.enabled = function() {
                        return (0, _locale.$feature)(attr.feature) || _core.$integration.getConfig(attr.feature);
                    };
                }
            };
        });
        (0, _directive.$registerDirective)("unless-feature", function() {
            return {
                restrict: "A",
                transclude: true,
                scope: {},
                template: '<span ng-if="!enabled()" ng-transclude></span>',
                link: function link($scope, element, attr) {
                    $scope.enabled = function() {
                        return (0, _locale.$feature)(attr.unlessFeature) || _core.$integration.getConfig(attr.unlessFeature);
                    };
                }
            };
        });
        _directive.$registerDirective;
        _locale.$feature;
        _core.$integration;
    },
    "./components/squid/dist/ng/locale.js": function(module, exports, __webpack_require__) {
        (function(module, __dirname, __filename) {
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _core = __webpack_require__("./components/squid/dist/core/index.js");
            var _locale = __webpack_require__("./components/squid/dist/locale/index.js");
            (0, _angular.$registerDirective)("content", function() {
                return {
                    restrict: "A",
                    link: function link($scope, element, attributes) {
                        $scope.content = $scope.htmlContent = function(key, props) {
                            if (attributes.content) {
                                key = attributes.content + "." + key;
                            }
                            var content = _locale.Content.get(key, props);
                            if (content.toString()) {
                                return content;
                            } else {
                                return;
                            }
                        };
                    }
                };
            });
            (0, _angular.$registerDirective)("bind-html-compile", function() {
                return {
                    restrict: "A",
                    link: function link($scope, $element, $attrs) {
                        $scope.$watch(function() {
                            return $scope.$eval($attrs.bindHtmlCompile);
                        }, function(value) {
                            $element.html(value && value.toString());
                            (0, _angular.$compile)($element.contents())($scope);
                        });
                    }
                };
            });
            (0, _angular.$registerDirective)("format-currency", function() {
                return {
                    restrict: "E",
                    template: '<span ng-bind-html="amount_formatted" class="ltrOverride"></span>',
                    scope: {
                        amount: "=",
                        symbol: "=",
                        code: "=",
                        currencyStyle: "@"
                    },
                    controller: function controller($scope) {
                        function format() {
                            $scope.amount_formatted = _angular.$sce.trustAsHtml((0, _locale.formatCurrency)($scope.amount, $scope.code, true, $scope.currencyStyle));
                        }
                        $scope.$on("$destroy", _core.$event.on("localeChange", format));
                        $scope.$watch("amount", function(newValue, oldValue) {
                            if (newValue !== oldValue && _locale.$locale.country) {
                                format();
                            }
                        });
                        if (_locale.$locale.country) {
                            format();
                        }
                    }
                };
            });
            (function exportProviders(angular) {
                angular && angular.exportProviders(module, exports, __dirname, __filename);
            })(window.angular);
            angular.module().value("$sanitize", function(val) {
                if (val instanceof _locale.Content) {
                    return val.toSafeString();
                }
                return (0, _locale.sanitize)(val);
            });
            _angular.$sce;
            _angular.$registerDirective;
            _angular.$compile;
            _core.$event;
            _locale.formatCurrency;
            _locale.sanitize;
            _locale.Content;
            _locale.$locale;
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/squid/dist/ng", "components/squid/dist/ng/locale.js");
    },
    "./components/squid/dist/ng/module.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.module = undefined;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _angular2 = _interopRequireDefault(_angular);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _module = _angular2["default"].module;
        exports.module = _module;
    },
    "./components/squid/dist/ng/events.js": function(module, exports, __webpack_require__) {
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _core = __webpack_require__("./components/squid/dist/core/index.js");
        angular.module().run(function() {
            _core.$event.on("$stateChangeStart", function(event) {
                _core.$event.emit("loading");
                _core.$event.emit("loaded");
            });
            var startLoadTime = 0;
            var currentState = "checkout_init";
            function currentStateName() {
                return _uiRouter.$state.current.name && _uiRouter.$state.current.name.replace(/\./g, "_");
            }
            _core.$event.on("startLoad", function() {
                if (startLoadTime) {
                    startLoadTime = _core.$util.now();
                } else if (window.enablePerformance && window.performance.timing.connectEnd && window.performance.timing.navigationStart) {
                    var performance = window.performance;
                    var timing = window.performance.timing || {};
                    var now = performance.now();
                    startLoadTime = parseInt(now - (timing.connectEnd - timing.navigationStart), 10);
                }
            });
            _core.$event.on("allLoaded", function() {
                var newState = currentStateName();
                if (!newState) {
                    return;
                }
                if (currentState === newState) {
                    _core.$event.emit("page_reloaded", currentState);
                } else {
                    var duration = void 0;
                    if (startLoadTime) {
                        duration = _core.$util.now() - startLoadTime;
                    }
                    var payload = {
                        start: currentState,
                        end: newState,
                        time: duration,
                        duration: duration
                    };
                    _core.$event.emit("$transition", {
                        from: currentState,
                        toState: _uiRouter.$state.current,
                        duration: duration
                    });
                    _logger.$logger.info("transition", payload);
                    _logger.$logger.info("transition_" + currentState + "_to_" + newState, payload);
                    _core.$event.emit("page_loaded", currentState, newState);
                    _logger.$logger.flush();
                    currentState = newState;
                }
            });
            _core.$event.emit("loading");
            var cancel = _core.$event.on("$stateChangeSuccess", function() {
                if (_uiRouter.$state.current.template) {
                    cancel();
                    setTimeout(function() {
                        _core.$event.emit("loaded");
                    }, 50);
                }
            });
        });
        _uiRouter.$state;
        _logger.$logger;
        _core.$event;
        _core.$util;
    },
    "./components/squid/dist/ng/pxp.js": function(module, exports, __webpack_require__) {
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _core = __webpack_require__("./components/squid/dist/core/index.js");
        _core.$event.on("pxp_res", function(event, pxpRes) {
            _uiRouter.$state.current.trackingData = _uiRouter.$state.current.trackingData || {};
            _uiRouter.$state.current.trackingData.pxpData = _uiRouter.$state.current.trackingData.pxpData || [];
            _uiRouter.$state.current.trackingData.pxpData.push(pxpRes);
        });
        _uiRouter.$state;
        _core.$event;
    },
    "./components/squid/dist/paypal/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _env = __webpack_require__("./components/squid/dist/paypal/env.js");
        Object.keys(_env).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _env[key];
                }
            });
        });
        var _config = __webpack_require__("./components/squid/dist/paypal/config.js");
        Object.keys(_config).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _config[key];
                }
            });
        });
        var _pxp = __webpack_require__("./components/squid/dist/paypal/pxp.js");
        Object.keys(_pxp).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _pxp[key];
                }
            });
        });
    },
    "./components/squid/dist/paypal/env.js": function(module, exports) {
        exports.__esModule = true;
        var $env = exports.$env = {
            isLocal: function isLocal() {
                return window.location.hostname === "localhost" || window.location.hostname === "localhost.paypal.com";
            },
            isStage: function isStage() {
                return Boolean(window.location.hostname.match(/^.*\.qa\.paypal\.com$/));
            },
            isSandbox: function isSandbox() {
                return Boolean(window.location.hostname.match(/^.*\.sandbox\.paypal\.com$/));
            },
            isLive: function isLive() {
                return window.location.hostname === "www.paypal.com";
            },
            isTest: function isTest() {
                return false;
            }
        };
        angular.value("$env", $env);
    },
    "./components/squid/dist/paypal/config.js": function(module, exports, __webpack_require__) {
        var _core = __webpack_require__("./components/squid/dist/core/index.js");
        var _env = __webpack_require__("./components/squid/dist/paypal/env.js");
        _core.$config.deploy = _core.$config.deploy || _env.$env;
        _core.$config;
        _env.$env;
    },
    "./components/squid/dist/paypal/pxp.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$PXPModel = undefined;
        exports.$getPxpTreatments = $getPxpTreatments;
        exports.$pxp = $pxp;
        exports.$pxpMatch = $pxpMatch;
        exports.$pxpFactors = $pxpFactors;
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _core = __webpack_require__("./components/squid/dist/core/index.js");
        var _locale = __webpack_require__("./components/squid/dist/locale/index.js");
        var $PXPModel = exports.$PXPModel = _core.$Model.extend({
            api: new _core.$Api({
                uri: "/api/pxp/:pagename"
            })
        });
        function logPxp(pxpRes, params, logPayload) {
            var exp_name = [];
            var xe = [];
            var xt = [];
            angular.forEach(pxpRes.treatments, function(treatment) {
                _logger.$logger.info("treatment_" + treatment.treatment_name, angular.extend({
                    experiment: pxpRes.pagename,
                    treatment: treatment.treatment_name,
                    experiment_id: treatment.experiment_id,
                    treatment_id: treatment.treatment_id,
                    loc_country: _locale.$locale.country,
                    loc_lang: _locale.$locale.lang
                }, params, logPayload));
                exp_name.push(treatment.treatment_name);
                xe.push(treatment.experiment_id);
                xt.push(treatment.treatment_id);
            });
            _logger.$logger.info("pxp_" + pxpRes.pagename, angular.extend({
                pxp_exp_id: xe.join("|"),
                pxp_trtmnt_id: xt.join("|"),
                treatments: exp_name.join("|"),
                loc_country: _locale.$locale.country,
                loc_lang: _locale.$locale.lang
            }, params, logPayload));
            _logger.$logger.info("fpti_pxp_check", {
                from: "PXP_CHECK",
                to: "process_pxp_check",
                pxp_exp_id: xe.join(","),
                pxp_trtmnt_id: xt.join(",")
            });
            _core.$event.emit("pxp_res", pxpRes);
        }
        function $getPxpTreatments(id, params, logPayload) {
            var forceApiCall = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            var silent = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            return _core.$promise.run(function() {
                var pxp = $PXPModel.instance(_core.$util.buildURL(id, params), {
                    pagename: id
                });
                var forceTreatments = _core.$util.param("pxp_" + id);
                if (forceTreatments) {
                    var treatments = forceTreatments.split(",").filter(Boolean);
                    pxp.treatments = treatments.map(function(treatment_name) {
                        return {
                            treatment_name: treatment_name
                        };
                    });
                    return pxp;
                }
                if (forceApiCall) {
                    pxp.cached = false;
                    return pxp.reload({
                        params: params,
                        silent: silent
                    });
                }
                return pxp.retrieve({
                    params: params,
                    silent: silent
                });
            }).then(function(pxp) {
                if (!pxp.cached) {
                    logPxp(pxp, params, logPayload);
                }
                pxp.cached = true;
                return pxp;
            });
        }
        function $pxp(id, params, pattern) {
            var forceApiCall = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            var silent = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            if (!pattern) {
                pattern = params;
                params = {};
            }
            pattern = new RegExp("^" + pattern + "$");
            return exports.$getPxpTreatments(id, params, null, forceApiCall, silent).then(function(pxpResponse) {
                var result = void 0;
                (pxpResponse.treatments || []).some(function(treatment) {
                    if (!pattern.test(treatment.treatment_name)) {
                        return false;
                    }
                    result = {
                        treatment_name: treatment.treatment_name,
                        factors: treatment.factors
                    };
                    return true;
                });
                return result;
            });
        }
        function $pxpMatch(id, params, patterns, logPayload) {
            if (!patterns) {
                patterns = params;
                params = {};
            }
            return exports.$getPxpTreatments(id, params, logPayload).then(function(pxpResponse) {
                var result = {};
                angular.forEach(patterns, function(pattern, name) {
                    pattern = new RegExp("^" + pattern + "$");
                    result[name] = false;
                    (pxpResponse.treatments || []).some(function(treatment) {
                        if (!pattern.test(treatment.treatment_name)) {
                            return false;
                        }
                        result[name] = true;
                        return true;
                    });
                });
                return result;
            });
        }
        function $pxpFactors(id, params, pattern) {
            params.factors = "true";
            return $pxp(id, params, pattern).then(function(pxpResponse) {
                var result = void 0;
                if (pxpResponse && pxpResponse.factors) {
                    result = {
                        treatment_name: pxpResponse.treatment_name
                    };
                    var pxpFactors = pxpResponse.factors;
                    var length = pxpFactors.length;
                    for (var i = 0; i < length; i++) {
                        result[pxpFactors[i].name] = pxpFactors[i].value;
                    }
                }
                return result;
            });
        }
        window.$pxp = $pxp;
        angular.value("$getPxpTreatments", $getPxpTreatments);
        angular.value("$pxp", $pxp);
        angular.value("$pxpMatch", $pxpMatch);
        angular.value("$pxpFactors", $pxpFactors);
        _logger.$logger;
        _core.$Model;
        _core.$Api;
        _core.$util;
        _core.$promise;
        _core.$event;
        _locale.$locale;
    },
    "./components/xo-models/src/auth/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$ULoginModel = exports.$AuthModel = exports.$AuthApi = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $AuthApi = exports.$AuthApi = _squid.$Model.extend("$AuthApi", {
            api: new _squid.$Api({
                uri: "/api/auth",
                postAttempts: 3
            })
        });
        var $AuthModel = exports.$AuthModel = _squid.$Model.extend("$AuthModel", {
            api: new _squid.$Api({
                uri: "/api/auth",
                postAttempts: 3
            }),
            invalidateOnLogout: true,
            loggedIn: function loggedIn() {
                return this.logged_in;
            },
            visitorId: function visitorId() {
                return this.visitor_id;
            },
            accessToken: function accessToken() {
                return this.access_token;
            },
            accessTokenPresent: function accessTokenPresent() {
                return this.access_token_present;
            },
            refreshToken: function refreshToken() {
                return this.refresh_token;
            },
            rememberedOT: function rememberedOT() {
                return this.remembered && this.remembered_device_token;
            },
            logout: function logout() {
                _squid.$Model.bulkInvalidate("invalidateOnLogout");
                return this.action("logout");
            },
            clearCookies: function clearCookies() {
                var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                return this.action("clearCookies", {
                    data: data
                });
            },
            showNotYou: function showNotYou() {
                var isAuthApiCall = this.is_auth_api_call;
                var isConsumerApp = _squid.$util.param("source") === "consumerApp";
                var redirectToHermesOn3DSDecline = _squid.$util.param("redirectToHermesOn3DSDecline");
                var isUlReturnLoggedIn = _squid.$util.param("ulReturn") && this.auth_state === "LOGGEDIN";
                return isAuthApiCall && !isConsumerApp && !redirectToHermesOn3DSDecline && !isUlReturnLoggedIn;
            }
        });
        var $ULoginModel = exports.$ULoginModel = _squid.$Model.extend("$ULoginModel", {
            api: new _squid.$Api({
                uri: "/api/auth/ulogin",
                postAttempts: 1,
                cache: false
            })
        });
        angular.value("$AuthApi", $AuthApi);
        angular.value("$AuthModel", $AuthModel);
        angular.value("$ULoginModel", $ULoginModel);
        _squid.$Model;
        _squid.$Api;
        _squid.$util;
    },
    "./js/lib/fallback.js": function(module, exports, __webpack_require__) {
        (function(module, __dirname, __filename) {
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _angular2 = _interopRequireDefault(_angular);
            __webpack_require__("./components/squid/dist/index.js");
            __webpack_require__("./components/xo-beaver/dist/logger.js");
            __webpack_require__("./components/xo-return-to-merchant/dist/util.js");
            __webpack_require__("./components/xo-models/src/checkout/index.js");
            var _icFallback = __webpack_require__("./js/lib/icFallback.js");
            var _integration = __webpack_require__("./js/lib/integration.js");
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            (function exportProviders(angular) {
                angular && angular.exportProviders(module, exports, __dirname, __filename);
            })(window.angular);
            _angular2["default"].module().factory("$fallbackErrorHandler", function($q, $config, $meta, $timeout, $window, $logger, $log, $feature, $ReturnToMerchant, $locale, $util, $FallbackError, $state, $rootScope, $populate, $CheckoutCartModel, $CheckoutPayeeModel, $CheckoutAppDataModel, $pxp, $experiment) {
                return function(err) {
                    var reason = err.reason;
                    var product = err.product;
                    var entry_point = err.entryPoint;
                    var params = err.params;
                    var model = {};
                    var isWpsSubscription = void 0;
                    function getFallbackUrl(urlParams, waType) {
                        if ($rootScope.wps || isWpsSubscription || $rootScope.invoice) {
                            return $populate(model, {
                                checkoutAppData: $CheckoutAppDataModel.instance($meta.token)
                            }).then(function() {
                                var base = $config.urls.fallbackUrl["buyNow"];
                                if (model.checkoutAppData.flags.is_cart_upload_flow || waType === "CartUpload" || waType === "AddToCart" || model.checkoutAppData.flags.is_shopping_cart_flow || waType === "ShoppingCart") {
                                    base = $config.urls.fallbackUrl["cartUpload"];
                                }
                                if (model.checkoutAppData.flags.is_invoice_flow) {
                                    urlParams.id = model.checkoutAppData.invoice_id;
                                    base = $config.urls.fallbackUrl["invoice"];
                                }
                                if (isWpsSubscription) {
                                    base = $config.urls.fallbackUrl["wpsSubscription"];
                                }
                                return $util.paypalURL(base, urlParams);
                            });
                        } else {
                            return $q.when().then(function() {
                                var base = $config.urls.fallbackUrl[product];
                                return $util.paypalURL(base, urlParams);
                            });
                        }
                    }
                    function showGenericErrorPage(errorReason) {
                        if ($rootScope.partnerIntegration) {
                            $logger.info("partner_integration_fallback_to_genericErrorPage");
                        }
                        var code = errorReason || reason;
                        code = code ? window.btoa(code) : code;
                        $state.go("checkout.genericError", {
                            code: code
                        });
                    }
                    function handleFallbackRedirect(url, wpsParams) {
                        if (!$config.fallbackEnabled && !entry_point) {
                            return $log.warn("Fallback inhibited by config", url);
                        }
                        if ($config.deploy.isLocal() && !entry_point) {
                            return $log.warn("Fallback inhibited in local mode.", url);
                        }
                        $logger.log(product ? "info" : "error", "fallback", {
                            reason: reason,
                            product: product,
                            entry_point: entry_point,
                            error_desc: reason,
                            from: $rootScope.currentState || "fallback",
                            to: product ? "process_fallback_" + product : "process_fallback"
                        });
                        $logger.info("fallback_reason_" + reason, {
                            reason: reason
                        });
                        if (window.xchild) {
                            if (window.opener) {
                                return (0, _icFallback.$incontextFallback)(window, url);
                            }
                            return $state.go("checkout.framebust", {
                                action: "fallback",
                                url: url
                            });
                        }
                        $rootScope.$emit("loading");
                        if (product === "ux") {
                            return ($rootScope.wps || isWpsSubscription) && !$rootScope.invoice ? $ReturnToMerchant.postTo(url, wpsParams) : $ReturnToMerchant.goTo(url);
                        }
                        return $util.redirect(url);
                    }
                    function doFallback() {
                        $util.assert(reason, "expected fallback reason");
                        product = product || "ux";
                        var urlParams = params || {};
                        _angular2["default"].extend(urlParams, {
                            token: $meta.token,
                            fallback: 1,
                            reason: reason,
                            landing: entry_point,
                            useraction: $CheckoutAppDataModel.instance($rootScope.token).useraction()
                        });
                        if ($rootScope.partnerIntegration) {
                            urlParams.incontext = "1";
                            urlParams.nolegacy = "1";
                        } else if ($rootScope.miniBrowser) {
                            urlParams.incontext = "1";
                        }
                        var wpsParams = void 0;
                        if ($rootScope.wps || isWpsSubscription) {
                            wpsParams = $util.decodeAndParse($meta.xclickParams);
                            $logger.info("wps_fallback", {
                                token: $meta.token,
                                reason: reason
                            });
                            $logger.info("wps_fallback_reason_" + reason, {
                                reason: reason
                            });
                        }
                        var waType = wpsParams && wpsParams.wa_type;
                        return getFallbackUrl(urlParams, waType).then(function(url) {
                            var fallbackWhitelist = $config.fallbackWhitelist;
                            var whitelist = fallbackWhitelist && fallbackWhitelist.whitelisted || [];
                            if (whitelist && whitelist.indexOf(reason) === -1 && $util.sessionStorageEnabled()) {
                                var AUTORELOAD_LIMIT = 1;
                                var autoReloadCount = parseInt($util.params("arc"), 10);
                                if (!autoReloadCount) {
                                    autoReloadCount = 0;
                                }
                                if (autoReloadCount < AUTORELOAD_LIMIT) {
                                    autoReloadCount++;
                                    $logger.info("checkout_fpti", {
                                        from: "error_auto_reload",
                                        to: "restart_hermes_app",
                                        int_error_code: reason
                                    });
                                    $util.replace({
                                        arc: autoReloadCount
                                    });
                                } else {
                                    return $pxp("xo_hermes_handle_error", "xo_hermes_handle_error_(treatment|control)").then(function(result) {
                                        if (result && result.treatment_name === "xo_hermes_handle_error_control") {
                                            $logger.info("fallback_post_autoReload", {
                                                reason: reason,
                                                product: product
                                            });
                                            handleFallbackRedirect(url, wpsParams);
                                        } else {
                                            var RETRY_KEY = "retry_page_shown";
                                            var RETRY_PAGE_LIMIT = 3;
                                            var timesSeen = Number(sessionStorage.getItem(RETRY_KEY));
                                            var destination = "RETRY";
                                            var transition_name = "show_retry_page";
                                            if (!timesSeen || timesSeen < 0) {
                                                timesSeen = 0;
                                            }
                                            if (timesSeen < RETRY_PAGE_LIMIT) {
                                                timesSeen++;
                                                sessionStorage.setItem(RETRY_KEY, timesSeen);
                                            } else {
                                                destination = "DEFAULT";
                                                transition_name = "show_error_page";
                                            }
                                            $logger.info("checkout_fpti", {
                                                from: "error_auto_reload",
                                                to: transition_name,
                                                enable_refresh_prompt: reason,
                                                int_error_code: reason
                                            });
                                            return showGenericErrorPage(destination);
                                        }
                                    })["catch"](function() {
                                        $logger.info("xo_hermes_handle_error_pxp_failure");
                                        return showGenericErrorPage("DEFAULT");
                                    });
                                }
                            } else {
                                $logger.info("fallback_reason_whitelisted", {
                                    reason: reason,
                                    product: product
                                });
                                handleFallbackRedirect(url, wpsParams);
                            }
                        });
                    }
                    if (product === "error") {
                        $logger.error(reason, {
                            url: window.location.href
                        });
                        var _$config$urls = $config.urls, baseUrl = _$config$urls.baseUrl, errorUrl = _$config$urls.errorUrl;
                        return $util.redirect(baseUrl + errorUrl);
                    }
                    if (_integration.$integration.getConfig("ERROR_AFTER_PAYMENT") && $rootScope.paymentComplete) {
                        $logger.info("wps_error_after_payment", {
                            reason: reason
                        });
                        return showGenericErrorPage("PAYMENT_ALREADY_DONE");
                    }
                    var beamPattern = /^BA-[0-9A-Z]{17}$/;
                    var isBeamIntegration = $meta.baToken && beamPattern.test($meta.baToken);
                    var cartExchangeFailed = isBeamIntegration && beamPattern.test($meta.token);
                    if (cartExchangeFailed) {
                        product = "ux";
                    }
                    if (product === "ux" && isBeamIntegration && cartExchangeFailed) {
                        return showGenericErrorPage();
                    }
                    return $populate(model, {
                        checkoutCart: $CheckoutCartModel.instance($meta.token),
                        checkoutAppData: $CheckoutAppDataModel.instance($meta.token),
                        checkoutPayee: $CheckoutPayeeModel.instance($meta.token)
                    }).then(function() {
                        var merchantId = model.checkoutPayee.get("merchant.id");
                        isWpsSubscription = model.checkoutAppData.is_wps_subscription_flow();
                        if (model.checkoutCart.isWalletTokenization()) {
                            return showGenericErrorPage();
                        }
                        if ($config.fallbackWhitelist && $config.fallbackWhitelist.exceptions && $config.fallbackWhitelist.exceptions.hasOwnProperty(merchantId)) {
                            if ($config.fallbackWhitelist.exceptions[merchantId].indexOf(reason) !== -1) {
                                $logger.info("fallback_ignored_for_merchant");
                                return;
                            }
                            $logger.info("fallback_inhibited_for_merchant");
                            return showGenericErrorPage();
                        }
                        if (product === "ux" && $rootScope.partnerIntegration) {
                            $logger.info("partner_integration_fallback_to_UX");
                            $window.resizeTo(screen.availWidth, screen.availHeight);
                            return doFallback();
                        }
                        if (model.checkoutAppData.flags.disable_legacy_fallback) {
                            $logger.error("fallback_inhibited_for_xo_order_tokens");
                            return showGenericErrorPage();
                        } else {
                            return doFallback();
                        }
                    })["catch"](showGenericErrorPage);
                };
            });
            _icFallback.$incontextFallback;
            _integration.$integration;
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "js/lib", "js/lib/fallback.js");
    },
    "./components/xo-return-to-merchant/dist/util.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            function match(str, pattern) {
                var regmatch = str.match(pattern);
                if (regmatch) {
                    return regmatch[1];
                }
            }
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-beaver/dist/logger.js"), __webpack_require__("./components/xo-device-info/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-return-to-merchant", [ "squid", "xo-device-info" ]).factory("$ReturnToMerchant", function($window, $DeviceInfo, $rootScope, $util, $feature, $logger, $state, $timeout, $CheckoutSessionModel, $CheckoutCartModel, $CheckoutAppDataModel) {
                    return {
                        goTo: function goTo(url, forceRedirect) {
                            $logger.info(url.indexOf("PayerID") > -1 ? "return_to_merchant" : "cancel_to_merchant", {
                                url: url
                            });
                            var getPaymentID = function getPaymentID() {
                                var paymentIDInUrl = match(url, /paymentId=((PAY-)?[A-Z0-9]+)/);
                                if (paymentIDInUrl) {
                                    return paymentIDInUrl;
                                }
                                return $CheckoutAppDataModel.instance($rootScope.token).payment_id;
                            };
                            if (window.xchild) {
                                $logger.done();
                                $rootScope.$emit("loading");
                                var params = {
                                    paymentToken: match(url, /token=((EC-)?[A-Z0-9]+)/),
                                    billingToken: match(url, /ba_token=((BA-)?[A-Z0-9]+)/),
                                    payerID: match(url, /PayerID=([A-Z0-9]+)/),
                                    paymentID: getPaymentID(),
                                    intent: $CheckoutCartModel.instance($rootScope.token).payment_action
                                };
                                if (window.xprops.onCancel) {
                                    params.cancelUrl = url;
                                    return window.xprops.onCancel(params);
                                }
                                return window.xchild.close();
                            }
                            var isHTTPUrl = Boolean(url.indexOf("http") === 0 || url.indexOf("www") === 0);
                            var showPaymentSuccess = Boolean($DeviceInfo.isDevice() && !isHTTPUrl);
                            if (showPaymentSuccess) {
                                $logger.info("redirect", {
                                    url: url
                                });
                                $window.onunload = $window.onbeforeunload = function() {};
                                $window.location = url;
                                return $state.go("checkout.genericMessage", {
                                    code: "PAYMENT_SUCCESS"
                                });
                            }
                            if (forceRedirect) {
                                $util.redirect(url);
                            } else {
                                var isVZeroIframe = Boolean($rootScope.partnerIntegration) && $util.isIFrame();
                                if (isVZeroIframe) {
                                    $util.redirect(url, {
                                        redirectImmediateParent: true
                                    });
                                } else if ($rootScope.partnerIntegration || !$rootScope.miniBrowser && !$util.isIFrame()) {
                                    $util.redirect(url);
                                } else {
                                    var result = this.postToMerchant({
                                        operation: "return_to_merchant",
                                        returnUrl: url,
                                        updateParent: true
                                    });
                                    if (!result) {
                                        $util.redirect(url);
                                    }
                                }
                            }
                            var userStatus = function userStatus() {
                                $logger.info("redirected_user_still_on_page_second_checkpoint");
                            };
                            $timeout(function() {
                                $logger.info("redirected_user_still_on_page_first_checkpoint");
                                $timeout(userStatus, 1e4);
                            }, 1e4);
                        },
                        postToMerchant: function postToMerchant(msg) {
                            try {
                                msg = angular.toJson(msg, 0);
                                if ($window.opener && ($window.navigator.userAgent.match(/edge/i) || $window.opener.postMessage && !$window.navigator.userAgent.match(/msie|trident/i))) {
                                    $window.opener.postMessage(msg, "*");
                                    $logger.info("minibrowser_postmessage");
                                    return true;
                                }
                                var bridge = $window.opener && $window.opener.frames && $window.opener.frames.length && $window.opener.frames.PayPalBridge;
                                if (bridge && bridge.returnToParent) {
                                    bridge.returnToParent(msg);
                                    $logger.info("minibrowser_bridgemessage");
                                    return true;
                                }
                                $logger.warn("minibrowser_nopostback");
                            } catch (err) {
                                $logger.error("minibrowser_postback_error", {
                                    error: err.stack || err.toString()
                                });
                            }
                            return false;
                        },
                        postTo: function postTo(url, msg) {
                            var form = document.createElement("form");
                            form.method = "POST";
                            form.action = url;
                            form.className = "hide";
                            for (var key in msg) {
                                var input = document.createElement("input");
                                input.name = key;
                                input.value = msg[key];
                                form.appendChild(input);
                            }
                            $window.document.body.appendChild(form);
                            form.submit();
                            $logger.info("web_postmessage");
                            return true;
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-return-to-merchant/dist", "components/xo-return-to-merchant/dist/util.js");
    },
    "./components/xo-device-info/dist/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("xo-device-info", [ "squid" ]).factory("$DeviceInfo", function($window, $meta, $logger) {
                    var userAgent = $window.navigator.userAgent;
                    var standalone = $window.navigator.standalone;
                    var DEVICE_PATTERN = /iPod|iPhone|iPad|Android|BlackBerry|BB10|Palm|CriOS|IEMobile|Windows Phone OS|webOS|Symbian|silk|Kindle|Opera Mini|mobile/i;
                    var TABLET_PATTERN = /ip(a|ro)d|silk|xoom|playbook|tablet|kindle|Nexus 7|GT-P10|SC-01C|SHW-M180S|SM-T320|SGH-T849|SCH-I800|SHW-M180L|SPH-P100|SGH-I987|zt180|HTC( Flyer|_Flyer)|Sprint ATP51|ViewPad7|pandigital(sprnova|nova)|Ideos S7|Dell Streak 7|Advent Vega|A101IT|A70BHT|MID7015|Next2|nook|FOLIO|MB511.*RUTEM|Mac OS.*Silk/i;
                    function getIntegrationContext(integrationKey) {
                        var integrationContext = $meta.integrationCTX || {};
                        return integrationContext[integrationKey];
                    }
                    function isWebView() {
                        var logEnabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                        var ua = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : userAgent;
                        var ios = /iphone|ipod|ipad/i.test(ua), android = /Android/i.test(ua);
                        if (ios) {
                            var ios_uiwebview = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(ua);
                            if (!standalone && ios_uiwebview && !isSafariViewController()) {
                                logWebView("iOS");
                                return true;
                            }
                        } else if (android) {
                            var allowedXRequestedWithRegexMap = {
                                ajax: /XMLHttpRequest/i,
                                baiduBrowser: /com.baidu.browser.inter/i,
                                operaMini: /com.opera.mini.native/i,
                                maxthon: /com.mx.browser/i,
                                litterPenguinBrowser: /com.explore.web.browser/i
                            };
                            var xRequestedWithHeaderVal = $meta.requestHeaders["x-requested-with"];
                            if (xRequestedWithHeaderVal) {
                                for (var key in allowedXRequestedWithRegexMap) {
                                    if (allowedXRequestedWithRegexMap.hasOwnProperty(key)) {
                                        if (allowedXRequestedWithRegexMap[key].test(xRequestedWithHeaderVal)) {
                                            return false;
                                        }
                                    }
                                }
                                logWebView("Android");
                                return true;
                            }
                        }
                        return false;
                        function logWebView(device) {
                            if (!logEnabled) {
                                return;
                            }
                            $logger.info("WebView :: " + device);
                        }
                    }
                    function isDevice() {
                        if (angular.isString(userAgent)) {
                            return DEVICE_PATTERN.test(userAgent) || TABLET_PATTERN.test(userAgent);
                        }
                        return false;
                    }
                    function isTablet() {
                        if (angular.isString(userAgent)) {
                            return TABLET_PATTERN.test(userAgent);
                        }
                        return false;
                    }
                    function isMobile() {
                        return isDevice(userAgent) && !isTablet(userAgent);
                    }
                    function getDevicePlatform() {
                        if (angular.isString(userAgent)) {
                            var matched = userAgent.match(/iPod|iPhone|iPad|Android|BlackBerry|Windows Phone OS|webOS|Symbian|mobile/g);
                            if (matched && matched.length > 0) {
                                return matched[0];
                            }
                        }
                    }
                    function isApp(uaString) {
                        userAgent = uaString || userAgent;
                        if (DEVICE_PATTERN.test(userAgent) || TABLET_PATTERN.test(userAgent)) {
                            if (getDevicePlatform(userAgent) === "Android") {
                                return /Version\/\d.\d/i.test(userAgent);
                            }
                            return /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)|PLAYSTATION|iPadApp/i.test(userAgent);
                        }
                        return false;
                    }
                    function isSafariViewController() {
                        if (getIntegrationContext("brainTreeIntegration") === "SFVC") {
                            return true;
                        }
                        if (angular.isString(userAgent)) {
                            var ios = /iphone|ipod|ipad/i.test(userAgent);
                            return ios && $window.indexedDB && isApp();
                        } else {
                            return false;
                        }
                    }
                    function getCapabilities() {
                        var capabilities = {}, device = DEVICE_PATTERN.test(userAgent), tablet = TABLET_PATTERN.test(userAgent), app = isApp(userAgent);
                        if (angular.isString(userAgent)) {
                            capabilities.isWireless = device || tablet;
                            capabilities.isTablet = tablet;
                            capabilities.isMobile = device && !tablet;
                            capabilities.isDesktop = !device;
                            capabilities.isApp = app;
                        }
                        return capabilities;
                    }
                    function getAppIntegrationType() {
                        var app_int_type;
                        if (isDevice()) {
                            if (isApp()) {
                                if (isSafariViewController()) {
                                    app_int_type = "SFVC";
                                } else {
                                    app_int_type = "WebView";
                                }
                            } else {
                                app_int_type = "Browser";
                            }
                        }
                        return app_int_type;
                    }
                    return {
                        isDevice: isDevice,
                        isTablet: isTablet,
                        isMobile: isMobile,
                        isApp: isApp,
                        isSafariViewController: isSafariViewController,
                        getCapabilities: getCapabilities,
                        getAppIntegrationType: getAppIntegrationType,
                        isWebView: isWebView
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-device-info/dist", "components/xo-device-info/dist/index.js");
    },
    "./components/xo-models/src/checkout/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$CheckoutSessionModel = exports.$CardBackupModel = exports.$CheckoutPlanModel = exports.$CheckoutShippingAddressesModel = exports.$CreditOptionsModel = exports.$CheckoutPayeeModel = exports.$ShippingAddressModel = exports.$CheckoutShippingAddressModel = exports.$FlowEligibilityModel = exports.$InstallmentOptionsModel = exports.$FundingOptionsModel = exports.$FundingSourceModel = exports.$CheckoutAppDataModel = exports.$CheckoutCartModel = undefined;
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
        } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _processorDecline = __webpack_require__("./components/xo-models/src/processorDecline/index.js");
        var $CheckoutCartModel = exports.$CheckoutCartModel = _squid.$Model.extend("$CheckoutCartModel", {
            api: new _squid.$Api({
                uri: "/api/checkout/:id/cart",
                cache: true
            }),
            isPurchase: function isPurchase() {
                return Boolean(this.purchase);
            },
            isBilling: function isBilling() {
                return Boolean(this.billing);
            },
            getBaToken: function getBaToken() {
                return this.isBilling() && this.billing.ba_token;
            },
            isBillingPurchase: function isBillingPurchase() {
                return this.isPurchase() && this.isBilling();
            },
            isBillingNoPurchase: function isBillingNoPurchase() {
                return this.isBilling() && !this.isPurchase();
            },
            getBillingDescription: function getBillingDescription() {
                return this.billing && this.billing.description;
            },
            isMultiSellerPurchase: function isMultiSellerPurchase() {
                return this.purchaseUnits && this.purchaseUnits.length > 1;
            },
            isShippingMethodStorePickUp: function isShippingMethodStorePickUp() {
                return this.purchase && (this.purchase.shipping_method === "29" || this.purchase.shipping_method === "21");
            },
            isWalletTokenization: function isWalletTokenization() {
                return this.billing && this.billing.intent === "TOKENIZED_WALLET";
            },
            getExternalCallbackOptions: function getExternalCallbackOptions() {
                return this.purchaseUnits && this.purchaseUnits[0] && this.purchaseUnits[0].external_callback_options;
            }
        });
        var $CheckoutAppDataModel = exports.$CheckoutAppDataModel = _squid.$Model.extend("$CheckoutAppDataModel", {
            api: new _squid.$Api({
                uri: "/api/checkout/:id/appData"
            }),
            useraction: function useraction() {
                var incontext_integration = window.xchild && window.xchild.props.commit ? "commit" : false;
                var rest_integration = this.flags && this.flags.user_action === "PAY" ? "commit" : false;
                return rest_integration || incontext_integration || _squid.$util.param("useraction");
            },
            doec_on_approve: function doec_on_approve() {
                return this.flags && this.flags.doec_on_approve;
            },
            is_wps_subscription_flow: function is_wps_subscription_flow() {
                return this.flags && this.flags.is_wps_subscription_flow;
            }
        });
        var $FundingSourceModel = exports.$FundingSourceModel = _squid.$Model.extend("$FundingSourceModel", {
            formatLast4: function formatLast4() {
                var last4;
                if (this.last4) {
                    last4 = this.last4;
                    if (!this.parent.isAuthRequired) {
                        last4 = "x-" + last4;
                    }
                }
                return last4;
            }
        });
        var $FundingOptionsModel = exports.$FundingOptionsModel = _squid.$Model.extend("$FundingOptionsModel", {
            api: new _squid.$Api({
                uri: "/api/checkout/:id/fundingOptions",
                postAttempts: 2
            }),
            eachPlan: function eachPlan(method, context) {
                angular.forEach(this.plans, method, this);
            },
            hasECheck: function hasECheck() {
                return _squid.$util.some(this.instruments, function(instrument) {
                    return instrument.type === "ECHECK" || instrument.subtype === "ECHECK";
                });
            },
            hasCredit: function hasCredit() {
                return _squid.$util.some(this.instruments, function(instrument) {
                    return instrument.type === "CREDIT";
                });
            },
            getBankPlanIdByInstrumentId: function getBankPlanIdByInstrumentId(id, subType) {
                var fundingInstrument = _squid.$util.find(this.plans, function(plan) {
                    return plan.primaryFs && plan.primaryFs.type === "BANK" && plan.primaryFs.id === id && plan.primaryFs.subtype === subType;
                });
                return fundingInstrument && fundingInstrument.planId;
            },
            onPopulate: function onPopulate() {
                var self = this;
                angular.forEach(this.plans, function(plan) {
                    if (plan.primaryFs && plan.primaryFs.type === "BANK" && (plan.primaryFs.subtype === "IACH" || plan.primaryFs.subtype === "PAD")) {
                        Object.defineProperty(plan.primaryFs, plan.primaryFs.subtype === "IACH" ? "padPlanId" : "iachPlanId", {
                            enumerable: true,
                            configurable: false,
                            writeable: false,
                            value: self.getBankPlanIdByInstrumentId(plan.primaryFs.id, plan.primaryFs.subtype === "IACH" ? "PAD" : "IACH")
                        });
                    }
                });
            },
            getBankPadPlanIdByInstrumentId: function getBankPadPlanIdByInstrumentId(id, subtype) {
                var bankPadPlan = this.plans.find(function(plan) {
                    return plan.primaryFs && plan.primaryFs.id === id && plan.primaryFs.type === "BANK" && plan.primaryFs.subtype === subtype;
                });
                return bankPadPlan.primaryFs && (bankPadPlan.primaryFs.subtype === "IACH" ? bankPadPlan.primaryFs.padPlanId : bankPadPlan.primaryFs.iachPlanId);
            },
            isPadToggleApplicable: function isPadToggleApplicable() {
                var padToggleApplicable = false;
                this.eachPlan(function(plan) {
                    if (!padToggleApplicable && plan.primaryFs && plan.primaryFs.type === "BANK") {
                        if (plan.primaryFs.subtype === "IACH" && plan.primaryFs.hasOwnProperty("padPlanId")) {
                            padToggleApplicable = plan.primaryFs.padPlanId ? true : false;
                        } else if (plan.primaryFs.subtype === "PAD" && plan.primaryFs.hasOwnProperty("iachPlanId")) {
                            padToggleApplicable = plan.primaryFs.iachPlanId ? true : false;
                        }
                    }
                }, this);
                return padToggleApplicable;
            },
            isPadToggleApplicableForFS: function isPadToggleApplicableForFS(planId) {
                var padToggleApplicable = false;
                var selectedPlan = _squid.$util.find(this.plans, function(plan) {
                    return plan.planId === planId;
                });
                if (selectedPlan.primaryFs && selectedPlan.primaryFs.type === "BANK" && (selectedPlan.primaryFs.subtype === "IACH" && selectedPlan.primaryFs.padPlanId || selectedPlan.primaryFs.subtype === "PAD" && selectedPlan.primaryFs.iachPlanId)) {
                    padToggleApplicable = true;
                }
                return padToggleApplicable;
            },
            getPreferred: function getPreferred() {
                return _squid.$util.find(this.plans, function(plan) {
                    return plan.primaryFs.isPreferred;
                });
            }
        });
        var $InstallmentOptionsModel = exports.$InstallmentOptionsModel = _squid.$Model.extend("$InstallmentOptionsModel", {
            api: new _squid.$Api({
                uri: "/api/checkout/:id/installmentOptions/",
                postAttempts: 2
            })
        });
        var $FlowEligibilityModel = exports.$FlowEligibilityModel = _squid.$Model.extend("$FlowEligibilityModel", {
            api: new _squid.$Api({
                uri: "/api/checkout/:id/flowEligibility"
            })
        });
        var $CheckoutShippingAddressModel = exports.$CheckoutShippingAddressModel = _squid.$Model.extend("$CheckoutShippingAddressModel", {
            api: new _squid.$Api({
                uri: "/api/checkout/:parent.id/shipping/:id"
            })
        });
        var $ShippingAddressModel = exports.$ShippingAddressModel = _squid.$Model.extend("$ShippingAddressModel", {
            api: new _squid.$Api({
                uri: "/api/checkout/:id/shipping/add"
            }),
            serialize: function serialize() {
                return {
                    first_name: this.first_name,
                    last_name: this.last_name,
                    recipient_name: this.recipient_name,
                    line1: this.line1,
                    line2: this.line2,
                    city: this.city,
                    state: this.state,
                    postal_code: this.postal_code,
                    country: this.country
                };
            }
        });
        var $CheckoutPayeeModel = exports.$CheckoutPayeeModel = _squid.$Model.extend("$CheckoutPayeeModel", {
            api: new _squid.$Api({
                uri: "/api/checkout/:id/payee"
            }),
            getId: function getId() {
                return this.merchant && this.merchant.id;
            },
            isGambling: function isGambling() {
                return this.merchant && this.merchant.isGambling;
            }
        });
        var $CreditOptionsModel = exports.$CreditOptionsModel = {
            sacEligibleAmount: {
                US: 99,
                GB: 150
            }
        };
        var $CheckoutShippingAddressesModel = exports.$CheckoutShippingAddressesModel = _squid.$Model.extend("$CheckoutShippingAddressesModel", {
            api: new _squid.$Api({
                uri: "/api/checkout/:id/shipping"
            }),
            onPopulate: function onPopulate() {
                this.addresses = this.children($CheckoutShippingAddressModel, this.addresses);
            },
            getPreferredShippingAddress: function getPreferredShippingAddress() {
                var preferredAddress = {};
                if (this.addresses) {
                    var i = void 0;
                    var address = void 0;
                    for (i = 0; i < this.addresses.length; i++) {
                        address = this.addresses[i];
                        if (address && address.preferred_address) {
                            preferredAddress = {
                                line1: address.line1,
                                line2: address.line2,
                                city: address.city,
                                state: address.state,
                                postal_code: address.postal_code,
                                country_code: address.country_code
                            };
                            break;
                        }
                    }
                }
                return preferredAddress;
            },
            getPrimaryShippingAddress: function getPrimaryShippingAddress() {
                var primaryAddress = {};
                if (this.addresses) {
                    var i = void 0;
                    var address = void 0;
                    for (i = 0; i < this.addresses.length; i++) {
                        address = this.addresses[i];
                        if (address && address.primary_address) {
                            primaryAddress = {
                                line1: address.line1,
                                line2: address.line2,
                                city: address.city,
                                state: address.state,
                                postal_code: address.postal_code,
                                country_code: address.country_code
                            };
                            break;
                        }
                    }
                }
                return primaryAddress;
            }
        });
        var $CheckoutPlanModel = exports.$CheckoutPlanModel = _squid.$Model.extend("$CheckoutPlanModel", {
            onPopulate: function onPopulate() {
                this.sources = this.children($FundingSourceModel, this.sources);
            },
            eachSource: function eachSource(method, context) {
                angular.forEach(this.sources, method, this);
            },
            hasFundingMethodType: function hasFundingMethodType(name) {
                var found = false;
                this.eachSource(function(source) {
                    if (source.type === name) {
                        found = true;
                    }
                }, this);
                return found;
            },
            hasFundingMethodSubType: function hasFundingMethodSubType(name) {
                var found = false;
                this.eachSource(function(source) {
                    if (source.sub_type === name) {
                        found = true;
                    }
                }, this);
                return found;
            },
            isPAD: function isPAD() {
                return this.hasFundingMethodSubType("DELAYED_TRANSFER");
            },
            isIACH: function isIACH() {
                var found = false;
                this.eachSource(function(source) {
                    if (source.type === "BANK_ACCOUNT" && source.sub_type === "INSTANT_TRANSFER") {
                        found = true;
                    }
                }, this);
                return found;
            },
            isSplitPaymentWithBalanceAndIach: function isSplitPaymentWithBalanceAndIach() {
                return this.sources && this.sources.length > 1 && this.hasFundingMethodType("BALANCE") && this.isIACH();
            },
            isMSB: function isMSB() {
                return this.sources && this.sources.length === 1 && this.sources[0].type === "INCENTIVE";
            },
            isBalance: function isBalance() {
                return this.sources && this.sources.length === 1 && this.sources[0].type === "BALANCE";
            },
            hasConversion: function hasConversion() {
                return this.conversion !== null && _typeof(this.conversion) === "object";
            }
        });
        var $CardBackupModel = exports.$CardBackupModel = _squid.$Model.extend("$CardBackupModel", {
            onPopulate: function onPopulate() {
                if (!this.get("parent.meta.populated")) {
                    return;
                }
                this.resetIfDoesNotApply();
                this.reevaluateEligibility();
            },
            getPlan: function getPlan() {
                if (!this.isAllowed()) {
                    return;
                }
                return this.plan;
            },
            setPlan: function setPlan(plan, forPlan) {
                this.plan = plan;
                this.forPlan = forPlan || this.getCheckoutSessionPlan();
            },
            isAllowed: function isAllowed() {
                return this.allowCardBackup;
            },
            getCheckoutSessionPlan: function getCheckoutSessionPlan() {
                return this.get("parent.fundingOptions.plans.0");
            },
            reevaluateEligibility: function reevaluateEligibility() {
                var _this = this;
                (0, _processorDecline.getProcessorDeclineRetryEligibility)(this.id, this.parent).then(function(eligibility) {
                    _this.allowCardBackup = eligibility;
                    return eligibility;
                });
            },
            reset: function reset(forPlan) {
                var validBackups = (this.get("parent.fundingOptions.plans") || []).filter(function(p) {
                    return p !== forPlan;
                });
                this.setPlan(validBackups[0], forPlan);
            },
            resetIfDoesNotApply: function resetIfDoesNotApply(plan) {
                if (!plan) {
                    plan = this.getCheckoutSessionPlan();
                }
                var getKey = function getKey(p) {
                    return p && p.primaryFs && p.primaryFs.id;
                };
                var planKey = getKey(plan);
                var forKey = getKey(this.forPlan);
                if (!planKey || planKey !== forKey) {
                    return this.reset(plan);
                }
                var plans = this.get("parent.fundingOptions.plans") || [];
                var currentPlanKey = getKey(this.plan);
                var newPlan = plans.find(function(p) {
                    return getKey(p) === currentPlanKey;
                });
                if (currentPlanKey && !newPlan) {
                    return this.reset(plan);
                }
                this.forPlan = plan;
                this.plan = newPlan;
            }
        });
        var $CheckoutSessionModel = exports.$CheckoutSessionModel = _squid.$Model.extend("$CheckoutSessionModel", {
            api: new _squid.$Api({
                uri: "/api/checkout/:id/session",
                postAttempts: 2
            }),
            invalidateOnLogout: true,
            onPopulate: function onPopulate() {
                this.plan = new $CheckoutPlanModel(this.plan);
                this.shipping = this.child($CheckoutShippingAddressModel, this.shipping);
                this.fundingOptions = this.child($FundingOptionsModel, this.fundingOptions);
                this.cardBackup = this.child($CardBackupModel, this.cardBackup || {});
            },
            getSelectedStickyInstrument: function getSelectedStickyInstrument() {
                if (this.selectedFuturePaymentInstrument) {
                    return this.selectedFuturePaymentInstrument;
                }
                if (!this.futurePaymentInstruments) {
                    return;
                }
                if (!(this.plan && this.plan.sources) && this.futurePaymentInstruments) {
                    return this.futurePaymentInstruments[0];
                }
                var selectedInstrumentId = _squid.$util.some(this.plan.sources, function(fi) {
                    return fi.instrument_id ? fi.instrument_id : undefined;
                });
                var stickyInstrument = _squid.$util.find(this.futurePaymentInstruments, function(fi) {
                    return fi.instrument_id === selectedInstrumentId;
                });
                return stickyInstrument;
            },
            getPlanList: function getPlanList() {
                return this.fundingOptions && this.fundingOptions.plans;
            },
            isMultipleBalancePlan: function isMultipleBalancePlan() {
                var matchingBalancePlans = 0;
                return this.fundingOptions && this.fundingOptions.plans && this.fundingOptions.plans.some(function(plan) {
                    if (plan.primaryFs.name === "BALANCE") {
                        matchingBalancePlans++;
                    }
                    return matchingBalancePlans > 1;
                });
            },
            getDisallowedInstruments: function getDisallowedInstruments() {
                return this.fundingOptions && this.fundingOptions.disallowedInstruments;
            },
            getDisallowedPreferred: function getDisallowedPreferred() {
                var disallowedInstrument = this.getDisallowedInstruments();
                disallowedInstrument = disallowedInstrument && _squid.$util.find(disallowedInstrument, function(fi) {
                    return fi.isPreferred;
                });
                var isDisallowedInstrumentInPlanList = disallowedInstrument && _squid.$util.some(this.getPlanList(), function(plan) {
                    var instrumentID = plan.primaryFs && plan.primaryFs.id;
                    if (instrumentID && disallowedInstrument.id) {
                        return instrumentID === disallowedInstrument.id;
                    } else {
                        return false;
                    }
                });
                return !isDisallowedInstrumentInPlanList && disallowedInstrument;
            },
            getShippingAddressMinimalDetails: function getShippingAddressMinimalDetails() {
                return {
                    line1: this.shipping.line1,
                    line2: this.shipping.line2,
                    city: this.shipping.city,
                    state: this.shipping.state,
                    postal_code: this.shipping.postal_code,
                    country_code: this.shipping.country
                };
            }
        });
        angular.value("$CheckoutCartModel", $CheckoutCartModel);
        angular.value("$CheckoutAppDataModel", $CheckoutAppDataModel);
        angular.value("$FundingSourceModel", $FundingSourceModel);
        angular.value("$FundingOptionsModel", $FundingOptionsModel);
        angular.value("$InstallmentOptionsModel", $InstallmentOptionsModel);
        angular.value("$FlowEligibilityModel", $FlowEligibilityModel);
        angular.value("$CheckoutShippingAddressModel", $CheckoutShippingAddressModel);
        angular.value("$ShippingAddressModel", $ShippingAddressModel);
        angular.value("$CheckoutPayeeModel", $CheckoutPayeeModel);
        angular.value("$CreditOptionsModel", $CreditOptionsModel);
        angular.value("$CheckoutShippingAddressesModel", $CheckoutShippingAddressesModel);
        angular.value("$CheckoutPlanModel", $CheckoutPlanModel);
        angular.value("$CheckoutSessionModel", $CheckoutSessionModel);
        _squid.$Model;
        _squid.$Api;
        _squid.$util;
        _processorDecline.getProcessorDeclineRetryEligibility;
    },
    "./components/xo-models/src/processorDecline/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.getProcessorDeclineRetryEligibility = getProcessorDeclineRetryEligibility;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var INELIGIBLE = _squid.$promise.resolve(false);
        var lastBuyerId = null;
        function getProcessorDeclineRetryEligibility(token, checkoutSession) {
            if (!(0, _squid.$feature)("cardBackup")) {
                return INELIGIBLE;
            }
            var models = {};
            return (0, _squid.$populate)(models, {
                auth: _auth.$AuthModel.instance(),
                checkoutCart: _checkout.$CheckoutCartModel.instance(token),
                checkoutPayee: _checkout.$CheckoutPayeeModel.instance(token),
                checkoutAppData: _checkout.$CheckoutAppDataModel.instance(token)
            }).then(function() {
                var buyerId = models.auth.buyerId;
                var sameBuyer = buyerId === lastBuyerId;
                lastBuyerId = buyerId;
                return (0, _squid.$pxp)("xo_hermes_processor_decline_retry", {}, "xo_hermes_processor_decline_retry_treatment", sameBuyer ? false : true);
            }).then(function(pxpRes) {
                var checkoutCart = models.checkoutCart, checkoutPayee = models.checkoutPayee, checkoutAppData = models.checkoutAppData;
                var disallowedInstruments = checkoutSession.get("fundingOptions.disallowedInstruments") || [];
                var plans = checkoutSession.get("fundingOptions.plans") || [];
                var isGambling = checkoutPayee.isGambling();
                var cardPlans = plans.reduce(function(acc, fi) {
                    if (fi.primaryFs.type === "CARD") {
                        acc[fi.primaryFs.id] = (acc[fi.primaryFs.id] || 0) + 1;
                    }
                    return acc;
                }, {});
                var duplicateCardPlans = Object.keys(cardPlans).filter(function(id) {
                    return cardPlans[id] > 1;
                }).length > 0;
                var numCardPlans = Object.keys(cardPlans).length;
                var numNonCardPlans = plans.filter(function(fi) {
                    return fi.primaryFs.type !== "CARD";
                }).length;
                var isBilling = checkoutCart.isBilling();
                var isNotSale = checkoutCart.get("payment_action") !== "sale";
                var isThirdParty = _thirdPartyInfo.thirdPartyExperience.isThirdPartyExperience(token);
                var isWpsOrInvoice = checkoutAppData.get("flags.is_wps_flow") || checkoutAppData.get("flags.is_invoice_flow");
                var isMultiSellerPurchase = checkoutCart.isMultiSellerPurchase();
                var hasInstallments = checkoutSession.installments && checkoutSession.installments.length > 1;
                var involvedCurrencies = plans.reduce(function(currencies, plan) {
                    currencies[plan.primaryFs.amount.currency_code] = 1;
                    return currencies;
                }, {});
                if (checkoutCart.get("purchase.amounts.total.currency_code")) {
                    involvedCurrencies[checkoutCart.purchase.amounts.total.currency_code] = 1;
                }
                var ineligibilityCriteria = {
                    hasDisallowedCards: disallowedInstruments.length > 0,
                    isGambling: isGambling,
                    doesNotHave2Cards: numCardPlans !== 2,
                    hasSplitBalance: duplicateCardPlans,
                    hasNonCardPlans: numNonCardPlans > 0,
                    isBilling: isBilling,
                    isNotSale: isNotSale,
                    isThirdParty: isThirdParty,
                    isWpsOrInvoice: isWpsOrInvoice,
                    isMultiSellerPurchase: isMultiSellerPurchase,
                    hasInstallments: hasInstallments,
                    currencyConversion: Object.keys(involvedCurrencies).length > 1
                };
                var ineligibleReasons = Object.keys(ineligibilityCriteria).filter(function(key) {
                    return ineligibilityCriteria[key];
                });
                var eligible = ineligibleReasons.length === 0;
                var eligibleWithPxp = pxpRes && eligible;
                if (eligibleWithPxp) {
                    _logger.$logger.info("processor_decline_retry_eligible");
                } else {
                    _logger.$logger.info("processor_decline_retry_ineligible", {
                        reasons: ineligibleReasons.join(),
                        pxpIneligible: !pxpRes,
                        numDisallowed: disallowedInstruments.length,
                        numCardPlans: numCardPlans,
                        numNonCardPlans: numNonCardPlans
                    });
                }
                _logger.$logger.info("checkout_fpti", {
                    from: "processor_decline_retry",
                    to: "processor_decline_retry_" + (eligible ? "eligible" : "ineligible")
                });
                return eligibleWithPxp;
            });
        }
        _squid.$feature;
        _squid.$populate;
        _squid.$promise;
        _squid.$pxp;
        _logger.$logger;
        _thirdPartyInfo.thirdPartyExperience;
        _checkout.$CheckoutCartModel;
        _checkout.$CheckoutPayeeModel;
        _checkout.$CheckoutAppDataModel;
        _auth.$AuthModel;
    },
    "./components/xo-third-party-components/src/thirdParty-info/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.thirdPartyExperience = exports.venmoExperience = exports.thirdPartyInfo = exports.venmoInfo = exports.VENMO_OPTIONS = undefined;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _index = __webpack_require__("./components/xo-device-info/dist/index.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _sessionStorage = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/sessionStorage.js");
        var _sessionStorage2 = _interopRequireDefault(_sessionStorage);
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var PWV_COOKIE = "pwv";
        var VENMO_SETUP_COOKIE = "venmoSetup";
        var VENMO_OPTIONS = exports.VENMO_OPTIONS = {
            PAYPAL: "PAYPAL",
            VENMO: "VENMO"
        };
        var venmoInfo = exports.venmoInfo = {
            isVenmoCookiePresent: function isVenmoCookiePresent() {
                var venmoRegex = new RegExp("(?:^|; )" + PWV_COOKIE + "=1(?:;|$)");
                return Boolean(document.cookie.match(venmoRegex));
            },
            isVenmoEligible: function isVenmoEligible() {
                var appData = _checkout.$CheckoutAppDataModel.instance(_angular.$rootScope.token);
                var cart = _checkout.$CheckoutCartModel.instance(_angular.$rootScope.token);
                var merchantID = _checkout.$CheckoutPayeeModel.instance(_angular.$rootScope.token).getId();
                var isVenmoBillingWhitelisted = _squid.$config.venmoBillingWhitelist && _squid.$config.venmoBillingWhitelist.indexOf(merchantID) > -1;
                var merchantCountry = appData.get("merchant.merchant_country");
                var isProcessorDeclined = appData.get("flags.processor_declined");
                var isInvoice = appData.get("flags.is_invoice_flow");
                var isBillingRequired = isVenmoBillingWhitelisted ? false : appData.get("flags.billing_address_consent_required");
                var isBillingAgreement = cart.isBilling();
                var isMobile = _index.$DeviceInfo.isDevice();
                var isVenmoCookie = this.isVenmoCookiePresent();
                var isSFAuthenticationSession = _squid.$util.param("bt_int_type") === "2";
                var eligibilityParams = {
                    isMobile: isMobile,
                    isVenmoCookie: isVenmoCookie,
                    isNotInvoice: !isInvoice,
                    isNotProcessorDeclined: !isProcessorDeclined,
                    isNotBillingAgreement: !isBillingAgreement,
                    isUSMerchant: merchantCountry === "US",
                    isNotSFAuthenticationSession: !isSFAuthenticationSession
                };
                var venmoEligibility = Object.keys(eligibilityParams).filter(function(param) {
                    return !eligibilityParams[param];
                });
                venmoEligibility = venmoEligibility && venmoEligibility.length > 0 ? "ineligible:" + venmoEligibility.join() : "eligible";
                _logger.$logger.info("venmo_eligibility", venmoEligibility);
                _logger.$logger.info("checkout_fpti", {
                    is_venmo_cookie: isVenmoCookie ? "1" : "0",
                    eligibility_reason: venmoEligibility
                });
                return Boolean(venmoEligibility === "eligible");
            },
            venmoState: function venmoState() {
                var setupRegex = new RegExp("(?:^|; )" + VENMO_SETUP_COOKIE + "=(\\w*)(?:;|$)");
                var match = document.cookie.match(setupRegex);
                if (match && VENMO_OPTIONS.hasOwnProperty(match[1])) {
                    return match[1];
                } else {
                    return null;
                }
            },
            clearVenmoState: function clearVenmoState() {
                document.cookie = VENMO_SETUP_COOKIE + "=; Max-Age=0";
            },
            setVenmoCookie: function setVenmoCookie() {
                document.cookie = VENMO_SETUP_COOKIE + "=" + VENMO_OPTIONS.VENMO;
            },
            setPayPalCookie: function setPayPalCookie() {
                document.cookie = VENMO_SETUP_COOKIE + "=" + VENMO_OPTIONS.PAYPAL;
            },
            buildVenmoURL: function buildVenmoURL() {
                var SCHEME = _squid.$config.urls && _squid.$config.urls.venmoAppSwitchURL;
                var VENMO_ROUTE = "#/checkout/venmo";
                var LOGIN_ROUTE = "#/checkout/login?venmoError=true";
                var cartModel = _checkout.$CheckoutCartModel.instance(_angular.$rootScope.token);
                var params = (0, _angular.$httpParamSerializer)({
                    "x-success": _angular.$location.absUrl().replace(/#.*$/, VENMO_ROUTE),
                    "x-failure": _angular.$location.absUrl().replace(/#.*$/, LOGIN_ROUTE),
                    ua: _angular.$window.navigator.userAgent,
                    merchant_id: _checkout.$CheckoutPayeeModel.instance(_angular.$rootScope.token).getId(),
                    token: _angular.$rootScope.token,
                    total: cartModel.purchase.amounts.total.amount,
                    currency: cartModel.purchase.amounts.total.currency_code,
                    intent: cartModel.payment_action
                });
                return SCHEME + "paypal/checkout?" + params;
            }
        };
        var thirdPartyInfo = exports.thirdPartyInfo = {
            isThirdPartyEligible: function isThirdPartyEligible() {
                return this.isBaiduEligible() || this.isVenmoEligible();
            },
            isBaiduEligible: function isBaiduEligible() {
                var eligibility = _checkout.$FlowEligibilityModel.instance(_angular.$rootScope.token);
                return eligibility.get("baiduWallet");
            },
            isVenmoEligible: function isVenmoEligible() {
                return venmoInfo.isVenmoEligible();
            }
        };
        var venmoExperienceKey = "VENMO_EXPERIENCE";
        var venmoExperience = exports.venmoExperience = {
            set: function set(token) {
                var sessionStorage = (0, _sessionStorage2["default"])();
                sessionStorage.setItem(venmoExperienceKey, token);
            },
            get: function get(token) {
                var auth = _auth.$AuthModel.instance();
                var sessionStorage = (0, _sessionStorage2["default"])();
                if (auth.logged_in && auth.guest && sessionStorage.getItem(venmoExperienceKey) === token) {
                    return true;
                } else {
                    this.set(null);
                    return false;
                }
            }
        };
        var allowedThirdPartyExperiences = {
            VENMO: "VENMO_EXPERIENCE",
            BAIDU: "BAIDU_EXPERIENCE"
        };
        var thirdPartyExperience = exports.thirdPartyExperience = {
            setAsVenmoExperience: function setAsVenmoExperience(token) {
                var sessionStorage = (0, _sessionStorage2["default"])();
                sessionStorage.setItem(token, allowedThirdPartyExperiences["VENMO"]);
            },
            setAsBaiduExperience: function setAsBaiduExperience(token) {
                var sessionStorage = (0, _sessionStorage2["default"])();
                sessionStorage.setItem(token, allowedThirdPartyExperiences["BAIDU"]);
            },
            isThirdPartyExperience: function isThirdPartyExperience(token) {
                var availableExperiences = [];
                for (var key in allowedThirdPartyExperiences) {
                    availableExperiences.push(allowedThirdPartyExperiences[key]);
                }
                var currentExperience = this.getExperience(token);
                return Boolean(availableExperiences.indexOf(currentExperience) > -1);
            },
            getExperience: function getExperience(token) {
                var auth = _auth.$AuthModel.instance();
                var sessionStorage = (0, _sessionStorage2["default"])();
                if (auth.logged_in && auth.guest && sessionStorage.getItem(token)) {
                    return sessionStorage.getItem(token);
                } else {
                    this.resetThirdPartyExperience();
                    return "MEMBER_EXPERIENCE";
                }
            },
            resetThirdPartyExperience: function resetThirdPartyExperience() {
                var sessionStorage = (0, _sessionStorage2["default"])();
                sessionStorage.clear();
                return "MEMBER_EXPERIENCE";
            }
        };
        _angular.$rootScope;
        _angular.$window;
        _angular.$location;
        _angular.$httpParamSerializer;
        _index.$DeviceInfo;
        _squid.$config;
        _squid.$util;
        _auth.$AuthModel;
        _checkout.$CheckoutPayeeModel;
        _checkout.$CheckoutCartModel;
        _checkout.$CheckoutAppDataModel;
        _checkout.$FlowEligibilityModel;
        _logger.$logger;
    },
    "./components/xo-third-party-components/src/thirdParty-info/sessionStorage.js": function(module, exports) {
        exports.__esModule = true;
        exports["default"] = getSessionStorage;
        var store = {};
        function getSessionStorage() {
            try {
                window["sessionStorage"].setItem("__feature_test__", "0");
                window["sessionStorage"].removeItem("__feature_test__");
                return window.sessionStorage;
            } catch (err) {
                return {
                    getItem: function getItem(key) {
                        if (arguments < 1) {
                            throw new Error("1 argument required");
                        }
                        return store[key];
                    },
                    setItem: function setItem(key, val) {
                        if (arguments < 2) {
                            throw new Error("2 arguments required");
                        }
                        store[key] = val;
                    },
                    clear: function clear() {
                        for (var key in store) {
                            delete store[key];
                        }
                    }
                };
            }
        }
        module.exports = exports["default"];
    },
    "./js/lib/icFallback.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$incontextFallback = $incontextFallback;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        function $incontextFallback(win, url) {
            _angular.$rootScope.$emit("loading");
            window.onbeforeunload = function() {};
            window.onunload = function() {};
            var parent = window.opener || window.parent;
            if (!window.xprops || !window.xprops.fallback) {
                parent.location = url;
                win.close();
                return;
            }
            try {
                var frame;
                try {
                    if (typeof parent.onLegacyFallback === "function") {
                        frame = parent;
                    }
                } catch (err) {}
                if (!frame) {
                    for (var i = 0; i < parent.frames.length; i++) {
                        try {
                            if (typeof parent.frames[i].onLegacyFallback === "function") {
                                frame = parent.frames[i];
                                break;
                            }
                        } catch (err) {}
                    }
                }
                if (!frame) {
                    parent.location = url;
                    win.close();
                    return;
                }
                frame.onLegacyFallback(win);
                window.addEventListener("unload", function() {
                    var width = 970;
                    var height = 900;
                    var left = void 0;
                    var top = void 0;
                    if (window.outerWidth) {
                        left = Math.round((window.outerWidth - width) / 2) + window.screenX;
                        top = Math.round((window.outerHeight - height) / 2) + window.screenY;
                    } else if (window.screen.width) {
                        left = Math.round((window.screen.width - width) / 2);
                        top = Math.round((window.screen.height - height) / 2);
                    }
                    window.resizeTo(width, height);
                    window.moveTo(left, top);
                });
                win.location = url;
            } catch (err) {
                parent.location = url;
                win.close();
            }
            window.xprops.fallback(url);
        }
        angular.value("$incontextFallback", $incontextFallback);
        _angular.$rootScope;
    },
    "./js/lib/integration.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$CONTEXT = exports.$integration = exports.$FLOWS = undefined;
        var _$DEFAULT, _$CONTEXT$FULLPAGE, _$CONTEXT$LIGHTBOX, _$integration$init;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        Object.defineProperty(exports, "$integration", {
            enumerable: true,
            get: function get() {
                return _squid.$integration;
            }
        });
        Object.defineProperty(exports, "$CONTEXT", {
            enumerable: true,
            get: function get() {
                return _squid.$CONTEXT;
            }
        });
        var $FLOWS = exports.$FLOWS = {
            CHECKOUT: "CHECKOUT",
            PARTNER: "PARTNER",
            INCONTEXT_LIGHTBOX: "INCONTEXT_LIGHTBOX",
            INCONTEXT_POPUP: "INCONTEXT_POPUP",
            NATIVE_CHECKOUT: "NATIVE_CHECKOUT",
            MESSENGER_BA_INTEGRATION: "MESSENGER_BA_INTEGRATION",
            WPS: "WPS"
        };
        _squid.$integration.init($FLOWS.CHECKOUT, (_$integration$init = {}, _$integration$init[_squid.$DEFAULT] = (_$DEFAULT = {
            ALLOW_AUTH: true,
            ALLOW_COLLECT_DATA: true,
            ALLOW_ONETOUCH_TOKEN_EXCHANGE: false,
            ALLOW_PAYER_ID_RETURN_PARAM: true,
            DONE_PAGE: false,
            FALLBACK: true,
            REDIRECT_TOP: true,
            REDIRECT_QUERY_PARAM: false,
            POST_MESSAGE_PARENT: false
        }, _$DEFAULT[$FLOWS.PARTNER] = {
            FALLBACK: false,
            REDIRECT_TOP: false,
            POST_MESSAGE_PARENT: false
        }, _$DEFAULT[$FLOWS.INCONTEXT_LIGHTBOX] = {
            ALLOW_ONETOUCH_TOKEN_EXCHANGE: true,
            POST_MESSAGE_PARENT: true
        }, _$DEFAULT[$FLOWS.INCONTEXT_POPUP] = {
            POST_MESSAGE_PARENT: true
        }, _$DEFAULT[$FLOWS.WPS] = {
            ALLOW_PAYER_ID_RETURN_PARAM: false,
            DONE_PAGE: true,
            ERROR_AFTER_PAYMENT: true,
            POPULATE_MERCHANT_PREFERENCES: true,
            RETURN_METHOD_BASED_ON_MERCHANT_PREFS: true,
            RETURN_URL_FROM_MERCHANT_PREFS: true,
            SHOW_PAY_NOW_LABEL_ON_REVIEW: true,
            SHOW_SHIPPING_METHOD: true
        }, _$DEFAULT), _$integration$init[_squid.$CONTEXT.FULLPAGE] = (_$CONTEXT$FULLPAGE = {
            CAN_FRAMEBUST: false,
            CAN_FALLBACK_TO_POPUP: false,
            CAN_CLOSE_SELF: false
        }, _$CONTEXT$FULLPAGE[$FLOWS.NATIVE_CHECKOUT] = {
            REDIRECT_QUERY_PARAM: true
        }, _$CONTEXT$FULLPAGE), _$integration$init[_squid.$CONTEXT.LIGHTBOX] = (_$CONTEXT$LIGHTBOX = {
            ALLOW_AUTH: false,
            ALLOW_COLLECT_DATA: false,
            CAN_FRAMEBUST: true,
            CAN_FALLBACK_TO_POPUP: true,
            CAN_CLOSE_SELF: false,
            RETURN_FROM_DATA_COLLECTION_POPUP: false
        }, _$CONTEXT$LIGHTBOX[$FLOWS.MESSENGER_BA_INTEGRATION] = {
            IS_MESSENGER_BA_INTEGRATION: true
        }, _$CONTEXT$LIGHTBOX[$FLOWS.PARTNER] = {
            ALLOW_AUTH: true,
            ALLOW_COLLECT_DATA: true,
            CAN_FALLBACK_TO_POPUP: false,
            POST_MESSAGE_PARENT: false
        }, _$CONTEXT$LIGHTBOX), _$integration$init[_squid.$CONTEXT.POPUP] = {
            ALLOW_AUTH: true,
            ALLOW_COLLECT_DATA: true,
            CAN_FRAMEBUST: true,
            CAN_FALLBACK_TO_POPUP: true,
            CAN_CLOSE_SELF: false
        }, _$integration$init));
        _squid.$integration;
        _squid.$DEFAULT;
        _squid.$CONTEXT;
    },
    "./js/lib/contingency.js": function(module, exports, __webpack_require__) {
        (function(module, __dirname, __filename) {
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _angular2 = _interopRequireDefault(_angular);
            __webpack_require__("./components/squid/dist/index.js");
            __webpack_require__("./components/xo-beaver/dist/logger.js");
            var _miniBrowser = __webpack_require__("./js/lib/miniBrowser.js");
            var _integration = __webpack_require__("./js/lib/integration.js");
            __webpack_require__("./js/lib/fallback.js");
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            (function exportProviders(angular) {
                angular && angular.exportProviders(module, exports, __dirname, __filename);
            })(window.angular);
            _angular2["default"].module().factory("$contingencyHandler", function($Contingency, $logger, $location, $feature, $state, $config, $meta, $window, $util, $populate, $q, $pxp, $AuthModel, $CheckoutCartModel, $CheckoutPayeeModel, $locale, $Forbidden, $rootScope, $FallbackError) {
                function showGenericError(code) {
                    return function() {
                        var encoded = code ? window.btoa(code) : code;
                        $state.go("checkout.genericError", {
                            code: encoded
                        });
                    };
                }
                function route(path) {
                    return function() {
                        $state.go(path, {
                            message: arguments[0]
                        });
                    };
                }
                function forbidden(err) {
                    throw new $Forbidden(err);
                }
                function fallback(product) {
                    return function(err) {
                        throw new $FallbackError({
                            reason: err,
                            product: product
                        });
                    };
                }
                function addMissingTokens(urlQuery) {
                    var payload = {
                        token: $rootScope.token || $meta.token
                    };
                    if ($meta.baToken) {
                        payload.ba_token = $meta.baToken;
                    }
                    return $util.queryStringSplice(urlQuery, payload);
                }
                function handleStepupAuth(code, authModel, step_up_context) {
                    authModel.stepupAuthRequired = true;
                    var reasons = {
                        VERIFY_USER_IDENTITY: "step_up_auth_needed",
                        PAYER_AUTHENTICATION_REQUIRED: "login_required"
                    };
                    if (authModel.remembered) {
                        $logger.debug("PLANNING_STEP_UP_REMEBERED_USER");
                        authModel.logout().then(function() {
                            $state.go("checkout.login", {
                                targetPage: "ONETOUCH_GENERIC_ERROR",
                                source: "FRESH_START"
                            });
                        });
                    } else if (step_up_context && !_angular2["default"].isObject(step_up_context)) {
                        $logger.debug("PLANNING_STEP_UP_LOGIN_USER_TEST_TRAFFIC");
                        var authChallengeNodeUrl = $config.urls.authChallengeNodeUrl;
                        if ($config.deploy.isLocal() || $config.deploy.isStage()) {
                            var hostname = $meta.stage ? $meta.stage : $location.host();
                            authChallengeNodeUrl = authChallengeNodeUrl.replace("www.paypal.com", hostname);
                        }
                        authChallengeNodeUrl = $util.buildURL(authChallengeNodeUrl, {
                            stepupContext: step_up_context,
                            stsReturnUrl: $config.ulMeta.stsReturnUrl,
                            returnUri: $config.ulMeta.authChallengeReturnUri + addMissingTokens($window.location.search) + "&atoSuccess",
                            locale: $locale.lang,
                            flowId: "xo",
                            flowContext: "funding"
                        });
                        if (authChallengeNodeUrl) {
                            $util.redirect(authChallengeNodeUrl);
                        }
                    } else {
                        $logger.debug("PLANNING_STEP_UP_LOGIN_USER_CONTROL_TRAFFIC");
                        throw new $FallbackError({
                            reason: reasons[code],
                            product: "ux"
                        });
                    }
                }
                function handleMerchantBANocards(contingency) {
                    var FALL_BACK_LIST = [ "INSTANT_FUNDING_SOURCE_UPSELL_NEEDED", "ELV_DECLINE", "NEED_CREDIT_CARD", "NEED_CONFIRMED_CARD", "NEED_AUTHENTICATED_CARD", "NEED_CREDIT_CARD_OR_BANK_ACCOUNT", "EXPIRED_CREDIT_CARD" ];
                    if (FALL_BACK_LIST.indexOf(contingency.message) !== -1) {
                        var models = {};
                        return $populate(models, {
                            checkoutCart: $CheckoutCartModel.instance($rootScope.token),
                            payee: $CheckoutPayeeModel.instance($rootScope.token)
                        }).then(function() {
                            return $pxp("xo_hermes_ba_nocards", {
                                uid: models.payee.merchant.id
                            }, "xo_hermesnode_ba_nocards_whitelist_treatment").then(function(result) {
                                if (result && models.checkoutCart.isBilling()) {
                                    $logger.info("ba_nocard_contingency_triggered");
                                    throw new $FallbackError({
                                        reason: "fallback_merchant_BA_nocards",
                                        product: "ux"
                                    });
                                } else {
                                    return $q.when();
                                }
                            });
                        });
                    } else {
                        return $q.when();
                    }
                }
                return function(contingency) {
                    $logger.warn("contingency_handler", contingency);
                    return handleMerchantBANocards(contingency).then(function() {
                        return contingency.handle({
                            ECONSENT_REQUIRED: route("checkout.econsent"),
                            TRAVEL_RULE_ID_REQUIRED: route("checkout.travelRule"),
                            INSTANT_FUNDING_SOURCE_UPSELL_NEEDED: route("checkout.pageAddCardMeft.addCardFlow.addCard"),
                            ELV_DECLINE: route("checkout.pageAddCard.addCardFlow.addCard"),
                            NEED_CREDIT_CARD: route("checkout.pageAddCard.addCardFlow.addCard"),
                            NEED_CONFIRMED_CARD: route("checkout.pageAddCard.addCardFlow.addCard"),
                            NEED_AUTHENTICATED_CARD: route("checkout.updateCard.addCardFlow.addCard"),
                            NEED_CREDIT_CARD_OR_BANK_ACCOUNT: route("checkout.pageAddFi.bank.add"),
                            EXPIRED_CREDIT_CARD: route("checkout.updateCard.addCardFlow.addCard"),
                            NEGATIVE_BALANCE_RECOVERY: route("checkout.negativeBalanceRecovery"),
                            PHONE_NUMBER_REQUIRED: route("checkout.addPhone"),
                            SEPA_MANDATE_ACCEPTANCE_NEEDED: route("checkout.review"),
                            TAX_ID_REQUIRED: route("checkout.addTaxId"),
                            NEED_SHIPPING_ADDRESS: route("checkout.pageAddShipping.addShipping"),
                            NEED_DEBIT_CARD: route("checkout.pageAddCard.addCardFlow.addCard"),
                            EXPIRED_DEBIT_CARD: route("checkout.updateCard.addCardFlow.addCard"),
                            PAYER_AUTHENTICATION_REQUIRED: function PAYER_AUTHENTICATION_REQUIRED() {
                                $state.go("checkout.login", {
                                    targetPage: "PAYER_AUTHENTICATION_REQUIRED"
                                });
                            },
                            RESTRICTED_USER: showGenericError("RESTRICTED_USER"),
                            PAYER_ACCOUNT_RESTRICTED: showGenericError("RESTRICTED_USER"),
                            PAYEE_BLOCKED_TRANSACTION: showGenericError("PAYMENT_DENIED"),
                            PAYMENT_ALREADY_DONE: showGenericError("PAYMENT_ALREADY_DONE"),
                            DUPLICATE_INVOICE_ID: showGenericError("DUPLICATE_INVOICE_ID"),
                            PAYMENT_DENIED: showGenericError("PAYMENT_DENIED"),
                            PAYEE_ACCOUNT_RESTRICTED: showGenericError("RESTRICTED_USER"),
                            INVALID_RESOURCE_ID: showGenericError("INVALID_RESOURCE_ID"),
                            EXPIRED_SESSION: showGenericError("EXPIRED_SESSION"),
                            PAYER_CANNOT_PAY: showGenericError("PAYER_CANNOT_PAY"),
                            TRANSACTION_RECEIVING_LIMIT_EXCEEDED: showGenericError("PAYER_CANNOT_PAY"),
                            PAYER_COUNTRY_NOT_ALLOWED: showGenericError("PAYER_COUNTRY_NOT_ALLOWED"),
                            PAYER_COUNTRY_NOT_ALLOWED_DCF: showGenericError("HERMES_PAYER_COUNTRY_NOT_ALLOWED_DCF"),
                            PAYER_COUNTRY_NOT_ENABLED: showGenericError("PAYER_COUNTRY_NOT_ENABLED"),
                            PAYER_LOGIN_COUNTRY_NOT_ALLOWED: showGenericError("PAYER_LOGIN_COUNTRY_NOT_ALLOWED"),
                            GAMING_FUNDING_SOURCE_VALIDATION_FAILED: showGenericError("GAMING_FUNDING_SOURCE_VALIDATION_FAILED"),
                            COMPLIANCE_VIOLATION: showGenericError("COMPLIANCE_VIOLATION"),
                            DOMESTIC_TRANSACTION_REQUIRED: showGenericError("DOMESTIC_TRANSACTION_REQUIRED"),
                            INTERNAL_SERVICE_ERROR: showGenericError("TRANSACTION_REFUSED"),
                            NEGATIVE_BALANCE_TRANSACTION_REFUSED: showGenericError("NEGATIVE_BALANCE_TRANSACTION_REFUSED"),
                            ACCOUNT_CANNOT_BE_FETCHED: showGenericError("ACCOUNT_CANNOT_BE_FETCHED"),
                            BAD_RESPONSE: showGenericError("DEFAULT"),
                            TRANSACTION_REFUSED_LEGACY_FALLBACK: showGenericError("TRANSACTION_REFUSED"),
                            RISK_DENIED: showGenericError("TRANSACTION_REFUSED"),
                            UNSUPPORTED_COUNTRY: showGenericError("UNSUPPORTED_COUNTRY"),
                            AGREEMENT_ALREADY_CREATED: showGenericError("DEFAULT"),
                            PAYMENT_NOT_APPROVED_FOR_EXECUTION: showGenericError("DEFAULT"),
                            PAYER_ACCOUNT_LOCKED_OR_CLOSED: showGenericError("DEFAULT"),
                            WALLET_PREFERENCE_SET_ERROR: showGenericError("DEFAULT"),
                            ISSUANCE_PIN_SERVICE_ERROR: showGenericError("DEFAULT"),
                            UNSUPPORTED_PAYEE_CURRENCY: $feature("unsupportedPayeeCurrency") ? showGenericError("UNSUPPORTED_PAYEE_CURRENCY") : fallback("ux"),
                            SENDING_LIMIT_EXCEEDED: fallback("ux"),
                            PAYMENT_CANNOT_BE_INITIATED: fallback("ux"),
                            PERMISSION_DENIED: fallback("ux"),
                            INVALID_TOKEN: fallback("ux"),
                            INVALID_FUNDING_OPTION: fallback("ux"),
                            VALIDATION_ERROR: fallback("ux"),
                            SHIPPING_ADDRESS_INVALID: fallback("ux"),
                            INVALID_ARGUMENT: fallback("ux"),
                            CREDIT_PAYMENT_NOT_ALLOWED: fallback("ux"),
                            PAYEE_ACCOUNT_LOCKED_OR_CLOSED: fallback("ux"),
                            MALFORMED_REQUEST: fallback("ux"),
                            TWOFA_INACTIVE: fallback("ux"),
                            ERROR: fallback("ux"),
                            ISSUER_DECLINE: fallback("ux"),
                            UNSUPPORTED_CUP_SECURECARD: fallback("ux"),
                            BUYER_NOT_SET: forbidden,
                            TRANSACTION_REFUSED: function TRANSACTION_REFUSED(message, data) {
                                var clearedRT = data.clearedRT;
                                if (clearedRT) {
                                    $logger.info("checkout_fpti", {
                                        from: "CONTINGENCY",
                                        to: "process_fallback",
                                        routing_reason: "TRANSACTION_REFUSED"
                                    });
                                }
                                $AuthModel.instance().logout()["finally"](showGenericError("TRANSACTION_REFUSED"));
                            },
                            PAYER_INVALID_FOR_PAYMENT: function PAYER_INVALID_FOR_PAYMENT() {
                                return $AuthModel.instance().logout()["finally"](function() {
                                    return $state.go("checkout.login", {}, {
                                        reload: true
                                    });
                                });
                            },
                            CANNOT_PAY_SELF: function CANNOT_PAY_SELF() {
                                $AuthModel.instance().meta.selfPay = true;
                                $rootScope.contingency = {};
                                $rootScope.contingency.message = "CANNOT_PAY_SELF";
                                return $AuthModel.instance().logout()["finally"](function() {
                                    return $state.go($state.current, {}, {
                                        reload: true
                                    });
                                });
                            },
                            VERIFY_USER_IDENTITY: function VERIFY_USER_IDENTITY(message, data) {
                                var clearedRT = data.clearedRT;
                                if (clearedRT) {
                                    $logger.info("checkout_fpti", {
                                        from: "CONTINGENCY",
                                        to: "process_fallback",
                                        routing_reason: "VERIFY_USER_IDENTITY"
                                    });
                                }
                                return handleStepupAuth("VERIFY_USER_IDENTITY", $AuthModel.instance(), data.step_up_context);
                            },
                            LOGIN_CONTINGENCY: function LOGIN_CONTINGENCY() {
                                if (_integration.$integration.getConfig("CAN_FRAMEBUST")) {
                                    return _miniBrowser.$miniBrowser.frameBust($rootScope.token);
                                }
                                return fallback("ux");
                            },
                            DEFAULT: function logUnhandledContingency() {
                                $logger.warn("ui_unhandled_contingency_" + this.message);
                                throw new $FallbackError({
                                    reason: "unhandled_contingency",
                                    product: "ux"
                                });
                            }
                        });
                    });
                };
            });
            _miniBrowser.$miniBrowser;
            _integration.$integration;
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "js/lib", "js/lib/contingency.js");
    },
    "./js/lib/miniBrowser.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$miniBrowser = undefined;
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _util = __webpack_require__("./components/xo-return-to-merchant/dist/util.js");
        var _integration = __webpack_require__("./js/lib/integration.js");
        var _error = __webpack_require__("./js/lib/error.js");
        var _$stateGo = _uiRouter.$state.go;
        _uiRouter.$state.go = function(name) {
            var _this = this;
            if (!window.xchild) {
                return _$stateGo.apply(this, arguments);
            }
            var state = _uiRouter.$state.get(name);
            if (!state.loginRequired) {
                return _$stateGo.apply(this, arguments);
            }
            if (_integration.$integration.getConfig("ALLOW_COLLECT_DATA")) {
                return _$stateGo.apply(this, arguments);
            }
            var forceIframe = window.paypal && window.paypal.forceIframe && window.paypal.forceIframe();
            if (forceIframe) {
                return _$stateGo.apply(this, arguments);
            }
            if (!_integration.$integration.getConfig("CAN_FALLBACK_TO_POPUP")) {
                throw _integration.$integration.error("Can not fallback to popup for data collection");
            }
            window.xchild.hide();
            var url = window.location.href.split("#")[0] + "#/" + state.name.replace(/\./g, "/");
            var xprops = _extends({}, window.xprops);
            xprops.url = url;
            window.ppxo.Checkout.renderPopupTo(window.xchild.getParentRenderWindow(), xprops)["catch"](function(err) {
                if (window.ppxo.PopupOpenError && err instanceof window.ppxo.PopupOpenError) {
                    window.xchild.show();
                    _logger.$logger.warn("framebust_from_" + name.replace(/[^a-zA-Z0-9]+/g, "_"));
                    return _$stateGo.call(_this, "checkout.framebust", {
                        action: "open",
                        url: url
                    });
                }
                (0, _error.$exceptionHandler)(err);
            });
        };
        var $miniBrowser = exports.$miniBrowser = {
            flags: {},
            config: {},
            isMiniBrowser: function isMiniBrowser() {
                return window.name && window.name.indexOf("PPFrame") === 0 && _squid.$util.isPopup() || _squid.$util.param("incontext") === "1" || window.xchild && _squid.$util.isPopup();
            },
            isFramed: function isFramed() {
                return _squid.$util.isIFrame();
            },
            getPartnerIntegration: function getPartnerIntegration(token) {
                return _squid.$promise.call(function() {
                    if (window.name === "PPFrameRedirect" || _squid.$util.param("nolegacy") === "1") {
                        return true;
                    }
                    return _checkout.$CheckoutCartModel.instance(token).retrieve().then(function(cart) {
                        return Boolean(cart.partnerIntegration);
                    });
                });
            },
            getNativeCheckoutIntegration: function getNativeCheckoutIntegration(token) {
                return _squid.$promise.call(function() {
                    if (_squid.$util.param("native_xo") === "1") {
                        return true;
                    }
                    return false;
                });
            },
            getMessengerBAIntegration: function getMessengerBAIntegration(token) {
                return _squid.$promise.call(function() {
                    if (window.xprops && window.xprops.experience && window.xprops.experience.messenger) {
                        _logger.$logger.info("getMessengerBAIntegration == true");
                        return true;
                    }
                    return false;
                });
            },
            getDirectIntegration: function getDirectIntegration(token) {
                return _squid.$promise.call(function() {
                    if (_squid.$util.param("incontext")) {
                        return true;
                    }
                    if (this.isMiniBrowser() || this.isFramed()) {
                        return true;
                    }
                    if (window.location.pathname.indexOf("/checkoutnow") > -1 || window.location.pathname.indexOf("/webapps/hermes") > -1) {
                        return true;
                    }
                    return this.getPartnerIntegration(token);
                }.bind(this));
            },
            getWPSIntegration: function getWPSIntegration(token) {
                return _checkout.$CheckoutAppDataModel.instance(token).retrieve().then(function(appData) {
                    var isWPS = appData.doec_on_approve();
                    _angular.$rootScope.invoice = appData.flags.is_invoice_flow;
                    _angular.$rootScope.wps = isWPS;
                    if (isWPS) {
                        _logger.$logger.info("hermes_wps_flow", {
                            token: _angular.$rootScope.token
                        });
                    } else {
                        _logger.$logger.info("hermes_xo_order_flow", {
                            token: _angular.$rootScope.token
                        });
                    }
                    return isWPS;
                });
            },
            getFlags: function getFlags(token) {
                _logger.$logger.info("miniBrowser_getFlags");
                return _squid.$promise.hash({
                    isMiniBrowser: this.isMiniBrowser(),
                    isFramed: this.isFramed(),
                    isPartnerIntegration: this.getPartnerIntegration(token),
                    isDirectIntegration: this.getDirectIntegration(token),
                    isNativeCheckout: this.getNativeCheckoutIntegration(token),
                    isMessengerBAIntegration: this.getMessengerBAIntegration(token),
                    isWPSIntegration: this.getWPSIntegration(token)
                }).then(function(flags) {
                    _angular.$rootScope.miniBrowser = flags.isMiniBrowser;
                    _angular.$rootScope.partnerIntegration = flags.isPartnerIntegration;
                    if (flags.isPartnerIntegration && !window.xchild) {
                        _integration.$integration.setFlow(_integration.$FLOWS.PARTNER);
                    } else if (flags.isFramed) {
                        _integration.$integration.setFlow(_integration.$FLOWS.INCONTEXT_LIGHTBOX);
                        if (flags.isMessengerBAIntegration) {
                            _integration.$integration.setFlow(_integration.$FLOWS.MESSENGER_BA_INTEGRATION);
                            _logger.$logger.info("$integration.setFlow($FLOWS.MESSENGER_BA_INTEGRATION)");
                        }
                    } else if (flags.isMiniBrowser) {
                        _integration.$integration.setFlow(_integration.$FLOWS.INCONTEXT_POPUP);
                    } else if (flags.isNativeCheckout) {
                        _integration.$integration.setFlow(_integration.$FLOWS.NATIVE_CHECKOUT);
                    } else if (flags.isWPSIntegration) {
                        _integration.$integration.setFlow(_integration.$FLOWS.WPS);
                    } else {
                        _integration.$integration.setFlow(_integration.$FLOWS.CHECKOUT);
                    }
                    return flags;
                });
            },
            init: function init(token) {
                var _this2 = this;
                _logger.$logger.info("miniBrowser_init");
                return _squid.$promise.sequential([ function() {
                    return _this2.enableAutoResize();
                }, function() {
                    return _this2.getFlags(token);
                }, function() {
                    return _this2.logIntegration(token);
                }, function() {
                    return _this2.sendPostMessage(token);
                }, function() {
                    return _this2.handleWindowOpenerClose();
                } ]);
            },
            enableAutoResize: function enableAutoResize() {
                _angular.$rootScope.$on("allLoaded", function() {
                    if (window.xchild && window.xchild.enableAutoResize) {
                        window.xchild.enableAutoResize();
                    }
                });
            },
            logIntegration: function logIntegration(token) {
                _logger.$logger.info("miniBrowser_logIntegration");
                return this.getFlags(token).then(function(flags) {
                    var match = window.name.match(/PPFrame(\w+)/);
                    var guid = match && match[1];
                    if (guid) {
                        _logger.$logger.info("integration_guid", {
                            guid: guid
                        });
                    }
                    if (window.xchild || guid) {
                        var beacon = new Image();
                        beacon.src = "/webapps/hermes/api/logger?event=ppxo_uid_token&uid=" + (window.xprops ? window.xprops.uid : guid) + "&token=" + token;
                    }
                    _logger.$logger.info(flags.isMiniBrowser ? "minibrowser_flow" : "non_minibrowser_flow");
                    _logger.$logger.info(flags.isFramed ? "framed_flow" : "non_framed_flow");
                    _logger.$logger.info(flags.isDirectIntegration ? "direct_integration_flow" : "non_direct_integration_flow");
                    _logger.$logger.info(flags.isPartnerIntegration ? "partner_integration_flow" : "non_partner_integration_flow");
                });
            },
            handleWindowOpenerClose: function handleWindowOpenerClose() {
                _logger.$logger.info("miniBrowser_handleWindowOpenerClose");
                if (_integration.$integration.isContext(_integration.$CONTEXT.POPUP)) {
                    var interval = setInterval(function() {
                        try {
                            if (!window.opener || window.opener.closed) {
                                clearInterval(interval);
                                _logger.$logger.info("window_opener_closed");
                            }
                        } catch (err) {}
                    }, 50);
                }
            },
            sendPostMessage: function sendPostMessage(token) {
                if (window.xchild) {
                    return;
                }
                return _squid.$promise.hash({
                    isPartnerIntegration: this.getPartnerIntegration(token),
                    checkoutAppData: _checkout.$CheckoutAppDataModel.instance(token).retrieve()
                }).then(function(data) {
                    if (!_integration.$integration.getConfig("POST_MESSAGE_PARENT")) {
                        return;
                    }
                    var msg = void 0;
                    try {
                        msg = {
                            operation: "init",
                            cancelUrl: data.checkoutAppData.urls.cancel_url,
                            landingUrl: window.location.href,
                            secureWindowmsg: _squid.$locale.content.scripts.secureWindowmsg
                        };
                    } catch (err) {
                        return _logger.$logger.error("minibrowser_msg_construction_failed", {
                            error: err
                        });
                    }
                    if (!_util.$ReturnToMerchant.postToMerchant(msg)) {
                        _logger.$logger.error("minibrowser_post_failed");
                    }
                });
            },
            frameBust: function frameBust(token) {
                return _squid.$promise.hash({
                    isFramed: this.isFramed()
                }).then(function(flags) {
                    if (!flags.isFramed) {
                        return;
                    }
                    var forceIframe = window.paypal && window.paypal.forceIframe && window.paypal.forceIframe();
                    if (forceIframe) {
                        return;
                    }
                    if (window.xchild) {
                        _logger.$logger.info("frame_bust_xchild");
                        _uiRouter.$state.go("checkout.framebust", {
                            action: "open",
                            url: window.location.href.split("#")[0]
                        });
                    } else {
                        _logger.$logger.info("frame_bust");
                        _squid.$util.redirect(window.location.href);
                    }
                });
            }
        };
        angular.value("$miniBrowser", $miniBrowser);
        _angular.$rootScope;
        _logger.$logger;
        _squid.$promise;
        _squid.$util;
        _squid.$locale;
        _uiRouter.$state;
        _checkout.$CheckoutAppDataModel;
        _checkout.$CheckoutCartModel;
        _util.$ReturnToMerchant;
        _integration.$integration;
        _integration.$FLOWS;
        _integration.$CONTEXT;
        _error.$exceptionHandler;
    },
    "./js/lib/metaBuilder.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$metaBuilder = undefined;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _model = __webpack_require__("./components/xo-tracking/dist/model.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        function buildMeta() {
            return {
                token: _angular.$rootScope.token || _squid.$config.token || _squid.$meta.token || _squid.$util.param("token"),
                calc: _model.$CalDataModel.getCalCorrId(),
                csci: _model.$CalDataModel.getUUID(),
                locale: {
                    country: _squid.$locale && _squid.$locale.country,
                    language: _squid.$locale && _squid.$locale.lang
                },
                state: "ui_" + (_angular.$rootScope.currentState || "checkout_init"),
                app_name: "hermesnodeweb",
                baToken: _squid.$meta.baToken
            };
        }
        function buildContext() {
            return {
                locale: {
                    country: _squid.$locale && _squid.$locale.country,
                    language: _squid.$locale && _squid.$locale.lang
                }
            };
        }
        _squid.$Api.registerMetaBuilder(buildMeta);
        var $metaBuilder = exports.$metaBuilder = {
            build: buildMeta,
            buildContext: buildContext
        };
        angular.value("$metaBuilder", $metaBuilder);
        _angular.$rootScope;
        _model.$CalDataModel;
        _squid.$util;
        _squid.$meta;
        _squid.$Api;
        _squid.$locale;
        _squid.$config;
    },
    "./components/xo-tracking/dist/model.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/node-uuid/uuid.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid, uuid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("tracking.model", [ "squid" ]).constant("$FptiConstants", {
                    buznameMap: {
                        country: {
                            placeHolder: "glb",
                            fptiKey: "ccpg"
                        },
                        flowgatename: {
                            placeHolder: "",
                            fptiKey: "fltp"
                        },
                        flowname: {
                            placeHolder: "ec:hermes:",
                            fptiKey: "flnm"
                        },
                        hier1: {
                            placeHolder: "main_ec_hermes_",
                            fptiKey: "shir"
                        },
                        inout: {
                            placeHolder: "inout",
                            fptiKey: "lgin"
                        },
                        pagename: {
                            placeHolder: "main:ec:hermes",
                            fptiKey: "pgrp"
                        },
                        pagename2: {
                            placeHolder: "main:ec:hermes",
                            fptiKey: "page"
                        },
                        version: {
                            placeHolder: "hermes",
                            fptiKey: "vers"
                        }
                    },
                    fptiKeys: {
                        businessType: "bztp",
                        correlationId: "calc",
                        countryOfPage: "ccpg",
                        cust: "cust",
                        errorCode: "eccd",
                        fieldError: "erfd",
                        flowgatename: "fltp",
                        flowname: "flnm",
                        locale: "rsta",
                        loggedIn: "lgin",
                        merchantId: "mrid",
                        merchantType: "mbtp",
                        pageError: "erpg",
                        pageGoal: "goal",
                        pageGroup: "pgrp",
                        pageName: "page",
                        pageQualifer: "qual",
                        pageStartTime: "pgst",
                        pageTechnologyFlag: "pgtf",
                        paymentFlowId: "pfid",
                        rLogId: "teal",
                        sessionId: "fpti",
                        siteHierarchy: "shir",
                        sourceCi: "s",
                        tealeaf: "teal",
                        templateName: "tmpl",
                        transition_time: "transition_time",
                        uuid: "csci",
                        version: "vers",
                        visitorId: "vid",
                        ecToken: "fltk",
                        pxpExpSelected: "xe",
                        pxpTreatementSelected: "xt",
                        pxpQualifiedTreatment: "qt",
                        pxpContextId: "qc",
                        dc: "dc",
                        az: "az",
                        comp: "comp"
                    },
                    landing_page: {
                        login: "LOGIN",
                        econsent: "eConsent",
                        review: "Review",
                        error_page: "error_page",
                        add_card: "add_card",
                        add_bank: "add_bank",
                        billing: "billing",
                        done_page: "done_page",
                        shoppingCart: "shoppingCart",
                        emptyCart: "emptyCart",
                        soldout: "soldout",
                        openButton: "openButton"
                    },
                    stateName: {
                        checkout_login: "login",
                        checkout_genericError: "error_page",
                        checkout_fastlogin: "login",
                        checkout_econsent: "econsent",
                        checkout_review: "review",
                        checkout_pageAddCard_addCardFlow_addCard: "add_card",
                        checkout_updateCard_addCardFlow_addCard: "add_card",
                        checkout_pageAddFi_bank_add: "add_bank",
                        guest: "billing",
                        checkout_done: "done_page",
                        checkout_guest: "billing",
                        checkout_signup: "billing",
                        guestupgrade_genericError: "error_page",
                        checkout_multistepsignup_multistepsignupaddcard: "billing",
                        checkout_shoppingCart: "shoppingCart",
                        checkout_emptyCart: "emptyCart",
                        checkout_soldout: "soldout",
                        checkout_openButton: "openButton"
                    }
                }).factory("$FptiDataModel", function($Class, $FptiConstants, $util, $config) {
                    var productConfig = {};
                    productConfig[$FptiConstants.fptiKeys.sourceCi] = "ci";
                    productConfig[$FptiConstants.fptiKeys.pageTechnologyFlag] = "NodeJS";
                    return $Class.extend("FptiDataModel", {
                        init: function init() {
                            this._dataObj = angular.extend({}, productConfig);
                            this._decoratorList = [];
                        },
                        decorators: {
                            buzname: function buzname(trackingData, pageQualifier, isInContext, productOverride) {
                                if (!trackingData) {
                                    return;
                                }
                                var buzname = trackingData.buzname;
                                if (!buzname) {
                                    return;
                                }
                                var buznameDiff = buzname[pageQualifier];
                                if (!buznameDiff) {
                                    return;
                                }
                                var dataObj = this._dataObj;
                                var buznameMap = $FptiConstants.buznameMap;
                                var placeHolderConfig = $config && $config.fpti && $config.fpti.buznameEntryPlaceHolder;
                                Object.keys(buznameMap).forEach(function(key) {
                                    var buznameEntry = buznameMap[key];
                                    var fptiKey = buznameEntry.fptiKey;
                                    var placeHolder = buznameEntry.placeHolder;
                                    if (buznameDiff[key]) {
                                        if (placeHolderConfig && placeHolderConfig[key]) {
                                            placeHolder = placeHolderConfig[key];
                                        }
                                        if (productOverride) {
                                            var _placeHolder$split = placeHolder.split(":"), main = _placeHolder$split[0], hermes = _placeHolder$split[2];
                                            placeHolder = main + ":" + productOverride + ":" + hermes;
                                        }
                                        dataObj[fptiKey] = buznameDiff[key].replace("%", placeHolder);
                                    } else {
                                        dataObj[fptiKey] = placeHolder;
                                    }
                                });
                                dataObj[$FptiConstants.fptiKeys.pageQualifer] = pageQualifier;
                            },
                            locale: function locale(_locale) {
                                if (_locale && _locale.country) {
                                    this._dataObj[$FptiConstants.fptiKeys.locale] = _locale.country;
                                }
                            },
                            pxptrackingdata: function pxptrackingdata(pxpData) {
                                var qt = [];
                                var qc = [];
                                var xe = [];
                                var xt = [];
                                $util.some(pxpData, function(trackInfo) {
                                    var match = trackInfo && trackInfo.tracking_tags && trackInfo.tracking_tags.match("\\bqt=([^;]+);");
                                    if (match) {
                                        qt.push(match[1]);
                                    }
                                    match = trackInfo && trackInfo.tracking_tags && trackInfo.tracking_tags.match("\\bqc=([^;]+);");
                                    if (match) {
                                        qc.push(match[1]);
                                    }
                                    $util.some(trackInfo.treatments, function(treatment) {
                                        xe.push(treatment.experiment_id);
                                        xt.push(treatment.treatment_id);
                                    });
                                });
                                this._dataObj[$FptiConstants.fptiKeys.pxpQualifiedTreatment] = qt.join(",");
                                this._dataObj[$FptiConstants.fptiKeys.pxpContextId] = qc.join(",");
                                this._dataObj[$FptiConstants.fptiKeys.pxpExpSelected] = xe.join(",");
                                this._dataObj[$FptiConstants.fptiKeys.pxpTreatementSelected] = xt.join(",");
                            },
                            templateName: function templateName(trackingData, pageQualifier, isInContext) {
                                if (trackingData && trackingData.templateName) {
                                    var templateName = (trackingData.templateName || "") + (pageQualifier ? ":" + pageQualifier : "");
                                    this._dataObj[$FptiConstants.fptiKeys.templateName] = templateName;
                                }
                            },
                            fieldError: function fieldError(err) {
                                if (err && err.type === "fieldError") {
                                    this._dataObj[$FptiConstants.fptiKeys.fieldError] = err.field;
                                    this._dataObj[$FptiConstants.fptiKeys.errorCode] = err.code;
                                }
                            },
                            pageError: function pageError(err) {
                                if (err && err.type === "pageError") {
                                    this._dataObj[$FptiConstants.fptiKeys.pageError] = err.msg;
                                    this._dataObj[$FptiConstants.fptiKeys.errorCode] = err.code;
                                }
                            }
                        },
                        decorate: function decorate(name) {
                            this._decoratorList.push({
                                name: name,
                                params: Array.prototype.slice.call(arguments, 1)
                            });
                            return this;
                        },
                        getDataObject: function getDataObject(isInContext) {
                            var i;
                            var decorator;
                            for (i = 0; i < this._decoratorList.length; i++) {
                                decorator = this._decoratorList[i];
                                if (!decorator) {
                                    continue;
                                }
                                var name = decorator.name;
                                var params = decorator.params;
                                if (angular.isFunction(this.decorators[name])) {
                                    this.decorators[name].apply(this, params);
                                } else {
                                    var fptiKey = $FptiConstants.fptiKeys[name];
                                    if (fptiKey && params && params.length > 0) {
                                        this._dataObj[fptiKey] = params[0];
                                    }
                                }
                            }
                            var dataObj = this._dataObj;
                            if (isInContext) {
                                Object.keys(dataObj).forEach(function(k) {
                                    if (angular.isString(dataObj[k])) {
                                        dataObj[k] = dataObj[k].replace("fullpage", "incontext");
                                    }
                                });
                            }
                            return this._dataObj;
                        }
                    });
                }).factory("$CalDataModel", function($Model) {
                    var uuid_v4_mask = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
                    var uuid_v1_mask = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
                    function _generateCorrelationId() {
                        var uidRandomArr = (uuid.v4() || uuid_v4_mask).split("-");
                        var uidTime = (uuid.v1() || uuid_v1_mask).split("-");
                        return uidTime[0] + uidRandomArr[0].substr(0, 5);
                    }
                    function _generateUUID() {
                        return (uuid.v4() || uuid_v4_mask).replace(/-/g, "");
                    }
                    var CalModel = $Model.extend({
                        _calCorrId: _generateCorrelationId(),
                        _uuid: _generateUUID(),
                        generateCalCorrId: function generateCalCorrId() {
                            this._calCorrId = _generateCorrelationId();
                        },
                        generateUUID: function generateUUID() {
                            this._uuid = _generateUUID();
                        },
                        generateMetaIds: function generateMetaIds() {
                            this.generateCalCorrId();
                            this.generateUUID();
                        },
                        getCalCorrId: function getCalCorrId() {
                            return this._calCorrId;
                        },
                        getUUID: function getUUID() {
                            return this._uuid;
                        }
                    });
                    return new CalModel();
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-tracking/dist", "components/xo-tracking/dist/model.js");
    },
    "./components/node-uuid/uuid.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_RESULT__;
        (function(console) {
            (function(_window) {
                var _rng, _mathRNG, _nodeRNG, _whatwgRNG, _previousRoot;
                function setupBrowser() {
                    var _crypto = _window.crypto || _window.msCrypto;
                    if (!_rng && _crypto && _crypto.getRandomValues) {
                        try {
                            var _rnds8 = new Uint8Array(16);
                            _whatwgRNG = _rng = function whatwgRNG() {
                                _crypto.getRandomValues(_rnds8);
                                return _rnds8;
                            };
                            _rng();
                        } catch (e) {}
                    }
                    if (!_rng) {
                        var _rnds = new Array(16);
                        _mathRNG = _rng = function _rng() {
                            for (var i = 0, r; i < 16; i++) {
                                if ((i & 3) === 0) {
                                    r = Math.random() * 4294967296;
                                }
                                _rnds[i] = r >>> ((i & 3) << 3) & 255;
                            }
                            return _rnds;
                        };
                        if ("undefined" !== typeof console && console.warn) {
                            console.warn("[SECURITY] node-uuid: crypto not usable, falling back to insecure Math.random()");
                        }
                    }
                }
                function setupNode() {
                    if (true) {
                        try {
                            var _rb = __webpack_require__(!function webpackMissingModule() {
                                var e = new Error('Cannot find module "crypto"');
                                e.code = "MODULE_NOT_FOUND";
                                throw e;
                            }()).randomBytes;
                            _nodeRNG = _rng = _rb && function() {
                                return _rb(16);
                            };
                            _rng();
                        } catch (e) {}
                    }
                }
                if (_window) {
                    setupBrowser();
                } else {
                    setupNode();
                }
                var BufferClass = "function" === typeof Buffer ? Buffer : Array;
                var _byteToHex = [];
                var _hexToByte = {};
                for (var i = 0; i < 256; i++) {
                    _byteToHex[i] = (i + 256).toString(16).substr(1);
                    _hexToByte[_byteToHex[i]] = i;
                }
                function parse(s, buf, offset) {
                    var i = buf && offset || 0, ii = 0;
                    buf = buf || [];
                    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
                        if (ii < 16) {
                            buf[i + ii++] = _hexToByte[oct];
                        }
                    });
                    while (ii < 16) {
                        buf[i + ii++] = 0;
                    }
                    return buf;
                }
                function unparse(buf, offset) {
                    var i = offset || 0, bth = _byteToHex;
                    return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
                }
                var _seedBytes = _rng();
                var _nodeId = [ _seedBytes[0] | 1, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5] ];
                var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 16383;
                var _lastMSecs = 0, _lastNSecs = 0;
                function v1(options, buf, offset) {
                    var i = buf && offset || 0;
                    var b = buf || [];
                    options = options || {};
                    var clockseq = options.clockseq != null ? options.clockseq : _clockseq;
                    var msecs = options.msecs != null ? options.msecs : new Date().getTime();
                    var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;
                    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
                    if (dt < 0 && options.clockseq == null) {
                        clockseq = clockseq + 1 & 16383;
                    }
                    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {
                        nsecs = 0;
                    }
                    if (nsecs >= 1e4) {
                        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
                    }
                    _lastMSecs = msecs;
                    _lastNSecs = nsecs;
                    _clockseq = clockseq;
                    msecs += 122192928e5;
                    var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
                    b[i++] = tl >>> 24 & 255;
                    b[i++] = tl >>> 16 & 255;
                    b[i++] = tl >>> 8 & 255;
                    b[i++] = tl & 255;
                    var tmh = msecs / 4294967296 * 1e4 & 268435455;
                    b[i++] = tmh >>> 8 & 255;
                    b[i++] = tmh & 255;
                    b[i++] = tmh >>> 24 & 15 | 16;
                    b[i++] = tmh >>> 16 & 255;
                    b[i++] = clockseq >>> 8 | 128;
                    b[i++] = clockseq & 255;
                    var node = options.node || _nodeId;
                    for (var n = 0; n < 6; n++) {
                        b[i + n] = node[n];
                    }
                    return buf ? buf : unparse(b);
                }
                function v4(options, buf, offset) {
                    var i = buf && offset || 0;
                    if (typeof options === "string") {
                        buf = options === "binary" ? new BufferClass(16) : null;
                        options = null;
                    }
                    options = options || {};
                    var rnds = options.random || (options.rng || _rng)();
                    rnds[6] = rnds[6] & 15 | 64;
                    rnds[8] = rnds[8] & 63 | 128;
                    if (buf) {
                        for (var ii = 0; ii < 16; ii++) {
                            buf[i + ii] = rnds[ii];
                        }
                    }
                    return buf || unparse(rnds);
                }
                var uuid = v4;
                uuid.v1 = v1;
                uuid.v4 = v4;
                uuid.parse = parse;
                uuid.unparse = unparse;
                uuid.BufferClass = BufferClass;
                uuid._rng = _rng;
                uuid._mathRNG = _mathRNG;
                uuid._nodeRNG = _nodeRNG;
                uuid._whatwgRNG = _whatwgRNG;
                if ("undefined" !== typeof module && module.exports) {
                    module.exports = uuid;
                } else if (true) {
                    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
                        return uuid;
                    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                } else {
                    _previousRoot = _window.uuid;
                    uuid.noConflict = function() {
                        _window.uuid = _previousRoot;
                        return uuid;
                    };
                    _window.uuid = uuid;
                }
            })("undefined" !== typeof window ? window : null);
        }).call(exports, __webpack_require__("../node_modules/console-browserify/index.js"));
    },
    "./js/lib/middleware.js": function(module, exports, __webpack_require__) {
        (function(module, __dirname, __filename) {
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _angular2 = _interopRequireDefault(_angular);
            var _integration = __webpack_require__("./js/lib/integration.js");
            __webpack_require__("./js/lib/stateChangeListener.js");
            var _miniBrowser = __webpack_require__("./js/lib/miniBrowser.js");
            __webpack_require__("./components/xo-models/src/checkout/index.js");
            __webpack_require__("./components/xo-models/src/auth/lib/xoAPayUtils.js");
            __webpack_require__("./components/xo-models/src/app/index.js");
            __webpack_require__("./components/xo-login-components/src/login/fn.js");
            __webpack_require__("./components/xo-device-info/dist/index.js");
            var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            (function exportProviders(angular) {
                angular && angular.exportProviders(module, exports, __dirname, __filename);
            })(window.angular);
            _angular2["default"].module().factory("$Middleware", function($rootScope, $q, $util, $CheckoutAppDataModel, $CheckoutPayeeModel, $CheckoutCartModel, $DeviceInfo, $config, $meta, $FallbackError, $locale, $promise, $populate, $window, $timeout, $experiment, $TransactionEligibilityModel, $AuthModel, $dispatch, $logger, $pxp, $Class, $Api, $fn, $feature, $xoAPayUtils, $state, $cookies) {
                return [ function angularDebug() {
                    window.root = $rootScope;
                    window.injector = _angular2["default"].element(document.body).injector();
                    if ($config.safeApply) {
                        $logger.info("overwriting_angular_apply");
                        var proto = Object.getPrototypeOf && Object.getPrototypeOf($rootScope);
                        if (!proto) {
                            $logger.warn("overwriting_angular_apply_failed", {
                                reason: "failed_to_get_prototype"
                            });
                        } else {
                            var originalApply = proto.$apply;
                            var skipAttempts = 10;
                            proto.$apply = function(fn) {
                                if (skipAttempts && ($rootScope.$$phase === "$digest" || $rootScope.$$phase === "$apply")) {
                                    skipAttempts--;
                                    $logger.warn("inprog_error_skipped", {
                                        stack: new Error().stack
                                    });
                                    this.$eval(fn);
                                } else {
                                    originalApply.call(this, fn);
                                }
                            };
                        }
                    }
                }, function waitForToken() {
                    if ($util.isIFrame() && !$util.param("token") && !$meta.token) {
                        return $q(function(resolve, reject) {
                            $logger.info("await_token");
                            window.addEventListener("message", function(event) {
                                var message = JSON.parse(event.data);
                                if (message.operation !== "pass_token") {
                                    return;
                                }
                                var token = message.token;
                                $logger.info("passed_token", {
                                    token: token
                                });
                                $meta.token = token;
                                var $preloadApi = new $Api({
                                    uri: "preload"
                                });
                                $preloadApi.retrieve({
                                    params: {
                                        token: token
                                    }
                                }).then(function(response) {
                                    $preloadApi.setTransientCache(response.data);
                                    resolve();
                                })["catch"](reject);
                            }, false);
                        });
                    }
                }, function checkToken() {
                    var pattern = /^EC-[0-9A-Z]{17}$/;
                    var beamPattern = /^BA-[0-9A-Z]{17}$/;
                    var wpsPattern = /^[0-9A-Z]{17}$/;
                    var urlToken = ($util.param("token") || "").trim().slice(0, 20);
                    var bodyToken = ($meta.token || "").trim().slice(0, 20);
                    if (pattern.test(urlToken)) {
                        $rootScope.token = urlToken;
                    } else if (pattern.test(bodyToken)) {
                        $rootScope.token = bodyToken;
                    } else if (wpsPattern.test(urlToken)) {
                        $logger.info("isWpsPattern");
                        $rootScope.token = urlToken;
                    } else if (wpsPattern.test(bodyToken)) {
                        $logger.info("isWpsPattern");
                        $rootScope.token = bodyToken;
                    } else if (beamPattern.test(urlToken)) {
                        $rootScope.token = urlToken;
                        $logger.info("cart_exchange_failed", {
                            token: $rootScope.token
                        });
                    } else if (beamPattern.test(bodyToken)) {
                        $rootScope.token = bodyToken;
                        $logger.info("cart_exchange_failed", {
                            token: $rootScope.token
                        });
                    } else {
                        return $q.reject(new $FallbackError({
                            reason: "no_token",
                            product: "error"
                        }));
                    }
                }, function resolveLocale() {
                    var models = {};
                    return $populate(models, {
                        appData: $CheckoutAppDataModel.instance($rootScope.token),
                        cart: $CheckoutCartModel.instance($rootScope.token)
                    })["finally"](function() {
                        return $locale.retrieve({
                            params: {
                                ipCountry: $meta.ipcountry,
                                localeTestUrlParam: $util.param("locale.test"),
                                checkoutShippingCountry: models.cart.get("purchase.shipping_address.country_code"),
                                merchantCountry: models.appData.get("merchant.merchant_country"),
                                checkoutSessionLocale: models.appData.get("merchant.merchant_locale"),
                                countryParam: $util.param("country.x"),
                                localeParam: $util.param("locale.x")
                            }
                        });
                    });
                }, function fraudentInit() {
                    return $fn.init();
                }, function setupIntegration() {
                    return _miniBrowser.$miniBrowser.init($rootScope.token);
                }, function frameBust() {
                    if (!_integration.$integration.getConfig("CAN_FRAMEBUST")) {
                        return;
                    }
                    if (_integration.$integration.getConfig("ALLOW_COLLECT_DATA")) {
                        return;
                    }
                    return _miniBrowser.$miniBrowser.frameBust($rootScope.token);
                }, function tokenExchange() {
                    if (!_integration.$integration.getConfig("ALLOW_ONETOUCH_TOKEN_EXCHANGE")) {
                        return;
                    }
                    if ($rootScope.isPartnerIntegration || !$util.isIFrame()) {
                        return;
                    }
                    var auth = $AuthModel.instance();
                    return auth.retrieve().then(function() {
                        if (auth.logged_in || auth.remembered || !auth.refresh_token) {
                            return;
                        }
                        return auth.action("onetouch");
                    });
                }, function xcomponent() {
                    if (window.xchild) {
                        window.paypalCheckout = window.xchild;
                    }
                    if (window.xprops && window.xprops.init) {
                        return $q.all([ $CheckoutAppDataModel.instance($rootScope.token).retrieve(), $CheckoutPayeeModel.instance($rootScope.token).retrieve() ]).then(function(_ref) {
                            var checkoutAppData = _ref[0], checkoutPayee = _ref[1];
                            return window.xprops.init({
                                paymentToken: $rootScope.token,
                                merchantID: checkoutPayee.merchant.id,
                                cancelUrl: checkoutAppData.urls.cancel_url
                            });
                        });
                    }
                }, function xcomponentAuth() {
                    if (window.xprops && window.xprops.onAuth) {
                        var auth = $AuthModel.instance();
                        return auth.retrieve().then(function() {
                            if (auth.access_token && (auth.logged_in || auth.remembered)) {
                                return window.xprops.onAuth({
                                    accessToken: auth.access_token
                                });
                            }
                        });
                    }
                }, function logPage() {
                    $logger.info("href", {
                        href: window.location.href,
                        windowName: $window.name && $window.name.slice(0, 100)
                    });
                    var match = document.cookie.toString().match(/ectoken=([^;]+)/);
                    if (match && match[1] === $rootScope.token) {
                        $logger.info("returning_user_same_token");
                    } else if (match && match[1] !== $rootScope.token) {
                        $logger.info("returning_user_diff_token");
                    } else {
                        $logger.info("non_returning_user");
                    }
                    document.cookie = "ectoken=" + $rootScope.token + "; expires=Fri, 31 Dec 9999 23:59:59 GMT;";
                    if (window.performance && window.performance.navigation && _angular2["default"].isDefined(window.performance.navigation.type)) {
                        var navigationType = {
                            0: "regular",
                            1: "reload",
                            2: "back_forward"
                        }[window.performance.navigation.type];
                        if (navigationType) {
                            $logger.info("navigation_" + navigationType);
                        }
                    }
                }, function handleTagManager() {
                    return $pxp("xo_hermesnode_ec_tag_manager", {
                        "ctx.COUNTRY": $locale.country
                    }, "(xo_hermesnode_ec_tag_manager_)(.*)").then(function(result) {
                        if (result) {
                            if (result.treatment_name === "xo_hermesnode_ec_tag_manager_treatment") {
                                window.dataLayer = {
                                    contentCountry: $locale.country.toLowerCase(),
                                    contentLanguage: $locale.lang.toLowerCase()
                                };
                                var tagManagerUrl = $config.urls.tagProdUrl;
                                if ($config.deploy.isLocal() || $config.deploy.isStage()) {
                                    tagManagerUrl = $config.urls.tagStageUrl;
                                }
                                (function(i, s, o, g, r, a, m) {
                                    i["tagManagerObject"] = r;
                                    i[r] = i[r] || function() {
                                        (i[r].q = i[r].q || []).push(arguments);
                                    };
                                    i[r].l = 1 * new Date();
                                    a = s.createElement(o);
                                    m = s.getElementsByTagName(o)[0];
                                    a.async = 1;
                                    a.src = g;
                                    m.parentNode.insertBefore(a, m);
                                })(window, document, "script", tagManagerUrl, "tagManager");
                            }
                        }
                    });
                }, function logoutGuest() {
                    var appData = $CheckoutAppDataModel.instance($rootScope.token);
                    if (appData.get("merchant.merchant_country") === "DE" && (appData.get("is_second_button_txn") || $Class.get(window, "xprops.fundingSource") === "credit")) {
                        return;
                    }
                    return $AuthModel.instance().retrieve().then(function(auth) {
                        if (_thirdPartyInfo.thirdPartyExperience.isThirdPartyExperience($rootScope.token)) {
                            _thirdPartyInfo.thirdPartyExperience.resetThirdPartyExperience();
                            $logger.info("venmo_login_retry");
                        }
                        if (auth.guest) {
                            $logger.info("guest_logout");
                            return auth.logout();
                        }
                    });
                }, function updatePaymentExperience() {
                    $CheckoutAppDataModel.instance($rootScope.token).action("updatePaymentExperience", {
                        data: {
                            payment_experience: "HERMESNODE",
                            payment_experience_form_factor: _miniBrowser.$miniBrowser.isMiniBrowser() ? "IN_CONTEXT" : "FULL_PAGE"
                        },
                        silent: true,
                        transientError: true
                    });
                }, function checkProcessorDecline() {
                    return $CheckoutAppDataModel.instance($rootScope.token).retrieve().then(function(appData) {
                        if (appData.flags.processor_declined) {
                            $logger.info("processor_decline_transaction");
                            var authModel = $AuthModel.instance();
                            if (authModel.auth_state === "IDENTIFIED" && !$util.param("redirectToHermes")) {
                                return $dispatch("xoon", {
                                    token: $rootScope.token,
                                    hermesXoonRedirect: true
                                }, {
                                    fromState: "checkout_init",
                                    toState: "guest",
                                    "locale.x": $locale.lang + "_" + $locale.country,
                                    "country.x": $locale.country
                                });
                            }
                            return;
                        }
                    });
                }, function checkTransactionEligibility() {
                    if ($util.param("marketplaces_venmo_client") === "1") {
                        return true;
                    }
                    return $promise.hash({
                        transactionEligibility: $TransactionEligibilityModel.instance($rootScope.token).retrieve(),
                        isPartnerIntegration: _miniBrowser.$miniBrowser.getPartnerIntegration($rootScope.token),
                        isDirectIntegration: _miniBrowser.$miniBrowser.getDirectIntegration($rootScope.token),
                        isWPSFlow: _miniBrowser.$miniBrowser.getWPSIntegration($rootScope.token)
                    }).then(function(data) {
                        if (data.transactionEligibility.eligible && !data.transactionEligibility.lipp) {
                            return $logger.info("transaction_eligible");
                        }
                        if (!data.isWPSFlow) {
                            if (data.isPartnerIntegration) {
                                return $logger.warn("partner_integration_ineligible_transaction");
                            }
                            if (!data.isDirectIntegration) {
                                return $logger.warn("ineligible_indirect_transaction");
                            }
                        }
                        var appData = $CheckoutAppDataModel.instance($rootScope.token);
                        if (appData.user_selected_funding_source_type === "BML" && ($config.deploy.isLocal() || $config.deploy.isStage())) {
                            return $logger.warn("ineligible_ppcbtn_transaction");
                        }
                        $logger.info("transaction_ineligible");
                        return $q.reject(new $FallbackError({
                            reason: "transaction_ineligible",
                            product: "ux"
                        }));
                    });
                }, function checkAPayLogin() {
                    if (!$xoAPayUtils.isAPayAPISupported()) {
                        return;
                    }
                    var models = {};
                    return $populate(models, {
                        payee: $CheckoutPayeeModel.instance($rootScope.token),
                        auth: $AuthModel.instance(),
                        cart: $CheckoutCartModel.instance($rootScope.token)
                    }).then(function() {
                        var euat = $util.param("euat");
                        if (models.auth.logged_in || models.auth.remembered || euat) {
                            return;
                        }
                        if (models.cart.isWalletTokenization()) {
                            return;
                        }
                        return $pxp("xo_hermes_apay", {
                            uid: models.payee.get("merchant.id", "")
                        }, "xo_hermes_apay_whitelist_treatment").then(function(t) {
                            if (t && t.treatment_name === "xo_hermes_apay_whitelist_treatment") {
                                var ui_experience = $cookies && $cookies.ui_experience;
                                var params = $util.params(ui_experience);
                                if (!params || params.apay !== "true") {
                                    if (models.auth.refresh_token) {
                                        return;
                                    }
                                    return $xoAPayUtils.authenticateAPay().then(function(result) {
                                        if (result) {
                                            $xoAPayUtils.setAPayCookie($rootScope.token);
                                        }
                                        return;
                                    });
                                }
                                if (models.auth.refresh_token) {
                                    if (params && params.otapay === "true") {
                                        return;
                                    }
                                    return $pxp("xo_hermes_apay_ot_auth", {
                                        "ctx.APAY": "true"
                                    }, "xo_hermes_apay_ot_auth_(treatment|control)").then(function(tr) {
                                        if (tr && tr.treatment_name === "xo_hermes_apay_ot_auth_treatment") {
                                            return $xoAPayUtils.authenticateAPay().then(function(result) {
                                                if (!result) {
                                                    $xoAPayUtils.clearAPayCookie($rootScope.token);
                                                    return;
                                                }
                                                $xoAPayUtils.setOTAPayCookie($rootScope.token);
                                                return;
                                            });
                                        }
                                        return;
                                    });
                                } else {
                                    return $pxp("xo_hermes_apay_auth", {
                                        "ctx.APAY": "true"
                                    }, "xo_hermes_apay_auth_(treatment|control)").then(function(tr) {
                                        if (tr && tr.treatment_name === "xo_hermes_apay_auth_treatment") {
                                            return $xoAPayUtils.authenticateAPay().then(function(result) {
                                                if (!result) {
                                                    $xoAPayUtils.clearAPayCookie($rootScope.token);
                                                }
                                                return;
                                            });
                                        }
                                        return;
                                    });
                                }
                            }
                        });
                    });
                }, function logStart() {
                    return $promise.hash({
                        isMiniBrowser: _miniBrowser.$miniBrowser.isMiniBrowser(),
                        isDirectIntegration: _miniBrowser.$miniBrowser.getDirectIntegration($rootScope.token),
                        isIframe: _miniBrowser.$miniBrowser.isFramed()
                    }).then(function(flags) {
                        var app_int_type = $DeviceInfo.getAppIntegrationType();
                        $logger.info("app_start_design", {
                            from: "client_middleware",
                            to: "process_app_start_design",
                            is_directintegration: flags.isDirectIntegration ? 1 : 0,
                            is_incontext: flags.isMiniBrowser || flags.isIframe ? 1 : 0,
                            app_int_type: app_int_type
                        });
                    });
                }, function logPerformance() {
                    if (window.enablePerformance) {
                        var keys = [ "connectEnd", "connectStart", "domComplete", "domContentLoadedEventEnd", "domContentLoadedEventStart", "domInteractive", "domLoading", "domainLookupEnd", "domainLookupStart", "fetchStart", "loadEventEnd", "loadEventStart", "navigationStart", "redirectEnd", "redirectStart", "requestStart", "responseEnd", "responseStart", "secureConnectionStart", "unloadEventEnd", "unloadEventStart" ];
                        var timing = {};
                        _angular2["default"].forEach(keys, function(key) {
                            timing[key] = parseInt(window.performance.timing[key], 10) || 0;
                        });
                        var offset = timing.connectEnd - timing.navigationStart;
                        if (timing.connectEnd && window.clientStartTime) {
                            _angular2["default"].forEach(timing, function(time, name) {
                                if (time && _angular2["default"].isNumber(time)) {
                                    $logger.info("timing_" + name, {
                                        client_elapsed: time - timing.connectEnd - (window.clientStartTime - offset),
                                        req_elapsed: time - timing.connectEnd
                                    });
                                }
                            });
                        }
                        $logger.info("timing", timing);
                        if (window.performance.memory) {
                            $logger.info("memory", window.performance.memory);
                        }
                        if (window.performance.navigation) {
                            $logger.info("navigation", window.performance.navigation);
                        }
                        if (window.performance.getEntries) {
                            var logged = [];
                            var logResources = function logResources() {
                                _angular2["default"].forEach(window.performance.getEntries(), function(resource) {
                                    if (!resource || !resource.name) {
                                        return;
                                    }
                                    if (logged.indexOf(resource.name) === -1) {
                                        logged.push(resource.name);
                                    } else {
                                        return;
                                    }
                                    if (resource.initiatorType) {
                                        $logger.info(resource.initiatorType, resource);
                                    }
                                });
                            };
                            logResources();
                            setInterval(logResources, 500);
                        }
                        if (timing.connectEnd && timing.navigationStart && window.clientStartTime) {
                            $logger.info("js_init", {
                                client_elapsed: 0,
                                req_elapsed: window.clientStartTime - offset
                            });
                        }
                    } else {
                        $logger.info("no_performance_data");
                    }
                }, function logAuthState() {
                    return $AuthModel.instance().retrieve().then(function(auth) {
                        if (auth.logged_in) {
                            $logger.info("user_logged_in");
                        } else if (auth.remembered) {
                            $logger.info("user_remembered");
                        } else {
                            $logger.info("user_not_logged_in");
                        }
                    });
                }, function checkAccessToken() {
                    if (window.xprops && window.xprops.accessToken) {
                        return window.xprops.accessToken().then(function(accessToken) {
                            $Api.addHeader("x-paypal-internal-euat", accessToken);
                            return $AuthModel.instance().reload();
                        });
                    }
                    var euat = $util.param("euat");
                    if (euat) {
                        var accessToken = euat === "1" ? window.location.hash.substr(2) : euat;
                        if (accessToken) {
                            $logger.info(euat === "1" ? "access_token_from_hash" : "access_token_from_param", {
                                access_token: accessToken
                            });
                            var authModel = $AuthModel.instance();
                            authModel.access_token = accessToken;
                            if (window.xprops && window.xprops.onAuth) {
                                window.xprops.onAuth(accessToken);
                            }
                        }
                    }
                }, function enableFraudNetForMobileWebView() {
                    if ($DeviceInfo.isApp()) {
                        return $CheckoutAppDataModel.instance($rootScope.token).retrieve().then(function(appData) {
                            return $pxp($config.ulMeta.hermesnodePxpConfig, {
                                "ctx.COUNTRY": appData.merchant.merchant_country
                            }, "xo_hermesnode_fraudnet_webview_treatment").then(function(result) {
                                if (result && result.treatment_name) {
                                    $window.enableFraudNetForMobileWebView = true;
                                }
                            });
                        });
                    }
                }, function isServiceWorkerSupported() {
                    if ("serviceWorker" in navigator) {
                        $logger.info("service_worker_supported");
                    } else {
                        $logger.info("service_worker_not_supported");
                    }
                }, function forceCookiesDisabled() {
                    if ($DeviceInfo.isApp()) {
                        return $CheckoutPayeeModel.instance($rootScope.token).retrieve().then(function(payee) {
                            if (~$config.forceCookiesDisabled.indexOf(payee.merchant.id)) {
                                $logger.info("force_cookies_disabled");
                                $Api.forceCookiesDisabled = true;
                            }
                        });
                    }
                }, function checkFramed() {
                    if ($util.isIFrame()) {
                        document.documentElement.className += " framed";
                    }
                } ];
            });
            _integration.$integration;
            _miniBrowser.$miniBrowser;
            _thirdPartyInfo.thirdPartyExperience;
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "js/lib", "js/lib/middleware.js");
    },
    "./js/lib/stateChangeListener.js": function(module, exports, __webpack_require__) {
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _angular2 = _interopRequireDefault(_angular);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        _angular2["default"].module().run(function($rootScope, $state) {
            $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
                $state.toState = toState;
                $state.toParams = toParams;
                $state.fromState = fromState;
                $state.fromParams = fromParams;
            });
        });
    },
    "./components/xo-models/src/auth/lib/xoAPayUtils.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-beaver/dist/logger.js"), __webpack_require__("./components/xo-device-info/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xoAPayUtils", [ "squid" ]).factory("$xoAPayUtils", function($q, $logger, $DeviceInfo, $config, $http) {
                    var _jwtToken = "";
                    var _authenticated;
                    function createPaymentRequest() {
                        var supportedInstruments = [ {
                            supportedMethods: [ "https://android.com/pay" ],
                            data: {
                                minGooglePlayServicesVersion: "10400000",
                                paymentMethodTokenizationParameters: {
                                    tokenizationType: "GATEWAY_TOKEN",
                                    parameters: {
                                        gateway: "paypal"
                                    }
                                }
                            }
                        } ];
                        var details = {
                            total: {
                                label: "Checkout",
                                amount: {
                                    currency: "USD",
                                    value: "5.00"
                                }
                            }
                        };
                        var options = {};
                        try {
                            return new PaymentRequest(supportedInstruments, details, options);
                        } catch (e) {
                            $logger.info("PAYMENT_REQUEST_NOT_SUPPORTED");
                        }
                    }
                    function updateCookie(url, params) {
                        $http({
                            method: "GET",
                            url: url,
                            params: params
                        });
                    }
                    function isPaymentRequestAPISupported() {
                        var currentVersionMatch = navigator.userAgent.match(/Chrome\/([0-9]+)\./i);
                        return $DeviceInfo.isMobile() && window.navigator.vendor === "Google Inc." && "PaymentRequest" in window && navigator.userAgent.match(/Android/i) && currentVersionMatch && Number(currentVersionMatch[1]) >= 58;
                    }
                    return {
                        isAPayAPISupported: function isAPayAPISupported() {
                            return isPaymentRequestAPISupported();
                        },
                        canMakeAPayPayment: function canMakeAPayPayment() {
                            if (!isPaymentRequestAPISupported()) {
                                return $q.resolve(false);
                            }
                            var paymentRequest = window.appPaymentRequest || createPaymentRequest();
                            if (paymentRequest && paymentRequest.canMakePayment) {
                                $logger.info("APAY_CHECK_CAN_MAKE_PAYMENT");
                                $logger.info("checkout_fpti", {
                                    from: "payment_request_check_payment",
                                    to: "prepare_payment_request_check_payment"
                                });
                                return paymentRequest.canMakePayment().then(function(result) {
                                    if (result) {
                                        $logger.info("APAY_CAN_MAKE_PAYMENT");
                                        $logger.info("checkout_fpti", {
                                            from: "payment_request_check_payment",
                                            to: "process_payment_request_can_make_payment"
                                        });
                                        return true;
                                    } else {
                                        $logger.info("APAY_CAN_NOT_MAKE_PAYMENT_NO_PAYMENT");
                                        $logger.info("checkout_fpti", {
                                            from: "payment_request_can_make_payment",
                                            to: "process_payment_request_can_not_make_payment",
                                            error_source: "PaymentRequestAPI",
                                            error_type: "no_payment"
                                        });
                                        return false;
                                    }
                                })["catch"](function(err) {
                                    $logger.info("APAY_CAN_NOT_MAKE_PAYMENT_SOFT_DECLINE", {
                                        msg: err && err.message,
                                        name: err && err.name
                                    });
                                    $logger.info("checkout_fpti", {
                                        from: "payment_request_can_make_payment",
                                        to: "prepare_payment_request_can_make_payment_soft_decline",
                                        int_error_code: err && err.name,
                                        int_error_description: err && err.message,
                                        error_source: "PaymentRequestAPI",
                                        error_type: "soft_decline"
                                    });
                                    return false;
                                });
                            } else {
                                return $q.resolve(false);
                            }
                        },
                        authenticateAPay: function authenticateAPay() {
                            var forceAuthenticate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                            if (!forceAuthenticate && _authenticated !== undefined) {
                                return $q.resolve(_authenticated);
                            }
                            _authenticated = false;
                            _jwtToken = "";
                            if (!isPaymentRequestAPISupported()) {
                                return $q.resolve(false);
                            }
                            var paymentRequest = window.appPaymentRequest || createPaymentRequest();
                            if (paymentRequest) {
                                $logger.info("APAY_AUTHENTICATION_BEGIN");
                                $logger.info("checkout_fpti", {
                                    from: "payment_request_auth",
                                    to: "prepare_payment_request_auth"
                                });
                                return paymentRequest.show().then(function(result) {
                                    result.complete("success");
                                    $logger.info("APAY_AUTHENTICATION_SUCCEEDED");
                                    $logger.info("checkout_fpti", {
                                        from: "payment_request_auth",
                                        to: "process_payment_request_auth",
                                        param_type: "JWT"
                                    });
                                    var paymentMethodToken = result.details && result.details.paymentMethodToken && JSON.parse(result.details.paymentMethodToken);
                                    _jwtToken = paymentMethodToken.authJwt;
                                    _authenticated = true;
                                    return true;
                                })["catch"](function(err) {
                                    $logger.info("APAY_AUTHENTICATION_FAILED", {
                                        msg: err && err.message,
                                        name: err && err.name
                                    });
                                    $logger.info("checkout_fpti", {
                                        from: "payment_request_auth",
                                        to: "process_payment_request_auth",
                                        int_error_code: err && err.name,
                                        int_error_description: err && err.message,
                                        error_source: "PaymentRequestAPI",
                                        error_type: "soft_decline"
                                    });
                                    return false;
                                });
                            } else {
                                return $q.resolve(false);
                            }
                        },
                        getAPayAuthToken: function getAPayAuthToken() {
                            return _jwtToken;
                        },
                        setAPayCookie: function setAPayCookie(token) {
                            if ($config.tokenizedWalletCookieURL) {
                                updateCookie($config.tokenizedWalletCookieURL, {
                                    op: "set",
                                    token: token
                                });
                            }
                        },
                        clearAPayCookie: function clearAPayCookie(token) {
                            if ($config.tokenizedWalletCookieURL) {
                                updateCookie($config.tokenizedWalletCookieURL, {
                                    op: "clear",
                                    token: token
                                });
                            }
                        },
                        setOTAPayCookie: function setOTAPayCookie(token) {
                            if ($config.tokenizedWalletCookieURL) {
                                updateCookie($config.tokenizedWalletCookieURL, {
                                    op: "setot",
                                    token: token
                                });
                            }
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/auth/lib", "components/xo-models/src/auth/lib/xoAPayUtils.js");
    },
    "./components/xo-models/src/app/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xomodel.app", [ "squid" ]).factory("$TransactionEligibilityModel", function($Model, $Api) {
                    return $Model.extend("TransactionEligibilityModel", {
                        api: new $Api({
                            uri: "/api/eligibility/transaction/:id"
                        })
                    });
                }).factory("$BuyerEligibilityModel", function($Model, $Api) {
                    return $Model.extend("BuyerEligibilityModel", {
                        api: new $Api({
                            uri: "/api/eligibility/buyer/:id"
                        }),
                        invalidateOnLogout: true
                    });
                }).factory("$PXPModel", function($Model, $Api) {
                    return $Model.extend({
                        api: new $Api({
                            uri: "/api/pxp/:id"
                        })
                    });
                }).factory("$LocaleConfigModel", function($Model, $Api) {
                    return $Model.extend({
                        api: new $Api({
                            uri: "/api/localeConfig"
                        })
                    });
                }).factory("$AppDataModel", function($Model, $Api) {
                    return $Model.extend("AppDataModel", {
                        api: new $Api({
                            uri: "/api/app"
                        }),
                        isMobile: function isMobile() {
                            return this.platform === "mobile";
                        }
                    });
                }).factory("$MessengerIntegrationDataModel", function($Model, $Api) {
                    return $Model.extend("MessengerIntegrationDataModel", {
                        api: new $Api({
                            uri: "/api/messenger"
                        })
                    });
                }).factory("$TokenizedWalletEligibilityModel", function($Model, $Api) {
                    return $Model.extend("TokenizedWalletEligibilityModel", {
                        api: new $Api({
                            uri: "/api/eligibility/tokenizedWallet/:id"
                        }),
                        invalidateOnLogout: true,
                        isEligible: function isEligible() {
                            return this.eligible;
                        }
                    });
                }).factory("$TokenizedWalletInfoModel", function($Model, $Api) {
                    var _brandNames, _disclaimerLinks;
                    var subjectTypes = {
                        SAMSUNG_PAY: "Samsung",
                        ANDROID_PAY: "google"
                    };
                    var brandNames = (_brandNames = {}, _brandNames[subjectTypes.SAMSUNG_PAY] = "Samsung Pay", 
                    _brandNames[subjectTypes.ANDROID_PAY] = "Android Pay", _brandNames);
                    var disclaimerLinks = (_disclaimerLinks = {}, _disclaimerLinks[subjectTypes.SAMSUNG_PAY] = "https://www.paypal.com/us/webapps/mpp/ua/ppsamsungpay-tnc", 
                    _disclaimerLinks[subjectTypes.ANDROID_PAY] = "https://www.paypal.com/us/webapps/mpp/ua/ppandroidpay-tnc", 
                    _disclaimerLinks);
                    return $Model.extend("TokenizedWalletInfoModel", {
                        api: new $Api({
                            uri: "/api/info/tokenizedWallet/:id"
                        }),
                        invalidateOnLogout: true,
                        isAndroidPay: function isAndroidPay() {
                            return this.subject === subjectTypes.ANDROID_PAY;
                        },
                        isSamsungPay: function isSamsungPay() {
                            return this.subject === subjectTypes.SAMSUNG_PAY;
                        },
                        getSubject: function getSubject() {
                            return this.subject || subjectTypes.ANDROID_PAY;
                        },
                        brandName: function brandName() {
                            return brandNames[this.subject] || brandNames[subjectTypes.ANDROID_PAY];
                        },
                        getDisclaimerLink: function getDisclaimerLink() {
                            return disclaimerLinks[this.subject] || disclaimerLinks[subjectTypes.ANDROID_PAY];
                        }
                    });
                }).factory("$TokenizedWalletPinModel", function($Model, $Api) {
                    return $Model.extend("TokenizedWalletPinModel", {
                        api: new $Api({
                            uri: "/api/pin/tokenizedWallet/:id"
                        }),
                        invalidateOnLogout: true,
                        getPinOrigin: function getPinOrigin() {
                            return this.pinOrigin;
                        },
                        getSuggestedPin: function getSuggestedPin() {
                            return this.suggestedPin;
                        },
                        getSuggestedKey: function getSuggestedKey() {
                            return this.suggestedKey;
                        },
                        getPinId: function getPinId() {
                            return this.pinId;
                        },
                        isPinIdPresent: function isPinIdPresent() {
                            return !!this.pinId;
                        },
                        isSetupEligible: function isSetupEligible() {
                            return this.pinOrigin === "UNSET" || this.pinOrigin === "SYSTEM";
                        }
                    });
                }).factory("$PXPBlacklist", function() {
                    return {
                        isMerchantBlacklisted: function isMerchantBlacklisted(merchantId) {
                            return _squid.$config.pxpBlacklist && _squid.$config.pxpBlacklist.merchant && _squid.$config.pxpBlacklist.merchant.indexOf(merchantId) !== -1;
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            _squid.$config;
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/app", "components/xo-models/src/app/index.js");
    },
    "./components/xo-login-components/src/login/fn.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-device-info/dist/index.js"), __webpack_require__("./components/xo-beaver/dist/logger.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("xo-fn", [ "squid", "xo-device-info", "beaver" ]).factory("$fn", function($populate, $rootScope, $CheckoutAppDataModel, $window, $DeviceInfo, $logger, $config, $util, $meta, $pxp, $q) {
                    var fncls = "fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99";
                    var fnCorrId;
                    var fraudnetConfig = $config.fraudnet;
                    var token = $rootScope.token || $meta.token;
                    if ($meta.baToken) {
                        $logger.info("BEAM_In_Hermes_Checkout");
                        fnCorrId = $meta.baToken;
                    } else if ($rootScope.fraudNetId) {
                        fnCorrId = $rootScope.fraudNetId;
                    } else {
                        fnCorrId = $rootScope.token || $meta.token;
                    }
                    var options = {
                        fnSessionId: fnCorrId,
                        sourceId: fraudnetConfig && fraudnetConfig.sourceId || "HERMES_SIGNIN",
                        allowsCustomEvent: typeof CustomEvent !== "undefined" && angular.isFunction(CustomEvent)
                    };
                    function init() {
                        $logger.info("FN_contexts", {
                            token: token,
                            fnSessionId: options.fnSessionId
                        });
                        if (angular.isString($config.urls.fraudnetUrl)) {
                            options.fnUrl = $config.urls.fraudnetUrl;
                        } else {
                            options.fnUrl = $config.urls.fraudnetUrl && $config.urls.fraudnetUrl.passive;
                        }
                        $logger.info("FN_Initialised", {
                            allowsCustomEvent: options.allowsCustomEvent
                        });
                    }
                    var enableFraudnet = function enableFraudnet() {
                        var userAgent = $window.navigator.userAgent;
                        if ($DeviceInfo.isApp()) {
                            if ($window.enableFraudNetForMobileWebView) {
                                $logger.info("Enable_FN_MobileApp_PXP_Decision");
                                return true;
                            }
                            $logger.info("Disable_FN_Mobileapp");
                            return false;
                        } else if (userAgent.indexOf("EtsyInc") > -1) {
                            $logger.info("Disable_FN_Etsy");
                            return false;
                        }
                        $logger.info("Enable_FN");
                        return true;
                    };
                    function injectScript(fnUrl) {
                        var script = document.createElement("script");
                        script.id = "js-sync";
                        script.src = fnUrl;
                        document.body.appendChild(script);
                    }
                    function injectIframe(beaconOptions) {
                        var iframe = document.createElement("iframe");
                        var dom;
                        var doc;
                        var where;
                        iframe.src = "javascript:false";
                        iframe.title = "";
                        iframe.role = "presentation";
                        (iframe.frameElement || iframe).style.cssText = "width: 0; height: 0; border: 0; display: none;";
                        where = document.getElementsByTagName("script");
                        where = where[where.length - 1];
                        where.parentNode.insertBefore(iframe, where);
                        try {
                            doc = iframe.contentWindow.document;
                        } catch (e) {
                            dom = document.domain;
                            iframe.src = 'javascript:var d=document.open();d.domain="' + dom + '";void(0);';
                            doc = iframe.contentWindow.document;
                        }
                        doc.open()._l = function() {
                            var js = this.createElement("script");
                            if (dom) {
                                this.domain = dom;
                            }
                            js.id = "js-iframe-async";
                            js.src = beaconOptions.fnUrl;
                            this.body.appendChild(js);
                        };
                        doc.write('<body onload="document._l();">');
                        doc.close();
                    }
                    function _injectConfig(configOptions) {
                        var script = document.getElementById("fconfig");
                        if (script) {
                            if (script.parentNode) {
                                script.parentNode.removeChild(script);
                            }
                        }
                        script = document.createElement("script");
                        script.id = "fconfig";
                        script.type = "application/json";
                        script.setAttribute("fncls", fncls);
                        script.text = '{"f": "' + configOptions.fnSessionId + '", "s": "' + configOptions.sourceId + '", "cb": "fnCallback"}';
                        document.body.appendChild(script);
                    }
                    function _loadBeacon(beaconOptions) {
                        if ($DeviceInfo.isApp() && $window.enableFraudNetForMobileWebView) {
                            injectScript(beaconOptions.fnUrl);
                        } else {
                            injectIframe(beaconOptions);
                        }
                    }
                    function trigger(scope) {
                        var fnLoaded = !!$rootScope.fnLoaded;
                        if (fnLoaded) {
                            return false;
                        }
                        $logger.info("Trigger_FN");
                        if (options.fnUrl) {
                            if (enableFraudnet()) {
                                $window.fnCallback = function() {
                                    if (scope) {
                                        scope.$emit("fnCallback");
                                    }
                                };
                                _injectConfig(options);
                                _loadBeacon(options);
                                $rootScope.fnLoaded = true;
                                return true;
                            }
                        }
                        return false;
                    }
                    function sendTypingSpeedPayload(type) {
                        var tsLoadPayload = {
                            detail: {
                                type: type
                            }
                        };
                        if (type === "Hermes") {
                            tsLoadPayload.detail["fields"] = [ "username", "password" ];
                        }
                        if (type === "HermesUL") {
                            tsLoadPayload.detail["frame"] = "injectedUl";
                            tsLoadPayload.detail["fields"] = [ "email", "password" ];
                        }
                        if (type) {
                            var event;
                            if (options.allowsCustomEvent) {
                                $logger.info("fn_CustomEvent_type1");
                                event = new CustomEvent("tsLoad", tsLoadPayload);
                            } else {
                                try {
                                    $logger.info("fn_CustomEvent_type2");
                                    event = window.document.createEvent("CustomEvent");
                                    event.initCustomEvent("tsLoad", true, true, tsLoadPayload.detail);
                                } catch (err) {
                                    $logger.info("fn_CustomEvent_None", {
                                        error: err
                                    });
                                }
                            }
                            if (event) {
                                window.document.dispatchEvent(event);
                                $logger.info("Dispatched_FN_TS_Payload_" + type);
                            }
                        }
                    }
                    return {
                        init: init,
                        trigger: trigger,
                        sendTypingSpeedPayload: sendTypingSpeedPayload
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-login-components/src/login", "components/xo-login-components/src/login/fn.js");
    },
    "./js/lib/security.js": function(module, exports, __webpack_require__) {
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _angular2 = _interopRequireDefault(_angular);
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/xo-models/src/auth/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        _angular2["default"].module().run(function($rootScope, $log, $state, $AuthModel, $Forbidden, $logger, $timeout, $interval) {
            var errorCount = 0;
            $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
                var auth = $AuthModel.instance();
                if (toState.auth !== false && !auth.logged_in) {
                    errorCount += 1;
                    if (errorCount === 10) {
                        $logger.error("max_state_requires_auth");
                    }
                    if (errorCount >= 10) {
                        return;
                    }
                    $logger.warn("state_requires_auth", {
                        stateName: toState.name
                    });
                    event.preventDefault();
                    throw new $Forbidden("state_transition_forbidden", {
                        fromState: fromState,
                        toState: toState
                    });
                }
            });
            $interval(function() {
                var auth = $AuthModel.instance();
                if (auth.logged_in) {
                    auth.reload({
                        silent: true
                    }).then(function() {
                        if ($state.current.auth !== false && !auth.logged_in) {
                            errorCount += 1;
                            if (errorCount === 10) {
                                $logger.error("max_state_requires_auth");
                            }
                            if (errorCount >= 10) {
                                return;
                            }
                            $logger.info("idle_timeout");
                            $logger.warn("state_requires_auth", {
                                stateName: $state.current.name
                            });
                            errorCount += 1;
                            throw new $Forbidden();
                        }
                    });
                }
            }, 30 * 60 * 1e3);
            _squid.$util.idleTimeout(10 * 60 * 60 * 1e3);
        });
        _squid.$util;
    },
    "./js/lib/cplIntegration.js": function(module, exports, __webpack_require__) {
        (function(console) {
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
            try {
                var token = window.meta.token;
                _angular.$q.all([ _checkout.$CheckoutAppDataModel.instance(token).retrieve(), _checkout.$CheckoutCartModel.instance(token).retrieve() ]).then(function(_ref) {
                    var appData = _ref[0], cart = _ref[1];
                    if (appData.doec_on_approve()) {
                        window.fptiProductOverride = "wps";
                    } else if (cart.isBilling()) {
                        window.fptiProductOverride = "billing";
                    }
                })["catch"](function(e) {
                    console.error(e);
                });
            } catch (e) {
                console.error(e);
            }
            _angular.$q;
            _checkout.$CheckoutAppDataModel;
            _checkout.$CheckoutCartModel;
        }).call(exports, __webpack_require__("../node_modules/console-browserify/index.js"));
    },
    "./components/xo-tracking/dist/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/xo-tracking/dist/listener.js"), __webpack_require__("./components/xo-tracking/dist/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular) {
            return angular.module("tracking", [ "tracking.listener", "tracking.directive" ]);
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./components/xo-tracking/dist/listener.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(console) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/xo-beaver/dist/logger.js"), __webpack_require__("./components/xo-tracking/dist/fpti.js"), __webpack_require__("./components/xo-tracking/dist/button.js"), __webpack_require__("./components/xo-models/src/auth/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, $) {
                angular.module("tracking.listener", [ "beaver", "tracking.fpti", "button.tracking" ]).run(function($rootScope, $logger, $CalDataModel, $AuthModel, $fpti, $fptiError, $FptiConstants, $ButtonTrackingService, $timeout, $FptiBuilder, $meta, $config, $experiment, $util) {
                    function logTransition(state) {
                        return !(state.trackingData && state.trackingData.suppressTransitionLog);
                    }
                    function logStateExit(state) {
                        return state.trackingData && state.trackingData.trackStateExit;
                    }
                    function getBeaconUrl() {
                        return $config.deploy.isLocal() || $config.deploy.isStage() ? "https://tracking.qa.paypal.com/webapps/tracking/ts" : $config.urls && $config.urls.fptiBeaconUrl;
                    }
                    function fptiCustomRecordClick(route, customData) {
                        var analyticsInstance, fptiData, fptiDataObj;
                        var PAYPAL = window.PAYPAL;
                        if (PAYPAL && typeof PAYPAL.analytics !== "undefined") {
                            PAYPAL.core = PAYPAL.core || {};
                            analyticsInstance = new PAYPAL.analytics.Analytics();
                            fptiData = new $FptiBuilder({
                                trackingData: route.trackingData,
                                isInContext: $rootScope.miniBrowser,
                                comp: "hermesnodeweb"
                            }).build();
                            fptiDataObj = fptiData._dataObj;
                            $.extend(fptiDataObj, customData);
                            analyticsInstance.setRequestData(fptiDataObj);
                            analyticsInstance.recordClick({
                                url: getBeaconUrl()
                            });
                        }
                    }
                    $rootScope.$on("trackInput", function(event, trackInput) {
                        if (!trackInput) {
                            return;
                        }
                        var customData = {
                            link: trackInput.transition,
                            page: trackInput.page
                        };
                        fptiCustomRecordClick(trackInput.currentRoute, customData);
                    });
                    $rootScope.$on("trackClick", function(event, trackClick) {
                        if (!trackClick) {
                            return;
                        }
                        var customData = {
                            link: trackClick.transition
                        };
                        fptiCustomRecordClick(trackClick.currentRoute, customData);
                    });
                    $rootScope.$on("trackSubmit", function(event, trackSubmit) {
                        if (!trackSubmit) {
                            return;
                        }
                        var currentRoute = trackSubmit.currentRoute;
                        var routeName = currentRoute ? currentRoute.name : "noRoute";
                        $logger.info("track_submit", {
                            route_name: routeName
                        });
                        if (logTransition(currentRoute)) {
                            routeName = routeName.replace(/\./g, "_");
                            var state = currentRoute.trackingData && currentRoute.trackingData.fptiState || routeName;
                            var transition = trackSubmit.transition || state;
                            $logger.info(routeName + "_exit", {
                                fptiState: state,
                                fptiTransition: transition
                            });
                        }
                        if (trackSubmit.errors && trackSubmit.errors.length) {
                            var fptiFieldErrors = JSON.stringify(trackSubmit.errors);
                            $logger.info("checkout_fpti", {
                                form_field_errors: fptiFieldErrors
                            });
                        }
                        var errors = trackSubmit.errors;
                        if (angular.isArray(errors)) {
                            errors.forEach(function(err) {
                                $logger.debug("track_submit_error", err);
                                if ($fpti) {
                                    $fpti.setupDataString(currentRoute, new $fptiError({
                                        type: "fieldError",
                                        field: err.fieldName,
                                        code: err.errorMessage
                                    }));
                                }
                            });
                            if (errors.length) {
                                $logger.flush(true);
                            }
                        }
                    });
                    $rootScope.$on("unhandled_error", function(event, exception) {
                        if ($fpti) {
                            $fpti.setupDataString(exception.currentRoute, new $fptiError({
                                type: "pageError",
                                message: exception.message,
                                code: exception.cause
                            }));
                        }
                    });
                    $rootScope.$on("trackLink", function(event, trackLink) {
                        if (!trackLink) {
                            return;
                        }
                        var currentRoute = trackLink.currentRoute;
                        var routeName = (currentRoute ? currentRoute.name : "noRoute").replace(/\./g, "_");
                        var state = currentRoute.trackingData && currentRoute.trackingData.fptiState || routeName;
                        $logger.info(routeName + "_exit", {
                            fptiState: state,
                            fptiTransition: trackLink.transition
                        });
                    });
                    $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState) {
                        var from = fromState.name.replace(/\./g, "_");
                        var to = toState.name.replace(/\./g, "_");
                        if (from && logTransition(fromState) && logStateExit(fromState)) {
                            var trackingData = fromState.trackingData && fromState.trackingData || {};
                            $logger.info(from + "_exit", {
                                fptiState: trackingData.fptiState || from,
                                fptiTransition: trackingData.fptiState || from
                            });
                        }
                        $logger.info("state_change", {
                            from: from || "start",
                            to: to || "end"
                        });
                        if (toState.template) {
                            $CalDataModel.generateMetaIds();
                        }
                        $rootScope.currentState = to;
                        if (to && logTransition(toState)) {
                            $logger.info(to + "_enter", {
                                fptiState: toState.trackingData && toState.trackingData.fptiState || to
                            });
                        }
                    });
                    $rootScope.$on("page_loaded", function(event, from, to) {
                        if (from !== "checkout_init") {
                            return;
                        }
                        var key = $FptiConstants.stateName[to] || "review";
                        var landing_page = $FptiConstants.landing_page[key];
                        $logger.info("landing_page", {
                            from: landing_page,
                            to: "process_page_loaded",
                            fpti_landing_page: landing_page
                        });
                    });
                    $rootScope.$on("page_reloaded", function() {
                        $logger.flush(true);
                        $CalDataModel.generateMetaIds();
                    });
                    $rootScope.$on("$stateChangeSuccess", function(event, toState) {
                        var to = toState.name.replace(/\./g, "_");
                        if (toState.hasResolver && to) {
                            $logger.info(to + "_load");
                        } else if (to) {
                            $logger.info(to + "_rendering");
                        }
                    });
                    $rootScope.$on("addrDiff", function(event, addrDiff) {
                        if (!addrDiff) {
                            return;
                        }
                        $logger.info("checkout_fpti", addrDiff);
                    });
                    function getHash(url) {
                        if (!url || !~url.indexOf("#")) {
                            return;
                        }
                        url = url.split("#");
                        return url[url.length - 1];
                    }
                    var oldHash = window.location.hash;
                    window.addEventListener("hashchange", function(event) {
                        $logger.info("hashchange", {
                            from: getHash(event.oldURL || oldHash),
                            to: getHash(event.newURL || window.location.hash)
                        });
                        oldHash = window.location.hash;
                    });
                    $(document).on("click", function(event) {
                        if (event && event.target && event.target.tagName) {
                            var name = event.target.tagName.toLowerCase();
                            if (event.target.id) {
                                name += "#" + event.target.id;
                            } else if (event.target.attributes && event.target.attributes["ng-model"]) {
                                name += ":" + event.target.attributes["ng-model"].value;
                            } else if (event.target.className) {
                                name += "." + event.target.className.split(" ").join(".");
                            }
                            $logger.info("click", {
                                el: name
                            });
                        }
                    });
                    var cplSettings = $config.enableCPL;
                    var token = window.meta.token;
                    var addTrackingData = function addTrackingData(object) {
                        return $util.extend(object, {
                            dc: $meta.dc,
                            az: $meta.az,
                            cust: $AuthModel.instance().buyer_id || "",
                            comp: "hermesnodeweb"
                        });
                    };
                    var passesCplThrottle = cplSettings && (typeof cplSettings.throttle === "undefined" || $experiment("cpl_tracking", cplSettings.throttle, token));
                    if (passesCplThrottle || $util.params().forceEnableCPL) {
                        window.fptiserverurl = getBeaconUrl();
                        var firstInvocation = true;
                        var trackPageStart = function trackPageStart() {
                            if (firstInvocation) {
                                firstInvocation = false;
                                return;
                            }
                            try {
                                window.PAYPAL.analytics.startCPLTracking();
                            } catch (e) {
                                console.log("error starting cpl tracking", e);
                            }
                        };
                        var firstDone = true;
                        var trackDone = function trackDone(beaconData) {
                            window.PAYPAL.analytics.endCPLTracking({
                                pageData: addTrackingData(beaconData),
                                inferStart: firstDone
                            });
                            firstDone = false;
                        };
                        var currentRoute = null;
                        $rootScope.$on("startLoad", function() {
                            return trackPageStart();
                        });
                        $rootScope.$on("$stateChangeSuccess", function(e, route) {
                            currentRoute = route;
                        });
                        $rootScope.$on("allLoaded", function() {
                            try {
                                var buildParams = {
                                    productOverride: window.fptiProductOverride,
                                    trackingData: $fpti.getPageTrackingData(currentRoute)
                                };
                                var legacyFptiData = new $FptiBuilder(buildParams).build()._dataObj;
                                var product = window.fptiProductOverride || "ec";
                                legacyFptiData.pgrp = "main:" + product + ":hermes";
                                legacyFptiData.flid = token;
                                trackDone(legacyFptiData);
                            } catch (e) {
                                console.log("error tracking CPL data", e);
                            }
                        });
                    } else {
                        $rootScope.$on("$transition", function(event, data) {
                            $timeout(function() {
                                if ($fpti) {
                                    var fptiData = $fpti.setupDataString(data.toState, null, addTrackingData({
                                        transition_time: data.duration
                                    }));
                                    $ButtonTrackingService.fireBeacon(fptiData);
                                }
                            });
                        });
                    }
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/console-browserify/index.js"));
    },
    "./components/xo-tracking/dist/fpti.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-tracking/dist/builder.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("tracking.fpti", [ "squid", "tracking.builder" ]).factory("$fpti", function($config, $FptiBuilder, $rootScope, $window, $util) {
                    var _beaconUrl;
                    if ($config.deploy.isLocal() || $config.deploy.isStage()) {
                        _beaconUrl = "https://tracking.qa.paypal.com/webapps/tracking/ts";
                    } else {
                        _beaconUrl = $config.urls && $config.urls.fptiBeaconUrl;
                    }
                    return {
                        getPageTrackingData: function getPageTrackingData(route) {
                            route = route || {};
                            var trackingData = route.trackingData || {};
                            var routeParent = route.parent;
                            trackingData.token = $rootScope.token;
                            while (routeParent) {
                                trackingData = angular.merge({}, routeParent.trackingData || {}, trackingData);
                                routeParent = routeParent.parent;
                            }
                            return trackingData;
                        },
                        setupDataString: function setupDataString(route, err, data) {
                            var trackingData = this.getPageTrackingData(route);
                            var fptiData;
                            var PAYPAL = window.PAYPAL;
                            if (PAYPAL && typeof PAYPAL.analytics !== "undefined") {
                                PAYPAL.core = PAYPAL.core || {};
                                var payload = {
                                    trackingData: trackingData,
                                    error: err,
                                    isInContext: $rootScope.miniBrowser
                                };
                                angular.extend(payload, data || {});
                                fptiData = new $FptiBuilder(payload).build().toString();
                                if (route && route.template && angular.isFunction(PAYPAL.analytics.setup)) {
                                    PAYPAL.core.pta = PAYPAL.analytics.setup({
                                        data: fptiData,
                                        url: _beaconUrl
                                    });
                                }
                            }
                            return fptiData;
                        }
                    };
                }).factory("$fptiError", function($Error) {
                    function stringifyErrorMessage(msg) {
                        return encodeURIComponent(angular.isString(msg) ? msg.split("\n").slice(0, 2).join("@") : (angular.toJson(msg) || "undefined").substring(0, 128));
                    }
                    return $Error.extend({
                        construct: function construct(err) {
                            if (!err) {
                                return;
                            }
                            this.type = err.type;
                            this.field = err.field;
                            this.msg = stringifyErrorMessage(err.message || err.error);
                            this.code = err.code || err.cause;
                        }
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-tracking/dist", "components/xo-tracking/dist/fpti.js");
    },
    "./components/xo-tracking/dist/builder.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-tracking/dist/model.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("tracking.builder", [ "squid", "tracking.model" ]).factory("$FptiBuilder", function($Class, $locale, $rootScope, $FptiConstants, $FptiDataModel, $CalDataModel, $util, $getLatestCorrelationID) {
                    return $Class.extend("FptiBuilder", {
                        resolvePageQualifier: function resolvePageQualifier(trackingData) {
                            this.pageQualifier = trackingData && trackingData.pageQualifier ? trackingData.pageQualifier : "fullpage";
                        },
                        build: function build() {
                            if (!this.trackingData && !this.error) {
                                return this;
                            }
                            this.resolvePageQualifier(this.trackingData);
                            this._dataObj = new $FptiDataModel().decorate("buzname", this.trackingData, this.pageQualifier, undefined, this.productOverride).decorate("templateName", this.trackingData, this.pageQualifier).decorate("locale", $locale).decorate("pageGoal", this.trackingData.pageGoal).decorate("ecToken", this.trackingData.token).decorate("correlationId", $getLatestCorrelationID()).decorate("uuid", $CalDataModel.getUUID()).decorate("fieldError", this.error).decorate("pageError", this.error).decorate("pageStartTime", new Date().getTime()).decorate("pxptrackingdata", this.trackingData.pxpData).decorate("transition_time", this.transition_time).decorate("cust", this.cust).decorate("dc", this.dc).decorate("az", this.az).decorate("comp", this.comp).getDataObject(this.isInContext);
                            return this;
                        },
                        toString: function toString() {
                            var dataAry = [];
                            angular.forEach(this._dataObj, function(v, k) {
                                dataAry.push(k + "=" + v);
                            });
                            return dataAry.join("&");
                        }
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-tracking/dist", "components/xo-tracking/dist/builder.js");
    },
    "./components/xo-tracking/dist/button.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-models/src/checkout/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("button.tracking", [ "squid", "xomodel.checkout" ]).factory("$ButtonTrackingService", function($rootScope, $http, $populate, $CheckoutAppDataModel, $CheckoutPayeeModel, $meta, $cookies) {
                    var _beaconUrl = "https://www.paypalobjects.com/en_US/i/scr/btn_tracking_pixel.gif?teal=null&Id=null&ru=null";
                    var _beaconParams = [ "fltk", "calc", "page", "xe", "xt" ];
                    var _alreadyFired = false;
                    function _strToElements(str) {
                        var elements = {};
                        if (str && str.length) {
                            str.split("&").forEach(function(param) {
                                var nvp = param.split("=");
                                elements[nvp[0]] = nvp[1];
                            });
                        }
                        return elements;
                    }
                    function _fireButtonTrackingBeacon(elements) {
                        var url = _beaconUrl;
                        var xoData = {};
                        function buildParam(param, value) {
                            var p = "&" + param + "=" + (value ? value : "null");
                            return p;
                        }
                        function getGUIID(ts) {
                            return _strToElements(ts).vr;
                        }
                        function addToDocument(uri) {
                            var img = document.createElement("img");
                            img.setAttribute("src", uri);
                            document.body.appendChild(img);
                        }
                        _beaconParams.forEach(function(param) {
                            url += buildParam(param, elements[param]);
                        });
                        url += buildParam("fpti", getGUIID($cookies && $cookies.ts));
                        url += buildParam("WWW_AKA_MVT_BUTTONS", $cookies && $cookies.WWW_AKA_MVT_BUTTONS);
                        url += buildParam("WWW_AKA_MVT_ID", $cookies && $cookies.WWW_AKA_MVT_ID);
                        url += buildParam("ip", $meta && $meta.ipaddress);
                        if ($rootScope.token) {
                            $populate(xoData, {
                                payee: $CheckoutPayeeModel.instance($rootScope.token),
                                appData: $CheckoutAppDataModel.instance($rootScope.token)
                            }).then(function() {
                                url += buildParam("mrid", xoData.payee && xoData.payee.getId());
                                url += buildParam("calf", xoData.appData && xoData.appData.flow_id);
                                addToDocument(url);
                            });
                        } else {
                            url += buildParam("mrid", null);
                            url += buildParam("calf", null);
                            addToDocument(url);
                        }
                    }
                    return {
                        fireBeacon: function fireBeacon(fptiData) {
                            if (!_alreadyFired && fptiData) {
                                var elements = _strToElements(fptiData);
                                if (elements.page) {
                                    _alreadyFired = true;
                                    return _fireButtonTrackingBeacon(elements);
                                }
                            }
                        },
                        resetAlreadyFired: function resetAlreadyFired() {
                            _alreadyFired = false;
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-tracking/dist", "components/xo-tracking/dist/button.js");
    },
    "./components/xo-tracking/dist/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular) {
            angular.module("tracking.directive", [ "ui.router" ]).directive("trackSubmit", function($state, $rootScope) {
                return {
                    restrict: "AE",
                    link: function link($scope, element, attr) {
                        element.on("mousedown", function(event) {
                            var transition = attr && attr.trackSubmit;
                            var trackSubmit = {
                                currentRoute: $state.current,
                                transition: transition,
                                errors: []
                            };
                            angular.forEach($("input.ng-invalid, select.ng-invalid"), function(el) {
                                var elem = $(el);
                                var elementId = elem.attr("id");
                                var elementName = elem.attr("name");
                                var errorKey = elem.attr("data-error-key");
                                var errorText = elem.has("required") ? "required" : "no error key";
                                var fieldName = elementId ? elementId : elementName;
                                if (!fieldName) {
                                    var elementModel = elem.attr("ng-model");
                                    fieldName = elementModel ? elementModel : "unnamed-field";
                                }
                                trackSubmit.errors.push({
                                    fieldName: fieldName,
                                    errorMessage: errorKey ? errorKey : errorText
                                });
                            });
                            $rootScope.$broadcast("trackSubmit", trackSubmit);
                        });
                    }
                };
            }).directive("trackLink", function($state, $rootScope) {
                return {
                    restrict: "AE",
                    link: function link($scope, element, attr) {
                        element.on("mousedown", function(event) {
                            var state = attr && attr.trackLink;
                            if (state) {
                                var trackLink = {
                                    currentRoute: $state.current,
                                    transition: state
                                };
                                $rootScope.$broadcast("trackLink", trackLink);
                            }
                        });
                    }
                };
            }).directive("trackClick", function($state, $rootScope) {
                return {
                    restrict: "AE",
                    link: function link($scope, element, attr) {
                        element.on("click", function(event) {
                            var state = attr && attr.trackClick;
                            if (state) {
                                var trackClick = {
                                    currentRoute: $state.current,
                                    transition: state
                                };
                                $rootScope.$broadcast("trackClick", trackClick);
                            }
                        });
                    }
                };
            }).directive("trackInput", function($state, $rootScope) {
                return {
                    restrict: "AE",
                    link: function link($scope, element, attr) {
                        element.on("click", function(event) {
                            var state;
                            if (event.target.type === "checkbox") {
                                if (event.target.checked) {
                                    state = attr && attr.trackInput + "_CHECKED";
                                } else {
                                    state = attr && attr.trackInput + "_UNCHECKED";
                                }
                            } else {
                                state = attr && attr.trackInput;
                            }
                            var trackInput = {
                                currentRoute: $state.current,
                                page: "main:ec:hermes::fullpage-billing:guest:aries:"
                            };
                            if (state) {
                                trackInput.transition = state;
                            }
                            $rootScope.$broadcast("trackInput", trackInput);
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./pages/xo-landing/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$LandingRoute = undefined;
        __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/xo-models/src/checkout/index.js");
        __webpack_require__("./components/xo-models/src/auth/index.js");
        __webpack_require__("./components/xo-models/src/shippingMethod/index.js");
        __webpack_require__("./components/xo-models/src/inventory/index.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $LandingRoute = exports.$LandingRoute = _squid.$ComponentRoute.extend("$LandingRoute", {
            path: "landing",
            trackingData: {
                fptiState: "landing",
                trackStateExit: true
            },
            auth: false,
            resolve: {
                action: function action($window, $feature, $CheckoutAppDataModel, $CheckoutCartModel, $CheckoutPayeeModel, $ShippingRuleSummaryModel, $Class, $experiment, $rootScope, $state, $populate, $logger, $q, $config, $AuthModel, $FallbackError, $util, $dispatch, $locale, $pxp, $InventoryModel, $InstallmentOptionsModel, $CreditDataModel, $FlowEligibilityModel) {
                    var models = {};
                    return $populate(models, {
                        checkoutAppData: $CheckoutAppDataModel.instance($rootScope.token),
                        checkoutCart: $CheckoutCartModel.instance($rootScope.token),
                        auth: $AuthModel.instance(),
                        checkoutPayeeModel: $CheckoutPayeeModel.instance($rootScope.token),
                        flowEligibility: $FlowEligibilityModel.instance($rootScope.token).retrieve({
                            params: {
                                localeCountry: $locale.country
                            }
                        })
                    }).then(function() {
                        var forced_signup_offered = models.flowEligibility.guest ? 0 : 1;
                        $logger.info("checkout_fpti", {
                            from: "LANDING_PAGE_PARAM",
                            forced_signup_offered: forced_signup_offered
                        });
                        var landingFlow = function landingFlow() {
                            var merchantCountry = models.checkoutAppData.get("merchant.merchant_country", "US");
                            var supportBlockNonDomesticShipping = $feature("supportBlockNonDomesticShipping", false, merchantCountry);
                            var prefillShippingAddress = models.checkoutCart.get("purchase.shipping_address");
                            var blockNonDomesticShipping = models.checkoutAppData.get("flags.block_non_domestic_shipping");
                            var allowChangeShipping = models.checkoutAppData.get("flags.allow_change_shipping");
                            if (supportBlockNonDomesticShipping && blockNonDomesticShipping) {
                                $logger.info("block_non_domestic_shipping", {
                                    block_non_domestic_shipping: blockNonDomesticShipping,
                                    allow_change_shipping: allowChangeShipping,
                                    setec_shipping_country_code: prefillShippingAddress
                                });
                            }
                            var shouldBlockBuyer = supportBlockNonDomesticShipping && blockNonDomesticShipping && !allowChangeShipping && prefillShippingAddress && prefillShippingAddress.country_code !== merchantCountry && prefillShippingAddress.country_code !== "";
                            if (shouldBlockBuyer) {
                                return {
                                    to: "checkout.genericError",
                                    params: {
                                        code: "BLOCK_NON_DOMESTIC_SHIPPING"
                                    }
                                };
                            }
                            var isPayPalCredit = models.checkoutAppData.is_second_button_txn || $Class.get(window, "xprops.fundingSource") === "credit";
                            if (isPayPalCredit) {
                                var creditDataModel = $CreditDataModel.instance($rootScope.token);
                                var isCapeReturnKey = creditDataModel.getCapeKey();
                                var offers = $InstallmentOptionsModel.instance($rootScope.token);
                                var installmentOptions;
                                var isInstallmentEligible = models.flowEligibility.installment;
                                var country = models.checkoutAppData.get("merchant.merchant_country");
                                return offers.save({
                                    data: {
                                        payee: models.checkoutPayeeModel,
                                        checkoutCart: models.checkoutCart,
                                        checkoutAppData: models.checkoutAppData,
                                        isMemberCredit: true
                                    },
                                    success: function success(result) {
                                        installmentOptions = result && result.installments && result.installments[0] && result.installments[0].installment_options && result.installments[0].installment_options.length > 0;
                                        if (isCapeReturnKey) {
                                            if (country === "DE") {
                                                return "checkout.xoDeGuest";
                                            }
                                            return "checkout.login";
                                        } else if (country === "GB" || isInstallmentEligible && installmentOptions) {
                                            $logger.info("ppc_second_btn_acquisition");
                                            return "checkout.chooseCreditOffer";
                                        } else if (country === "DE") {
                                            if (installmentOptions) {
                                                return "checkout.chooseCreditOffer";
                                            } else {
                                                return {
                                                    to: "checkout.genericError",
                                                    params: {
                                                        code: "BLOCK_PPC_INELIGIBLE_USER"
                                                    }
                                                };
                                            }
                                        } else {
                                            $logger.info("ppc_second_btn_resuse");
                                            return "checkout.login";
                                        }
                                    },
                                    contingencies: {
                                        DEFAULT: function DEFAULT(name, err) {
                                            return "checkout.login";
                                        }
                                    }
                                });
                            }
                            return "checkout.login";
                        };
                        var cartHasInventory = models.checkoutCart.get("cartHasInventory");
                        if ($config.enableInventoryWPS && cartHasInventory) {
                            var inventoryModel = $InventoryModel.instance($rootScope.token);
                            var inventoryInput = {
                                items: models.checkoutCart.get("purchase.items"),
                                merchantId: models.checkoutPayeeModel.getId()
                            };
                            return inventoryModel.action("getInventory", {
                                data: inventoryInput,
                                success: function success(inventoryResponse) {
                                    if (inventoryResponse.showSoldoutPage) {
                                        return {
                                            to: "checkout.soldout",
                                            params: {
                                                items: encodeURIComponent(inventoryResponse.soldoutItems),
                                                soldOutUrl: encodeURIComponent(inventoryResponse.soldoutUrl)
                                            }
                                        };
                                    } else {
                                        inventoryModel.setInvetoryItems(inventoryResponse);
                                        return landingFlow();
                                    }
                                }
                            });
                        } else {
                            return landingFlow();
                        }
                    });
                }
            }
        });
        angular.value("$LandingRoute", $LandingRoute);
        _squid.$ComponentRoute;
    },
    "./components/xo-models/src/shippingMethod/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xomodel.shippingMethod", [ "squid" ]).factory("$ShippingMethodModel", function($Model, $Api) {
                    return $Model.extend("ShippingMethodModel", {
                        api: new $Api({
                            uri: "/api/shippingtax/charges"
                        }),
                        getShippingMethodId: function getShippingMethodId(shippingMethodType) {
                            var shippingMethodsMap = {
                                DEFAULT: "0",
                                AIR_SERVICE: "1",
                                ECONOMY: "2",
                                EXPEDITED_AIR_SERVICE: "3",
                                EXPEDITED_FLAT_RATE_SHIPPING: "4",
                                EXPRESS: "5",
                                EXPRESS_DOMESTIC: "6",
                                FREE_SHIPPING: "7",
                                GROUND: "8",
                                GLOBAL_PRIORITY: "9",
                                INTERNATIONAL_ECONOMY: "10",
                                INTERNATIONAL_EXPEDITED: "11",
                                INTERNATIONAL_EXPRESS: "12",
                                INTERNATIONAL_EXPRESS_AIR: "13",
                                INTERNATIONAL_PRIORITY_AIR: "14",
                                NEXT_DAY: "15",
                                NEXT_DAY_AIR: "16",
                                NEXT_DAY_AIR_ECONOMY: "17",
                                ONE_DAY_SHIPPING: "18",
                                OVERNIGHT: "19",
                                OVERNIGHT_FLAT_RATE_SHIPPING: "20",
                                PICKUP: "21",
                                PRIORITY: "22",
                                RUSH_DELIVERY: "23",
                                STANDARD_DOMESTIC: "24",
                                STANDARD_EXPEDITED: "25",
                                STANDARD_FLAT_RATE_SHIPPING: "26",
                                STANDARD_INTERNATIONAL: "27",
                                STANDARD_SHIPPING: "28",
                                STORE_PICKUP: "29",
                                TWO_DAY_SHIPPING: "30",
                                WORLDWIDE_SHIPPING: "31",
                                TWO_DAY_AIR: "32"
                            };
                            return shippingMethodsMap[shippingMethodType];
                        },
                        isStorePickUp: function isStorePickUp(shipping_method_type) {
                            return shipping_method_type === "STORE_PICKUP" || shipping_method_type === "PICKUP";
                        }
                    });
                }).factory("$ShippingRuleSummaryModel", function($Model, $Api) {
                    return $Model.extend("ShippingRuleSummaryModel", {
                        api: new $Api({
                            uri: "/api/shippingtax/:id/rulesSummary"
                        })
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/shippingMethod", "components/xo-models/src/shippingMethod/index.js");
    },
    "./components/xo-models/src/inventory/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xomodel.inventory", [ "squid" ]).factory("$InventoryModel", function($Model, $Api) {
                    return $Model.extend("$InventoryModel", {
                        api: new $Api({
                            uri: "/api/catalog/:id/item/",
                            postAttempts: 2,
                            cache: true
                        }),
                        setInvetoryItems: function setInvetoryItems(inventoryItems) {
                            this.inventoryItems = inventoryItems;
                        },
                        getInventoryItems: function getInventoryItems() {
                            return this.inventoryItems;
                        }
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/inventory", "components/xo-models/src/inventory/index.js");
    },
    "./pages/xo-login/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$LoginRoute = undefined;
        __webpack_require__("./pages/xo-login/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $LoginRoute = exports.$LoginRoute = _squid.$ComponentRoute.extend("$LoginRoute", {
            path: "login",
            directive: "xo-login-page",
            query: [ "venmoError" ],
            params: {
                targetPage: null,
                source: null,
                showNotYou: null
            },
            auth: false,
            titleContent: "base.logIn",
            trackingData: {
                fptiState: "login",
                suppressTransitionLog: true,
                templateName: "login.dust",
                pageGoal: "Payment Start",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-login",
                        pagename2: "%::fullpage-login:member:hermes:",
                        version: "member:%:"
                    },
                    ulLogin: {
                        pagename: "%::fullpage-ullogin",
                        pagename2: "%::fullpage-ullogin:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: []
        });
        angular.value("$LoginRoute", $LoginRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-login/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            exports.$xoLoginPageComponent = undefined;
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _miniBrowser = __webpack_require__("./js/lib/miniBrowser.js");
            var _integration = __webpack_require__("./js/lib/integration.js");
            var _template = __webpack_require__("./pages/xo-login/template.html");
            var _template2 = _interopRequireDefault(_template);
            __webpack_require__("./js/lib/index.js");
            __webpack_require__("./pages/xo-login/loginEligibility.js");
            __webpack_require__("./pages/xo-login/onboarding/directive.js");
            __webpack_require__("./pages/xo-login/util.js");
            var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
            var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
            __webpack_require__("./components/xo-models/src/app/index.js");
            __webpack_require__("./components/xo-models/src/fi/index.js");
            __webpack_require__("./components/xo-ui-components/src/message/directive.js");
            __webpack_require__("./components/xo-title/dist/directive.js");
            __webpack_require__("./components/xo-login-components/src/login/handler/directive.js");
            __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
            __webpack_require__("./components/xo-form-components/src/language-options/directive.js");
            __webpack_require__("./components/xo-login-components/src/unified-login/directive.js");
            __webpack_require__("./components/xo-device-info/dist/index.js");
            __webpack_require__("./components/xo-login-components/src/onetouch-interstitial/kmliUpsell.js");
            __webpack_require__("./pages/xo-landing/route.js");
            __webpack_require__("./components/xo-ui-components/src/card-loader/directive.js");
            __webpack_require__("./pages/xo-login/tokenized-wallet-loader/directive.js");
            var _factory = __webpack_require__("./pages/xo-login/tokenized-wallet-loader/factory.js");
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
            var _newMember = __webpack_require__("./components/xo-models/src/newMember/index.js");
            var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            var $xoLoginPageComponent = exports.$xoLoginPageComponent = _squid.$Component.extend("$xoLoginPageComponent", {
                tag: "xo-login-page",
                template: _template2["default"],
                scope: {
                    token: "="
                },
                link: function link($scope) {
                    _logger.$logger.info("login_link");
                },
                lifecycle: {
                    populate: function populate() {
                        var $scope = this;
                        (0, _squid.$populate)($scope, {
                            checkoutAppData: _index.$CheckoutAppDataModel.instance($scope.token)
                        }).then(function() {
                            var country = $scope.checkoutAppData.merchant.merchant_country;
                            (0, _squid.$pxp)("xo_hermesnode_config", {
                                "ctx.COUNTRY": country
                            }, "xo_hermesnode_hide_cart_logo_treatment").then(function(result) {
                                var treatmentName = result && result.treatment_name || "";
                                if (treatmentName) {
                                    _logger.$logger.info("xo_hermesnode_hide_cart_logo_treatment");
                                    $(".cartContainer").hide();
                                    $(".merchantHeader > .headerWrapper").hide();
                                }
                            });
                        });
                    },
                    exit: function exit() {
                        var $scope = this;
                        (0, _squid.$populate)($scope, {
                            checkoutAppData: _index.$CheckoutAppDataModel.instance($scope.token)
                        }).then(function() {
                            var country = $scope.checkoutAppData.merchant.merchant_country;
                            (0, _squid.$pxp)("xo_hermesnode_config", {
                                "ctx.COUNTRY": country
                            }, "xo_hermesnode_hide_cart_logo_treatment").then(function(result) {
                                var treatmentName = result && result.treatment_name || "";
                                if (treatmentName) {
                                    $(".cartContainer").show();
                                    $(".merchantHeader > .headerWrapper").show();
                                }
                            });
                        });
                    }
                },
                rootEvents: {
                    allLoaded: function allLoaded() {
                        if (!_integration.$integration.getConfig("ALLOW_AUTH")) {
                            if (_integration.$integration.getConfig("CAN_FRAMEBUST")) {
                                return _miniBrowser.$miniBrowser.frameBust(this.props.token);
                            } else {
                                throw _integration.$integration.error("Can not framebust");
                            }
                        }
                    }
                },
                controller: function controller($scope, $FallbackError, $window, $location, $locale, $renderContent, $FlowEligibilityModel, $CheckoutSessionModel, $BuyerEligibilityModel, $EConsentModel, $AuthModel, $feature, $AppDataModel, $config, $logger, $q, $pxp, $pxpFactors, $timeout, $util, $experiment, $loginEligibility, $dispatch, $DeviceInfo, $KmliUpsell, $ReturnToMerchant, $meta, $CheckoutCartModel, $CreditDataModel, $capeRedirectUtil, $TokenizedWalletEligibilityModel, $TokenizedWalletPinModel, $WalletPreferences, $MemberSegmentModel, $TokenizedWalletInfoModel) {
                    $logger.info("login_controller");
                    var fptiHardErrors = [ "RESTRICTED_USER", "PAYEE_BLOCKED_TRANSACTION", "PAYMENT_ALREADY_DONE", "PAYMENT_DENIED", "PAYEE_ACCOUNT_RESTRICTED", "INVALID_RESOURCE_ID", "EXPIRED_SESSION", "PAYER_COUNTRY_NOT_ALLOWED", "PAYER_LOGIN_COUNTRY_NOT_ALLOWED", "GAMING_FUNDING_SOURCE_VALIDATION_FAILED" ];
                    var memberSegmentMapper = {
                        NEW_MEMBER: "NEW_XO_MEMBER",
                        YOUNG_MEMBER: "YOUNG_XO_MEMBER",
                        EXISTING_MEMBER: "EXISTING_XO_MEMBER"
                    };
                    $scope.ulEligibility = false;
                    $scope.isWalletTokenization = false;
                    if (window.performance && window.performance.navigation && window.performance.navigation.type === 2) {
                        _angular.$rootScope.forceLogin = true;
                    }
                    if (!_angular.$rootScope.forceLogin) {
                        $scope.autoLogin = true;
                    }
                    _angular.$rootScope.forceLogin = true;
                    $scope.hideGuest = _uiRouter.$stateParams.targetPage === "PAYER_AUTHENTICATION_REQUIRED" || _uiRouter.$stateParams.showNotYou;
                    $scope.promptlogin = $scope.hideGuest && !$feature("riskyLoginContingency");
                    if ($DeviceInfo.isApp()) {
                        $logger.debug("HERMES_IN_MOBILE_WEBVIEW");
                    }
                    if (!_miniBrowser.$miniBrowser.isMiniBrowser() && $locale.country === "BR") {
                        var brPxp = $config.pxpExperiments.BR.xo_br_hermesnode_login_design;
                        $pxpFactors(brPxp.pgName, brPxp.params, brPxp.pattern).then(function(result) {
                            $scope.loginDesignExp = result;
                        });
                    }
                    var ROUTE_MAPPING = {
                        ECONSENT_REQUIRED: "checkout.econsent"
                    };
                    $scope.onContingency = function(name, contingency) {
                        if (!ROUTE_MAPPING[name]) {
                            throw new $FallbackError({
                                reason: name.toLowerCase(),
                                product: "ux"
                            });
                        }
                        _uiRouter.$state.go(ROUTE_MAPPING[name]);
                    };
                    $scope.buyerEligibility = $BuyerEligibilityModel.instance($scope.token);
                    $scope.checkoutSession = $CheckoutSessionModel.instance($scope.token);
                    $scope.eConsent = $EConsentModel.instance($scope.token);
                    $scope.tokenizedWalletEligibility = $TokenizedWalletEligibilityModel.instance($scope.token);
                    $scope.tokenizedWalletPin = $TokenizedWalletPinModel.instance($scope.token);
                    $scope.walletPreferences = $WalletPreferences.instance($scope.token);
                    $scope.memberSegment = $MemberSegmentModel.instance();
                    $scope.dependencyEligibility = true;
                    $scope.setBuyer = function() {
                        var fptiData = {
                            from: "CREATE_XO_SESSION",
                            to: "process_create_xo_session"
                        };
                        function handleContingency(name, err) {
                            if (!$scope.dependencyEligibility) {
                                return;
                            }
                            var errorCode = err.cause || name;
                            fptiData.int_error_code = errorCode;
                            fptiData.error_source = "paymentapiplatformserv";
                            fptiData.error_type = fptiHardErrors.indexOf(errorCode) > -1 ? "hard_decline" : "soft_decline";
                            $logger.info("checkout_fpti", fptiData);
                            if (name !== "NEED_AUTHENTICATED_CARD") {
                                throw err;
                            }
                            if ($util.param("redirectToHermesOnUpopCancel") === "xoon" || err && err.resolution && err.resolution.data && err.resolution.data.alternate_options) {
                                _uiRouter.$state.go("checkout.review");
                            } else {
                                _uiRouter.$state.go("checkout.updateCard.addCardFlow.addCard");
                            }
                        }
                        function handleNoValidTopupFiContingency(name, err) {
                            if (!$scope.dependencyEligibility) {
                                return;
                            }
                            if ($scope.isWalletTokenization) {
                                fptiData.int_error_code = err.cause;
                                fptiData.error_source = "paymentapiplatformserv";
                                fptiData.error_type = fptiHardErrors.indexOf(err.cause) > -1 ? "hard_decline" : "soft_decline";
                                $logger.info("checkout_fpti", fptiData);
                                $scope.checkoutSession.contingency = name;
                                _factory.$TokenizedWalledLoaderFactory.goToTokenizationInfoPage();
                            } else {
                                handleContingency(name, err);
                            }
                        }
                        $logger.info("checkout_fpti", {
                            from: "CREATE_XO_SESSION",
                            to: "prepare_create_xo_session"
                        });
                        $scope.isWalletTokenization = $scope.checkoutCart.isWalletTokenization();
                        if ($scope.isWalletTokenization) {
                            _angular.$rootScope.$emit("allLoaded");
                        }
                        $scope.eConsent.retrieve({
                            batch: {
                                name: "setbuyer",
                                silent: $scope.isWalletTokenization,
                                id: "eConsent",
                                dependencies: [ "buyerEligibility" ]
                            },
                            contingencies: {
                                ECONSENT_REQUIRED: function ECONSENT_REQUIRED(name, err) {
                                    if ($scope.dependencyEligibility) {
                                        $scope.dependencyEligibility = false;
                                        $logger.debug("ULLOGIN_ECONSENT_REQUIRED");
                                        _uiRouter.$state.go("checkout.econsent");
                                    }
                                }
                            }
                        });
                        $scope.buyerEligibility.retrieve({
                            batch: {
                                name: "setbuyer",
                                id: "buyerEligibility",
                                silent: $scope.isWalletTokenization,
                                dependencies: $scope.ulEligibility ? [ "securityCtx" ] : []
                            },
                            success: function success(result) {
                                $logger.info(result.eligible ? "buyer_eligible" : "buyer_ineligible");
                                if ($config.blockStudentAccount && $scope.auth.student_account) {
                                    $scope.dependencyEligibility = false;
                                    $logger.info("blocking_student_account");
                                    _uiRouter.$state.go("checkout.genericError", {
                                        code: "STUDENT_ACCOUNT"
                                    });
                                    return;
                                }
                                if (result.clearedRT) {
                                    $logger.info("checkout_fpti", {
                                        from: "CONTINGENCY",
                                        to: "process_fallback",
                                        routing_reason: "BUYER_INELIGIBLE"
                                    });
                                }
                                if (!result.eligible) {
                                    $scope.dependencyEligibility = false;
                                    throw new $FallbackError({
                                        reason: "buyer_ineligible",
                                        product: "ux"
                                    });
                                }
                            }
                        });
                        if ($scope.isWalletTokenization) {
                            var _$scope$tokenizedWall = $scope.tokenizedWalletInfoModel, wallet_id = _$scope$tokenizedWall.wallet_id, external_device_id = _$scope$tokenizedWall.external_device_id, tr_client_id = _$scope$tokenizedWall.tr_client_id, product_name = _$scope$tokenizedWall.product_name;
                            var subject = $scope.tokenizedWalletInfoModel.getSubject();
                            var WALLET_BRANDS = {
                                google: "APAY",
                                Samsung: "SAMSUNGPAY"
                            };
                            var params = {
                                wallet_brand: WALLET_BRANDS[subject],
                                tenant_id: "Hermes",
                                wallet_id: wallet_id,
                                external_device_id: external_device_id,
                                subject: subject,
                                tr_client_id: tr_client_id,
                                product_name: product_name
                            };
                            if ($meta.query && $meta.query.wallet_id) {
                                params.wallet_id = $meta.query.wallet_id;
                            }
                            if ($meta.query && $meta.query.jwt) {
                                params.jwt = $meta.query.jwt;
                            }
                            $scope.tokenizedWalletEligibility.retrieve({
                                params: params,
                                batch: {
                                    name: "setbuyer",
                                    id: "tokenizedWalletLightEligibility",
                                    silent: $scope.isWalletTokenization,
                                    dependencies: [ "eConsent", "buyerEligibility" ]
                                },
                                success: function success(result) {
                                    if (!result.eligible) {
                                        var msg = "tokenized_wallet_ineligible_for_provisioning";
                                        $logger.info(msg);
                                        if ($scope.dependencyEligibility) {
                                            $scope.dependencyEligibility = false;
                                            var code = void 0;
                                            fptiData.int_error_code = result.reason;
                                            fptiData.error_source = "paymenttokenserv";
                                            fptiData.error_type = "hard_decline";
                                            $logger.info("checkout_fpti", fptiData);
                                            switch (result.reason) {
                                              case "WALLET_ID_ALREADY_PROVISIONED":
                                                code = "ANDROID_PAY_ALREADY_PROVISIONED";
                                                break;

                                              case "COUNTRY_NOT_SUPPORTED":
                                                code = "ANDROID_PAY_COUNTRY_NOT_SUPPORTED";
                                                break;

                                              default:
                                                code = "ANDROID_PAY_ELIGIBILITY_ERROR";
                                                break;
                                            }
                                            code = window.btoa(code);
                                            _uiRouter.$state.go("checkout.genericError", {
                                                code: code
                                            });
                                        }
                                    }
                                }
                            });
                            $scope.tokenizedWalletPin.retrieve({
                                batch: {
                                    name: "setbuyer",
                                    id: "tokenizedWalletPin",
                                    silent: $scope.isWalletTokenization,
                                    dependencies: [ "eConsent", "buyerEligibility" ]
                                },
                                success: function success(result) {
                                    if (result.pinId) {
                                        $logger.info("tokenized_wallet_get_pin_set", {
                                            pinOrigin: result.pinOrigin,
                                            pinId: result.pinId
                                        });
                                    } else {
                                        $logger.info("tokenized_wallet_get_pin_not_set", {
                                            pinKey: result.suggestedKey ? result.suggestedKey : "unavailable"
                                        });
                                    }
                                },
                                contingencies: {
                                    DEFAULT: function DEFAULT(name, err) {
                                        $logger.info("tokenized_wallet_get_pin_error");
                                        return _uiRouter.$state.go("checkout.genericError", {
                                            code: "DEFAULT"
                                        });
                                    }
                                }
                            });
                        }
                        if ($config.enableNewMemberDecisioning) {
                            $logger.info("checkout_fpti", {
                                from: "CEP_decisioning",
                                to: "prepare_cep_descisioning"
                            });
                            $scope.memberSegment.save({
                                data: $scope.memberSegmentData,
                                batch: {
                                    name: "setbuyer",
                                    id: "memberSegment",
                                    silent: $scope.isWalletTokenization,
                                    dependencies: $scope.ulEligibility ? [ "securityCtx" ] : []
                                },
                                success: function success(result) {
                                    var memberSegment = memberSegmentMapper[result.memberSegment] || result.memberSegment;
                                    $logger.info("cep_member_decisioning_success", {
                                        segment: memberSegment,
                                        creditOffer: result.creditOffer
                                    });
                                    $logger.info("checkout_fpti", {
                                        from: "CEP_decisioning",
                                        to: "process_cep_descisioning",
                                        cep_response: memberSegment + ":" + result.creditOffer
                                    });
                                },
                                contingencies: {
                                    DEFAULT: function DEFAULT(name, err) {
                                        $logger.info("cep_member_decisioning_failed");
                                        $logger.info("checkout_fpti", {
                                            from: "CEP_decisioning",
                                            to: "process_cep_descisioning",
                                            int_error_code: "SERVICE_ERROR",
                                            error_source: "marketingofferreadserv",
                                            error_type: "soft_decline"
                                        });
                                    }
                                }
                            });
                        }
                        var isPayPalCredit = $scope.checkoutAppData.is_second_button_txn || _squid.$Class.get(window, "xprops.fundingSource") === "credit";
                        $scope.checkoutSession.action("create", {
                            data: {
                                preselected_fi_type: isPayPalCredit ? "credit" : undefined
                            },
                            batch: {
                                name: "setbuyer",
                                id: "createCheckoutSession",
                                silent: $scope.isWalletTokenization,
                                dependencies: !$scope.isWalletTokenization ? [ "eConsent", "buyerEligibility" ] : [ "eConsent", "buyerEligibility", "tokenizedWalletLightEligibility", "tokenizedWalletPin" ]
                            },
                            success: function success(result) {
                                fptiData.available_plan_count = $scope.checkoutSession.getPlanList() ? $scope.checkoutSession.getPlanList().length : "0";
                                $logger.info("checkout_fpti", fptiData);
                                if (!$scope.dependencyEligibility) {
                                    return;
                                }
                                if ($scope.auth.password_less && $scope.checkoutCart.isBilling()) {
                                    if ($feature("pomaPasswordRecovery")) {
                                        _uiRouter.$state.go("checkout.createPassword", {
                                            targetPage: "BILLING_AGREEMENTS"
                                        });
                                    }
                                    return;
                                }
                                if (isPayPalCredit) {
                                    return $capeRedirectUtil.handleCapeRouting(result, $scope.checkoutCart, $scope.token);
                                }
                                if ($scope.isWalletTokenization) {
                                    $scope.planDone = true;
                                    return;
                                }
                                return $KmliUpsell.eligible($scope.token).then(function(eligibility) {
                                    var isEligible = eligibility && eligibility.interstitial ? eligibility.interstitial : {};
                                    if (isEligible.eligible) {
                                        var stateName = isEligible.type === "member" ? "KMLI_UPSELL" : "KMLI_reactivation";
                                        $logger.info("checkout_fpti", {
                                            from: stateName,
                                            to: "prepare_kmli_upsell"
                                        });
                                        $logger.info("ryi_optin", {
                                            from: "OT_Toggle",
                                            to: "prepare_inter_optin"
                                        });
                                        return _uiRouter.$state.go("checkout.oneTouchUpsell", {
                                            oneTouchFlowName: "checkout"
                                        });
                                    }
                                    if ($scope.auth.rtExchanged && $feature("rmSpinnerText")) {
                                        $scope.checkoutSession.message = {
                                            type: "success",
                                            msgKeys: [ "login.loggedInWithOneTouch" ]
                                        };
                                    }
                                    if ($scope.checkoutSession.negBals) {
                                        return _uiRouter.$state.go("checkout.negativeBalanceRecovery");
                                    }
                                    return _newMember.$NewMemberEligibility.instance().getVariant($scope.token).then(function(nmjVariant) {
                                        $logger.info("loginExit_nmjVariant_" + (nmjVariant || "unknown"));
                                        if (nmjVariant === "multi_page") {
                                            _uiRouter.$state.go("checkout.payWithCard");
                                        } else {
                                            _uiRouter.$state.go("checkout.review");
                                        }
                                    });
                                });
                            },
                            contingencies: {
                                NEED_DEBIT_CARD: handleNoValidTopupFiContingency,
                                EXPIRED_DEBIT_CARD: handleNoValidTopupFiContingency,
                                DEFAULT: handleContingency
                            }
                        });
                    };
                    $scope.preAuth = function() {
                        if ($scope.ulEligibility) {
                            $scope.setBuyer();
                        }
                    };
                    $scope.onSuccess = function() {
                        if ($scope.ulEligibility) {
                            return;
                        }
                        $scope.setBuyer();
                    };
                    (0, _squid.$populate)($scope, {
                        flowEligibility: $FlowEligibilityModel.instance($scope.token).retrieve({
                            params: {
                                geolocation: $meta.geolocation,
                                localeCountry: $locale.country
                            }
                        }),
                        auth: $AuthModel.instance(),
                        checkoutAppData: _index.$CheckoutAppDataModel.instance($scope.token),
                        checkoutCart: $CheckoutCartModel.instance(_angular.$rootScope.token),
                        checkoutPayeeModel: _index.$CheckoutPayeeModel.instance(_angular.$rootScope.token),
                        tokenizedWalletInfoModel: $TokenizedWalletInfoModel.instance(_angular.$rootScope.token).retrieve()
                    }).then(function() {
                        return _newMember.$NewMemberEligibility.instance().getMemberSegmentParameters($scope.token).then(function(data) {
                            $scope.memberSegmentData = data;
                            return;
                        });
                    }).then(function() {
                        var merchant_name = $scope.checkoutAppData.merchant.brand_name || $scope.checkoutAppData.merchant.merchant_name || $scope.checkoutAppData.merchant.merchant_email;
                        $scope.infoVenmo = {
                            msgs: [ $renderContent("landing.venmoAvailableSoon", {
                                merchant: merchant_name
                            }) ],
                            type: "info"
                        };
                        if (!_uiRouter.$stateParams.venmoError && _thirdPartyInfo.thirdPartyInfo.isVenmoEligible()) {
                            $q.all([ $pxp("xo_hermesnodeweb_pwv", {
                                "ctx.COUNTRY": $scope.checkoutAppData.get("merchant.merchant_country"),
                                uid: $scope.checkoutPayeeModel.getId()
                            }, "(xo_hermesnodeweb_pwv)(.*)"), $pxp("xo_hermesnode_pwv_enableAS2", {}, "xo_hermesnode_us_pwv_enableAS2_content_(.*)") ]).then(function(result) {
                                var enableOrderTransaction = false;
                                var hermesNodePwvExp = result[0];
                                var orderTransactionExp = result[1];
                                var treatmentNameEnableAS2 = orderTransactionExp && orderTransactionExp.treatment_name || "";
                                enableOrderTransaction = treatmentNameEnableAS2 === "xo_hermesnode_us_pwv_enableAS2_content_treatment_3175";
                                var isOrderEligible = !($scope.checkoutCart.get("payment_action") === "order" && !enableOrderTransaction);
                                var treatmentNameEnablePwv = hermesNodePwvExp && hermesNodePwvExp.treatment_name || "";
                                if (treatmentNameEnablePwv === "xo_hermesnodeweb_pwv_treatment_3720" && isOrderEligible) {
                                    _uiRouter.$state.go("checkout.payWithSelection");
                                } else {
                                    $scope.showVenmoAvailableSoonMsg = true;
                                }
                            });
                        } else if (_thirdPartyInfo.venmoInfo.isVenmoCookiePresent()) {
                            $scope.showVenmoAvailableSoonMsg = true;
                        }
                        if (_uiRouter.$stateParams.venmoError && $util.param("marketplaces_venmo_client") === "1") {
                            var cancel_url = $scope.checkoutAppData.urls.cancel_url;
                            $ReturnToMerchant.goTo(cancel_url);
                        }
                        if (!_uiRouter.$stateParams.baiduError && _thirdPartyInfo.thirdPartyInfo.isBaiduEligible()) {
                            $pxp("xo_hermesnode_baidu", {
                                "ctx.COUNTRY": $scope.checkoutAppData.get("merchant.merchant_country"),
                                uid: $scope.checkoutPayeeModel.getId()
                            }, "(xo_hermesnodeweb_baidu)(.*)").then(function(result) {
                                if (result && result.treatment_name === "xo_hermesnodeweb_baidu_treatment_4660") {
                                    _uiRouter.$state.go("checkout.payWithSelection");
                                }
                            });
                        }
                        if ($scope.flowEligibility.guest) {
                            return;
                        }
                        $(".paypalHeaderWrapper").removeClass("paypalCredit");
                        $(".paypalHeaderWrapper").removeClass("paypalCreditTnc");
                    }).then(function() {
                        if ($scope.auth.accessToken()) {
                            return $scope.auth.reload({
                                headers: {
                                    "x-paypal-internal-euat": $scope.auth.accessToken()
                                },
                                resultModel: $scope.auth,
                                success: function success() {
                                    delete $scope.auth.access_token;
                                    $KmliUpsell.init({});
                                },
                                contingencies: {
                                    DEFAULT: function DEFAULT(name) {
                                        throw new $FallbackError({
                                            reason: name.toLowerCase(),
                                            product: "ux"
                                        });
                                    }
                                }
                            });
                        }
                    }).then(function() {
                        return $loginEligibility($scope.token, !$scope.autoLogin).then(function(result) {
                            if (result === "unifiedLogin") {
                                $scope.ulEligibility = true;
                            } else if (result === "apsIntegration") {
                                $scope.apsIntegration = "apsIntegration";
                            } else if (result === "apsIntegrationRM") {
                                $scope.apsIntegration = "apsIntegrationRM";
                            }
                        }).then(function() {
                            var reinitDisplay = function reinitDisplay() {
                                $scope.promptlogin = false;
                                $scope.hideGuest = false;
                                $scope.autoLogin = true;
                                delete _uiRouter.$stateParams.targetPage;
                                delete _uiRouter.$stateParams.showNotYou;
                            };
                            $scope.logout = $scope.promptlogin ? function() {
                                $logger.info("not_you_logout");
                                $logger.info("checkout_fpti", {
                                    from: "LOGIN_UL",
                                    to: "login_with_diff_user"
                                });
                                $scope.auth.logout().then(function() {
                                    $scope.auth.reload().then(function() {
                                        reinitDisplay();
                                        $scope.reload();
                                    });
                                });
                            } : function() {
                                $logger.info("logout_switch_display");
                                reinitDisplay();
                            };
                        });
                    });
                }
            });
            angular.value("$xoLoginPageComponent", $xoLoginPageComponent);
            _angular.$rootScope;
            _miniBrowser.$miniBrowser;
            _integration.$integration;
            _factory.$TokenizedWalledLoaderFactory;
            _squid.$Component;
            _squid.$pxp;
            _squid.$populate;
            _squid.$Class;
            _logger.$logger;
            _index.$CheckoutAppDataModel;
            _index.$CheckoutPayeeModel;
            _thirdPartyInfo.thirdPartyInfo;
            _thirdPartyInfo.venmoInfo;
            _newMember.$NewMemberEligibility;
            _uiRouter.$state;
            _uiRouter.$stateParams;
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./pages/xo-login/template.html": function(module, exports) {
        module.exports = '<section class="login"\n         id="login" content>\n    <xo-message ng-if="showVenmoAvailableSoonMsg" message="infoVenmo"></xo-message>\n    <div class="row-fluid">\n        <div class="span14 trayInner">\n\n            <xo-login-handler token=token auto-login="autoLogin" success-callback="onSuccess"\n                              contingency-callback="onContingency" ul-eligibility="ulEligibility" pre-auth="preAuth"\n                              aps-integration="apsIntegration" batch="batch"\n                              login-submit="loginSubmit" flowcontext="flowcontext" logout="logout" export="loginHandler"></xo-login-handler>\n\n            <div ng-if="promptlogin" class="centerText">\n                <hr class="sepPlain" />\n\n                <a track-link="login_with_diff_user" href="" ng-click="logout(auth)" class="ng-binding" tabindex="0">{{ content(\'memberReview.notYou\')}}</a>\n            </div>\n\n            <xo-onboarding-section token=token ng-hide="hideGuest"></xo-onboarding-section>\n\n        </div>\n        <div class="span10" ng-if="!loginDesignExp">\n            <xo-value-props type="login" title="{{content(\'login.propHead\')}}"\n                            text-content="login.propVal"></xo-value-props>\n        </div>\n\n        <div class="span10" ng-if="loginDesignExp">\n            <xo-value-props type="login" title="{{content(loginDesignExp.propHeader)}}"\n                            text-content="{{loginDesignExp.propText}}"\n                            image-url="{{loginDesignExp.propImage}}"></xo-value-props>\n        </div>\n    </div>\n\n    <xo-tokenized-wallet-loader\n        ng-if=\'isWalletTokenization\'\n        plan-done=\'planDone\'\n    >\n    </xo-tokenized-wallet-loader>\n</section>\n';
    },
    "./pages/xo-login/loginEligibility.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$forceLoginExperience = $forceLoginExperience;
        exports.$loginEligibility = $loginEligibility;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _index3 = __webpack_require__("./components/xo-device-info/dist/index.js");
        function $forceLoginExperience(auth, merchant_country, forcedLogin) {
            var ULParam = _squid.$util.param("ul");
            if (auth.loggedIn() && !auth.stepupAuthRequired && !forcedLogin) {
                var ulReturn = _squid.$util.param("ulReturn");
                return {
                    experience: "apsIntegration",
                    reason: ulReturn ? "ulReturn" : "sessionActive"
                };
            } else if (ULParam === "0" && !_squid.$config.deploy.isLive()) {
                return {
                    experience: "apsIntegration",
                    reason: "ulParamDisabled"
                };
            } else if (ULParam && ULParam.match(/[12]/)) {
                return {
                    experience: "unifiedLogin",
                    reason: "ulParam"
                };
            } else if (ULParam === "3") {
                return {
                    experience: "apsIntegrationRM",
                    reason: "ulParamApsRM"
                };
            } else if (auth.refreshToken()) {
                return {
                    experience: "unifiedLogin",
                    reason: "rememberedUser"
                };
            } else if (_squid.$meta.corp && _squid.$config.ulMeta.allowKMLIForInternalIP && (0, 
            _squid.$feature)("enableOneTouchInternalIP", false, merchant_country)) {
                return {
                    experience: "unifiedLogin",
                    reason: "internalIP"
                };
            }
        }
        function $loginEligibility(token, forcedLogin) {
            var $scope = {};
            $scope.token = token;
            var routingReason = void 0;
            return (0, _squid.$populate)($scope, {
                auth: _index2.$AuthModel.instance(),
                checkoutAppData: _index.$CheckoutAppDataModel.instance($scope.token)
            }).then(function() {
                var forceLoginExperience = $forceLoginExperience($scope.auth, $scope.checkoutAppData.merchant.merchant_country, forcedLogin);
                var isIneligible = angular.isDefined(forceLoginExperience);
                if (isIneligible) {
                    routingReason = forceLoginExperience.reason;
                    return forceLoginExperience.experience;
                } else {
                    return "unifiedLogin";
                }
            }).then(function(finalLoginExperience) {
                _logger.$logger.debug(finalLoginExperience === "unifiedLogin" ? "ULLOGIN_ELIGIBLE" : "ULLOGIN_NOT_ELIGIBLE", {
                    userGroup: [ routingReason ],
                    routing_reason: routingReason
                });
                var app_int_type = _index3.$DeviceInfo.getAppIntegrationType();
                _logger.$logger.info("checkout_fpti", {
                    from: "UL_ELG_CHK",
                    to: "process_ul_elg_chk",
                    routing_reason: routingReason,
                    app_int_type: app_int_type
                });
                return finalLoginExperience;
            });
        }
        angular.value("$forceLoginExperience", $forceLoginExperience);
        angular.value("$loginEligibility", $loginEligibility);
        _squid.$util;
        _squid.$meta;
        _squid.$config;
        _squid.$feature;
        _squid.$populate;
        _logger.$logger;
        _index.$CheckoutAppDataModel;
        _index2.$AuthModel;
        _index3.$DeviceInfo;
    },
    "./pages/xo-login/onboarding/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoOnboardingSectionComponent = undefined;
        var _template = __webpack_require__("./pages/xo-login/onboarding/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./pages/xo-login/guestThrottle.js");
        __webpack_require__("./components/xo-wallet-components/src/fi-logos/directive.js");
        __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _paypalplus = __webpack_require__("./pages/xo-login/paypalplus.js");
        var _index = __webpack_require__("./components/xo-models/src/credit/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoOnboardingSectionComponent = exports.$xoOnboardingSectionComponent = _squid.$Component.extend("$xoOnboardingSectionComponent", {
            tag: "xo-onboarding-section",
            template: _template2["default"],
            scope: {
                token: "="
            },
            controller: function controller($scope, $guestThrottle, $locale, $populate, $FlowEligibilityModel, $feature, $CheckoutAppDataModel, $state, $pxp, $logger, $meta) {
                function throttleOnboardingFlow(flow) {
                    return $guestThrottle(flow, $scope.token, $locale.lang, $locale.country, $meta.mfid);
                }
                $scope.signupThrottle = function() {
                    if ($scope.forceCAPESignup) {
                        $state.go("checkout.redirectToCape", {}, {
                            location: false
                        });
                    } else {
                        throttleOnboardingFlow("signup");
                    }
                };
                $scope.guestThrottle = function() {
                    throttleOnboardingFlow("guest");
                };
                function getFlowEligibility() {
                    return $FlowEligibilityModel.instance($scope.token).retrieve({
                        params: {
                            localeCountry: $locale.country
                        }
                    }).then(function(flowEligibility) {
                        $scope.flowEligibility = flowEligibility;
                    });
                }
                function getButtonLabelTreatment() {
                    $scope.newUserVariant = false;
                    $scope.newUserVariantWithText = false;
                    return $pxp("xo_hermes_new_user", {
                        "ctx.COUNTRY": $locale.country
                    }, "xo_hermes_new_user_treatment_(a|b)").then(function(t) {
                        if (t) {
                            $scope.newUserVariant = true;
                            if (t.treatment_name === "xo_hermes_new_user_treatment_b") {
                                $scope.newUserVariantWithText = true;
                            }
                        }
                    });
                }
                $populate($scope, {
                    checkoutAppData: $CheckoutAppDataModel.instance($scope.token)
                }).then(function() {
                    return getFlowEligibility();
                }).then(function() {
                    return getButtonLabelTreatment();
                }).then(function() {
                    var isPayPalCredit = $scope.checkoutAppData.is_second_button_txn || _squid.$Class.get(window, "xprops.fundingSource") === "credit";
                    $scope.creditDataModel = _index.$CreditDataModel.instance($scope.token);
                    $scope.forceCAPESignup = isPayPalCredit && !$scope.creditDataModel.payInFull;
                    var useForcedSignupFlow = (0, _paypalplus.$isPayPalPlus)($scope.token) || $scope.forceCAPESignup;
                    var guest = $scope.flowEligibility.guest;
                    var signup = $scope.flowEligibility.signup;
                    $scope.showGuestBtn = !useForcedSignupFlow && guest;
                    $scope.showSignupBtn = useForcedSignupFlow || !guest && signup;
                    $scope.hideOrSeparator = !$scope.showGuestBtn && !$scope.showSignupBtn;
                });
            }
        });
        angular.value("$xoOnboardingSectionComponent", $xoOnboardingSectionComponent);
        _squid.$Component;
        _squid.$Class;
        _paypalplus.$isPayPalPlus;
        _index.$CreditDataModel;
    },
    "./pages/xo-login/onboarding/template.html": function(module, exports) {
        module.exports = '<div class="onboardingSection" id="onboardingSection" content>\n    <div class="guestHeading" ng-if="guestVariant.guestBtnOnTop">\n        <xo-title title-txt="{{content(\'login.guestTitle\')}}"></xo-title>\n        <xo-language-options class="span7"></xo-language-options>\n    </div>\n\n    <div class="orSeparator" ng-if="!hideOrSeparator">\n        <span class="textInDivider">\n            {{content(\'login.orLowercase\')}}\n        </span>\n    </div>\n\n    <a link-button track-link="guest" class="btn btn-secondary full submit" id="checkoutAsAGuestBtn" ng-if="showGuestBtn" ng-click="guestThrottle()">\n        {{ content(newUserVariant ? \'login.newToPayPal\' : \'login.guestLinkBtn\') }}\n    </a>\n\n    <a link-button track-link="signup" class="btn btn-secondary full submit" id="signupBtn" ng-if="showSignupBtn" ng-click="signupThrottle()">\n        {{ content(newUserVariant ? \'login.newToPayPal\' : \'login.createAccount\') }}\n    </a>\n\n    <div class="inline-prop" ng-if="newUserVariantWithText" ng-bind-html="content(\'login.guestProp\')"></div>\n</div>\n';
    },
    "./pages/xo-login/guestThrottle.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$guestThrottle = $guestThrottle;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
        function $guestThrottle(flowName, token, lang, country, mfid) {
            var models = {};
            function redirectToXoon() {
                return (0, _squid.$dispatch)("xoon", {
                    exp: flowName,
                    token: token,
                    "locale.x": lang + "_" + country,
                    "country.x": country,
                    mfid: mfid
                });
            }
            function fallback(product, reason, params) {
                throw new _squid.$FallbackError({
                    product: product || "ux",
                    reason: reason,
                    entryPoint: flowName,
                    params: params
                });
            }
            function checkWpsSubscriptionGuestEnabled() {
                return (0, _squid.$pxp)("xo_subscription_hermes_xoon", "xo_subscription_treatment_xoon").then(function(result) {
                    var treatmentName = result && result.treatment_name;
                    return treatmentName === "xo_subscription_treatment_xoon";
                });
            }
            function isGuestFlowEnabled() {
                return (0, _squid.$populate)(models, {
                    checkoutAppData: _index.$CheckoutAppDataModel.instance(token).retrieve()
                }).then(function() {
                    var appData = models.checkoutAppData;
                    if (appData && appData.is_wps_subscription_flow()) {
                        return checkWpsSubscriptionGuestEnabled();
                    } else {
                        return _angular.$q.resolve(true);
                    }
                });
            }
            return isGuestFlowEnabled().then(function(res) {
                if (!res) {
                    _logger.$logger.info(flowName + "_to_ux_wps");
                    return fallback("ux", flowName + "_to_ux_wps");
                }
                return redirectToXoon();
            });
        }
        angular.value("$guestThrottle", $guestThrottle);
        _angular.$q;
        _squid.$dispatch;
        _squid.$populate;
        _squid.$FallbackError;
        _squid.$pxp;
        _logger.$logger;
        _index.$CheckoutAppDataModel;
    },
    "./components/xo-wallet-components/src/fi-logos/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/fi-logos/template.html") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-fi-logos.directive", [ "squid" ]).directive("xoFiLogos", function() {
                return {
                    template: template,
                    scope: {
                        token: "="
                    },
                    controller: function controller($scope, $populate, $locale, $CardTypesModel) {
                        $populate($scope, {
                            cardTypes: $CardTypesModel.instance($scope.token + ":" + $locale.country, {
                                token: $scope.token,
                                country: $locale.country
                            })
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/fi-logos/template.html": function(module, exports) {
        module.exports = '<div class="fiIconsGroup">\n    <div class="cardIconsGroup">\n        <div class="icons" ng-repeat = "cardType in cardTypes.allowed">\n            <div class = "cardIcon {{cardType}}"></div>\n        </div>\n    </div>\n</div>\n';
    },
    "./pages/xo-login/paypalplus.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$isPayPalPlus = $isPayPalPlus;
        var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
        function $isPayPalPlus(token) {
            var checkoutAppDataModel = _index.$CheckoutAppDataModel.instance(token);
            var experienceInitiator = checkoutAppDataModel.get("flags.payment_experience_initiator");
            return experienceInitiator === "PAYPAL_PLUS";
        }
        angular.value("$isPayPalPlus", $isPayPalPlus);
        _index.$CheckoutAppDataModel;
    },
    "./components/xo-models/src/credit/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xomodel.credit", [ "squid" ]).factory("$CreditDataModel", function($Model, $Api, $util) {
                    return $Model.extend("CreditDataModel", {
                        init: function init() {
                            this._super.init.apply(this);
                            this.setProperties({
                                flow_type: $util.param("flow"),
                                cape_key: $util.param("key"),
                                cape_success: $util.param("success"),
                                credit_signup: $util.param("creditSignup"),
                                userAction: $util.param("action"),
                                merchantAction: $util.param("merchantAction"),
                                credit_login_failure: false,
                                cape_service_error: $util.param("isInternalServiceError"),
                                cape_redirect_uri: "",
                                change_installment: $util.param("changeStatus"),
                                nextState: ""
                            });
                        },
                        api: new $Api({
                            uri: "/api/credit/:id/creditData",
                            postAttempts: 2
                        }),
                        isCreditSignup: function isCreditSignup() {
                            return this.credit_signup && this.credit_signup === "true";
                        },
                        setCapeRedirectUri: function setCapeRedirectUri(input) {
                            this.cape_redirect_uri = input;
                        },
                        getCapeRedirectUri: function getCapeRedirectUri() {
                            return this.cape_redirect_uri;
                        },
                        getMerchantAction: function getMerchantAction() {
                            return this.merchantAction || "";
                        },
                        setCreditSignup: function setCreditSignup(input) {
                            this.credit_signup = input;
                        },
                        getCapeKey: function getCapeKey() {
                            return this.cape_key;
                        },
                        getFlow: function getFlow() {
                            if (this.userAction === "addCredit") {
                                return "credit";
                            }
                            return this.flow_type;
                        },
                        setFlow: function setFlow(flowType) {
                            this.flow_type = flowType;
                        },
                        setNextState: function setNextState(nextState) {
                            this.nextState = nextState;
                        },
                        isCapeSuccess: function isCapeSuccess() {
                            return this.cape_success && this.cape_success === "true";
                        },
                        isCreditTxn: function isCreditTxn() {
                            return this.flow_type && this.flow_type === "credit" || this.userAction && this.userAction === "addCredit";
                        },
                        setCreditLoginFailure: function setCreditLoginFailure(input) {
                            this.credit_login_failure = input;
                        },
                        getCreditLoginFailure: function getCreditLoginFailure() {
                            return this.credit_login_failure;
                        },
                        isCapeReturn: function isCapeReturn() {
                            return this.flow_type && this.flow_type === "capeReturn";
                        },
                        isCapeInternalServiceError: function isCapeInternalServiceError() {
                            return this.cape_service_error && this.cape_service_error === "true";
                        },
                        getNextState: function getNextState() {
                            return this.nextState;
                        },
                        isChangeStatus: function isChangeStatus() {
                            return this.change_installment === "changeInstallment";
                        },
                        isRedirectFromCape: function isRedirectFromCape() {
                            return Boolean(this.cape_key && this.cape_success === "true" || $util.param("applyCredit"));
                        }
                    });
                }).factory("$CreditInstallmentModel", function($Model, $Api) {
                    return $Model.extend("CreditInstallmentModel", {
                        api: new $Api({
                            uri: "/api/checkout/:id/creditOptions/"
                        })
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/credit", "components/xo-models/src/credit/index.js");
    },
    "./pages/xo-login/util.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-login.capeUtil", [ "squid" ]).factory("$capeRedirectUtil", function($util, $CreditDataModel, $state) {
                    return {
                        handleCapeRouting: function handleCapeRouting(checkoutSession, checkoutCart, token) {
                            var fundingInstruments = void 0, isCreditInWallet = void 0;
                            if (checkoutCart.isBillingNoPurchase()) {
                                fundingInstruments = checkoutSession.futurePaymentInstruments;
                                isCreditInWallet = checkoutSession.futurePayment && checkoutSession.futurePayment.isCreditInWallet;
                            } else {
                                fundingInstruments = checkoutSession.fundingOptions && checkoutSession.fundingOptions.instruments;
                                isCreditInWallet = fundingInstruments && $util.find(fundingInstruments, function(fi) {
                                    return fi.name === "BILL_ME_LATER";
                                });
                            }
                            var creditDataModel = $CreditDataModel.instance(token);
                            var isCapeReturnKey = creditDataModel.getCapeKey();
                            var isCapeReturn = isCapeReturnKey && $util.param("success");
                            var isPPCEligible = checkoutSession.creditOffer || checkoutSession.bmlOffer;
                            if (checkoutSession.isCreditPromoted && !fundingInstruments && creditDataModel.payInFull || !fundingInstruments && !isPPCEligible) {
                                return $state.go("checkout.pageAddCard.addCardFlow.addCard");
                            } else if (isCreditInWallet || isCapeReturn || creditDataModel.payInFull) {
                                return $state.go("checkout.review");
                            } else if (!isCreditInWallet && isPPCEligible) {
                                return $state.go("checkout.redirectToCape", {}, {
                                    location: false
                                });
                            } else {
                                return $state.go("checkout.review");
                            }
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "pages/xo-login", "pages/xo-login/util.js");
    },
    "./components/xo-models/src/fi/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            var _index = __webpack_require__("./components/xo-device-info/dist/index.js");
            var BILLING_ADDRESS_FORMAT = {
                DEFAULT: {
                    ",": ", ",
                    " ": " "
                },
                IL: {
                    he: {
                        ",": "‏, ‏",
                        " ": "‏ ‏"
                    }
                }
            };
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xomodel.fi", [ "squid" ]).factory("$CardModel", function($Model, $util) {
                    return $Model.extend("CardModel", {
                        serialize: function serialize() {
                            return {
                                type: this.type,
                                number: this.number.replace(/[^\d]+/g, ""),
                                security_code: this.security_code,
                                expiry_month: this.expiry_month && $util.pad(this.expiry_month, 2),
                                expiry_year: this.expiry_year,
                                issue_number: this.issue_number ? this.issue_number : undefined,
                                start_month: this.start_month ? $util.pad(this.start_month, 2) : undefined,
                                start_year: this.start_year ? this.start_year : undefined
                            };
                        },
                        last4: function last4() {
                            var cardNumber = this.number;
                            return cardNumber.substr(cardNumber.length - 4);
                        },
                        isExisting: function isExisting() {
                            return this.number && Boolean(this.number.match(/^xxxx-xxxx-xxxx-[\d]{4}$/));
                        }
                    });
                }).factory("$AddCardModel", function($Model, $Api, $CardModel) {
                    return $Model.extend("AddCardModel", {
                        api: new $Api({
                            uri: "/api/fi/card/:id?"
                        }),
                        init: function init() {
                            this._super.init.apply(this);
                            this.card = new $CardModel();
                        },
                        serialize: function serialize() {
                            var id = this.address.id && this.address.id !== "0" ? this.address.id : undefined;
                            return {
                                cardType: this.cardType ? this.cardType : "creditCard",
                                sponsor_id: this.sponsor_id,
                                preference: this.preference,
                                user: this.user,
                                card: this.card.serialize(),
                                address: id ? {
                                    id: id
                                } : this.address.serialize()
                            };
                        },
                        clearId: function clearId() {
                            delete this.id;
                        }
                    });
                }).factory("$CardTypesModel", function($Model, $Api, $locale, $util, $feature) {
                    return $Model.extend("CardTypesModel", {
                        api: new $Api({
                            uri: "/api/fi/card/types?country=:country&token=:token"
                        }),
                        retrieve: function retrieve() {
                            return this._super.retrieve.apply(this, arguments).then(function(result) {
                                if ($feature("qiwiCardSupported") && result.allowed && result.allowed.indexOf("VISA") > -1 && result.allowed.indexOf("QIWI") === -1) {
                                    result.allowed.push("QIWI");
                                }
                                return result;
                            });
                        },
                        supportedNames: function supportedNames() {
                            return $util.map(this.allowed, function(type) {
                                return $locale.content.cardTypes[type];
                            });
                        }
                    });
                }).factory("$BankModel", function($Model) {
                    return $Model.extend("BankModel", {
                        init: function init() {
                            this._super.init.apply(this);
                            this.bank_account_number = "";
                            this.bank_routing_number = "";
                            this.iban_number = "";
                        },
                        serialize: function serialize() {
                            var data = {};
                            if (this.bank_account_number) {
                                data.bank_account_number = this.bank_account_number;
                            }
                            if (this.bank_routing_number) {
                                data.bank_routing_number = this.bank_routing_number;
                            }
                            if (this.iban_number) {
                                data.iban_number = this.iban_number.replace(/\s/g, "").toUpperCase();
                            }
                            return data;
                        }
                    });
                }).factory("$AddBankModel", function($Model, $Api, $BankModel) {
                    return $Model.extend("AddBankModel", {
                        api: new $Api({
                            uri: "/api/fi/bank"
                        }),
                        init: function init() {
                            this._super.init.apply(this);
                            this.user = this.user || {
                                first_name: "",
                                dob_day: "",
                                dob_month: "",
                                dob_year: "",
                                currency_code: "",
                                country: ""
                            };
                            this.bank = this.bank || new $BankModel();
                            this.address = this.address || {};
                            this.creditorDetails = this.creditorDetails || {};
                            this.fiDetails = this.fiDetails || {};
                        },
                        getBankData: function getBankData() {
                            var data = {};
                            data.user = this.user;
                            var bank = {};
                            this.bank = this.bank || {};
                            if (this.candidate_id) {
                                data.candidate_id = this.candidate_id;
                            }
                            if (this.bank.bank_account_number) {
                                bank.bank_account_number = this.bank.bank_account_number;
                            }
                            if (this.bank.bank_routing_number) {
                                bank.bank_routing_number = this.bank.bank_routing_number;
                            }
                            if (this.bank.iban_number) {
                                bank.iban_number = this.bank.iban_number.replace(/\s/g, "");
                            }
                            data.bank = bank;
                            if (this.address) {
                                data.address = {
                                    line1: this.address.line1,
                                    line2: this.address.line2,
                                    city: this.address.city,
                                    country: this.address.country,
                                    postal_code: this.address.postal_code
                                };
                            }
                            return data;
                        }
                    });
                }).factory("$PreferredFi", function($Model, $Api) {
                    return $Model.extend("PreferredFi", {
                        api: new $Api({
                            uri: "/api/fi/preferred"
                        }),
                        init: function init() {
                            this._super.init.apply(this);
                            function getUiChannel() {
                                var capabilities = _index.$DeviceInfo.getCapabilities();
                                if (capabilities.isTablet) {
                                    return "Tablet";
                                } else if (capabilities.isMobile) {
                                    return "Mobile";
                                } else if (capabilities.isDesktop) {
                                    return "Desktop";
                                } else if (capabilities.isApp) {
                                    return "App";
                                } else {
                                    return null;
                                }
                            }
                            this.uiChannel = getUiChannel();
                        },
                        serialize: function serialize() {
                            return {
                                preferred: this.preferred,
                                uiChannel: this.uiChannel
                            };
                        }
                    });
                }).factory("$SepaModel", function($Model, $Api) {
                    return $Model.extend("SepaModel", {
                        api: new $Api({
                            uri: "/api/fi/bank"
                        })
                    });
                }).factory("$DeleteCardModel", function($Model, $Api) {
                    return $Model.extend("DeleteCardModel", {
                        api: new $Api({
                            uri: "/api/fi/card/:id/delete"
                        })
                    });
                }).factory("$AddBillingAddressModel", function($Model, $Api) {
                    return $Model.extend("AddBillingAddressModel", {
                        api: new $Api({
                            uri: "/api/fi/:instrumentid/addbillingaddress"
                        })
                    });
                }).factory("$BillingAddressModel", function($Model, $Api, $config, $util, $locale) {
                    return $Model.extend("BillingAddressModel", {
                        api: new $Api({
                            uri: "/api/fi/billingaddress/validate"
                        }),
                        format: function format() {
                            var langConfig = (BILLING_ADDRESS_FORMAT[$locale.country] || {})[$locale.lang] || {};
                            var comma = angular.isUndefined(langConfig[","]) ? BILLING_ADDRESS_FORMAT["DEFAULT"][","] : langConfig[","];
                            var space = angular.isUndefined(langConfig[" "]) ? BILLING_ADDRESS_FORMAT["DEFAULT"][" "] : langConfig[" "];
                            return $util.filter([ this.line1, this.line2, this.city, this.state, this.country ]).join(comma) + space + $util.filter([ this.postal_code ]);
                        },
                        serialize: function serialize() {
                            return {
                                line1: this.line1 && this.line1.trim(),
                                line2: this.line2 && this.line2.trim(),
                                city: this.city && this.city.trim(),
                                state: this.state && this.state.trim(),
                                postal_code: this.postal_code && this.postal_code.trim(),
                                normalization_status: this.normalization_status,
                                country: this.country
                            };
                        }
                    });
                }).factory("$BillingAddressesModel", function($Model, $BillingAddressModel, $Api, $config, $util) {
                    return $Model.extend("BillingAddressesModel", {
                        api: new $Api({
                            uri: "/api/fi/billingaddress"
                        }),
                        onPopulate: function onPopulate() {
                            this.addresses = this.children($BillingAddressModel, this.addresses);
                        }
                    });
                }).factory("$CardTypeFromBinModel", function($Model, $Api) {
                    return $Model.extend("CardTypeFromBinModel", {
                        api: new $Api({
                            uri: "/api/fi/cardTypeFromBin?country=:country&bin=:bin&user_country=:user_country"
                        })
                    });
                }).factory("$Resolve3DS", function($Model, $Api) {
                    return $Model.extend("Resolve3DS", {
                        api: new $Api({
                            uri: "/api/fi/3ds/:id"
                        })
                    });
                }).factory("$ResolveOTP", function($Model, $Api) {
                    return $Model.extend("ResolveOTP", {
                        api: new $Api({
                            uri: "/api/fi/otp/:id"
                        })
                    });
                }).factory("$WalletPreferences", function($Model, $Api, $config) {
                    return $Model.extend("WalletPreferences", {
                        api: new $Api({
                            uri: "/api/fi/wallet/preferences"
                        }),
                        invalidateOnLogout: true,
                        init: function init() {
                            this._super.init.apply(this);
                            this.topup = {};
                        },
                        serialize: function serialize() {
                            return {
                                topup: {
                                    amount: this.topup.amount,
                                    instrument_id: this.topup.fundingSource.instrument_id,
                                    autoload_minimum_threshold: $config.topup.autoload_minimum_threshold
                                }
                            };
                        }
                    });
                }).factory("$WalletInstrumentNameMapping", function($Model, $util) {
                    return $Model.extend("WalletInstrumentNameMapping", {
                        init: function init() {
                            this._super.init.apply(this);
                            this.INSTRUMENT_MAP = {
                                AMSOUTH: /AMSOUTH,/,
                                BOFA: /BANK OF AMERICA/,
                                CAPITAL: /CAPITAL/,
                                CHASE: /CHASE/,
                                CITI: /CITIBANK/,
                                FIFTHTHIRD: /FIFTH THIRD BANK/,
                                HUNTINGTON: /HUNTINGTON/,
                                INGDIRECT: /ING DIRECT/,
                                NATIONALCITY: /NATIONAL CITY/,
                                PNC: /PNC/,
                                REGIONS: /REGIONS/,
                                SUNTRUST: /SUNTRUST/,
                                TDWATERHOUSE: /TD WATERHOUSE/,
                                USAA: /USAA/,
                                USBANK: /US BANK/,
                                VISA: /VISA/,
                                WAMUTUAL: /WASHINGTON MUTUAL/,
                                WELLSFARGO: /WELLS FARGO/
                            };
                            this.INSTRUMENT_NAMES = Object.keys(this.INSTRUMENT_MAP);
                        },
                        getInstrumentNameNormalized: function getInstrumentNameNormalized(fsName) {
                            var _this = this;
                            if (!fsName) {
                                return;
                            }
                            fsName = fsName.toUpperCase();
                            return $util.find(this.INSTRUMENT_NAMES, function(instName) {
                                if (_this.INSTRUMENT_MAP[instName].test(fsName)) {
                                    return true;
                                }
                                return false;
                            });
                        }
                    });
                }).factory("$CardInfoModel", function($Model, $Api) {
                    return $Model.extend("$CardInfoModel", {
                        api: new $Api({
                            uri: "/api/fi/card/:id"
                        })
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            _index.$DeviceInfo;
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/fi", "components/xo-models/src/fi/index.js");
    },
    "./components/xo-ui-components/src/message/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-ui-components/src/message/template.html") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-message.directive", [ "squid" ]).directive("xoMessage", function($timeout, $loader, $rootScope) {
                return {
                    scope: {
                        message: "="
                    },
                    template: template,
                    link: function link(scope, element, attrs) {
                        var toggleAlert = function toggleAlert() {
                            var $alert = element.find("ul");
                            $alert.detach();
                            $timeout(function() {
                                element.find("#pageLevelErrors").append($alert);
                            });
                        };
                        var cancel;
                        scope.$watchCollection("message", function() {
                            if ($loader.isLoading() && !cancel) {
                                cancel = $rootScope.$on("allLoaded", function() {
                                    cancel();
                                    toggleAlert();
                                    cancel = null;
                                });
                            } else {
                                toggleAlert();
                            }
                        });
                        scope.$on("$destroy", function() {
                            if (cancel) {
                                cancel();
                            }
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-ui-components/src/message/template.html": function(module, exports) {
        module.exports = '<div role="alert" aria-live="assertive">\n    <div id="notifications" ng-if="message.msgs || message.msgKeys" content >\n        <div id="pageLevelErrors" class="msgPage msg-{{message.type}}">\n            <span class="icon"></span>\n            <ul role="presentation">\n                <li ng-repeat="msg in message.msgs">\n                    <span data-ng-bind-html="msg"></span>\n                </li>\n                <li ng-repeat="keys in message.msgKeys" ng-if="message.msgKeys">\n                    <div data-ng-bind-html="htmlContent(keys, message.compileWith)"></div>\n                </li>\n            </ul>\n        </div>\n    </div>\n</div>\n';
    },
    "./components/xo-title/dist/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-title/dist/template.html") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-title.directive", [ "squid" ]).directive("xoTitle", function() {
                return {
                    template: template,
                    restrict: "E",
                    scope: {
                        titleTxt: "@",
                        className: "@"
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-title/dist/template.html": function(module, exports) {
        module.exports = '<h1 class="alpha">\n    {{ titleTxt }}\n</h1>\n';
    },
    "./components/xo-login-components/src/login/handler/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-login-components/src/login/handler/template.html"), __webpack_require__("./components/xo-login-components/src/login/directive.js"), __webpack_require__("./components/xo-login-components/src/login/props.js"), __webpack_require__("./components/xo-beaver/dist/logger.js"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/app/index.js"), __webpack_require__("./components/xo-ui-components/src/message/directive.js"), __webpack_require__("./components/xo-title/dist/directive.js"), __webpack_require__("./components/xo-form-components/src/language-options/directive.js"), __webpack_require__("./components/xo-login-components/src/unified-login/directive.js"), __webpack_require__("./components/xo-device-info/dist/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid, template) {
            return angular.module("xo-login-handler.directive", [ "squid", "beaver", "xomodel.checkout", "xomodel.app", "xo-message.directive", "xo-title.directive", "xo-login.directive", "xo-language-options.directive", "xo-unified-login.directive", "xo-login-props", "xo-device-info" ]).directive("xoLoginHandler", function($util, $pxp, $logger, $locale, $loginProps) {
                return {
                    componentize: true,
                    template: template,
                    scope: {
                        token: "=",
                        successCallback: "=",
                        contingencyCallback: "=",
                        autoLogin: "=",
                        ulEligibility: "=",
                        subFlowTitleKey: "=",
                        apsIntegration: "=",
                        batch: "=",
                        loginSubmit: "=",
                        logout: "=",
                        preAuth: "=",
                        hideloginpp: "=",
                        flowcontext: "=",
                        hideTitle: "="
                    },
                    controller: function controller($scope, $rootScope, $populate, $window, $location, $state, $AuthModel, $feature, $AppDataModel, $CheckoutCartModel, $loginProps, $config, $logger, $timeout, $util, $localeHelper, $stateParams, $FallbackError) {
                        var CONTENT_KEY = {
                            INVALID_EMAIL_PASSWORD: "invalidEmailPasswordPageError",
                            ACCOUNT_LOCKED: "accountLockedPageError",
                            ACCOUNT_CLOSED: "accountLockedPageError",
                            INVALID_PHONE: "invalidPhone",
                            INVALID_PIN: "invalidPin",
                            INVALID_ACCESS_TOKEN: "invalidAccessToken",
                            TIMED_OUT: "loginStatusTimedOut",
                            CANNOT_PAY_SELF: "cannotPaySelf",
                            RISK_DECLINE: "riskDeclinePageError",
                            LOGIN_ADD_PHONE: "loginAddPhone",
                            LOGIN_PREFILLED_SHIPPING_ADDRESS: "loginMerchantPassedAddress",
                            LOGIN_CONTINGENCY: "loginContingency",
                            LOGIN_REACTIVATE: "checkOneTouch",
                            LOGIN_LEAVECHECKED: "leaveOneTouchChecked",
                            LOGIN_OT_GENERIC_ERROR: "reactivateOneTouch",
                            VENMO_GENERIC_ERROR: "venmoGenericError"
                        };
                        var CONTENT_MAPPING = {
                            INVALID_USER: {
                                content: CONTENT_KEY.INVALID_EMAIL_PASSWORD,
                                type: "error"
                            },
                            INVALID_PHONE_PIN: {
                                content: CONTENT_KEY.INVALID_PIN,
                                type: "error"
                            },
                            INVALID_ACCESS_TOKEN: {
                                content: CONTENT_KEY.INVALID_ACCESS_TOKEN,
                                type: "error"
                            },
                            LOCKED_USER: {
                                content: CONTENT_KEY.ACCOUNT_LOCKED,
                                type: "error"
                            },
                            ACCOUNT_LOCKED: {
                                content: CONTENT_KEY.ACCOUNT_LOCKED,
                                type: "error"
                            },
                            CLOSED_USER: {
                                content: CONTENT_KEY.ACCOUNT_CLOSED,
                                type: "error"
                            },
                            TIMED_OUT: {
                                content: CONTENT_KEY.TIMED_OUT,
                                type: "error"
                            },
                            CANNOT_PAY_SELF: {
                                content: CONTENT_KEY.CANNOT_PAY_SELF,
                                type: "error"
                            },
                            RISK_DECLINE: {
                                content: CONTENT_KEY.RISK_DECLINE,
                                type: "error"
                            },
                            addPhone: {
                                content: CONTENT_KEY.LOGIN_ADD_PHONE,
                                type: "error"
                            },
                            PAYER_AUTHENTICATION_REQUIRED: {
                                content: CONTENT_KEY.LOGIN_PREFILLED_SHIPPING_ADDRESS,
                                type: "info"
                            },
                            LOGIN_CONTINGENCY: {
                                content: CONTENT_KEY.LOGIN_CONTINGENCY,
                                type: "error"
                            },
                            ONETOUCH_REACTIVATE: {
                                content: CONTENT_KEY.LOGIN_REACTIVATE,
                                type: "warning"
                            },
                            ONETOUCH_LEAVECHECKED: {
                                content: CONTENT_KEY.LOGIN_LEAVECHECKED,
                                type: "warning"
                            },
                            ONETOUCH_GENERIC_ERROR: {
                                content: CONTENT_KEY.LOGIN_OT_GENERIC_ERROR,
                                type: "warning"
                            },
                            VENMO_ERROR: {
                                content: CONTENT_KEY.VENMO_GENERIC_ERROR,
                                type: "error"
                            }
                        };
                        function populateMessage(name, type) {
                            var contentKey = CONTENT_MAPPING[name];
                            if (contentKey) {
                                $scope.message = {
                                    msgKeys: [ "login." + contentKey.content ],
                                    type: type || contentKey.type
                                };
                            } else {
                                $logger.debug("unresolved content for login " + type + " message " + name + " in xo-login page");
                            }
                        }
                        function handleAuthChallengeFailure(urlParams) {
                            if (urlParams.acRedirect === "2fa") {
                                var userLocale = urlParams["locale.test"];
                                if (userLocale) {
                                    $locale.chosenLang = $localeHelper.normalizeLocale(userLocale).language;
                                }
                                if (urlParams.ulMethod === "phone") {
                                    $logger.debug("2FA_RETURNED_FAILED_PHONE");
                                    populateMessage("INVALID_PHONE_PIN", "error");
                                } else {
                                    $logger.debug("2FA_RETURNED_FAILED_EMAIL");
                                    populateMessage("INVALID_USER", "error");
                                }
                            } else if (urlParams.acRedirect === "loginato") {
                                $logger.debug("LOGIN_ATO_RETURNED_FAILED");
                                $state.go("checkout.genericError", {
                                    code: "RESTRICTED_USER"
                                });
                            } else if (urlParams.acRedirect === "safe") {
                                $logger.debug("SAFE_RETURNED_FAILED");
                                $state.go("checkout.genericError", {
                                    code: "RESTRICTED_USER"
                                });
                            }
                        }
                        function handleAuthChallengeSuccess(urlParams) {
                            switch (urlParams.acRedirect) {
                              case "2fa":
                                $logger.debug("2FA_RETURNED_SUCCESS");
                                break;

                              case "loginato":
                                $logger.debug("LOGIN_ATO_RETURNED_SUCCESS");
                                break;

                              case "safe":
                                $logger.debug("SAFE_RETURNED_SUCCESS");
                                break;

                              default:                            }
                            $scope.auth.is_auth_api_call = !urlParams.acRedirect;
                        }
                        $scope.onComplete = function(auth) {
                            if (!$feature("pomaPasswordRecovery") && $scope.auth.password_less && $scope.checkoutCart.isBilling()) {
                                populateMessage("LOGIN_CONTINGENCY", "info");
                            }
                            if ($rootScope.contingency && $rootScope.contingency.message) {
                                populateMessage($rootScope.contingency.message, "error");
                            } else {
                                if (!$util.param("langTgl")) {
                                    $locale.choose(auth.country, auth.language, false);
                                }
                                $scope.successCallback();
                            }
                        };
                        $scope.locale = $locale;
                        if ($stateParams.targetPage) {
                            if ($loginProps.inList($stateParams.targetPage) && $feature("riskyLoginContingency")) {
                                var riskyLoginInfo = $loginProps.mapInfo($stateParams.targetPage);
                                $scope.subFlowTitleKey = riskyLoginInfo.title;
                                $scope.contingencyDesc = riskyLoginInfo.subtitle;
                                $scope.hideloginpp = true;
                                $scope.postlogout = function() {
                                    delete $scope.subFlowTitleKey;
                                    if ($scope.contingencyDesc) {
                                        delete $scope.contingencyDesc;
                                    }
                                    delete $scope.hideloginpp;
                                    $scope.showLanguageDropdown = $feature("languageToggle");
                                    $scope.logout();
                                };
                            } else {
                                var errMessage = CONTENT_MAPPING[$stateParams.targetPage] ? $stateParams.targetPage : "LOGIN_CONTINGENCY";
                                var type = errMessage.type ? errMessage.type : "info";
                                populateMessage(errMessage, type);
                            }
                        }
                        if ($AuthModel.instance().meta.invalidated) {
                            populateMessage("TIMED_OUT", "error");
                        } else if ($AuthModel.instance().meta.selfPay) {
                            populateMessage("CANNOT_PAY_SELF", "error");
                            $AuthModel.instance().meta.selfPay = false;
                        }
                        $populate($scope, {
                            auth: $AuthModel.instance(),
                            checkoutCart: $CheckoutCartModel.instance($scope.token).retrieve()
                        }).then(function() {
                            if ($feature("pomaPasswordRecovery") && $scope.auth.password_less && !$scope.autoLogin) {
                                $state.go("checkout.createPassword", {
                                    targetPage: $stateParams.targetPage
                                });
                                return;
                            }
                            var ULCallbacks = {
                                showErrorMessages: function showErrorMessages(errorCase) {
                                    populateMessage(errorCase);
                                    $timeout(function() {
                                        $scope.$digest();
                                    });
                                },
                                toggleUnifiedLogin: function toggleUnifiedLogin(value) {
                                    $scope.ulEligibility = value;
                                    $scope.apsIntegration = true;
                                    $rootScope.continueLoadingForUL = value;
                                    $timeout(function() {
                                        $scope.$digest();
                                    });
                                }
                            };
                            $scope.ULCallback = function(name, value) {
                                var callback = ULCallbacks[name];
                                if (callback) {
                                    callback(value);
                                }
                            };
                            if ($scope.auth.timed_out) {
                                populateMessage("TIMED_OUT", "error");
                            }
                            if (!$scope.subFlowTitleKey) {
                                $scope.showLanguageDropdown = $feature("languageToggle");
                            }
                            var urlParams = $util.params();
                            if (urlParams.acRedirect) {
                                if (urlParams.failedBecause) {
                                    handleAuthChallengeFailure(urlParams);
                                } else {
                                    handleAuthChallengeSuccess(urlParams);
                                }
                            }
                            var getErrorDesc = function getErrorDesc(msg) {
                                return decodeURIComponent(msg);
                            };
                            var getErrorType = function getErrorType(msg) {
                                var errorNum = decodeURIComponent(msg).match(/\d+/g);
                                return errorNum ? errorNum : "";
                            };
                            var mapCodeToError = function mapCodeToError(code) {
                                var errorMap = {
                                    "82016": "RISK",
                                    "82017": "COMPLIANCE"
                                };
                                return errorMap[code];
                            };
                            if ($stateParams.venmoError) {
                                if ($stateParams.errorCode) {
                                    var errorSource = mapCodeToError($stateParams.errorCode);
                                    if (errorSource) {
                                        $logger.info("checkout_fpti", {
                                            from: "VENMO_ENTRYPOINT",
                                            to: "process_checkout_login",
                                            int_error_code: $stateParams.errorCode,
                                            int_error_description: $stateParams.errorMessage ? getErrorDesc($stateParams.errorMessage) : "",
                                            error_type: $stateParams.errorMessage ? getErrorType($stateParams.errorMessage) : "",
                                            error_source: errorSource
                                        });
                                    }
                                }
                                populateMessage("VENMO_ERROR", "error");
                            }
                            var handleContingency = {
                                INVALID_USER: populateMessage,
                                LOCKED_USER: populateMessage,
                                ACCOUNT_LOCKED: populateMessage,
                                CLOSED_USER: populateMessage,
                                ONETOUCH_REACTIVATE: populateMessage,
                                ONETOUCH_LEAVECHECKED: populateMessage
                            };
                            $scope.onContingency = function(name, contingency, type) {
                                $locale.choose($scope.auth.country, $scope.auth.language, false);
                                if (!handleContingency[name]) {
                                    return $scope.contingencyCallback(name, contingency);
                                }
                                var message_type = type || "error";
                                return handleContingency[name](name, message_type);
                            };
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-login-components/src/login/handler/template.html": function(module, exports) {
        module.exports = '<section class="login" id="loginSection" content>\n    <xo-message message="message"></xo-message>\n    <div class="pr row-fluid" ng-class="{hasError: message}" ng-hide="hideTitle">\n        <xo-title class="xoTitle" title-txt="{{content(subFlowTitleKey ? subFlowTitleKey : \'login.loginTitle\')}}" ng-class="{span17: showLanguageDropdown, riskyTitle: subFlowTitleKey}"></xo-title>\n        <xo-language-options class="span7" ng-if="showLanguageDropdown"></xo-language-options>\n    </div>\n    <div class="inline-prop" unless-feature="propValue" ng-hide="hideloginpp">\n        <p ng-bind-html="htmlContent(\'login.propValAlt\', {country: locale.country, lang: locale.lang})")>\n    </div>\n    <div class="inline-prop" ng-show= "contingencyDesc" ng-class="{riskySubtitle: contingencyDesc}">\n        <p ng-bind-html="htmlContent(contingencyDesc, {country: locale.country, lang: locale.lang})")>\n    </div>\n    <xo-login ng-if="!ulEligibility" token=token auth=auth done-fn="onComplete" error-fn="onContingency" auto-login="autoLogin" aps-integration="apsIntegration" batch="batch" login-submit="loginSubmit"></xo-login>\n    <xo-unified-login ng-if="ulEligibility" token=token error-fn="onContingency" parent-callback="ULCallback" pre-auth="preAuth" post-auth="onComplete" auto-login="autoLogin" flowcontext="flowcontext" login-submit="loginSubmit" logout-callback="postlogout" ></xo-unified-login>\n</section>\n';
    },
    "./components/xo-login-components/src/login/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-login-components/src/login/template.html"), __webpack_require__("./components/xo-models/src/auth/index.js"), __webpack_require__("./components/xo-ui-components/src/popup/directive.js"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/credit/index.js"), __webpack_require__("./components/xo-models/src/user/index.js"), __webpack_require__("./components/xo-device-info/dist/index.js"), __webpack_require__("./components/xo-login-components/src/login/fn.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-login.directive", [ "squid", "xomodel.auth", "xomodel.checkout", "xomodel.credit", "xomodel.user", "xo-popup.directive", "xo-error-tooltip.directive", "xo-device-info", "xo-fn" ]).directive("xoLogin", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        doneFn: "=",
                        errorFn: "=",
                        clientId: "=",
                        redirectUri: "=",
                        scope: "=",
                        autoLogin: "=",
                        apsIntegration: "=",
                        batch: "=",
                        loginSubmit: "="
                    },
                    controller: function controller($scope, $element, $populate, $rootScope, $locale, $config, $window, $AuthModel, $CheckoutCartModel, $CheckoutInputDataModel, $CreditDataModel, $logger, $feature, $DeviceInfo, $util, $fn) {
                        $scope.locale = $locale;
                        var lang = $locale.lang ? $locale.lang : "en";
                        var country = $locale.country ? $locale.country : "US";
                        var localeNVP = "locale.x=" + lang.toLowerCase() + "_" + country.toUpperCase();
                        var forgotPasswordUrl = "https://www.paypal.com/" + country.toLowerCase() + "/webapps/accountrecovery/passwordrecovery?" + localeNVP;
                        var legacyForgotPasswordUrl = "https://www.paypal.com/" + country.toLowerCase() + "/merchantpaymentweb?cmd=_account-recovery&from=PayPal&" + localeNVP;
                        var checkoutInputData = $CheckoutInputDataModel.instance($rootScope.token);
                        var creditData = $CreditDataModel.instance($rootScope.token);
                        var apsRemMe = $scope.apsIntegration === "apsIntegrationRM";
                        var fptiStateName = $scope.apsIntegration ? "LOGIN_APS" : "LOGIN";
                        var $passwordField = $element.find('[ng-model="auth.password"]');
                        $scope.forgotPasswordUrl = $feature("newForgotPasswordSupported") ? forgotPasswordUrl : legacyForgotPasswordUrl;
                        $fn.sendTypingSpeedPayload("Hermes");
                        if (checkoutInputData.rmEnabled(Boolean($config.rememberMeFeatureEnabled)) && !checkoutInputData.hideRM()) {
                            fptiStateName = "LOGIN_RM";
                            $scope.rememberMe = "nonKmli";
                        } else if (apsRemMe) {
                            $scope.rememberMe = "kmli";
                        }
                        $scope.rememberMeChkBox = {
                            agreed: false
                        };
                        $scope.showRmMore = false;
                        $scope.toggleRMDetails = function() {
                            $scope.showRmMore = $scope.rememberMeChkBox.agreed;
                        };
                        function setRememberUser() {
                            if (checkoutInputData.rmEnabled(Boolean($config.rememberMeFeatureEnabled))) {
                                if (checkoutInputData.hideRM() === "true") {
                                    $scope.auth.rememberUser = false;
                                } else {
                                    $scope.auth.rememberUser = $scope.rememberMeChkBox.agreed ? true : false;
                                }
                            } else {
                                $scope.auth.rememberUser = true;
                            }
                        }
                        function showLoadingMessage() {
                            $rootScope.$emit("loadingMessage", $locale.content.get(creditData.isRedirectFromCape() || creditData.isChangeStatus() ? "base.processing" : "base.loggingIn"));
                        }
                        function loginAction() {
                            showLoadingMessage();
                            var loginInput = {
                                user: {
                                    email: $scope.auth.email,
                                    password: $scope.auth.password
                                }
                            };
                            if ($scope.clientId) {
                                loginInput.client = {
                                    redirect_uri: $config.app_redirect_uri,
                                    client_id: $config.app_clientId || "",
                                    target_client_id: $util.param("fromLipp") === "true" ? $scope.clientId : $util.base64Decode($scope.clientId),
                                    scope: $scope.scope,
                                    response_type: "token id_token",
                                    skip_oauth: false,
                                    skip_consent: true
                                };
                            } else if ($scope.apsIntegration) {
                                loginInput.client = {
                                    remember_me: Boolean(apsRemMe && $scope.rememberMeChkBox.agreed)
                                };
                                loginInput.fastLogin = true;
                            }
                            loginInput.product = $rootScope.wps ? "wps" : "ec";
                            loginInput.fraudnet_id = $scope.checkoutCart.supplementary && $scope.checkoutCart.supplementary.risk_correlation_id;
                            var adsClientContextData = {
                                context_type: "Cart-ID",
                                context_id: $scope.token
                            };
                            loginInput["ads-client-context-data"] = adsClientContextData;
                            $scope.auth.action("login", {
                                data: loginInput,
                                headers: {
                                    "x-pp-ads-client-context-data": JSON.stringify(adsClientContextData)
                                },
                                success: function success(result) {
                                    var transition_name = $scope.rememberMeChkBox.agreed ? "process_login_rm" : "process_login";
                                    $logger.info("checkout_fpti", {
                                        from: fptiStateName,
                                        to: transition_name
                                    });
                                    if (window.xprops && window.xprops.onAuth && $scope.auth.access_token) {
                                        return window.xprops.onAuth({
                                            accessToken: $scope.auth.access_token
                                        }).then(function() {
                                            return $scope.doneFn($scope.auth);
                                        });
                                    }
                                    return $scope.doneFn($scope.auth);
                                },
                                contingencies: {
                                    DEFAULT: function handleContingency(name, contingency) {
                                        var transition_name = $scope.rememberMeChkBox.agreed ? "process_login_rm" : "process_login";
                                        var error_source = $scope.apsIntegration ? "aps" : "userauth";
                                        $logger.info("checkout_fpti", {
                                            from: fptiStateName,
                                            to: transition_name,
                                            int_error_description: contingency && contingency.message,
                                            error_type: "soft_decline",
                                            error_source: error_source
                                        });
                                        $scope.auth.password = "";
                                        $passwordField.focus();
                                        return $scope.errorFn(name, contingency);
                                    }
                                }
                            });
                        }
                        $scope.$on("$destroy", function() {
                            $scope.auth.password = "";
                        });
                        $populate($scope, {
                            auth: $AuthModel.instance(),
                            checkoutCart: $CheckoutCartModel.instance($scope.token)
                        }).then(function() {
                            if ($scope.auth.loggedIn()) {
                                if ($scope.autoLogin) {
                                    showLoadingMessage();
                                    if ($scope.auth.remembered) {
                                        $logger.info("REMEMBERED_ACTIVE_SESSION");
                                    } else {
                                        $logger.info("ACTIVE_SESSION");
                                    }
                                    return $scope.doneFn($scope.auth);
                                }
                            } else if ($scope.checkoutCart.payer && $scope.checkoutCart.payer.email && !$scope.auth.timed_out) {
                                $scope.auth.email = $scope.checkoutCart.payer.email;
                            }
                            var transition_name;
                            if (apsRemMe) {
                                transition_name = "prepare_login_rm";
                            } else if (creditData.isCreditTxn()) {
                                transition_name = "prepare_login_ppc";
                            } else {
                                transition_name = "prepare_login";
                            }
                            var app_int_type = $DeviceInfo.getAppIntegrationType();
                            $logger.info("checkout_fpti", {
                                from: fptiStateName,
                                to: transition_name,
                                app_int_type: app_int_type
                            });
                            $scope.onSubmit = function() {
                                setRememberUser();
                                loginAction();
                            };
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./components/xo-ui-components/src/popup/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid) {
            squid.module("xo-popup.directive", [ "squid" ]).directive("xoPopup", function($window, $util) {
                return {
                    restrict: "A",
                    link: function link(scope, element, attr) {
                        element.on("click", function(event) {
                            event.preventDefault();
                            event.stopPropagation();
                            var config = {
                                popupUrl: attr.href,
                                popupWindowName: "popup",
                                width: 835,
                                height: 500,
                                popupWindowFeatures: {
                                    location: 1,
                                    status: 1,
                                    scrollbars: 1,
                                    resizable: 1,
                                    toolbar: 0,
                                    menubar: 0
                                }
                            };
                            scope.trackExternalLink(attr.id || "external_link");
                            var isOneTouch = $util.param("isOneTouch");
                            if (/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)|PLAYSTATION|iPadApp/i.test($window.navigator.userAgent) && isOneTouch !== "1") {
                                scope.$emit("showModal", config);
                                return false;
                            }
                            if ($(element).hasClass("smallPopup")) {
                                config.width = 385;
                            }
                            var left = 0;
                            var top = 0;
                            if (window.outerWidth) {
                                left = Math.round((window.outerWidth - config.width) / 2) + window.screenX;
                                top = Math.round((window.outerHeight - config.height) / 2) + window.screenY;
                            } else if (window.screen.width) {
                                left = Math.round((window.screen.width - config.width) / 2);
                                top = Math.round((window.screen.height - config.height) / 2);
                            }
                            var features = Object.keys(config.popupWindowFeatures).map(function(k) {
                                return k + "=" + config.popupWindowFeatures[k];
                            }).join(",");
                            features += ",width=" + config.width + ",height=" + config.height + ",left=" + left + ",top=" + top;
                            var popup = $window.open(config.popupUrl, config.popupWindowName, features);
                            if (popup.focus) {
                                popup.focus();
                            }
                        });
                    },
                    controller: function controller($scope, $logger) {
                        $scope.trackExternalLink = function(linkName) {
                            $logger.info(linkName);
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./components/xo-ui-components/src/error-tooltip/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _angularAria = __webpack_require__("./components/angular-aria/angular-aria.min.js");
            _angularAria.$ariaProvider.config({
                bindRoleForClick: false,
                ariaInvalid: false,
                ariaRequired: false
            });
            (0, _angular.$registerDirective)("xo-error-tooltip", function() {
                return {
                    restrict: "A",
                    require: [ "?^form", "?ngModel" ],
                    link: function link(scope, element, attrs, ctrls) {
                        var formCtrl = ctrls[0], modelCtrl = ctrls[1];
                        function shouldBeRequired() {
                            if (formCtrl) {
                                var showCheckboxRequired = !(element.attr("type") === "checkbox" && (attrs.errorText || attrs.errorKey));
                                return formCtrl.$submitted && modelCtrl.$error.required && showCheckboxRequired;
                            } else {
                                return modelCtrl.$error.required;
                            }
                        }
                        function shouldBeInvalid() {
                            if (formCtrl) {
                                return formCtrl.$submitted && modelCtrl.$invalid;
                            } else {
                                return modelCtrl.$invalid;
                            }
                        }
                        function formatSpaceSplitString(str, id, add) {
                            var strArray;
                            if (str) {
                                strArray = str.split(" ");
                            } else {
                                strArray = [];
                            }
                            var idIndex = strArray.indexOf(id);
                            if (~idIndex && !add) {
                                strArray.splice(idIndex, 1);
                            } else if (!~idIndex && add) {
                                strArray.push(id);
                            }
                            return strArray.join(" ");
                        }
                        (0, _angular.$timeout)(function() {
                            var generateId = function generateId() {
                                return Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 7);
                            };
                            var requiredId = generateId();
                            var invalidId = generateId();
                            var requiredError;
                            var invalidError;
                            if (attrs.errorKey) {
                                element.addClass("hasErrorTooltipRuleSpecific");
                                invalidError = (0, _angular.$compile)('<div class="errorTooltip errorTooltipRuleSpecific" id="' + invalidId + '">{{content("' + attrs.errorKey + '")}}</div>')(scope);
                                element.after(invalidError);
                            } else if (attrs.errorText) {
                                element.addClass("hasErrorTooltipRuleSpecific");
                                invalidError = $('<div class="errorTooltip errorTooltipRuleSpecific" id="' + invalidId + '">' + attrs.errorText + "</div>");
                                element.after(invalidError);
                            }
                            if (attrs.required || (0, _angular.$parse)(attrs.ngRequired)(scope)) {
                                element.addClass("hasErrorTooltipRequired");
                                requiredError = (0, _angular.$compile)('<div class="errorTooltip errorTooltipRequired" id="' + requiredId + '">{{content("validation.required")}}</div>')(scope);
                                element.after(requiredError);
                                element.removeAttr("aria-required");
                            }
                            function setAriaAttributes() {
                                var addTooltips = {
                                    required: false,
                                    invalid: false
                                };
                                if (shouldBeRequired()) {
                                    addTooltips.required = true;
                                } else if (shouldBeInvalid()) {
                                    addTooltips.invalid = true;
                                }
                                var describedby = element.attr("aria-describedby");
                                describedby = formatSpaceSplitString(describedby, requiredId, addTooltips.required);
                                describedby = formatSpaceSplitString(describedby, invalidId, addTooltips.invalid);
                                element.attr("aria-describedby", describedby);
                            }
                            scope.$watch(shouldBeRequired, function(newVal) {
                                setAriaAttributes();
                            });
                            scope.$watch(shouldBeInvalid, function(newVal) {
                                element.attr("aria-invalid", newVal);
                                setAriaAttributes();
                            });
                            element.on("focus", function(event) {
                                var windowBot = $(window).scrollTop() + $(window).height();
                                var requiredBot = requiredError ? requiredError.offset().top + requiredError.outerHeight() : 0;
                                var invalidBot = invalidError ? invalidError.offset().top + invalidError.outerHeight() : 0;
                                if (windowBot < Math.max(requiredBot, invalidBot)) {
                                    $(window).scrollTop(Math.max(requiredBot, invalidBot) - $(window).height());
                                }
                            });
                        });
                    }
                };
            });
            _angular.$registerDirective;
            _angular.$parse;
            _angular.$compile;
            _angular.$timeout;
            _angularAria.$ariaProvider;
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "../node_modules/noop-loader/index.js!./components/xo-login-components/src/login/template.html": function(module, exports) {
        module.exports = '<form name="loginForm" class="proceed" content novalidate="novalidate" autocomplete="off">\n    <div class="inputField emailField confidential">\n        <label for="username" class="focus accessAid">\n            {{ content(\'index.EmailLabel\') }}\n        </label>\n        <input ng-model="auth.email" id="username" name="username" type="email" ng-readonly="auth.emailReadOnly" value=""\n               autocapitalize="off" aria-required="false" autocomplete="off" placeholder="{{ content(\'index.EmailLabel\') }}" data-error-key="email.invalid" xo-error-tooltip required autofocus/>\n    </div>\n\n    <div class="inputField passwordField confidential">\n        <label for="password" class="focus accessAid">\n            {{ content(\'login.passwordLabel\') }}\n        </label>\n        <input ng-model="auth.password" id="password" name="password" type="password" value="" aria-required="true" autocapitalize="off" autocomplete="off" placeholder="{{ content(\'login.passwordLabel\') }}" xo-error-tooltip required>\n    </div>\n\n    <div ng-switch class="checkbox" id="rmSection" on="rememberMe">\n        <div ng-switch-when="nonKmli" class="secondary">\n            <input ng-model="rememberMeChkBox.agreed" type="checkbox" id="agree" ng-click="toggleRMDetails()"/>\n            <label for="agree">\n                {{content(\'rememberMe.remember\')}}\n                <a ng-click="showRmMore=!showRmMore">\n                    <span ng-bind="showRmMore ? content(\'rememberMe.close\'): content(\'rememberMe.more\')"></span>\n                </a>\n            </label>\n            <ul id="rmLearnMore" ng-show="showRmMore">\n                <li>{{ content(\'rememberMe.skipLogin\') }}</li>\n                <li>{{ content(\'rememberMe.toCancel\') }}</li>\n                <li>{{ content(\'rememberMe.protectAccounts\') }}</li>\n            </ul>\n        </div>\n        <div ng-switch-when="kmli">\n            <input ng-model="rememberMeChkBox.agreed" type="checkbox" id="agree">\n            <label for="agree" ng-bind="content(\'login.keepMeLoggedIn\')" class="kmliCheckboxLabel"></label>\n            <div class="signupbml kmliHelpIcon">\n                <a href="#" id="verifyHelp" class="verifyHelp"><img alt="{{ content(\'login.kmliTooltipTitle\') }}" /></a>\n            </div>\n        </div>\n    </div>\n\n    <xo-tooltip trigger="#verifyHelp" display-inline="true">\n        <div class="keepMeLoginTerms" id="keepMeLoginTerms">\n            <p>{{ content(\'login.kmliTooltipLine1\') }}</p>\n            <p>{{ content(\'login.kmliTooltipLine2\') }}</p>\n            <p>{{ content(\'login.kmliTooltipLine3\') }}</p>\n        </div>\n    </xo-tooltip>\n\n    <input track-submit type="submit" value="{{ content(\'login.loginBtn\') }}" class="btn full loginBtn" validate-submit="onSubmit()" />\n\n    <div class="center mt10 secondary" id="forgotPasswordSection">\n        <a href="{{forgotPasswordUrl}}" id="forgot_password_link" target="_blank" class="smallPopup" xo-popup>\n            {{ content(\'common.forgotYourPassword\') }}</a>\n    </div>\n</form>\n';
    },
    "./components/xo-models/src/user/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xomodel.user", [ "squid" ]).factory("$CheckoutClientDataModel", function($Model, $Api) {
                    return $Model.extend("CheckoutClientDataModel", {
                        api: new $Api({
                            uri: "/api/user/:id/clientData"
                        }),
                        merchantIdentityData: function merchantIdentityData() {
                            return {
                                email: this.email,
                                brand_name: this.display_name,
                                logo_uri: this.logo_uri,
                                identity_uri: this.identity_uri
                            };
                        },
                        validateClient: function validateClient() {
                            if (this.partner_id && this.identity_uri) {
                                return {
                                    success: true
                                };
                            } else {
                                return {
                                    success: false,
                                    error: "invalid_client"
                                };
                            }
                        },
                        validateRedirectUri: function validateRedirectUri(redirectUrl) {
                            if (this.identity_uri && this.identity_uri.indexOf(redirectUrl) > -1) {
                                return {
                                    success: true
                                };
                            } else {
                                return {
                                    success: false,
                                    error: "invalid_redirect_url"
                                };
                            }
                        }
                    });
                }).factory("$CheckoutInputDataModel", function($Model, $Api, $config, $util) {
                    var ACTION = {
                        login: "login",
                        resolve: "resolve",
                        addCard: "addCard",
                        addBank: "addBank",
                        changeCurrencyConv: "changeCurrencyConv",
                        signup: "signup",
                        mandate: "mandate",
                        addCredit: "addCredit",
                        ulReturn: "ulReturn",
                        creditReturn: "creditReturn",
                        guestCurrencyConversion: "guestCurrencyConversion",
                        guestAuthentication: "guestAuthentication"
                    };
                    return $Model.extend("CheckoutInputDataModel", {
                        init: function init() {
                            this._super.init.apply(this);
                            this.setProperties({
                                client_id: $util.param("client_id"),
                                action: $util.param("action"),
                                redirect_uri: $util.param("redirect_uri"),
                                scope: $util.param("scope"),
                                state: $util.param("state"),
                                flow: $util.param("flow"),
                                payer_id: $util.param("payer_id"),
                                mandate_reference_number: $util.param("mandate_reference_number"),
                                funding_option_id: $util.param("funding_option_id"),
                                locale: $util.param("locale"),
                                logout: $util.param("logout"),
                                refresh_parent: $util.param("refresh_parent"),
                                escape_hatch: $util.param("escape_hatch"),
                                failedBecause: $util.param("failedBecause"),
                                redirectReferrer: $util.param("redirectReferrer"),
                                id_token: $util.param("prox_id"),
                                nonce: $util.param("nonce"),
                                hide_rm: $util.param("hideRM"),
                                payloadEnc: $util.param("payloadEnc"),
                                xcancel: $util.param("x-cancel"),
                                xsuccess: $util.param("x-success")
                            });
                        },
                        api: new $Api({
                            baseURI: $config.urls.baseUrl,
                            uri: "/api/user/:id/payerId"
                        }),
                        isEbayTxn: function isEbayTxn() {
                            return Boolean(this.client_id);
                        },
                        validAction: function validAction() {
                            var actions = {
                                login: "login",
                                resolve: "resolve",
                                addCard: "addCard",
                                addBank: "addBank",
                                changeCurrencyConv: "changeCurrencyConv",
                                signup: "signup",
                                mandate: "mandate",
                                addCredit: "addCredit",
                                ulReturn: "ulReturn",
                                creditReturn: "creditReturn",
                                guestCurrencyConversion: "guestCurrencyConversion",
                                guestAuthentication: "guestAuthentication"
                            };
                            return actions.hasOwnProperty(this.action);
                        },
                        showRYP: function showRYP() {
                            return !this.isEbayTxn();
                        },
                        requiresOAuth: function requiresOAuth() {
                            return this.action === ACTION.login || this.action === ACTION.signup;
                        },
                        requiresRedirectUri: function requiresRedirectUri() {
                            return this.action === ACTION.mandate || !this.requiresOAuth();
                        },
                        validRedirectUri: function validRedirectUri() {
                            if (this.requiresRedirectUri()) {
                                return Boolean(this.redirect_uri);
                            }
                            return true;
                        },
                        validate: function validate() {
                            var error;
                            var success = true;
                            if (this.isEbayTxn()) {
                                if (!this.validAction()) {
                                    success = false;
                                    error = "invalid_action";
                                } else if (!this.validRedirectUri()) {
                                    success = false;
                                    error = "invalid_redirect_uri";
                                }
                            }
                            return {
                                success: success,
                                error: error
                            };
                        },
                        errorUrl: function errorUrl(err, errorDesc) {
                            var url = this.redirect_uri;
                            url += url && url.indexOf("?") < 0 ? "?" : "&";
                            url += "state=" + encodeURIComponent(this.state);
                            if (err) {
                                url += "&error=" + err;
                            }
                            if (errorDesc) {
                                url += "&error_description=" + errorDesc;
                            }
                            return url;
                        },
                        successUrl: function successUrl(code) {
                            var url = this.redirect_uri;
                            url += url && url.indexOf("?") < 0 ? "?" : "&";
                            url += "state=" + encodeURIComponent(this.state);
                            url += "&code=" + code;
                            return url;
                        },
                        rmEnabled: function rmEnabled(featureEnabled) {
                            return featureEnabled && this.action === ACTION.login;
                        },
                        hideRM: function hideRM() {
                            return angular.isDefined(this.hide_rm) ? this.hide_rm.toLowerCase() === "true" : false;
                        }
                    });
                }).factory("$UserInfoModel", function($Model, $Api) {
                    return $Model.extend("UserInfoModel", {
                        api: new $Api({
                            uri: "/api/user/:id/session"
                        })
                    });
                }).factory("$ValidatePhoneModel", function($Model, $Api) {
                    return $Model.extend("validatePhoneModel", {
                        api: new $Api({
                            uri: "/api/user/:token/session/validatePhone",
                            cache: false
                        })
                    });
                }).factory("$AddKYCModel", function($Model, $Api) {
                    return $Model.extend("AddKYCModel", {
                        api: new $Api({
                            uri: "/api/user/:token/session/addKYC"
                        })
                    });
                }).factory("$PatchPhoneModel", function($Model, $Api) {
                    return $Model.extend("patchPhoneModel", {
                        api: new $Api({
                            uri: "/api/checkout/:token/session/patch",
                            cache: false
                        })
                    });
                }).factory("$WaxUserModel", function($Model, $Api) {
                    return $Model.extend("WaxUserModel", {
                        api: new $Api({
                            uri: "/api/user/:id/waxUser"
                        })
                    });
                }).factory("$EConsentModel", function($Model, $Api) {
                    return $Model.extend("EConsentModel", {
                        api: new $Api({
                            uri: "/api/user/eConsent"
                        }),
                        invalidateOnLogout: true
                    });
                }).factory("$UserPhotoModel", function($Model, $Api, $config) {
                    return $Model.extend("UserPhotoModel", {
                        api: new $Api({
                            baseURI: $config.urls.baseUrl,
                            uri: "api/user/photo"
                        }),
                        invalidateOnLogout: true
                    });
                }).factory("$AuthConsentModel", function($Model, $Api) {
                    return $Model.extend("AuthConsentModel", {
                        api: new $Api({
                            uri: "/api/user/authConsent"
                        })
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/user", "components/xo-models/src/user/index.js");
    },
    "./components/xo-login-components/src/login/props.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-beaver/dist/logger.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("xo-login-props", [ "squid" ]).factory("$loginProps", function($rootScope, $window, $logger) {
                    var RISKY_LOGIN_TITLE = {
                        ECONSENT_REQUIRED: "",
                        ELV_DECLINE: "",
                        EXPIRED_CREDIT_CARD: "login.riskyLoginUpdateCard",
                        INSTANT_FUNDING_SOURCE_UPSELL_NEEDED: "",
                        NEED_CREDIT_CARD: "login.riskyLoginAddCard",
                        NEED_CREDIT_CARD_OR_BANK_ACCOUNT: "login.riskyLoginAddFi",
                        NEED_CONFIRMED_CARD: "",
                        NEED_AUTHENTICATED_CARD: "login.riskyLoginUpdateCard",
                        NEED_SHIPPING_ADDRESS: "login.riskyLoginAddShipping",
                        PHONE_NUMBER_REQUIRED: "login.riskyLoginAddPhone",
                        PAYER_AUTHENTICATION_REQUIRED: "login.riskyLoginShippingPassed",
                        SEPA_MANDATE_ACCEPTANCE_NEEDED: "login.riskyLoginSepa",
                        TAX_ID_REQUIRED: ""
                    };
                    var RISKY_LOGIN_SUBTITLE = {
                        EXPIRED_CREDIT_CARD: "login.riskyLoginExpiredCardST",
                        NEED_SHIPPING_ADDRESS: "login.riskyLoginAddShippingST",
                        PHONE_NUMBER_REQUIRED: "login.riskyLoginAddPhoneST",
                        SEPA_MANDATE_ACCEPTANCE_NEEDED: "login.riskyLoginSepaST",
                        PAYER_AUTHENTICATION_REQUIRED: "login.riskyLoginShippingPassedST"
                    };
                    return {
                        mapInfo: function mapInfo(contingency) {
                            var contingencyTitle = RISKY_LOGIN_TITLE[contingency] ? RISKY_LOGIN_TITLE[contingency] : "login.loginContingency";
                            var contingencySubTitle = RISKY_LOGIN_SUBTITLE[contingency];
                            return {
                                title: contingencyTitle,
                                subtitle: contingencySubTitle
                            };
                        },
                        inList: function inList(contingency) {
                            return RISKY_LOGIN_TITLE.hasOwnProperty(contingency);
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-login-components/src/login", "components/xo-login-components/src/login/props.js");
    },
    "./components/xo-form-components/src/language-options/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-form-components/src/language-options/template.html"), __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            squid.module("xo-language-options.directive", [ "squid", "xo-accessibility.directive" ]).directive("xoLanguageOptions", function() {
                return {
                    template: template,
                    scope: {},
                    controller: function controller($scope, $populate, $locale, $Class, $config, $meta) {
                        $scope.showLanguages = false;
                        function setLanguageVars() {
                            $scope.localeModel = $locale;
                            $scope.currentLanguage = $scope.localeModel.lang;
                            $scope.currentCountry = $scope.localeModel.country;
                            $scope.languageList = $scope.localeModel.metadata.languageLabel;
                            $scope.supportedLanguages = $config.supportedCountries[$scope.currentCountry];
                            $scope.hasMultipleLanguages = $scope.supportedLanguages && $scope.supportedLanguages.length > 1 ? true : false;
                        }
                        $scope.selectLanguage = function(language) {
                            $scope.currentLanguage = language;
                            $locale.chooseLang(language);
                        };
                        $scope.toggle = function($event) {
                            if ($event) {
                                $event.preventDefault();
                            }
                            $scope.showLanguages = !$scope.showLanguages;
                        };
                        setLanguageVars();
                        $scope.$on("localeChange", function() {
                            setLanguageVars();
                        });
                        $scope.$on("clickBody", function($event, target) {
                            if ($(target).parents(".languageToggleDisplay div").length === 0) {
                                $scope.showLanguages = false;
                                $scope.$apply();
                            }
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-form-components/src/language-options/template.html": function(module, exports) {
        module.exports = '<div class="languageToggleDisplay" content feature="languageToggle" ng-if="hasMultipleLanguages">\n    <div>\n        <a id="clickLanguageToggle" lang="{{ currentLanguage }}" aria-expanded="{{showLanguages}}" aria-label="{{ content(\'languages.label\', {language: languageList[currentLanguage]}) }}" ng-click="toggle()" select-button focus-when="!showLanguages" focused-once-before><span class="displayText">{{languageList[currentLanguage]}}</span><span class="changeLanguage" ng-class="{expand:showLanguages}"></span></a>\n    </div>\n    <div id="langDropdownBlock" ng-show="showLanguages" class="bottom">\n        <div class="arrow"></div>\n        <div ng-click="toggle()">\n            <ul aria-labelledby="clickLanguageToggle" select-box="showLanguages && supportedLanguages" select-cancel="toggle()">\n                <li role="presentation" ng-repeat="lang in supportedLanguages" lang="{{ lang }}">\n                    <a track-link="language_change" class="submit" ng-click="selectLanguage(lang)" link-button select-option="lang == currentLanguage" focus-when="showLanguages && lang == currentLanguage">{{languageList[lang]}}</a>\n                </li>\n            </ul>\n        </div>\n    </div>\n</div>';
    },
    "./components/xo-ui-components/src/accessibility/directive.js": function(module, exports, __webpack_require__) {
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _ui = __webpack_require__("./components/xo-ui-components/src/accessibility/ui.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        (0, _angular.$registerDirective)("link-button", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    var ariaLabel = (0, _angular.$parse)(attrs.linkButton)(scope);
                    var $element = (0, _jquery2["default"])(element);
                    $element.attr("role", "button");
                    $element.attr("tabindex", "0");
                    if (ariaLabel) {
                        $element.attr("aria-label", ariaLabel);
                    }
                    $element.on("keydown", function(event) {
                        if (!(event.altKey || event.ctrlKey)) {
                            switch (event.keyCode) {
                              case _ui.KEYS.SPACE:
                              case _ui.KEYS.ENTER:
                                element[0].click();
                                return false;

                              default:
                                break;
                            }
                        }
                        return true;
                    });
                }
            };
        });
        (0, _angular.$registerDirective)("select-button", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    var $element = (0, _jquery2["default"])(element);
                    $element.attr("role", "button").attr("aria-haspopup", "true").attr("tabindex", "0").on("keydown", function(event) {
                        if (!(event.altKey || event.ctrlKey)) {
                            switch (event.keyCode) {
                              case _ui.KEYS.DOWN:
                              case _ui.KEYS.SPACE:
                              case _ui.KEYS.ENTER:
                                element[0].click();
                                return false;

                              default:
                                break;
                            }
                        }
                        return true;
                    });
                }
            };
        });
        (0, _angular.$registerDirective)("select-box", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    var allowTabEscape = (0, _angular.isDefined)(attrs.selectAllowTabEscape);
                    function escapeToggle() {
                        if (attrs.selectCancel) {
                            (0, _angular.$parse)(attrs.selectCancel)(scope);
                            scope.$apply();
                        }
                    }
                    element.attr("role", "menu");
                    element.on("keydown.selectBox", function(event) {
                        var $allTabbable = (0, _ui.findAll)(element, _ui.tabbable);
                        var $origin = (0, _jquery2["default"])(event.target);
                        if (!(event.altKey || event.ctrlKey)) {
                            var index = $allTabbable.index($origin);
                            switch (event.keyCode) {
                              case _ui.KEYS.TAB:
                                if (allowTabEscape && (index === 0 && event.shiftKey || index === $allTabbable.length && !event.shiftKey)) {
                                    escapeToggle();
                                    break;
                                } else if (event.shiftKey) {
                                    index = (index - 1 + $allTabbable.length) % $allTabbable.length;
                                } else {
                                    index = (index + 1) % $allTabbable.length;
                                }
                                $allTabbable.eq(index).focus();
                                event.preventDefault();
                                break;

                              case _ui.KEYS.DOWN:
                              case _ui.KEYS.RIGHT:
                                index = (index + 1) % $allTabbable.length;
                                $allTabbable.eq(index).focus();
                                event.preventDefault();
                                break;

                              case _ui.KEYS.UP:
                              case _ui.KEYS.LEFT:
                                index = (index - 1 + $allTabbable.length) % $allTabbable.length;
                                $allTabbable.eq(index).focus();
                                event.preventDefault();
                                break;

                              case _ui.KEYS.SPACE:
                              case _ui.KEYS.ENTER:
                                $origin.click();
                                event.preventDefault();
                                break;

                              case _ui.KEYS.ESC:
                                escapeToggle();
                                break;

                              default:
                                break;
                            }
                        }
                    });
                }
            };
        });
        (0, _angular.$registerDirective)("modal-box", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    function escapeToggle() {
                        (0, _angular.$parse)(attrs.modalCancel)(scope);
                        scope.$apply();
                    }
                    function getNextIndex($element, $elements, shift) {
                        if (shift) {
                            return ($elements.index($element) - 1 + $elements.length) % $elements.length;
                        } else {
                            return ($elements.index($element) + 1) % $elements.length;
                        }
                    }
                    if ((0, _angular.$parse)(attrs.modalBox)(scope) !== false) {
                        element.on("keydown.modalBox", function(event) {
                            var $allTabbable = (0, _ui.findAll)(element, _ui.tabbable);
                            var $origin = (0, _jquery2["default"])(event.target);
                            if (!(event.altKey || event.ctrlKey)) {
                                switch (event.keyCode) {
                                  case _ui.KEYS.TAB:
                                    var index = getNextIndex($origin, $allTabbable, event.shiftKey);
                                    $allTabbable.eq(index).focus();
                                    event.preventDefault();
                                    event.stopPropagation();
                                    break;

                                  case _ui.KEYS.ESC:
                                    escapeToggle();
                                    event.preventDefault();
                                    event.stopPropagation();
                                    break;

                                  default:
                                    break;
                                }
                            }
                        });
                    }
                }
            };
        });
        (0, _angular.$registerDirective)("simple-modal", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    element.attr("tabindex", "-1");
                    var cancelFn;
                    if (attrs.modalCancel) {
                        cancelFn = function cancelFn() {
                            (0, _angular.$parse)(attrs.modalCancel)(scope);
                            scope.$apply();
                        };
                    }
                    function registerModal() {
                        (0, _jquery2["default"])(document).on("focusin.simple-modal", function(event) {
                            if (!element[0].contains(event.target)) {
                                event.stopPropagation();
                                element.focus();
                            }
                        });
                        if (cancelFn) {
                            (0, _jquery2["default"])(document).on("click.simple-modal", function(event) {
                                if (!element[0].contains(event.target)) {
                                    deregisterModal();
                                    cancelFn();
                                }
                            });
                        }
                    }
                    function deregisterModal() {
                        (0, _jquery2["default"])(document).off("focusin.simple-modal");
                        (0, _jquery2["default"])(document).off("click.simple-modal");
                    }
                    if ((0, _angular.isDefined)(element.attr("simpleModal"))) {
                        scope.$watch(attrs["simpleModal"], function(newVal) {
                            if (newVal) {
                                registerModal();
                            } else {
                                deregisterModal();
                            }
                        });
                    } else {
                        registerModal();
                    }
                    scope.$on("$destroy", deregisterModal);
                }
            };
        });
        (0, _angular.$registerDirective)("select-option", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    (0, _jquery2["default"])(element).attr("role", "menuitem");
                    if ((0, _angular.$parse)(attrs.selectOption)(scope)) {
                        (0, _jquery2["default"])(element).attr("aria-selected", "true");
                    }
                }
            };
        });
        (0, _angular.$registerDirective)("focus-when", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    function locateAndFocus(active) {
                        (0, _angular.$timeout)(function() {
                            if (active) {
                                var $elementToFocus = (0, _jquery2["default"])();
                                var directiveElementFocusable = (0, _ui.focusable)(element[0]);
                                if (attrs.focusElement) {
                                    $elementToFocus = (0, _ui.filterAll)((0, _angular.$parse)(attrs.focusElement)(scope), _ui.focusable);
                                }
                                if ($elementToFocus.length === 0 && !directiveElementFocusable) {
                                    $elementToFocus = (0, _ui.findAll)(element, _ui.focusable);
                                }
                                if ($elementToFocus.length === 0) {
                                    $elementToFocus = (0, _jquery2["default"])(element);
                                }
                                $elementToFocus.first().focus();
                            }
                        });
                    }
                    var active = true;
                    if ("focusedOnceBefore" in attrs) {
                        active = false;
                        (0, _jquery2["default"])(element).on("focus", function() {
                            active = true;
                        });
                    }
                    if (attrs.focusRefreshOn) {
                        scope.$on((0, _angular.$parse)(attrs.focusRefreshOn)(scope), function() {
                            locateAndFocus(active);
                        });
                    } else {
                        scope.$watch(attrs.focusWhen, function(val) {
                            locateAndFocus(active && val);
                        });
                    }
                }
            };
        });
        var FOCUS_EVENT_NAME = "accessible-focus";
        (0, _angular.$registerDirective)("focus-when-state", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    var startState = attrs.focusWhenState;
                    var endState = attrs.transitionsTo;
                    var transitionMessage = startState + " > " + endState;
                    var unregisterEventFn = _angular.$rootScope.$on("$stateChangeSuccess", function(event, toState, toParams, fromState, fromParams) {
                        if (fromState.name === startState && toState.name === endState) {
                            scope.$broadcast(FOCUS_EVENT_NAME, transitionMessage);
                        }
                    });
                    scope.$on(FOCUS_EVENT_NAME, function(event, message) {
                        if (message === transitionMessage) {
                            (0, _angular.$timeout)(function() {
                                return element[0].focus();
                            });
                        }
                    });
                    scope.$on("$destroy", unregisterEventFn);
                }
            };
        });
        (0, _angular.$registerDirective)("focus-after-transition", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    element.on("click", function() {
                        var focusSelector = attrs["focusAfterTransition"];
                        var cancel = _angular.$rootScope.$on("$stateChangeSuccess", function(event, toState, toParams, fromState, fromParams) {
                            cancel();
                            (0, _angular.$timeout)(function() {
                                (0, _jquery2["default"])(focusSelector).focus();
                            });
                        });
                    });
                }
            };
        });
        (0, _angular.$registerDirective)("form-autofocus", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    (0, _angular.$timeout)(function() {
                        var $allFocusable = (0, _ui.findAll)(element, _ui.focusable);
                        if ($allFocusable.length > 0) {
                            $allFocusable.first().focus();
                        }
                    });
                }
            };
        });
        (0, _angular.$registerDirective)("focusable", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    function setFocusable(value) {
                        if (value) {
                            element.attr("tabindex", 0);
                        } else {
                            element.removeAttr("tabindex");
                        }
                    }
                    if (attrs.focusable) {
                        scope.$watch(attrs.focusable, function(newVal) {
                            if (newVal) {
                                setFocusable(true);
                            } else {
                                setFocusable(false);
                            }
                        });
                    } else {
                        setFocusable(true);
                    }
                }
            };
        });
        _angular.$registerDirective;
        _angular.$parse;
        _angular.$timeout;
        _angular.$rootScope;
        _angular.isDefined;
        _ui.KEYS;
        _ui.focusable;
        _ui.tabbable;
        _ui.findAll;
        _ui.filterAll;
    },
    "./components/xo-ui-components/src/accessibility/ui.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.filterAll = exports.findAll = exports.tabbable = exports.focusable = exports.visible = exports.KEYS = undefined;
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var KEYS = {
            TAB: 9,
            ENTER: 13,
            ESC: 27,
            SPACE: 32,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40
        };
        function visible(element) {
            return _jquery2["default"].expr.filters.visible(element) && !(0, _jquery2["default"])(element).parents().addBack().filter(function() {
                return _jquery2["default"].css(this, "visibility") === "hidden";
            }).length;
        }
        function focusable(element) {
            var nodeName = element.nodeName.toLowerCase();
            var isTabIndexNotNaN = !isNaN(_jquery2["default"].attr(element, "tabindex"));
            var map;
            var mapName;
            var img;
            if (nodeName === "area") {
                map = element.parentNode;
                mapName = map.name;
                if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                    return false;
                }
                img = (0, _jquery2["default"])("img[usemap=#" + mapName + "]")[0];
                return !!img && visible(img);
            }
            return (/^(input|select|textarea|button|object)$/.test(nodeName) ? !element.disabled : nodeName === "a" ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
        }
        function tabbable(element) {
            var tabIndex = _jquery2["default"].attr(element, "tabindex");
            var isTabIndexNaN = isNaN(tabIndex);
            return (isTabIndexNaN || tabIndex >= 0) && focusable(element);
        }
        function filterAll(elements, filterFn) {
            return (0, _jquery2["default"])(elements).filter(function() {
                return filterFn(this);
            });
        }
        function findAll(container, filterFn) {
            return filterAll((0, _jquery2["default"])(container).find("*"), filterFn);
        }
        exports.KEYS = KEYS;
        exports.visible = visible;
        exports.focusable = focusable;
        exports.tabbable = tabbable;
        exports.findAll = findAll;
        exports.filterAll = filterAll;
    },
    "./components/xo-login-components/src/unified-login/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-login-components/src/unified-login/template.html"), __webpack_require__("./components/xo-login-components/src/login/kmliEligibility.js"), __webpack_require__("./components/xo-login-components/src/onetouch-interstitial/kmliUpsell.js"), __webpack_require__("./components/xo-tracking/dist/index.js"), __webpack_require__("./components/ul-inline/dist/inject.js"), __webpack_require__("./components/xo-device-info/dist/index.js"), __webpack_require__("./components/xo-models/src/auth/lib/xoAPayUtils.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid, template) {
            return angular.module("xo-unified-login.directive", [ "squid", "xo-unified-login.kmliUpsell", "tracking", "xolocale", "xo-device-info", "xo-fn" ]).directive("xoUnifiedLogin", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        redirectUri: "=",
                        parentCallback: "=",
                        doneFn: "=",
                        errorFn: "=",
                        autoLogin: "=",
                        promptlogin: "=",
                        logoutCallback: "=",
                        kmli: "=",
                        preAuth: "=",
                        postAuth: "=",
                        flowcontext: "="
                    },
                    controller: function controller($scope, $populate, $rootScope, $CheckoutAppDataModel, $LocaleModel, $config, $state, $stateParams, $timeout, $FallbackError, $KmliUpsell, $logger, $locale, $fpti, $AuthModel, $ULoginModel, $util, $pxp, $CalDataModel, $meta, $DeviceInfo, $pxpMatch, $feature, $q, $promise, $CheckoutCartModel, $fn, $window, $xoAPayUtils, $KmliEligibility) {
                        var ulClientRedirect = $util.param("ulClientRedirect") || "";
                        var redirect_reason_timeout = "timeout";
                        var PAYPAL = window.PAYPAL || {};
                        var loginAttemptedMethod = "";
                        var userSelectedLanguage = "";
                        var failureReasons = {
                            timeout: "TIMEDOUT",
                            error: "INTERNALERROR",
                            blacklistedDevice: "PLATFORM_NOT_SUPPORTED",
                            fallback: "FALLBACK"
                        };
                        var enteringTime = Date.now();
                        $logger.debug("ENTERING_LOADING_UL_IFRAME", {
                            enteringTime: enteringTime
                        });
                        $scope.locale = $LocaleModel.instance();
                        $scope.forcedLogin = !$scope.autoLogin;
                        if ($stateParams.source === "NOT_YOU" || $stateParams.source === "FRESH_START") {
                            $scope.forcedLogin = false;
                        }
                        var ulTimeoutLimit = 35e3;
                        var ulTimeoutPromise = null;
                        var loadCnt = 0;
                        if (ulClientRedirect === redirect_reason_timeout) {
                            $logger.info("ulClientRedirect_timeout");
                        }
                        function setLoading(tag, isRT) {
                            $rootScope.$emit("loading");
                            if (isRT && !$scope.auth.loggedIn()) {
                                $rootScope.$emit("loadingMessage", {
                                    heading: $locale.content.get("base.loggingIn"),
                                    subHeading: $locale.content.get("login.rmSubHeading")
                                });
                            }
                            loadCnt++;
                            $logger.debug("setLoading by " + tag + " cnt " + loadCnt);
                        }
                        function setLoaded(tag) {
                            if (loadCnt > 0) {
                                $rootScope.$emit("loaded");
                                loadCnt--;
                            } else {
                                $logger.error("loadCnt_zero");
                            }
                            $logger.debug("setLoaded by " + tag + " cnt " + loadCnt);
                        }
                        function fallback(product, reason, params) {
                            throw new $FallbackError({
                                product: product || "ux",
                                reason: reason,
                                params: params
                            });
                        }
                        function appLoginHandler(status) {
                            $logger.debug("ULLOGIN_" + status);
                            $logger.info("checkout_fpti", {
                                from: "LOGIN",
                                to: "prepare_login"
                            });
                            fallback("ux", "ul_server_error");
                        }
                        var startTimerTS;
                        function startTimer(tag) {
                            startTimerTS = Date.now();
                            $logger.debug("startTimer by " + tag, {
                                startTime: startTimerTS
                            });
                            $logger.info("checkout_fpti", {
                                from: "UL_Timer",
                                to: "prepare_" + tag
                            });
                            ulTimeoutPromise = $timeout(function() {
                                $logger.error("load_ul_timeout");
                                var stop_time = Date.now();
                                var time_taken = stop_time - startTimerTS;
                                $logger.info("checkout_fpti", {
                                    from: "UL_Timer",
                                    to: "process_timeout",
                                    int_error_code: "ULLOGIN_TIMEOUT",
                                    int_error_description: "ULLOGIN_TIMEOUT",
                                    error_source: "unifiedloginnodeweb",
                                    error_type: "soft_decline",
                                    page_load_time: time_taken
                                });
                                if (!$config.disableUlTimeout) {
                                    fallback("ux", "ul_load_timeout");
                                } else {
                                    var isRememberedUser = $scope.auth && $scope.auth.remembered;
                                    var isTokenExchange = $scope.auth && $scope.auth.refreshToken() && !$scope.auth.accessToken();
                                    if (!ulClientRedirect && !isRememberedUser && !isTokenExchange) {
                                        var qs = $util.queryString() || "";
                                        var updated_qs = $util.queryStringSplice(qs, {
                                            ulClientRedirect: redirect_reason_timeout
                                        }, [ "ul", "ulReturn" ]);
                                        var ulAsLandingUrl = $util.paypalURL("/webapps/hermes/" + updated_qs);
                                        $logger.debug("redirecting_to_ulAsLanding");
                                        $util.redirect(ulAsLandingUrl);
                                    }
                                }
                            }, ulTimeoutLimit);
                        }
                        function stopTimer(tag, keepLoading) {
                            var stopTimerTS = Date.now();
                            var timeTaken = stopTimerTS - startTimerTS;
                            $logger.debug("stopTimer by " + tag, {
                                stopTimer: stopTimerTS,
                                page_load_time: timeTaken
                            });
                            $logger.info("checkout_fpti", {
                                from: "UL_Timer",
                                to: "process_" + tag,
                                page_load_time: timeTaken
                            });
                            if (!keepLoading) {
                                setLoaded("stopTimer");
                            }
                            if (ulTimeoutPromise) {
                                $timeout.cancel(ulTimeoutPromise);
                            }
                        }
                        function logFptiData(fptiData, eventName) {
                            var errorDescription;
                            switch (eventName) {
                              case "2fa":
                                errorDescription = "2fa_required";
                                break;

                              case "safeRequired":
                                errorDescription = "SAFE_required";
                                break;

                              case "stepupRequired":
                                errorDescription = "Login_ATO_required";
                                break;

                              default:                            }
                            $logger.info("checkout_fpti", {
                                from: fptiData.fptiState,
                                to: fptiData.fptiTransition,
                                int_error_code: eventName,
                                int_error_description: errorDescription,
                                error_type: "soft_decline",
                                error_source: "unifiedloginnodeweb"
                            });
                        }
                        function buildRedirectURL(contingencyUrl, eventName) {
                            var authChallengeUrl = contingencyUrl;
                            var paramIndex = authChallengeUrl.indexOf("?");
                            var urlParams = $util.params(authChallengeUrl.substring(paramIndex + 1));
                            urlParams.returnUri = $config.ulMeta.authChallengeReturnUri;
                            if (userSelectedLanguage) {
                                urlParams["locale.x"] = $locale.getLocaleCode();
                                urlParams["state"] += "&locale.test=" + $locale.getLocaleCode();
                            }
                            switch (eventName) {
                              case "2fa":
                                urlParams["state"] += "&acRedirect=2fa&ulMethod=" + loginAttemptedMethod;
                                break;

                              case "safeRequired":
                                urlParams["state"] += "&acRedirect=safe";
                                break;

                              case "stepupRequired":
                                urlParams["state"] += "&acRedirect=loginato";
                                break;

                              default:                            }
                            var redirectUrl = $util.buildURL(authChallengeUrl.substring(0, paramIndex), urlParams);
                            return redirectUrl;
                        }
                        if (!$config.ulMeta) {
                            $logger.error("config_no_ulMeta");
                        }
                        var ulMeta = $config.ulMeta || {};
                        $populate($scope, {
                            auth: $AuthModel.instance(),
                            checkoutAppData: $CheckoutAppDataModel.instance($scope.token),
                            checkoutCart: $CheckoutCartModel.instance($scope.token)
                        }).then(function() {
                            var isRememberedUser = $scope.auth.refreshToken();
                            setLoading("loadUL", isRememberedUser);
                            return $KmliEligibility.init({
                                forcedLogin: $scope.forcedLogin,
                                logoutCallback: $scope.logoutCallback
                            });
                        }).then(function(eligibility) {
                            ulTimeoutLimit = eligibility.ulTimeoutLimit ? eligibility.ulTimeoutLimit : ulTimeoutLimit;
                            $scope.preloadUL = eligibility.preloadUL;
                            $scope.safeEligibility = eligibility.safeEligibility;
                            $scope.kmliEligibility = eligibility.kmliEligibility;
                            if ($scope.preloadUL) {
                                $logger.debug("ULSS_CLIENT_PRELOAD_TREATMENT");
                                return $populate($scope, {
                                    ulSource: $ULoginModel.instance()
                                });
                            }
                            if (!$scope.checkoutCart.isWalletTokenization() && !$scope.preloadUL) {
                                return $pxp("xo_hermesnode_kmli_upsell", {
                                    "ctx.COUNTRY": $scope.auth.buyer_ipcountry
                                }, "xo_hermes_kmli_upsell_(web|mobile)_v2_treatment.*").then(function(pxpResult) {
                                    if (pxpResult && pxpResult.treatment_name) {
                                        $logger.debug("ryi_optin_treatment");
                                        $scope.ryiOptin = $feature("optinToggle");
                                    }
                                });
                            }
                        }).then(function() {
                            var rememberMe = $scope.ryiOptin && !$scope.auth.refreshToken() ? false : $scope.kmliEligibility;
                            var app_int_type = $DeviceInfo.getAppIntegrationType();
                            if ($scope.auth.refreshToken() && !$scope.forcedLogin) {
                                $logger.info("checkout_fpti", {
                                    from: "LOGIN_UL_RM",
                                    to: "prepare_login_ul_RM",
                                    app_int_type: app_int_type
                                });
                            }
                            function getPostLoginFpti(data) {
                                var result;
                                if (data.event === "tokenExchanged") {
                                    if (data.authorizationToken === "jwt_token") {
                                        result = {
                                            fptiState: "LOGIN_UL_JWT",
                                            fptiTransition: "process_UL_JWT"
                                        };
                                    } else {
                                        result = {
                                            fptiState: "LOGIN_UL_RM",
                                            fptiTransition: "process_RT_AT_exch"
                                        };
                                    }
                                } else {
                                    var fptiTransitionName = data.keepMeLoggedIn === true ? "process_login_UL_RM" : "process_login_UL";
                                    var ULState = rememberMe === true ? "LOGIN_UL_RM" : "LOGIN_UL";
                                    result = {
                                        fptiState: ULState,
                                        fptiTransition: fptiTransitionName
                                    };
                                }
                                return result;
                            }
                            var cancelLocaleChange;
                            function loginComplete(data) {
                                var jwtBasedAssertion = data.event === "tokenExchanged" && data.authorizationToken === "jwt_token";
                                var rtExchanged = data.event === "tokenExchanged" && data.authorizationToken !== "jwt_token";
                                $promise.run(function() {
                                    $scope.auth.stepupAuthRequired = false;
                                    stopTimer("loginComplete");
                                    if (cancelLocaleChange) {
                                        cancelLocaleChange();
                                    }
                                    $scope.auth.isKmliSet = data.keepMeLoggedIn || rtExchanged;
                                    $scope.auth.rtExchanged = rtExchanged;
                                    var fptiData = getPostLoginFpti(data);
                                    $logger.info("checkout_fpti", {
                                        from: fptiData.fptiState,
                                        to: fptiData.fptiTransition
                                    });
                                    if (window.xprops && window.xprops.onAuth && data && data.accessToken) {
                                        return window.xprops.onAuth({
                                            accessToken: data.accessToken
                                        });
                                    }
                                }).then(function() {
                                    var upsellEligibilityData = {
                                        ulData: data
                                    };
                                    if ($scope.preAuth) {
                                        $scope.preAuth();
                                    }
                                    if (data.event === "tokenExchanged") {
                                        if ($feature("rmSpinnerText") && !jwtBasedAssertion) {
                                            $rootScope.$emit("loadingMessage", {
                                                heading: $locale.content.get("base.planning"),
                                                subHeading: $locale.content.get("login.rmSubHeading")
                                            });
                                        } else {
                                            $rootScope.$emit("loadingMessage", $locale.content.get("base.planning"));
                                        }
                                    }
                                    return $scope.auth.reload({
                                        resultModel: $scope.auth,
                                        headers: {
                                            "x-paypal-internal-euat": data.accessToken
                                        },
                                        batch: {
                                            name: "setbuyer",
                                            id: "securityCtx",
                                            dependencies: []
                                        },
                                        success: function success() {
                                            $scope.auth.is_auth_api_call = data.event === "tokenExchanged";
                                            angular.extend(upsellEligibilityData, {
                                                buyerCountry: $scope.auth.country,
                                                jwtBasedAssertion: jwtBasedAssertion,
                                                showReactivationInterstitial: $scope.showReactivationInterstitial
                                            });
                                            $KmliUpsell.init(upsellEligibilityData);
                                            $scope.postAuth($scope.auth);
                                        },
                                        contingencies: {
                                            DEFAULT: function handleContingency(name, contingency) {
                                                $scope.auth.password = "";
                                                $scope.errorFn(name, contingency);
                                            }
                                        }
                                    });
                                });
                            }
                            var ulEventHandlers = {
                                loginRendered: function loginRendered(data) {
                                    var loadingCompletedTime = Date.now();
                                    $logger.debug("ULLOGIN_FRAME_LOADED_SUCCESSFULLY", {
                                        page_load_time: loadingCompletedTime - enteringTime
                                    });
                                    if (data.authorizationType === "token" && data.authorizationToken === "jwt_token") {
                                        $logger.info("checkout_fpti", {
                                            from: "LOGIN_UL_JWT",
                                            to: "process_UL_JWT",
                                            int_error_code: "unknown",
                                            int_error_description: "JWT assertion failed",
                                            error_source: "unifiedloginnodeweb",
                                            error_type: "soft_decline"
                                        });
                                    }
                                },
                                loginFullyLoaded: function loginFullyLoaded(data) {
                                    stopTimer(data.event);
                                    if ($scope.notYou) {
                                        $rootScope.$emit("loaded");
                                        delete $scope.notYou;
                                        $logger.info("checkout_fpti", {
                                            from: "LOGIN_UL_RM",
                                            to: "prepare_login_ul"
                                        });
                                        $fn.sendTypingSpeedPayload("HermesUL");
                                        return $scope.logoutCallback();
                                    }
                                    if (!$state.current.trackingData) {
                                        $state.current.trackingData = {
                                            fptiState: "ulLoginDefault"
                                        };
                                    }
                                    $state.current.trackingData.pageQualifier = "ulLogin";
                                    var loadingCompletedTime = Date.now();
                                    var timeTaken = loadingCompletedTime - enteringTime;
                                    $logger.debug("ULLOGIN_LOADED_SUCCESSFULLY", {
                                        page_load_time: timeTaken
                                    });
                                    if ($scope.preLoadedSource) {
                                        $logger.debug("ULSS_CLIENT_LOADED_SUCCESSFULLY", {
                                            page_load_time: timeTaken
                                        });
                                    }
                                    var ULState = rememberMe === true && !$scope.logoutCallback ? "LOGIN_UL_RM" : "LOGIN_UL";
                                    $logger.info("checkout_fpti", {
                                        from: ULState,
                                        to: "prepare_iframe",
                                        page_load_time: timeTaken
                                    });
                                    var payload = {
                                        from: ULState,
                                        to: "prepare_login_ul",
                                        app_int_type: app_int_type
                                    };
                                    if ($stateParams.targetPage) {
                                        angular.extend(payload, {
                                            int_error_code: $stateParams.targetPage
                                        });
                                    }
                                    $logger.info("checkout_fpti", payload);
                                    $fn.sendTypingSpeedPayload("HermesUL");
                                    $logger.flush();
                                },
                                loginEmailPasswordAttempted: function loginEmailPasswordAttempted() {
                                    loginAttemptedMethod = "email";
                                },
                                loginPhonePinAttempted: function loginPhonePinAttempted() {
                                    loginAttemptedMethod = "phone";
                                },
                                loginAttempted: function loginAttempted(data) {
                                    setLoading(data.event);
                                    $rootScope.$emit("loadingMessage", $locale.content.get("base.loggingIn"));
                                    if (rememberMe === true) {
                                        var kmliStatus = data.keepMeLoggedIn === true ? "KMLI_CHECKED" : "KMLI_UNCHECKED";
                                        $logger.debug(kmliStatus);
                                    }
                                    startTimer(data.event);
                                },
                                loginSuccess: loginComplete,
                                tokenExchanged: function tokenExchanged(data) {
                                    $logger.info("TOKEN_EXCHANGED", {
                                        authorizationType: data.authorizationType,
                                        authorizationToken: data.authorizationToken || ""
                                    });
                                    loginComplete(data);
                                },
                                notYouLinkClicked: function notYouLinkClicked(data) {
                                    $rootScope.$emit("loading");
                                    $scope.notYou = true;
                                    $logger.info("checkout_fpti", {
                                        from: "LOGIN_UL",
                                        to: "login_with_diff_user"
                                    });
                                    startTimer(data.event);
                                },
                                "2fa": function fa(data) {
                                    stopTimer(data.event);
                                    var fptidata = getPostLoginFpti(data);
                                    logFptiData(fptidata, data.event);
                                    if (data.contingencyUrl) {
                                        $logger.debug("ULLOGIN_TWO_FA_AUTH_REDIRECT");
                                        var authChallengeRedirectUrl = buildRedirectURL(data.contingencyUrl, data.event);
                                        $util.redirect(authChallengeRedirectUrl);
                                    } else {
                                        $logger.debug("ULLOGIN_TWO_FA_GENERIC_ERROR");
                                        $state.go("checkout.genericError", {
                                            code: "DEFAULT"
                                        });
                                    }
                                },
                                safeRequired: function safeRequired(data) {
                                    stopTimer(data.event);
                                    var fptidata = getPostLoginFpti(data);
                                    logFptiData(fptidata, data.event);
                                    if ($scope.safeEligibility && data.contingencyUrl) {
                                        if (data.authorizationType && data.authorizationType === "token") {
                                            $logger.debug("LOGIN_REDIRECTION_SAFE_RM_USER");
                                            $state.go("checkout.login", {
                                                targetPage: "LOGIN_CONTINGENCY"
                                            });
                                        }
                                        $logger.debug("ULSAFE_REDIRECTION");
                                        var authChallengeRedirectUrl = buildRedirectURL(data.contingencyUrl, data.event);
                                        $util.redirect(authChallengeRedirectUrl);
                                    } else {
                                        $logger.debug("ULSAFE_GENERIC_ERROR");
                                        $state.go("checkout.genericError", {
                                            code: "RESTRICTED_USER"
                                        });
                                    }
                                },
                                serverError: function serverError(data) {
                                    stopTimer(data.event);
                                    var error_code = "INVALID_USER";
                                    var error = {
                                        type: "pageError",
                                        code: 500
                                    };
                                    switch (data.reason) {
                                      case "serverValidationError":
                                        if (data.authorizationType === "token") {
                                            error_code = "ONETOUCH_GENERIC_ERROR";
                                            error.msg = $locale.content.get("login.reactivateOneTouch");
                                        } else if (loginAttemptedMethod === "phone") {
                                            error_code = "INVALID_PHONE_PIN";
                                            error.msg = $locale.content.get("login.invalidPin");
                                        } else {
                                            error.msg = $locale.content.get("login.invalidEmailPasswordPageError");
                                        }
                                        break;

                                      case "invalidUser":
                                        if (data.authorizationType === "token") {
                                            error_code = "ONETOUCH_GENERIC_ERROR";
                                            error.msg = $locale.content.get("login.reactivateOneTouch");
                                        }
                                        break;

                                      case "internalServerError":
                                        if (data.authorizationType === "token") {
                                            error_code = "ONETOUCH_GENERIC_ERROR";
                                            error.msg = $locale.content.get("login.reactivateOneTouch");
                                        } else {
                                            error.msg = $locale.content.get("login.invalidEmailPasswordPageError");
                                        }
                                        $fpti.setupDataString($state.current, error);
                                        return appLoginHandler(failureReasons.error);

                                      case "accountTemporaryLocked":
                                      case "accountPermanentlyLocked":
                                        error.code = data.code;
                                        error.msg = $locale.content.get("login.accountLockedPageError");
                                        error_code = "ACCOUNT_LOCKED";
                                        break;

                                      case "riskDecline":
                                        error.code = data.code;
                                        if (data.authorizationType === "token") {
                                            error_code = "ONETOUCH_GENERIC_ERROR";
                                            error.msg = $locale.content.get("login.reactivateOneTouch");
                                        } else {
                                            error.msg = $locale.content.get("login.riskDeclinePageError");
                                            error_code = "RISK_DECLINE";
                                        }
                                        break;

                                      default:                                    }
                                    var fptidata = getPostLoginFpti(data);
                                    $logger.info("checkout_fpti", {
                                        from: fptidata.fptiState,
                                        to: fptidata.fptiTransition,
                                        int_error_code: data.code,
                                        int_error_description: data.reason,
                                        error_type: "soft_decline",
                                        error_source: "unifiedloginnodeweb"
                                    });
                                    $fpti.setupDataString($state.current, error);
                                    $scope.parentCallback("showErrorMessages", error_code);
                                },
                                client_validation_error: function client_validation_error(data) {
                                    var error = {
                                        type: "pageError",
                                        msg: $locale.content.get("login.invalidEmailPasswordPageError")
                                    };
                                    var fptidata = getPostLoginFpti(data);
                                    $logger.info("checkout_fpti", {
                                        from: fptidata.fptiState,
                                        to: fptidata.fptiTransition,
                                        int_error_code: data.event,
                                        int_error_description: "invalid_credentials",
                                        error_type: "soft_decline",
                                        error_source: "unifiedloginnodeweb"
                                    });
                                    $fpti.setupDataString($state.current, error);
                                },
                                stepupRequired: function stepupRequired(data) {
                                    stopTimer(data.event);
                                    var fptidata = getPostLoginFpti(data);
                                    logFptiData(fptidata, data.event);
                                    if (data.authorizationType && data.authorizationType === "token") {
                                        $logger.debug("LOGIN_ATO_RM_USER");
                                        var error_code = "ONETOUCH_GENERIC_ERROR";
                                        var error = {
                                            type: "pageError",
                                            msg: $locale.content.get("login.reactivateOneTouch")
                                        };
                                    } else if (data.contingencyUrl) {
                                        $logger.debug("LOGIN_ATO_USER");
                                        var authChallengeRedirectUrl = buildRedirectURL(data.contingencyUrl, data.event);
                                        $util.redirect(authChallengeRedirectUrl);
                                    } else {
                                        $logger.debug("LOGIN_ATO_GENERIC_ERROR");
                                        $state.go("checkout.genericError", {
                                            code: "RESTRICTED_USER"
                                        });
                                    }
                                    $scope.parentCallback("showErrorMessages", error_code);
                                },
                                captcha: function captcha(data) {
                                    var fptiData = getPostLoginFpti(data);
                                    $logger.info("checkout_fpti", {
                                        from: fptiData.fptiState,
                                        to: "prepare_captcha"
                                    });
                                },
                                bodyClick: function bodyClick() {
                                    $rootScope.$broadcast("clickBody");
                                },
                                expiredRefreshToken: function expiredRefreshToken(data) {
                                    var treatment = data.treatment;
                                    $logger.info("EXPIRED_RT_" + treatment);
                                    $logger.info("checkout_fpti", {
                                        from: "LOGIN_UL_RM",
                                        to: "process_RT_AT_exch",
                                        int_error_code: "expired_RT_Token",
                                        int_error_desc: treatment,
                                        error_source: "unifiedloginnodeweb",
                                        error_type: "soft_decline"
                                    });
                                    switch (treatment) {
                                      case "showInterstitial":
                                        $scope.showReactivationInterstitial = true;
                                        break;

                                      case "checkboxPreselectedWithNotification":
                                        $scope.errorFn("ONETOUCH_LEAVECHECKED", {}, "warning");
                                        break;

                                      case "checkboxNotPreselectedWithNotification":
                                        $scope.errorFn("ONETOUCH_REACTIVATE", {}, "warning");
                                        break;

                                      case "expiredRefreshTokenControl":
                                        break;

                                      default:
                                        break;
                                    }
                                }
                            };
                            function postMessageHandler(response) {
                                $timeout(function() {
                                    $logger.info("ul_postmessaged_received", response);
                                    var data = response.data || response.error;
                                    var eventId = data && data.event;
                                    if (eventId) {
                                        $logger.debug("ULLOGIN_" + eventId, response);
                                        var handler = ulEventHandlers[eventId];
                                        if (handler) {
                                            handler(data);
                                        }
                                    }
                                });
                            }
                            function loadUnifiedLogin(iframeCopy) {
                                var queryString = $util.queryStringSplice($util.queryString(), {
                                    flow: "1-P",
                                    token: $scope.token
                                }, [ "cmd" ]);
                                var isHermesInsideIframe = $util.isIFrame();
                                if (isHermesInsideIframe) {
                                    $logger.info("MERCHANT_IFRAME_INTEGRATION");
                                }
                                var options = {
                                    targetElement: document.getElementById("injectedUnifiedLogin"),
                                    xhrRequest: isHermesInsideIframe,
                                    queryParams: {
                                        stsRedirectUri: ulMeta.stsReturnUrl,
                                        "country.x": $scope.locale.country,
                                        "locale.x": $scope.locale.getLocaleCode(),
                                        returnUri: ulMeta.ulReturnUri,
                                        state: queryString,
                                        flowId: $scope.token,
                                        correlationId: $CalDataModel.getCalCorrId()
                                    },
                                    config: {
                                        title: "PayPal - " + $locale.content.get("common.login")
                                    },
                                    onPostMessage: postMessageHandler
                                };
                                if ($meta.baToken) {
                                    angular.extend(options.queryParams, {
                                        fn_dt: $meta.baToken
                                    });
                                }
                                if ($scope.forcedLogin) {
                                    angular.extend(options.queryParams, {
                                        prompt: "login"
                                    });
                                }
                                if ($scope.logoutCallback) {
                                    angular.extend(options.queryParams, {
                                        showNotYou: true
                                    });
                                }
                                if ($stateParams.source !== "NOT_YOU") {
                                    $scope.flowcontext = $scope.checkoutCart.flow_context;
                                } else {
                                    $scope.flowcontext = $scope.checkoutCart.flow_context_without_email;
                                }
                                if ($scope.flowcontext) {
                                    angular.extend(options.queryParams, {
                                        flowContextData: $scope.flowcontext
                                    });
                                }
                                if ($config.deploy.isLocal()) {
                                    options.origin = "https://" + $meta.stage;
                                    if (!$meta.stage) {
                                        var backupURL = $config.onboarding.url.split("/webapps/")[0];
                                        options.origin = backupURL;
                                    }
                                }
                                if ($scope.preloadUL && $scope.ulSource && $scope.ulSource.src && !$scope.forcedLogin && $stateParams.source !== "NOT_YOU" && !userSelectedLanguage && rememberMe) {
                                    $logger.debug("ULSS_CLIENT_PRELOAD_INJECT");
                                    $scope.preLoadedSource = true;
                                    options.preLoadedSource = decodeURI($scope.ulSource.src);
                                }
                                function ulInvoke() {
                                    if (PAYPAL && PAYPAL.unifiedLogin) {
                                        startTimer("ulInvoke");
                                        if (!iframeCopy) {
                                            PAYPAL.unifiedLogin.inject(options);
                                        } else {
                                            PAYPAL.unifiedLogin.copyPasteIframe({
                                                targetElement: document.getElementById("injectedUnifiedLogin"),
                                                onPostMessage: postMessageHandler
                                            });
                                        }
                                    } else {
                                        return appLoginHandler(failureReasons.fallback);
                                    }
                                }
                                var kmliContentMapping = {
                                    xo_hermesnode_kmli_content_control: "0",
                                    xo_hermesnode_kmli_content_t1: "1",
                                    xo_hermesnode_kmli_content_t2: "2",
                                    xo_hermesnode_kmli_content_t3: "3"
                                };
                                var jwtToken = $util.param("jwtToken") || $xoAPayUtils.getAPayAuthToken();
                                if (jwtToken) {
                                    options.queryParams.jwtToken = jwtToken;
                                }
                                if (rememberMe === true) {
                                    options.queryParams.rememberMe = true;
                                    var country = $scope.checkoutAppData.merchant.merchant_country;
                                    return $pxp(ulMeta.kmliContentExpId, {
                                        "ctx.COUNTRY": country
                                    }, "xo_hermesnode_kmli_content_.*").then(function(result) {
                                        var contentKey = result && result.treatment_name;
                                        if (contentKey && kmliContentMapping[contentKey]) {
                                            options.queryParams.rememberMeContent = kmliContentMapping[contentKey];
                                        }
                                        ulInvoke();
                                    });
                                }
                                return ulInvoke();
                            }
                            var cancelAllLoaded = $rootScope.$on("allLoaded", function() {
                                cancelLocaleChange = $scope.$on("localeChange", function() {
                                    userSelectedLanguage = $locale.lang;
                                    setLoading("localeChange");
                                    loadUnifiedLogin();
                                });
                                cancelAllLoaded();
                            });
                            $scope.$on("$destroy", cancelAllLoaded);
                            loadUnifiedLogin(ulMeta.iframeCopy);
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-login-components/src/unified-login/template.html": function(module, exports) {
        module.exports = '<div>\n    <input id="email" name="login_email" type="email" value="" autocomplete="off" placeholder="Email" style="display:none">\n    <input id="password" name="login_password" type="password" value="" placeholder="Password" style="display:none">\n    <div id="injectedUnifiedLogin">\n    </div>\n</div>\n';
    },
    "./components/xo-login-components/src/login/kmliEligibility.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-device-info/dist/index.js"), __webpack_require__("./components/xo-beaver/dist/logger.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("xo-login.directive.kmliEligibility", [ "squid", "xo-device-info", "beaver" ]).factory("$KmliEligibility", function($DeviceInfo, $window, $meta, $config, $pxp, $pxpMatch, $populate, $logger, $rootScope, $feature, $util, $q, $CheckoutAppDataModel, $CheckoutCartModel, $AuthModel) {
                    var scope = {};
                    scope.token = $rootScope.token;
                    scope.eligibility = {};
                    var ulMeta = $config.ulMeta || {};
                    function getPXPList(country) {
                        var countryCTX = {
                            "ctx.COUNTRY": country
                        };
                        var pxpExpId = ulMeta.pxpExpId;
                        var pxpList = [ $pxp(pxpExpId, countryCTX, "xo_hermes_ul_timeout_treatment.*"), $pxp(pxpExpId, countryCTX, "xo_hermes_ul_preload_treatment") ];
                        return pxpList;
                    }
                    function routingReason() {
                        var isRememberedUser = scope.auth.refreshToken();
                        if (scope.kmli === true) {
                            return "kmliMandated";
                        } else if (isRememberedUser) {
                            return "rememberedUser";
                        } else if ($util.param("ul") === "2") {
                            return "ulParam";
                        } else if ($meta.corp && ulMeta.allowKMLIForInternalIP) {
                            var merchantCountry = scope.checkoutAppData.merchant.merchant_country;
                            if ($feature("enableOneTouchInternalIP", false, merchantCountry)) {
                                return "internalIP";
                            }
                        } else if (ulMeta.enableOneTouchByDefault) {
                            return "oneTouchByDefault";
                        }
                    }
                    function compatibility(reasons) {
                        if ($DeviceInfo.isApp()) {
                            scope.kmliEligibility = false;
                            reasons.push("Webview");
                        } else if (!$util.cookiesEnabled()) {
                            scope.kmliEligibility = false;
                            reasons.push("cookiesDisabled");
                        } else if (scope.auth.ota) {
                            scope.kmliEligibility = false;
                            reasons.push("otaDevice");
                        }
                        if (scope.forcedLogin === true) {
                            scope.kmliEligibility = false;
                            reasons.push("forcedLogin");
                        }
                        if (scope.logoutCallback) {
                            scope.kmliEligibility = true;
                            reasons.push("riskyLoginContingency");
                        }
                    }
                    function isULpreload(preloadULTreatments) {
                        var userAgent = $window.navigator.userAgent;
                        var isIE = !!userAgent.match(/MSIE|trident|edge/i);
                        var forceUlss = $util.param("_ulss") === "true";
                        var preloadUL = Boolean(preloadULTreatments && preloadULTreatments.treatment_name) || isIE || forceUlss;
                        return preloadUL;
                    }
                    function isUlAsLanding() {
                        var forceUlAsLanding = $util.param("ul") === "landing";
                        var ulAsLandingParam = $util.param("ulReturn") === "true";
                        var failedAttempt = $util.param("lndgFailedBecause");
                        return forceUlAsLanding || ulAsLandingParam;
                    }
                    function getTimeoutLimit(pxpTimeoutTrt) {
                        var ulTimeoutLimit;
                        var timeoutTrtFact = pxpTimeoutTrt && angular.isArray(pxpTimeoutTrt.factors);
                        var pxpTimeoutVal = timeoutTrtFact && pxpTimeoutTrt.factors[0] && pxpTimeoutTrt.factors[0].value;
                        if (pxpTimeoutVal) {
                            ulTimeoutLimit = pxpTimeoutVal;
                            $logger.info("pxp_timeout_treatment", {
                                ulTimeoutLimit: ulTimeoutLimit
                            });
                        }
                        return ulTimeoutLimit;
                    }
                    return {
                        init: function init(params) {
                            if (Boolean(scope.eligibility.treatment)) {
                                return $q.resolve(scope.eligibility);
                            }
                            $logger.debug("kmliEligibility_init");
                            scope.forcedLogin = params && params.forcedLogin;
                            scope.logoutCallback = params && params.logoutCallback;
                            return $populate(scope, {
                                auth: $AuthModel.instance(),
                                checkoutAppData: $CheckoutAppDataModel.instance(scope.token),
                                checkoutCart: $CheckoutCartModel.instance(scope.token)
                            }).then(function() {
                                var country = scope.checkoutAppData.merchant.merchant_country;
                                return $q.all(getPXPList(country)).then(function(result) {
                                    scope.eligibility.ulTimeoutLimit = getTimeoutLimit(result[0]);
                                    scope.eligibility.preloadUL = isULpreload(result[1]);
                                    scope.eligibility.safeEligibility = true;
                                    scope.eligibility.ulAsLanding = isUlAsLanding();
                                });
                            }).then(function() {
                                scope.kmliEligibility = true;
                                var reasons = [];
                                reasons.push("pxpFullyRamped");
                                var reason = routingReason();
                                if (reason) {
                                    scope.kmliEligibility = true;
                                    reasons.push(reason);
                                }
                                compatibility(reasons);
                                var routing_reason = reasons[reasons.length - 1];
                                scope.eligibility.treatment = true;
                                scope.eligibility.routingReason = routing_reason;
                                scope.eligibility.deviatingReasons = reasons;
                                scope.eligibility.kmliEligibility = scope.kmliEligibility;
                                $logger.debug(scope.kmliEligibility ? "KMLI_ELIGIBLE_USER" : "KMLI_INELIGIBLE_USER", {
                                    userGroup: reasons,
                                    routing_reason: routing_reason
                                });
                                $logger.info("checkout_fpti", {
                                    from: "KMLI_ELG_CHK",
                                    to: "process_kmli_elg_chk",
                                    routing_reason: routing_reason
                                });
                                return scope.eligibility;
                            });
                        },
                        eligible: function eligible() {
                            return scope.eligibility;
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-login-components/src/login", "components/xo-login-components/src/login/kmliEligibility.js");
    },
    "./components/xo-login-components/src/onetouch-interstitial/kmliUpsell.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            var _newMember = __webpack_require__("./components/xo-models/src/newMember/index.js");
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-login-components/src/login/kmliEligibility.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("xo-unified-login.kmliUpsell", [ "squid" ]).factory("$KmliUpsell", function($pxp, $populate, $rootScope, $CheckoutAppDataModel, $CheckoutCartModel, $AuthModel, $DeviceInfo, $feature, $KmliEligibility, $config, $logger, $util, $q) {
                    var idToken, successfulLogin, isOneTouched, upsellOptInDisplayed, kmliEligible, ulAsLanding, walletTokenization, preloadUL, lastUpsellVersion;
                    var showReactivationInterstitial, kmliChecked;
                    var expPromise;
                    var scope = {};
                    var getKmliContentKey = function getKmliContentKey() {
                        var kmliContentMapping = {
                            xo_hermesnode_kmli_content_control: "0",
                            xo_hermesnode_kmli_content_t1: "1",
                            xo_hermesnode_kmli_content_t2: "2",
                            xo_hermesnode_kmli_content_t3: "3"
                        };
                        var country = scope.checkoutAppData.merchant.merchant_country;
                        return $pxp($config.ulMeta.kmliContentExpId, {
                            "ctx.COUNTRY": country
                        }, "xo_hermesnode_kmli_content_.*").then(function(result) {
                            var contentKey = result && result.treatment_name;
                            scope.oneTouchContentVersion = contentKey && kmliContentMapping[contentKey];
                            $logger.debug("kmliUpsell_getKmliContentKey_" + scope.oneTouchContentVersion);
                        });
                    };
                    var getNewMemberVariant = function getNewMemberVariant() {
                        return _newMember.$NewMemberEligibility.instance().getVariant(scope.token).then(function(variant) {
                            scope.isNmj = variant && (variant === "one_page" || variant === "multi_page");
                            $logger.debug("kmliUpsell_getNewMemberVariant");
                        })["catch"](function(err) {
                            return $logger.debug("getNewMemberVariant_err", {
                                error: err
                            });
                        });
                    };
                    var resolveEligibilityConditions = function resolveEligibilityConditions(params) {
                        idToken = Boolean(scope.auth.idTokenPresent);
                        successfulLogin = scope.auth.loggedIn();
                        isOneTouched = scope.auth.loggedIn() && scope.auth.refreshToken();
                        walletTokenization = scope.checkoutCart.isWalletTokenization() || scope.auth.remembered_partner_assertion;
                        kmliChecked = Boolean(params.isKmliSet);
                        upsellOptInDisplayed = Boolean(scope.auth.upsellOptInDisplayed);
                        lastUpsellVersion = scope.auth.ryiOptIn && scope.auth.ryiOptIn.interstitialDisplayed;
                        showReactivationInterstitial = Boolean(params.showReactivationInterstitial);
                        $logger.debug("kmliUpsell_resolveEligibilityConditions", {
                            params: params
                        });
                        if (walletTokenization || preloadUL || scope.oneTouchContentVersion !== "3") {
                            $logger.debug("kmliUpsell_init_ineligible");
                            return $q.resolve();
                        }
                        return $pxp("xo_hermesnode_kmli_upsell", {
                            "ctx.COUNTRY": scope.auth.buyer_ipcountry
                        }, "xo_hermes_kmli_upsell_(web|mobile)_v2_treatment.*");
                    };
                    var getExperienceFromPxp = function getExperienceFromPxp(pxpRes) {
                        var experience = pxpRes ? {
                            name: pxpRes.treatment_name
                        } : "";
                        lastUpsellVersion = lastUpsellVersion ? lastUpsellVersion : upsellOptInDisplayed ? .1 : 0;
                        if (pxpRes && pxpRes.factors) {
                            var factors = pxpRes.factors.reduce(function(out, factor) {
                                out[factor.name] = factor.value;
                                return out;
                            }, {});
                            experience.version = +factors.version > +lastUpsellVersion;
                            experience.color = factors.color;
                            experience.pxpVersion = factors.version;
                        }
                        $logger.debug("kmliUpsell_getExperienceFromPxp", {
                            experience: experience
                        });
                        return experience;
                    };
                    return {
                        init: function init(params) {
                            scope.token = $rootScope.token;
                            if (expPromise) {
                                return;
                            }
                            $logger.debug("kmliUpsell_init", params);
                            expPromise = $KmliEligibility.init().then(function(KmliEligibility) {
                                kmliEligible = Boolean(KmliEligibility.kmliEligibility) && !params.jwtBasedAssertion;
                                ulAsLanding = Boolean(KmliEligibility.ulAsLanding);
                                preloadUL = Boolean(KmliEligibility.preloadUL);
                                return $populate(scope, {
                                    auth: $AuthModel.instance(),
                                    checkoutCart: $CheckoutCartModel.instance(scope.token),
                                    checkoutAppData: $CheckoutAppDataModel.instance(scope.token)
                                });
                            }).then(getKmliContentKey).then(function() {
                                return resolveEligibilityConditions(params);
                            }).then(function(pxpRes) {
                                return getExperienceFromPxp(pxpRes);
                            });
                        },
                        eligible: function eligible() {
                            var eligibility = {};
                            if (!expPromise) {
                                $logger.debug("kmliUpsell_init_not_executed");
                                return $q.resolve(eligibility);
                            }
                            return $q.all([ expPromise, getNewMemberVariant() ]).then(function(result) {
                                var experience = result[0];
                                var eligibilityCriteria = {
                                    pxp: experience,
                                    profile_country: $feature("ryiOptIn"),
                                    isNotNmj: !scope.isNmj
                                };
                                $logger.debug("kmliUpsell_eligiblityCheck", {
                                    eligibilityCriteria: eligibilityCriteria
                                });
                                var ineligibleReasons = $util.filter(Object.keys(eligibilityCriteria), function(key) {
                                    return !eligibilityCriteria[key];
                                });
                                var upsellFeatureEnabled = ineligibleReasons.length === 0;
                                var regularLogin = kmliEligible && idToken;
                                var autoLoginEnabled = isOneTouched || kmliChecked || scope.auth.remembered;
                                eligibility.banner = upsellFeatureEnabled && $feature("optinToggle") && Boolean(isOneTouched || regularLogin);
                                eligibility.interstitial = {
                                    eligible: upsellFeatureEnabled && !autoLoginEnabled && experience && experience.name && (experience.name.slice(-1) === "1" || experience.name.slice(-1) === "3") && experience.version,
                                    type: showReactivationInterstitial ? "reactivation" : successfulLogin ? "member" : "",
                                    color: experience && experience.color,
                                    pxpVersion: experience && experience.pxpVersion
                                };
                                var elgStr = "interstitial-" + eligibility.interstitial.eligible + "&toggle-";
                                $logger.info("ryi_optin", {
                                    from: "ryi_optin_elg_chk",
                                    to: "process_ryi_optin_elg_chk",
                                    eligibility_reason: upsellFeatureEnabled ? elgStr + "eligible" : elgStr + "ineligible_" + ineligibleReasons.join()
                                });
                                $logger.debug("kmliUpsell_eligibility", {
                                    eligibility: eligibility,
                                    experience: experience,
                                    cases: {
                                        activeOT: isOneTouched,
                                        regularLogin: regularLogin,
                                        feature: upsellFeatureEnabled
                                    }
                                });
                                return eligibility;
                            });
                        },
                        getOptions: function getOptions() {
                            if (showReactivationInterstitial) {
                                return {
                                    flowName: "expiredUpsell"
                                };
                            }
                        },
                        getFPTIAttributes: function getFPTIAttributes() {
                            if (showReactivationInterstitial) {
                                return {
                                    stateName: "KMLI_reactivation",
                                    transInfix: "_kmli_reactivation_"
                                };
                            } else {
                                return {
                                    stateName: "KMLI_UPSELL",
                                    transInfix: "_kmli_upsell_"
                                };
                            }
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            _newMember.$NewMemberEligibility;
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-login-components/src/onetouch-interstitial", "components/xo-login-components/src/onetouch-interstitial/kmliUpsell.js");
    },
    "./components/xo-models/src/newMember/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$NewMemberEligibility = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _shippingMethod = __webpack_require__("./components/xo-models/src/shippingMethod/index.js");
        var _app = __webpack_require__("./components/xo-models/src/app/index.js");
        var _marketingoffer = __webpack_require__("./components/xo-models/src/marketingoffer/index.js");
        var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var control = "control";
        var ineligible = "ineligible";
        var one_page = "one_page";
        var multi_page = "multi_page";
        var TREATMENT_PATTERNS = {
            CONTROL: /xo_hermes_\w*_member_control/,
            ONE_PAGE: /xo_hermes_\w*_member_treatment_1/,
            MULTI_PAGE: /xo_hermes_\w*_member_treatment_2/
        };
        var mapTreatment = function mapTreatment(treatment) {
            if (!treatment) {
                return;
            }
            if (TREATMENT_PATTERNS.ONE_PAGE.test(treatment)) {
                return one_page;
            }
            if (TREATMENT_PATTERNS.MULTI_PAGE.test(treatment)) {
                return multi_page;
            }
        };
        var getSegmentParameters = function getSegmentParameters(token) {
            var models = {};
            return (0, _squid.$populate)(models, {
                checkoutAppDataModel: _checkout.$CheckoutAppDataModel.instance(token),
                checkoutPayeeModel: _checkout.$CheckoutPayeeModel.instance(token),
                checkoutCartModel: _checkout.$CheckoutCartModel.instance(token)
            }).then(function() {
                var data = {
                    page: "HERMES_RYI_PAGE",
                    site: "HERMES_RYI_PAGE",
                    locale: _squid.$locale.lang + "_" + _squid.$locale.country,
                    puType: "PERSONAL",
                    visit_id: token,
                    si: token,
                    payment_context: {
                        business_case: "NONE",
                        business_case_variation: "",
                        validate_existing_offer: "false",
                        total_transaction_amount: {
                            currency_code: models.checkoutCartModel.get("purchase.amounts.total.currency_code", ""),
                            value: Math.round(models.checkoutCartModel.get("purchase.amounts.total.amount", 0) * 100)
                        },
                        total_shipping_amount: {
                            currency_code: models.checkoutCartModel.get("purchase.amounts.total.currency_code", ""),
                            value: Math.round(models.checkoutCartModel.get("purchase.amounts.shipping.amount", 0) * 100)
                        },
                        payment_units: [ {
                            transaction_amount: {
                                currency_code: models.checkoutCartModel.get("purchase.amounts.total.currency_code", ""),
                                value: Math.round(models.checkoutCartModel.get("purchase.amounts.total.amount", 0) * 100)
                            },
                            transaction_id: "",
                            encrypted_transaction_id: "",
                            activity_id: "",
                            payee: {
                                pu_type: "BUSINESS",
                                country_code: models.checkoutAppDataModel.get("merchant.merchant_country") || "",
                                epu: models.checkoutPayeeModel.merchant.id || "",
                                pu: ""
                            }
                        } ]
                    },
                    target_placements: [ {
                        placement_code: "210005",
                        presentation_types: [ "decision" ]
                    } ]
                };
                return data;
            });
        };
        var isMemberSegmentEligible = function isMemberSegmentEligible(token) {
            var memberSegmentModel = _marketingoffer.$MemberSegmentModel.instance();
            var memberSegment = memberSegmentModel.getMemberSegment();
            if (memberSegment !== undefined) {
                return _squid.$promise.resolve(memberSegmentModel.isEligibleForExperimentation());
            }
            return getSegmentParameters(token).then(function(data) {
                memberSegmentModel.invalidate();
                return memberSegmentModel.save({
                    data: data,
                    contingencies: {
                        DEFAULT: function DEFAULT(name, err) {
                            return;
                        }
                    }
                }).then(function() {
                    return memberSegmentModel.isEligibleForExperimentation();
                })["catch"](function() {
                    return false;
                });
            });
        };
        var eligibility = function eligibility(token, _ref) {
            var authModel = _ref.authModel, checkoutSessionModel = _ref.checkoutSessionModel, checkoutAppDataModel = _ref.checkoutAppDataModel, checkoutCartModel = _ref.checkoutCartModel, checkoutPayeeModel = _ref.checkoutPayeeModel, shippingRuleSummaryModel = _ref.shippingRuleSummaryModel;
            var plan = checkoutSessionModel.plan, negBalances = checkoutSessionModel.negBalances;
            var plans = checkoutSessionModel.get("fundingOptions.plans");
            var isMultiplePlans = plans && plans.length > 1;
            var isNegativeBalance = negBalances && negBalances.length !== 0;
            var isBilling = checkoutCartModel.isBilling();
            var isThirdParty = _thirdPartyInfo.thirdPartyExperience.isThirdPartyExperience(token);
            var isShippingRulesEnabled = shippingRuleSummaryModel.isSnTEnabled;
            var isSecondButton = checkoutAppDataModel.is_second_button_txn;
            var isAPay = checkoutCartModel.isWalletTokenization();
            var isGambling = checkoutPayeeModel.isGambling();
            var isHideShipping = checkoutAppDataModel.flags.hide_shipping_address || !checkoutAppDataModel.flags.shipping_address_required;
            var isSupportedDefaultFundingSource = plan && plan.sources && plan.sources.length === 1 && plan.sources[0].type === "PAYMENT_CARD";
            var eligibilityCriteria = {
                noMultiplePlans: !isMultiplePlans,
                noNegativeBalance: !isNegativeBalance,
                noBilling: !isBilling,
                noThirdParty: !isThirdParty,
                noSnT: !isShippingRulesEnabled,
                noSecondButton: !isSecondButton,
                noAPay: !isAPay,
                noGambling: !isGambling,
                noSupportedDefaultFundingSource: isSupportedDefaultFundingSource,
                noHideShipping: !isHideShipping
            };
            var ineligibleReasons = Object.keys(eligibilityCriteria).filter(function(key) {
                return !eligibilityCriteria[key];
            });
            var transactionEligible = ineligibleReasons.length === 0;
            if (!transactionEligible) {
                var reasons = ineligibleReasons.join(":");
                _logger.$logger.info("checkout_ftpi", {
                    from: "new_member_eligibility",
                    to: "process_new_member_eligibility",
                    eligibility_reason: reasons
                });
                for (var _iterator = ineligibleReasons, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ;) {
                    var _ref2;
                    if (_isArray) {
                        if (_i >= _iterator.length) break;
                        _ref2 = _iterator[_i++];
                    } else {
                        _i = _iterator.next();
                        if (_i.done) break;
                        _ref2 = _i.value;
                    }
                    var reason = _ref2;
                    _logger.$logger.info("new_member_experience_ineligible_" + reason);
                }
                return _squid.$promise.resolve(ineligible);
            }
            return isMemberSegmentEligible(token).then(function(eligibleMember) {
                if (!eligibleMember) {
                    _logger.$logger.info("new_member_experience_ineligible_member_segment");
                    return ineligible;
                }
                if (_app.$PXPBlacklist.isMerchantBlacklisted(checkoutPayeeModel.get("merchant.id"))) {
                    _logger.$logger.info("new_member_experience_merchant_blacklisted");
                    return control;
                }
                var memberSegmentModel = _marketingoffer.$MemberSegmentModel.instance();
                return (0, _squid.$pxp)("xo_hermes_new_member_journey", {
                    uid: authModel.buyer_id,
                    "ctx.COUNTRY": authModel.country,
                    "ctx.SEGMENT": memberSegmentModel.getMemberSegment()
                }, "xo_hermes_(\\w*)_member_treatment_(\\d)|xo_hermes_(\\w*)_member_control").then(function(t) {
                    if (t) {
                        var r = mapTreatment(t.treatment_name);
                        return r || control;
                    } else {
                        return control;
                    }
                });
            });
        };
        var snt = function snt(models, token) {
            if (_squid.$integration.getConfig("SHOW_SHIPPING_METHOD")) {
                return (0, _squid.$populate)(models, {
                    shippingRuleSummaryModel: _shippingMethod.$ShippingRuleSummaryModel.instance(token).retrieve({
                        params: {
                            merchant_id: models.checkoutPayeeModel.get("merchant.id"),
                            currency_code: models.checkoutCartModel.get("purchase.amounts.total.currency_code")
                        }
                    })
                });
            } else {
                models.shippingRuleSummaryModel = {};
                return _squid.$promise.resolve();
            }
        };
        var $NewMemberEligibility = exports.$NewMemberEligibility = _squid.$Model.extend("$NewMemberEligibility", {
            getVariant: function getVariant(token) {
                var _this = this;
                if (!(0, _squid.$feature)("newMemberExperience")) {
                    return _squid.$promise.resolve(ineligible);
                }
                if (_squid.$meta.corp) {
                    var nmexp = _squid.$util.param("nmj_exp");
                    if (nmexp === "1") {
                        return _squid.$promise.resolve(one_page);
                    } else if (nmexp === "2") {
                        return _squid.$promise.resolve(multi_page);
                    } else if (nmexp === "0") {
                        return _squid.$promise.resolve(control);
                    }
                }
                var models = {};
                return (0, _squid.$populate)(models, {
                    authModel: _auth.$AuthModel.instance(),
                    checkoutSessionModel: _checkout.$CheckoutSessionModel.instance(token),
                    checkoutAppDataModel: _checkout.$CheckoutAppDataModel.instance(token),
                    checkoutPayeeModel: _checkout.$CheckoutPayeeModel.instance(token),
                    checkoutCartModel: _checkout.$CheckoutCartModel.instance(token)
                }).then(function() {
                    return snt(models, token);
                }).then(function() {
                    if (_this.variant && models.authModel.buyer_id === _this.buyerId) {
                        return _this.variant;
                    }
                    _this.buyerId = models.authModel.buyer_id;
                    return eligibility(token, models).then(function(variant) {
                        _this.variant = variant;
                        return variant;
                    });
                });
            },
            getMemberSegmentParameters: function getMemberSegmentParameters(token) {
                return getSegmentParameters(token);
            }
        });
        _squid.$Model;
        _squid.$promise;
        _squid.$populate;
        _squid.$feature;
        _squid.$pxp;
        _squid.$locale;
        _squid.$meta;
        _squid.$util;
        _squid.$integration;
        _logger.$logger;
        _checkout.$CheckoutSessionModel;
        _checkout.$CheckoutAppDataModel;
        _checkout.$CheckoutCartModel;
        _checkout.$CheckoutPayeeModel;
        _shippingMethod.$ShippingRuleSummaryModel;
        _app.$PXPBlacklist;
        _marketingoffer.$MemberSegmentModel;
        _thirdPartyInfo.thirdPartyExperience;
        _auth.$AuthModel;
    },
    "./components/xo-models/src/marketingoffer/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/node-uuid/uuid.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, uuid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xomodel.marketingoffer", [ "squid" ]).factory("$MarketingOfferModel", function($Model, $Api) {
                    return $Model.extend("$MarketingOfferModel", {
                        api: new $Api({
                            uri: "/api/checkout/offer/search-ads",
                            postAttempts: 1
                        }),
                        serialize: function serialize() {
                            var data = {
                                site: this.site,
                                locale: this.locale,
                                si: this.si,
                                visit_id: uuid.v4(),
                                page: this.page,
                                epu: this.payer,
                                pu_type: this.puType || "ANONYMOUS",
                                country_code: this.countryCode,
                                payment_context: {
                                    total_transaction_amount: this.totalTransactionAmount,
                                    total_shipping_amount: this.totalShippingAmount,
                                    business_case: "NONE",
                                    business_case_variation: "",
                                    validate_existing_offer: "false",
                                    payment_units: [ {
                                        transaction_amount: this.totalTransactionAmount,
                                        transaction_id: "",
                                        encrypted_transaction_id: "",
                                        activity_id: "",
                                        payee: {
                                            pu_type: "BUSINESS",
                                            country_code: this.countryCode,
                                            epu: this.payee,
                                            pu: ""
                                        }
                                    } ]
                                },
                                target_placements: this.targetPlacements,
                                wallet_instruments: this.walletInstruments,
                                addl_property_installments_not_allowed: this.installmentsNotAllowed
                            };
                            return data;
                        }
                    });
                }).service("$fireMORSBeacon", function($q) {
                    this.fireBeacon = function(uri) {
                        var img = document.createElement("img");
                        img.setAttribute("src", uri);
                        document.body.appendChild(img);
                        return;
                    };
                }).factory("$MemberSegmentModel", function($Model, $Api) {
                    return $Model.extend("$MemberSegmentModel", {
                        api: new $Api({
                            uri: "/api/segment/memberSegment",
                            postAttempts: 1
                        }),
                        invalidateOnLogout: true,
                        getMemberSegment: function getMemberSegment() {
                            return this.memberSegment;
                        },
                        getCreditOffer: function getCreditOffer() {
                            return this.creditOffer;
                        },
                        isNewMember: function isNewMember() {
                            return this.memberSegment === "NEW_MEMBER" || this.memberSegment === "YOUNG_MEMBER";
                        },
                        isEligibleForExperimentation: function isEligibleForExperimentation() {
                            var eligibleMemberSegments = _squid.$config.memberSegments || [ "NEW_MEMBER", "YOUNG_MEMBER" ];
                            return eligibleMemberSegments.indexOf(this.memberSegment) > -1;
                        }
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            _squid.$config;
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/marketingoffer", "components/xo-models/src/marketingoffer/index.js");
    },
    "./components/ul-inline/dist/inject.js": function(module, exports) {
        (function() {
            !function(a, b) {
                a.PAYPAL = a.PAYPAL || {}, a.PAYPAL.unifiedLogin = b();
            }(this, function() {
                function a(a, b) {
                    var c, d = {
                        src: a,
                        height: b.height || 239,
                        style: "width: 100%;",
                        name: b.name || "injectedUl",
                        frameborder: 0,
                        scrolling: b.scrolling || "no",
                        title: b.title || "PayPal",
                        sandbox: "allow-same-origin allow-scripts allow-popups allow-forms allow-top-navigation"
                    }, e = document.createElement("iframe");
                    b.hide && (d.style = d.style + "display: none;");
                    for (c in d) e.setAttribute(c, d[c]);
                    return e;
                }
                function b(a, b, c) {
                    var d, e = a || window.location.origin || window.location.protocol + "//" + window.location.host, f = e + (c || "/signin/inject/"), g = b ? "?" : "", h = 0;
                    if (!b) return f;
                    for (d in b) h > 0 && (g += "&"), g = g + d + "=" + encodeURIComponent(b[d]), h += 1;
                    return f + g;
                }
                function c(a) {
                    var b, c = "";
                    try {
                        if (a.source.name !== q.name) return;
                    } catch (d) {
                        return;
                    }
                    if (b = g(a.origin), !f(b)) throw new Error("PostMessage iframe domain (" + b + "), must be a *.paypal.com domain");
                    if (c = a && a.data, "string" == typeof c) try {
                        c = JSON.parse(c);
                    } catch (h) {
                        throw new Error("Invalid JSON string sent to onPostMessage handler: " + c);
                    }
                    c.data && "resize" === c.data.event ? e(q, c.data.heightInPx) : c.data && "htmlRendered" === c.data.event ? x = !0 : !w && p ? p(c) : w && v.push(c);
                }
                function d(a) {
                    a && "resize" === a.event ? e(s, a.heightInPx) : r(a);
                }
                function e(a, b) {
                    a.setAttribute("height", b);
                }
                function f(a) {
                    var b = /\.paypal\.com$/gi;
                    return b.test(a);
                }
                function g(a) {
                    if (a) {
                        var b = /^https?:\/\/(.*\.paypal\.com)(:[0-9]+)?$/gi, c = b.exec(a);
                        return c && c[1];
                    }
                }
                function h() {
                    var a;
                    if (p) {
                        for (a = 0; a < v.length; a++) p(v[a]);
                        v = [], w = !1;
                    }
                }
                function i(c) {
                    var d, e, h, i, k;
                    if (!c || !c.targetElement) throw h = "targetElement", new Error("The " + h + " option is required");
                    if (c.origin && (i = g(c.origin), !f(i))) throw new Error('All values for the "origin" setting must match *.paypal.com');
                    for (u = c.config || {}, e = b(c.origin, c.queryParams, c.iframePathname), k = c.xhrRequest && c.xhrRequest === !0, 
                    d = k || c.preLoadedSource ? a("about:blank", u) : a(e, u), t = c.targetElement; c.targetElement.hasChildNodes(); ) c.targetElement.removeChild(c.targetElement.lastChild);
                    return c.targetElement.appendChild(d), "directMessageIframe" === c.iframeType ? (s = d, 
                    r = c.onPostMessage) : (q = d, p = c.onPostMessage, j()), k ? n(e, function(a) {
                        a && o(d, a);
                    }) : c.preLoadedSource && o(d, c.preLoadedSource), w = p ? !1 : !0, {
                        iframe: d,
                        onPostMessageCallback: p
                    };
                }
                function j() {
                    window.addEventListener ? window.addEventListener("message", c, !1) : window.attachEvent("onmessage", c);
                }
                function k(a) {
                    p = a, h();
                }
                function l() {
                    t.parentNode && t.parentNode.removeChild(t);
                }
                function m(b) {
                    var c, d, e, f, g = "about:blank";
                    if (!x) return void setTimeout(function() {
                        m(b);
                    }, 50);
                    for (b.onPostMessage && k(b.onPostMessage), u.hide = !1, c = a(g, u); b.targetElement.hasChildNodes(); ) b.targetElement.removeChild(b.targetElement.lastChild);
                    b.targetElement.appendChild(c), d = q.contentWindow.document, e = d.documentElement.outerHTML, 
                    f = c.contentWindow.document, f.open(), f.write(e), f.close(), l(), q = c, t = b.targetElement;
                }
                function n(a, b) {
                    var c;
                    window.XMLHttpRequest ? c = new XMLHttpRequest() : window.ActiveXObject && (c = new ActiveXObject("Microsoft.XMLHTTP")), 
                    c && (c.onreadystatechange = function() {
                        4 == c.readyState && 200 == c.status && b(c.responseText);
                    }, c.open("GET", a, !0), c.send());
                }
                function o(a, b) {
                    a.contentWindow.inlineUlContents = b, a.src = 'javascript:window["inlineUlContents"]';
                }
                var p, q, r, s, t, u, v = [], w = !1, x = !1;
                return {
                    inject: i,
                    copyPasteIframe: m,
                    removeTargetElement: l,
                    messageDispatcher: c,
                    nonPostMessageDispatcher: d
                };
            });
        }).call(window);
    },
    "./components/xo-page-components/src/value-props/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-page-components/src/value-props/template.html") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-value-props.directive", [ "squid" ]).directive("xoValueProps", function() {
                return {
                    template: template,
                    restrict: "E",
                    scope: {
                        type: "@",
                        title: "@",
                        text: "@",
                        textContent: "@",
                        imageUrl: "@"
                    },
                    link: function link(scope, element, attrs) {
                        if (angular.isString(attrs.imageUrl)) {
                            attrs.$observe("imageUrl", function(imageUrl) {
                                var url = imageUrl;
                                var propImg = angular.element(element[0].querySelector("div.prop-img"));
                                var isRetina = window && window.matchMedia && window.matchMedia("(-webkit-min-device-pixel-ratio: 2), " + "(min--moz-device-pixel-ratio: 2), " + "(-o-min-device-pixel-ratio: 2/1)," + "(min-device-pixel-ratio: 2)," + "(min-resolution: 192dpi), " + "(min-resolution: 2dppx)").matches;
                                if (isRetina) {
                                    var index = url.lastIndexOf(".");
                                    url = url.substring(0, index) + "_2x" + url.substring(index, url.length);
                                    propImg.css({
                                        "background-image": "url(" + url + ")",
                                        height: "150px",
                                        "background-size": "150px 150px",
                                        "margin-top": "0px"
                                    });
                                } else {
                                    propImg.css({
                                        "background-image": "url(" + url + ")",
                                        height: "150px",
                                        "margin-top": "0px"
                                    });
                                }
                            });
                        }
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-page-components/src/value-props/template.html": function(module, exports) {
        module.exports = '<div class="props {{type}}" content>\n    <div class="prop-img"></div>\n    <h2 class="vprop-header">{{ title }}</h2>\n    <p ng-if="textContent" ng-bind-html="htmlContent(textContent)"></p>\n    <p ng-if="!textContent" ng-bind-html="text"></p>\n</div>\n';
    },
    "./components/xo-ui-components/src/card-loader/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoCardLoader = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/xo-ui-components/src/card-loader/styles.less");
        var _template = __webpack_require__("./components/xo-ui-components/src/card-loader/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoCardLoader = exports.$xoCardLoader = _squid.$Component.extend("xoCardLoader", {
            tag: "xo-card-loader",
            template: _template2["default"],
            props: {
                message: {
                    type: "str"
                },
                state: {
                    type: "var"
                },
                auth: {
                    type: "var"
                }
            },
            lifecycle: {
                enter: function enter() {
                    this.ellipsis = function() {
                        var email = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                        var MAX_EMAIL_LEN = 30;
                        var MAX_DOMAIN_LEN = 20;
                        var MAX_USERNAME_LEN = MAX_EMAIL_LEN - MAX_DOMAIN_LEN;
                        if (email.length <= MAX_EMAIL_LEN) {
                            return email;
                        }
                        var userNameLength = email.indexOf("@");
                        var domainLength = email.length - userNameLength;
                        if (userNameLength > MAX_USERNAME_LEN && domainLength > MAX_DOMAIN_LEN) {
                            return email.replace(new RegExp("(.{" + (MAX_USERNAME_LEN - 3) + "}).*(@.{" + (MAX_DOMAIN_LEN - 4) + "}).*"), "$1...$2...");
                        } else if (userNameLength > MAX_USERNAME_LEN) {
                            return email.replace(new RegExp("(.{" + (MAX_EMAIL_LEN - domainLength - 3) + "}).*(@.*)"), "$1...$2");
                        } else {
                            return email.replace(new RegExp("(.{" + (MAX_EMAIL_LEN - 3) + "}).*"), "$1...");
                        }
                    };
                }
            }
        });
        angular.value("$xoCardLoader", $xoCardLoader);
        _squid.$Component;
    },
    "./components/xo-ui-components/src/card-loader/styles.less": "./css/app.less",
    "./components/xo-ui-components/src/card-loader/template.html": function(module, exports) {
        module.exports = '<div id="virtual_card">\n    <div id="card_header">\n        <div id="card_logo"></div>\n    </div>\n    <div id="card_footer">\n        <div class="card_user" ng-if="auth.loggedIn()">{{ellipsis(auth.email)}}</div>\n    </div>\n    <div id="slider" class="{{state}}"></div>\n</div>\n<div id="virtual_card_message">{{message}}</div>\n';
    },
    "./pages/xo-login/tokenized-wallet-loader/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoTokenizedWalletLoader = undefined;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _template = __webpack_require__("./pages/xo-login/tokenized-wallet-loader/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        __webpack_require__("./components/xo-ui-components/src/card-loader/directive.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _app = __webpack_require__("./components/xo-models/src/app/index.js");
        var _factory = __webpack_require__("./pages/xo-login/tokenized-wallet-loader/factory.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var ANIMATION_STATUSES = {
            NOT_STARTED: "notStarted",
            PENDING: "pending",
            COMPLETED: "completed"
        };
        var $xoTokenizedWalletLoader = exports.$xoTokenizedWalletLoader = _squid.$Component.extend("$xoTokenizedWalletLoader", {
            tag: "xo-tokenized-wallet-loader",
            template: _template2["default"],
            props: {
                planDone: {
                    type: "var"
                }
            },
            resolve: {
                models: function models() {
                    return {
                        tokenizedWalletInfoModel: _app.$TokenizedWalletInfoModel.instance(_angular.$rootScope.token).retrieve()
                    };
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    this.auth = _auth.$AuthModel.instance();
                    this.setbuyerProgress = ANIMATION_STATUSES.NOT_STARTED;
                    _logger.$logger.info("tokenized_wallet", {
                        from: "adding_pp_ap_animation",
                        to: "prepare_adding_pp_ap_animation",
                        context_id: _angular.$rootScope.token,
                        context_type: "EC-Token",
                        billing_token: _squid.$meta.baToken
                    });
                    (0, _angular.$timeout)(function() {
                        _this.setbuyerProgress = ANIMATION_STATUSES.PENDING;
                        _logger.$logger.info("tokenized_wallet", {
                            from: "adding_pp_ap_animation",
                            to: "process_adding_pp_ap_animation",
                            context_id: _angular.$rootScope.token,
                            context_type: "EC-Token",
                            billing_token: _squid.$meta.baToken
                        });
                    }, 300);
                    this.$watch("planDone", function(planDone) {
                        if (planDone) {
                            _factory.$TokenizedWalledLoaderFactory.goToTokenizationInfoPage();
                        }
                    });
                },
                populate: function populate() {
                    this.cardLoaderMessage = _factory.$TokenizedWalledLoaderFactory.getCardLoaderMessage(this.models.tokenizedWalletInfoModel);
                    this.logoClass = this.models.tokenizedWalletInfoModel.getSubject();
                }
            }
        });
        angular.value("$xoTokenizedWalletLoader", $xoTokenizedWalletLoader);
        _angular.$timeout;
        _squid.$Component;
        _squid.$meta;
        _auth.$AuthModel;
        _angular.$rootScope;
        _logger.$logger;
        _app.$TokenizedWalletInfoModel;
        _factory.$TokenizedWalledLoaderFactory;
    },
    "./pages/xo-login/tokenized-wallet-loader/template.html": function(module, exports) {
        module.exports = '<div class="infoLoader">\n    <div class=\'logo_wrapper\'>\n        <div class=\'partner_logo\' ng-class="[logoClass]"></div>\n    </div>\n    <div class="loader">\n        <xo-card-loader\n            state="setbuyerProgress"\n            auth="auth"\n            message="{{cardLoaderMessage}}"\n        ></xo-card-loader>\n    </div>\n</div>\n';
    },
    "./pages/xo-login/tokenized-wallet-loader/factory.js": function(module, exports, __webpack_require__) {
        (function(module, __dirname, __filename, $) {
            var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
            (function exportProviders(angular) {
                angular && angular.exportProviders(module, exports, __dirname, __filename);
            })(window.angular);
            angular.module().factory("$TokenizedWalledLoaderFactory", function($rootScope) {
                var goToTokenizationInfoPage = function goToTokenizationInfoPage() {
                    _logger.$logger.info("tokenized_wallet", {
                        from: "PP_AndroidPay_Info",
                        to: "prepare_PP_AndroidPay_Info",
                        context_id: $rootScope.token,
                        context_type: "EC-Token",
                        billing_token: _squid.$meta.baToken
                    });
                    $("#outerWrapper").addClass("tokenization");
                    _uiRouter.$state.go("checkout.tokenizationInfo");
                };
                var getCardLoaderMessage = function getCardLoaderMessage(tokenizedWalletInfoModel) {
                    return (0, _squid.$renderContent)("topup.commonAdding", {
                        type: tokenizedWalletInfoModel.brandName()
                    }).toString();
                };
                return {
                    goToTokenizationInfoPage: goToTokenizationInfoPage,
                    getCardLoaderMessage: getCardLoaderMessage
                };
            });
            _logger.$logger;
            _squid.$meta;
            _squid.$renderContent;
            _uiRouter.$state;
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "pages/xo-login/tokenized-wallet-loader", "pages/xo-login/tokenized-wallet-loader/factory.js", __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./pages/xo-generic-error/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$GenericErrorRoute = undefined;
        __webpack_require__("./pages/xo-generic-error/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $GenericErrorRoute = exports.$GenericErrorRoute = _squid.$ComponentRoute.extend("$GenericErrorRoute", {
            path: "genericError",
            directive: "xo-generic-error-page",
            titleContent: "genericError.pleaseTryAgain",
            query: [ "code" ],
            trackingData: {
                fptiState: "fatal_error",
                templateName: "genericError.dust",
                pageGoal: "Generic Error",
                pageQualifier: "blockNonDomesticShipping",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-generic-error",
                        pagename2: "%::fullpage-generic-error:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            auth: false,
            children: []
        });
        angular.value("$GenericErrorRoute", $GenericErrorRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-generic-error/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoGenericErrorPageComponent = undefined;
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _template = __webpack_require__("./pages/xo-generic-error/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-models/src/checkout/index.js");
        __webpack_require__("./components/xo-ui-components/src/generic-error/directive.js");
        __webpack_require__("./components/xo-return-to-merchant/dist/util.js");
        __webpack_require__("./components/xo-ui-components/src/message/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoGenericErrorPageComponent = exports.$xoGenericErrorPageComponent = _squid.$Component.extend("$xoGenericErrorPageComponent", {
            tag: "xo-generic-error-page",
            template: _template2["default"],
            controller: function controller($scope, $rootScope, $stateParams, $state, $logger, $CheckoutAppDataModel, $AuthModel, $util, $ReturnToMerchant, $q, $populate) {
                $scope.token = $rootScope.token;
                var models = {};
                $populate(models, {
                    auth: $AuthModel.instance().retrieve()
                }).then(function() {
                    $scope.logout = function() {
                        if (window.xchild && $util.isIFrame()) {
                            window.xchild.hide();
                            var url = window.location.href.split("#")[0];
                            var xprops = _extends({}, window.xprops);
                            xprops.url = url;
                            xprops.payment = function() {
                                return models.auth.logout().then(function() {
                                    return $scope.token;
                                });
                            };
                            return window.ppxo.Checkout.renderPopupTo(window.xchild.getParentRenderWindow(), xprops);
                        }
                        models.auth.logout().then(function() {
                            $state.go("checkout.login", {
                                source: "GENERIC_ERROR_PAGE"
                            });
                        });
                    };
                });
                var terminalKey = "terminal-error-" + $scope.token, refreshKey = "has-seen-error-" + $scope.token;
                if (!$util.sessionStorageEnabled() || !$scope.token || sessionStorage.getItem(terminalKey)) {
                    return renderErrorPage();
                }
                if (!sessionStorage.getItem(refreshKey)) {
                    sessionStorage.setItem(refreshKey, "1");
                    return renderErrorPage();
                } else {
                    $logger.info("checkout_fpti", {
                        user_refresh: 1
                    });
                    sessionStorage.removeItem(refreshKey);
                    $state.go("checkout.login")["catch"](function() {
                        return sessionStorage.setItem(terminalKey, "1");
                    });
                }
                function renderErrorPage() {
                    $scope.shouldRender = true;
                }
            }
        });
        angular.value("$xoGenericErrorPageComponent", $xoGenericErrorPageComponent);
        _squid.$Component;
    },
    "./pages/xo-generic-error/template.html": function(module, exports) {
        module.exports = "<xo-generic-error ng-if=shouldRender token=token logout=logout></xo-generic-error>\n";
    },
    "./components/xo-ui-components/src/generic-error/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _util = __webpack_require__("./components/xo-return-to-merchant/dist/util.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _app = __webpack_require__("./components/xo-models/src/app/index.js");
        var _template = __webpack_require__("./components/xo-ui-components/src/generic-error/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-ui-components/src/generic-error/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var TITLE_KEY_MAPPING = {
            PAYMENT_PROCESS_ERROR: "paymentProcessError",
            BLOCK_NON_DOMESTIC_SHIPPING: "blockNonDomesticShippingTitle",
            BLOCK_PPC_INELIGIBLE_USER: "blockPPCIneligibleTitle",
            PAYER_COUNTRY_NOT_ALLOWED: "payerCountryNotAllowedTitle",
            XOON_PAYER_COUNTRY_NOT_ALLOWED_DCF: "payerCountryNotAllowedTitleSignupDCF",
            HERMES_PAYER_COUNTRY_NOT_ALLOWED_DCF: "payerCountryNotAllowedTitleMemberDCF",
            PAYER_COUNTRY_NOT_ENABLED: "payerCountryNotAllowedTitle",
            PAYER_LOGIN_COUNTRY_NOT_ALLOWED: "payerCountryNotAllowedTitle",
            TRANSACTION_REFUSED: "transactionRefusedTitle",
            COMPLIANCE_VIOLATION: "transactionRefusedTitle",
            DOMESTIC_TRANSACTION_REQUIRED: "domesticTransactionRequiredTitle",
            INTERNAL_SERVICE_ERROR: "transactionRefusedTitle",
            NEGATIVE_BALANCE_TRANSACTION_REFUSED: "negativeBalanceRefusedTitle",
            STUDENT_ACCOUNT: "studentAccountTitle",
            RETRY: "sorry"
        };
        var CONTENT_KEY_MAPPING = {
            INVALID_RESOURCE_ID: "expiredOrTokenNotFoundError",
            EXPIRED_SESSION: "expiredOrTokenNotFoundError",
            PAYMENT_ALREADY_DONE: "paymentAlreadyCompletedError",
            PAYEE_BLOCKED_TRANSACTION: "paymentDeniedError",
            PAYER_CANNOT_PAY: "paymentDeniedError",
            RESTRICTED_USER: "buyerRestrictedError",
            PAYMENT_DENIED: "paymentDeniedError",
            UNSUPPORTED_PAYEE_CURRENCY: "unsupportedPayeeCurrency",
            GUEST_UPGRADE_SESSION_ERROR: "guestUpgradeSessionError",
            GUEST_UPGRADE_ERROR: "guestUpgradeError",
            BLOCK_NON_DOMESTIC_SHIPPING: "blockNonDomesticShippingMessage",
            BLOCK_PPC_INELIGIBLE_USER: "blockPPCIneligibleMessage",
            PAYER_COUNTRY_NOT_ALLOWED: "unauthorizedCountryAccountRegistered",
            XOON_PAYER_COUNTRY_NOT_ALLOWED_DCF: "unauthorizedCountryAccountSignupDCF",
            HERMES_PAYER_COUNTRY_NOT_ALLOWED_DCF: "unauthorizedCountryAccountMemberDCF",
            PAYER_COUNTRY_NOT_ENABLED: "rpUnauthorizedCountryMessage",
            PAYER_LOGIN_COUNTRY_NOT_ALLOWED: "unauthorizedCountryLogin",
            PAYMENT_PROCESS_ERROR: "chooseOtherWayToPay",
            GAMING_FUNDING_SOURCE_VALIDATION_FAILED: "unauthorizedCountryAccountRegistered",
            SENDING_LIMIT_EXCEEDED: "sendingLimitExceeded",
            TRANSACTION_LIMIT_EXCEEDED: "transactionLimitExceeded",
            TRANSACTION_REFUSED: "transactionRefusedMessage",
            COMPLIANCE_VIOLATION: "complianceViolationMessage",
            DOMESTIC_TRANSACTION_REQUIRED: "domesticTransactionRequiredMessage",
            INTERNAL_SERVICE_ERROR: "transactionRefusedMessage",
            DEFAULT: "genericError",
            NEGATIVE_BALANCE_TRANSACTION_REFUSED: "negativeBalanceRefusedMessage",
            ACCOUNT_CANNOT_BE_FETCHED: "genericError",
            STUDENT_ACCOUNT: "studentAccountMessage",
            RETRY: "thingsNotWorking",
            DEFAULT_TOKENIZED_WALLET_ERROR: "tokenizedWalletGenericError",
            ANDROID_PAY_ELIGIBILITY_ERROR: "tokenizedWalletGenericError",
            DUPLICATE_INVOICE_ID: "duplicateInvoiceId",
            UNSUPPORTED_COUNTRY: "unsupportedCountry",
            ANDROID_PAY_ALREADY_PROVISIONED: "tokenizedWalletAlreadyProvisioned"
        };
        var renderContentWithMerchantName = function renderContentWithMerchantName(key) {
            var merchantName = this.props.merchant;
            if (merchantName) {
                return (0, _squid.$renderContent)(key, {
                    merchantName: merchantName
                });
            }
            return (0, _squid.$renderContent)(key + "Default");
        };
        var renderContentWithWalletTokenizationName = function renderContentWithWalletTokenizationName(key) {
            var brandName = this.models.tokenizedWalletInfoModel.brandName();
            return (0, _squid.$renderContent)(key, {
                type: brandName
            });
        };
        var TITLE_KEY_HANDLER = {
            DOMESTIC_TRANSACTION_REQUIRED: renderContentWithMerchantName,
            XOON_PAYER_COUNTRY_NOT_ALLOWED_DCF: renderContentWithMerchantName,
            HERMES_PAYER_COUNTRY_NOT_ALLOWED_DCF: renderContentWithMerchantName
        };
        var CONTENT_KEY_HANDLER = {
            DOMESTIC_TRANSACTION_REQUIRED: renderContentWithMerchantName,
            XOON_PAYER_COUNTRY_NOT_ALLOWED_DCF: renderContentWithMerchantName,
            HERMES_PAYER_COUNTRY_NOT_ALLOWED_DCF: renderContentWithMerchantName,
            DEFAULT_TOKENIZED_WALLET_ERROR: renderContentWithWalletTokenizationName,
            ANDROID_PAY_ALREADY_PROVISIONED: renderContentWithWalletTokenizationName
        };
        var SHOW_LOGOUT_LINK_CODES = [ "HERMES_PAYER_COUNTRY_NOT_ALLOWED_DCF", "ANDROID_PAY_COUNTRY_NOT_SUPPORTED", "ANDROID_PAY_ALREADY_PROVISIONED" ];
        var HIDE_CANCEL_LINK_CODES = [ "PAYER_COUNTRY_NOT_ALLOWED", "GAMING_FUNDING_SOURCE_VALIDATION_FAILED", "PAYER_LOGIN_COUNTRY_NOT_ALLOWED" ];
        var RETRY_LINK = [ "RETRY" ];
        var TRANSACTION_REFUSED_BA_TITLE_MSG = {
            BA_NO_PURCHASE: "transactionRefusedBAnoPurchaseTitle",
            BA_WITH_PURCHASE: "transactionRefusedBAPurchaseTitle"
        };
        var base64regex = new RegExp("^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$");
        exports["default"] = _squid.$Component.extend("$xoGenericErrorComponent", {
            tag: "xo-generic-error",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: false
                },
                logout: {
                    type: "var",
                    required: false
                },
                isUnbranded: {
                    type: "var",
                    required: false
                },
                cancelUrl: {
                    type: "str",
                    required: false
                },
                merchant: {
                    type: "str",
                    required: false,
                    default: function _default() {
                        if (this.models && this.models.checkoutAppData && this.models.checkoutAppData.merchant) {
                            var merchant = this.models.checkoutAppData.merchant;
                            return merchant.brand_name || merchant.merchant_name;
                        }
                    }
                }
            },
            resolve: {
                models: function models() {
                    if (this.props.token) {
                        return {
                            checkoutAppData: _index.$CheckoutAppDataModel.instance(this.props.token).retrieve()["catch"](angular.noop),
                            cart: _index.$CheckoutCartModel.instance(this.props.token).retrieve()["catch"](angular.noop),
                            checkoutPayee: _index.$CheckoutPayeeModel.instance(this.props.token).retrieve()["catch"](angular.noop),
                            auth: _index2.$AuthModel.instance().retrieve()["catch"](angular.noop),
                            tokenizedWalletInfoModel: _app.$TokenizedWalletInfoModel.instance(this.props.token).retrieve()["catch"](angular.noop)
                        };
                    }
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    var cancelPreventStateChange = _angular.$rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
                        event.preventDefault();
                    });
                    this.$on("$destroy", cancelPreventStateChange);
                    var self = this;
                    if (_uiRouter.$stateParams.code && base64regex.test(_uiRouter.$stateParams.code)) {
                        self.errorCode = _squid.$util.base64Decode(_uiRouter.$stateParams.code);
                    } else {
                        self.errorCode = _uiRouter.$stateParams.code;
                    }
                    self.hideCancelLink = HIDE_CANCEL_LINK_CODES.indexOf(self.errorCode) > -1;
                    self.retryLink = RETRY_LINK.indexOf(self.errorCode) > -1;
                    _angular.$rootScope.allowUnload = true;
                    self.cancelLink = self.props.cancelUrl;
                    self.cancelRedirect = function($event) {
                        $event.preventDefault();
                        var redirectUrl = self.cancelLink;
                        if (_angular.$rootScope.partnerIntegration) {
                            _logger.$logger.info("genericerror_partner_integration");
                            redirectUrl = _squid.$util.buildURL(self.cancelLink, {
                                error: "true"
                            });
                        }
                        _util.$ReturnToMerchant.goTo(redirectUrl);
                    };
                    self.retryCheckout = function($event) {
                        $event.preventDefault();
                        _squid.$util.reload();
                    };
                    self.isMessengerBAIntegration = _squid.$integration.getConfig("IS_MESSENGER_BA_INTEGRATION");
                    self.loggingOut = function($event) {
                        $event.preventDefault();
                        cancelPreventStateChange();
                        self.props.logout();
                    };
                    (0, _jquery2["default"])(".paypalHeaderWrapper").hide();
                    if (self.errorCode !== "BLOCK_PPC_INELIGIBLE_USER") {
                        (0, _jquery2["default"])("#defaultCancelLink").hide();
                    }
                    (0, _jquery2["default"])(".footerWrapper").addClass("genericError");
                    self.$on("$destroy", function(event) {
                        (0, _jquery2["default"])(".paypalHeaderWrapper").show();
                        if (self.errorCode !== "BLOCK_PPC_INELIGIBLE_USER") {
                            (0, _jquery2["default"])("#defaultCancelLink").show();
                        }
                        (0, _jquery2["default"])(".footerWrapper").removeClass("genericError");
                    });
                    self.getTitle = function() {
                        var key = self.titleKey;
                        if (TITLE_KEY_HANDLER.hasOwnProperty(self.errorCode)) {
                            return TITLE_KEY_HANDLER[self.errorCode].call(_this, key);
                        }
                        return (0, _squid.$renderContent)(key);
                    };
                    self.getContent = function() {
                        var key = self.contentKey;
                        if (CONTENT_KEY_HANDLER.hasOwnProperty(self.errorCode)) {
                            return CONTENT_KEY_HANDLER[self.errorCode].call(_this, key);
                        }
                        return (0, _squid.$renderContent)(key);
                    };
                    self.getCancelLabel = function() {
                        if (self.walletTokenization) {
                            var brandName = _this.models.tokenizedWalletInfoModel.brandName();
                            if (self.errorCode === "ANDROID_PAY_ALREADY_PROVISIONED") {
                                return (0, _squid.$renderContent)("common.backToTokenizedWalletB", {
                                    type: brandName
                                });
                            } else {
                                return (0, _squid.$renderContent)("common.backToTokenizedWallet", {
                                    type: brandName
                                });
                            }
                        } else {
                            var merchantName = _this.props.merchant;
                            if (merchantName) {
                                return (0, _squid.$renderContent)("common.returnToMerchant", {
                                    merchantName: merchantName
                                });
                            }
                            return (0, _squid.$renderContent)("common.returnToDefaultMerchant");
                        }
                    };
                    this.personalizedBanner = {
                        show: false
                    };
                    _logger.$logger.info("checkout_fpti", {
                        landing_page: "error_page",
                        int_error_code: "1",
                        int_error_description: _uiRouter.$stateParams.code
                    });
                },
                populate: function populate() {
                    if (this.models.checkoutAppData) {
                        this.cancelLink = this.models.checkoutAppData.urls.cancel_url;
                    }
                    if (this.models.checkoutPayee) {
                        var merchant = this.models.checkoutPayee.merchant;
                        if (merchant.id && !this.hideCancelLink) {
                            var hcl = _squid.$config.hideCancelLinkForMerchant;
                            var shouldHide = hcl && hcl.indexOf(merchant.id) !== -1;
                            if (shouldHide) {
                                this.hideCancelLink = true;
                            }
                        }
                    }
                    if (this.models.cart) {
                        this.walletTokenization = this.models.cart.isWalletTokenization();
                    }
                    this.personalizedBanner.show = this.models.auth && this.models.auth.rememberedOT() && (0, 
                    _squid.$feature)("oneTouchPersonalization");
                    if (this.models.auth) {
                        this.showLogoutLink = this.models.auth.is_auth_api_call && _squid.$util.param("source") !== "consumerApp" && this.props.logout && SHOW_LOGOUT_LINK_CODES.indexOf(this.errorCode) > -1;
                        this.formattedNameInformal = (0, _squid.formatNameInformal)({
                            first_name: this.models.auth.first_name,
                            last_name: this.models.auth.last_name
                        }) || this.models.auth.email;
                    }
                    if (this.walletTokenization) {
                        if (this.errorCode !== "ANDROID_PAY_ALREADY_PROVISIONED") {
                            this.errorCode = "DEFAULT_TOKENIZED_WALLET_ERROR";
                        }
                    }
                    var titleKey = this.errorCode && TITLE_KEY_MAPPING[this.errorCode];
                    if (titleKey) {
                        if (titleKey === "transactionRefusedTitle" && this.models.cart && this.models.cart.isBillingNoPurchase()) {
                            this.titleKey = "genericError." + TRANSACTION_REFUSED_BA_TITLE_MSG["BA_NO_PURCHASE"];
                        } else if (titleKey === "transactionRefusedTitle" && this.models.cart && this.models.cart.isBillingPurchase()) {
                            this.titleKey = "genericError." + TRANSACTION_REFUSED_BA_TITLE_MSG["BA_WITH_PURCHASE"];
                        } else {
                            this.titleKey = "genericError." + titleKey;
                        }
                    }
                    var contentKey = this.errorCode && CONTENT_KEY_MAPPING[this.errorCode] || CONTENT_KEY_MAPPING.DEFAULT;
                    this.contentKey = "genericError." + contentKey;
                }
            }
        });
        _angular.$rootScope;
        _uiRouter.$stateParams;
        _squid.$Component;
        _squid.$util;
        _squid.$renderContent;
        _squid.$config;
        _squid.formatNameInformal;
        _squid.$integration;
        _squid.$feature;
        _logger.$logger;
        _index.$CheckoutAppDataModel;
        _index.$CheckoutCartModel;
        _index.$CheckoutPayeeModel;
        _index2.$AuthModel;
        _util.$ReturnToMerchant;
        _app.$TokenizedWalletInfoModel;
        module.exports = exports["default"];
    },
    "./components/xo-ui-components/src/generic-error/template.html": function(module, exports) {
        module.exports = '<section id="genericError" content>\n    <div class="container">\n        <div class="logo" ng-if="!props.isUnbranded"></div>\n\n        <xo-banner ng-if="personalizedBanner.show && !isMessengerBAIntegration && showLogoutLink" class="banner">\n            <p class="userEmail" id="reviewUserInfo">\n                {{ content(\'memberReview.loggedInWithOneTouch\', {userName: formattedNameInformal, lastName: models.auth.last_name, firstName: models.auth.first_name}) }}\n                <a track-link="login_with_diff_user" href="" class="textLink" ng-click="loggingOut($event)">{{ content(\'memberReview.notYou\')}}</a>\n            </p>\n        </xo-banner>\n        <div ng-if="!personalizedBanner.show && !isMessengerBAIntegration && showLogoutLink" class="banner">\n            <p class="userEmail" id="reviewUserInfo">\n                {{ content(\'creditcard.hi\', {userName: formattedNameInformal}) }}\n                <a track-link="login_with_diff_user" href="" class="textLink" ng-click="loggingOut($event)">{{ content(\'memberReview.notYou\')}}</a>\n            </p>\n        </div>\n\n        <div class="title" ng-if="titleKey">\n            {{ getTitle() }}\n        </div>\n        <div class="message"\n            ng-if="contentKey"\n            ng-bind-html="getContent()">\n        </div>\n        <p class="retryLink" ng-if="retryLink">\n            <a link-button ng-click="retryCheckout($event)" id="retryLink" class="btn full">\n                {{ content(\'genericError.tryAgain\') }}\n            </a>\n        </p>\n        <p class="cancelLink" ng-if="cancelLink && !hideCancelLink">\n            <a href="{{cancelLink}}" ng-click="cancelRedirect($event)" id="cancelLink" ng-class="[\'btn\', \'full\', {\'btn-secondary\': retryLink}]">\n                {{ getCancelLabel() }}\n            </a>\n        </p>\n    </div>\n</section>\n';
    },
    "./components/xo-ui-components/src/generic-error/styles.less": "./css/app.less",
    "./pages/xo-generic-message/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$GenericMessageRoute = undefined;
        __webpack_require__("./pages/xo-generic-message/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $GenericMessageRoute = exports.$GenericMessageRoute = _squid.$ComponentRoute.extend("$GenericMessageRoute", {
            path: "genericMessage",
            directive: "xo-generic-message-page",
            query: [ "code" ],
            trackingData: {},
            auth: false,
            children: []
        });
        angular.value("$GenericMessageRoute", $GenericMessageRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-generic-message/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoGenericMessagePageComponent = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _template = __webpack_require__("./pages/xo-generic-message/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-models/src/checkout/index.js");
        __webpack_require__("./components/xo-ui-components/src/generic-message/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoGenericMessagePageComponent = exports.$xoGenericMessagePageComponent = _squid.$Component.extend("$xoGenericMessagePageComponent", {
            tag: "xo-generic-message-page",
            template: _template2["default"],
            controller: function controller($scope, $rootScope, $stateParams, $state, $logger, $CheckoutAppDataModel, $util, $q, $populate) {
                $scope.token = $rootScope.token;
                (0, _jquery2["default"])("#defaultCancelLink").hide();
                $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
                    event.preventDefault();
                });
            }
        });
        angular.value("$xoGenericMessagePageComponent", $xoGenericMessagePageComponent);
        _squid.$Component;
    },
    "./pages/xo-generic-message/template.html": function(module, exports) {
        module.exports = "<xo-generic-message token=token></xo-generic-message>\n";
    },
    "./components/xo-ui-components/src/generic-message/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-ui-components/src/generic-message/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular, squid, template) {
            return angular.module("xo-generic-message.directive", [ "squid", "xomodel.checkout" ]).directive("xoGenericMessage", function($rootScope) {
                return {
                    template: template,
                    scope: {
                        token: "="
                    },
                    controller: function controller($scope, $rootScope, $stateParams, $state, $logger, $CheckoutAppDataModel, $populate) {
                        $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
                            event.preventDefault();
                        });
                        $(".paypalHeaderWrapper").hide();
                        $(".footerWrapper").addClass("genericMessage");
                        var titleKeyMapping = {
                            PAYMENT_SUCCESS: "paymentSuccessTitle",
                            DEFAULT: "paymentSuccessTitle"
                        };
                        $scope.titleKey = "genericMessage." + ($stateParams.code && titleKeyMapping[$stateParams.code]) || titleKeyMapping.DEFAULT;
                        var contentKeyMapping = {
                            PAYMENT_SUCCESS: "paymentSuccessMessage",
                            DEFAULT: "paymentSuccessMessage"
                        };
                        var contentKey = $stateParams.code && contentKeyMapping[$stateParams.code];
                        if (contentKey) {
                            $scope.contentKey = "genericMessage." + contentKey;
                        }
                        $populate($scope, {
                            checkoutAppData: $CheckoutAppDataModel.instance($scope.token)
                        }).then(function() {
                            var merchant = $scope.checkoutAppData.merchant;
                            $scope.merchant = merchant.brand_name || merchant.merchant_name || merchant.merchant_email;
                        });
                        $scope.$on("$destroy", function(event) {
                            $(".paypalHeaderWrapper").show();
                            $(".footerWrapper").removeClass("genericMessage");
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-ui-components/src/generic-message/template.html": function(module, exports) {
        module.exports = '<section id="genericMessage" content>\n    <div class="container">\n        <div class="logo"></div>\n        <div class="title" ng-if="titleKey">\n            {{content(titleKey)}}\n        </div>\n        <div class="message" ng-if="contentKey">\n            {{content(contentKey)}}\n        </div>\n    </div>\n</section>\n';
    },
    "./pages/xo-select-fi/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$SelectFiRoute = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _route = __webpack_require__("./components/xo-wallet-components/src/confirm-upop/route.js");
        var _route2 = _interopRequireDefault(_route);
        var _directive = __webpack_require__("./pages/xo-select-fi/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $SelectFiRoute = exports.$SelectFiRoute = _squid.$ComponentRoute.extend("$SelectFiRoute", {
            path: "selectFi",
            directive: _directive.$xoSelectFiComponent,
            titleContent: "memberReview.selectFi",
            trackingData: {
                fptiState: "choose_FI_interstitial",
                buzname: {
                    fullpage: {
                        pagename: "%::select-fi",
                        pagename2: "%::select-fi:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: [ {
                route: _route2["default"],
                props: function props() {
                    return {
                        token: this.props.token,
                        cardmodel: this.cardModel
                    };
                }
            } ]
        });
        angular.value("$SelectFiRoute", $SelectFiRoute);
        _squid.$ComponentRoute;
        _directive.$xoSelectFiComponent;
    },
    "./components/xo-wallet-components/src/confirm-upop/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./components/xo-wallet-components/src/confirm-upop/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$xoConfirmUpopRoute", {
            path: "confirmUpop",
            directive: _directive2["default"],
            titleContent: "confirmUpop.confirm",
            trackingData: {
                fptiState: "confirm_upop"
            },
            query: [ "fromLoginOverlay" ],
            loginRequired: true,
            pageOnOverlay: true,
            children: []
        });
        _index.$Route;
        module.exports = exports["default"];
    },
    "./components/xo-wallet-components/src/confirm-upop/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _addCard = __webpack_require__("./components/xo-wallet-components/src/add-card/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        __webpack_require__("./components/xo-wallet-components/src/confirm-upop/init/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/confirm-upop/confirm/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/confirm-upop/styles.less");
        var _template = __webpack_require__("./components/xo-wallet-components/src/confirm-upop/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoConfirmUpopDirective", {
            tag: "xo-confirm-upop",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: true
                },
                phone: {
                    type: "var",
                    required: false
                },
                cardmodel: {
                    type: "var",
                    required: false
                },
                onSuccess: {
                    type: "var",
                    required: false
                },
                onCancel: {
                    type: "var",
                    required: false
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutSession: _index.$CheckoutSessionModel.instance(this.props.token).retrieve()
                    };
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    if (!this.cardmodel) {
                        _logger.$logger.warn("card_model_missing");
                        return this.goto("^");
                    }
                    this.phone = this.props.phone || {};
                    this.cardLast4 = this.cardmodel.card.number.slice(-4);
                    this.fromLoginOverlay = _uiRouter.$stateParams.fromLoginOverlay;
                    (0, _angular.$timeout)(function() {
                        (0, _jquery2["default"])("#upopConfirmation .upopConfirm").addClass("upopOpen");
                        if (_this.fromLoginOverlay) {
                            (0, _angular.$timeout)(function() {
                                (0, _jquery2["default"])("#upopConfirmation .modalWrapper").addClass("modalWrapperAnimation");
                            });
                        }
                    });
                    var hideModal = function hideModal() {
                        (0, _jquery2["default"])("#upopConfirmation .upopConfirm").removeClass("upopOpen");
                    };
                    var done = function done(handler, target) {
                        hideModal();
                        (0, _angular.$timeout)(function() {
                            return handler ? handler() : _this.goto(target);
                        }, 300);
                    };
                    var _success = function _success() {
                        done(_this.props.onSuccess, "checkout.review");
                    };
                    this.closeModal = function(event) {
                        if (event) {
                            event.preventDefault();
                        }
                        done(_this.props.onCancel, "^");
                    };
                    this.initSuccess = function() {
                        _this.collectOtpInput = false;
                    };
                    this.confirmed = function() {
                        if (_this.props.onSuccess) {
                            return _success();
                        }
                        _this.models.checkoutSession.fundingOptions.action("update", {
                            resultModel: _this.models.checkoutSession,
                            silent: true,
                            data: {
                                planId: _this.cardmodel.id
                            },
                            success: function success() {
                                if (_this.models.checkoutSession.cvvData) {
                                    _this.models.checkoutSession.set("cvvData.security_code", _this.cardmodel.get("card.security_code"));
                                }
                                var isNewCard = !_this.cardmodel.card.isExisting();
                                var msg = isNewCard ? [ "smallToolTip.cardAddedConfirmed" ] : [ "smallToolTip.cardConfirmed" ];
                                _this.models.checkoutSession.message = {
                                    type: "success",
                                    msgKeys: msg
                                };
                                _success();
                            },
                            contingencies: {
                                TRANSACTION_REFUSED: function TRANSACTION_REFUSED(name) {
                                    _this.models.checkoutSession.message = {
                                        type: "info",
                                        msgKeys: "creditcard.addedButCannotUse"
                                    };
                                    _success();
                                }
                            }
                        });
                    };
                    this.flag = function(field) {
                        return _addCard.$CardMetaData.getMetaData(_this.cardmodel.card, field);
                    };
                    this.setMessage = function(message) {
                        _this.message = message;
                    };
                    this.collectOtpInput = this.flag("fields.expiry") && !this.cardmodel.get("card.expiry_month") || this.flag("fields.cvv") && !this.cardmodel.get("card.expiry_month") || this.flag("fields.phone") && !(this.phone && this.phone.telephone);
                }
            }
        });
        _angular.$timeout;
        _squid.$Component;
        _uiRouter.$stateParams;
        _addCard.$CardMetaData;
        _logger.$logger;
        _index.$CheckoutSessionModel;
        module.exports = exports["default"];
    },
    "./components/xo-wallet-components/src/add-card/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _directive = __webpack_require__("./components/xo-wallet-components/src/add-card/cardExpiry/directive.js");
        Object.keys(_directive).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _directive[key];
                }
            });
        });
        var _cardMetaData = __webpack_require__("./components/xo-wallet-components/src/add-card/cardMetaData/index.js");
        Object.keys(_cardMetaData).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _cardMetaData[key];
                }
            });
        });
        var _directive2 = __webpack_require__("./components/xo-wallet-components/src/add-card/cvv/directive.js");
        Object.keys(_directive2).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _directive2[key];
                }
            });
        });
    },
    "./components/xo-wallet-components/src/add-card/cardExpiry/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            exports.$xoCardExpiryDirective = undefined;
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
            __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js");
            var _template = __webpack_require__("./components/xo-wallet-components/src/add-card/cardExpiry/template.html");
            var _template2 = _interopRequireDefault(_template);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            var $xoCardExpiryDirective = exports.$xoCardExpiryDirective = _squid.$Component.extend("$xoCardExpiryDirective", {
                tag: "xo-card-expiry",
                template: _template2["default"],
                props: {
                    expiryMonth: {
                        type: "var",
                        required: false
                    },
                    expiryYear: {
                        type: "var",
                        required: false
                    }
                },
                lifecycle: {
                    enter: function enter() {
                        var _this = this;
                        var format = (0, _squid.$feature)("ccExpiryDateFormat", "MMYY", _squid.$locale.country);
                        var regexPattern = format === "MMYY" ? /(0\d|1[0-2])\/(\d{2})/ : /(0\d|1[0-2])\/(\d{4})/;
                        var init = function init() {
                            if (_this.expiryMonth && _this.expiryYear) {
                                _this.expiryDate = format === "MMYY" ? _this.expiryMonth + "/" + _this.expiryYear.substring(2, 4) : _this.expiryMonth + "/" + _this.expiryYear;
                            }
                        };
                        init();
                        this.$watch("[expiryMonth, expiryYear]", function(expiryInfo) {
                            if (expiryInfo && expiryInfo[0] && expiryInfo[1]) {
                                _this.expiryMonth = expiryInfo[0];
                                _this.expiryYear = expiryInfo[1];
                                init();
                            }
                        });
                        $("#expiry_value").mask(format === "MMYY" ? "00/00" : "00/0000");
                        this.validate = function(expiryDate) {
                            if (!expiryDate) {
                                return false;
                            }
                            var regexMatch = regexPattern.exec(expiryDate);
                            if (!regexMatch) {
                                return false;
                            }
                            var today = new Date();
                            var currentYear = today.getFullYear();
                            var expMonth = Number(regexMatch[1]);
                            var expYear = Number(regexMatch[2]);
                            if (format === "MMYY") {
                                expYear = currentYear - currentYear % 100 + expYear;
                            }
                            var expDate = new Date(expYear, expMonth - 1);
                            if (expDate < today) {
                                return false;
                            }
                            _this.expiryYear = expYear.toString();
                            _this.expiryMonth = expMonth < 10 ? "0" + expMonth : expMonth.toString();
                            return true;
                        };
                    }
                }
            });
            angular.value("$xoCardExpiryDirective", $xoCardExpiryDirective);
            _squid.$Component;
            _squid.$locale;
            _squid.$feature;
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-ui-components/src/tooltip/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _template = __webpack_require__("./components/xo-ui-components/src/tooltip/template.html");
            var _template2 = _interopRequireDefault(_template);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function isLink($el) {
                return $el.is("a");
            }
            function addDescribedById($el, id) {
                var describedByIds = $el.attr("aria-describedby") ? $el.attr("aria-describedby").split(" ") : [];
                if (!~describedByIds.indexOf(id)) {
                    describedByIds.push(id);
                }
                $el.attr("aria-describedby", describedByIds.join(" "));
            }
            function removeDescribedById($el, id) {
                var describedByIds = $el.attr("aria-describedby") || "";
                $el.attr("aria-describedby", describedByIds.split(" ").filter(function(existingId) {
                    return existingId !== id;
                }).join(" "));
            }
            var isMouseTypeEvent = function isMouseTypeEvent(type) {
                return /mouse/.test(type);
            };
            function debounceOnMouseTrigger(type, fn) {
                var isMouseType = isMouseTypeEvent(type);
                return function() {
                    var _arguments = arguments;
                    if (isMouseType) {
                        (0, _angular.$timeout)(function() {
                            return fn.apply(null, _arguments);
                        }, 250);
                    } else {
                        fn.apply(null, arguments);
                    }
                };
            }
            exports["default"] = _squid.$Component.extend("xoTooltip", {
                tag: "xo-tooltip",
                template: _template2["default"],
                transclude: true,
                props: {
                    trigger: {
                        type: "str"
                    },
                    showEvent: {
                        type: "str"
                    },
                    hideEvent: {
                        type: "str"
                    },
                    displayInline: {
                        type: "var"
                    },
                    align: {
                        type: "str"
                    }
                },
                lifecycle: {
                    populate: function populate() {
                        var $element = this.$element, trigger = this.trigger;
                        var $trigger = $(trigger);
                        var toolTip = $element.find(".toolTip");
                        var toolTipID = this.toolTipID = "toolTip_" + Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 7);
                        var isMouseOver = false;
                        var toggle = function toggle(event) {
                            if (toolTip.length && toolTip.is(":visible")) {
                                close(event);
                            } else {
                                show(event);
                            }
                        };
                        var show = function show(event) {
                            if (event) {
                                event.stopPropagation();
                                event.preventDefault();
                            }
                            addDescribedById($trigger, toolTipID);
                            $element.show();
                            toolTip.slideDown({
                                progress: function progress() {
                                    var windowBot = $(window).scrollTop() + $(window).height();
                                    var toolTipBot = toolTip.offset().top + toolTip.outerHeight();
                                    if (toolTipBot > windowBot) {
                                        $(window).scrollTop(toolTipBot - $(window).height());
                                    }
                                }
                            });
                        };
                        var close = function close(event) {
                            if (event) {
                                event.stopPropagation();
                                event.preventDefault();
                            }
                            if (!isMouseOver) {
                                if (toolTip.length && toolTip.is(":visible")) {
                                    toolTip.slideUp(100, function() {
                                        $element.hide();
                                    });
                                } else {
                                    $element.hide();
                                }
                                removeDescribedById($trigger, toolTipID);
                            }
                        };
                        this.showEvent = this.showEvent || (isLink($element) ? "click" : "focus");
                        this.hideEvent = this.hideEvent || "blur";
                        var SHOW_EVENT = this.showEvent + ".toolTip";
                        var HIDE_EVENT = this.hideEvent + ".toolTip";
                        $element.hide();
                        $element.on("click", function(event) {
                            return event.stopPropagation();
                        });
                        $element.on("click", ".close", close);
                        $element.on("mouseover", function() {
                            isMouseOver = true;
                        });
                        $element.on("mouseleave", function() {
                            isMouseOver = false;
                        });
                        $(document).on("click.toolTip", function() {
                            return close();
                        });
                        if (this.showEvent === this.hideEvent) {
                            $trigger.on(SHOW_EVENT, toggle);
                            $element.on(SHOW_EVENT, toggle);
                        } else {
                            $trigger.on(SHOW_EVENT, show);
                            $trigger.on(HIDE_EVENT, debounceOnMouseTrigger(this.hideEvent, close));
                            $element.on(HIDE_EVENT, debounceOnMouseTrigger(this.hideEvent, close));
                        }
                        this.$on("$destroy", function() {
                            $(document).off("click.toolTip");
                            $trigger.off(SHOW_EVENT);
                            $trigger.off(HIDE_EVENT);
                            close();
                        });
                    }
                }
            });
            _angular.$timeout;
            _squid.$Component;
            module.exports = exports["default"];
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-ui-components/src/tooltip/template.html": function(module, exports) {
        module.exports = '<div class="toolTip {{align}}" ng-class="{\'displayInline\': displayInline, \'balloon\': !displayInline}" ng-transclude role="tooltip" id="{{toolTipID}}">\n</div>\n';
    },
    "./components/xo-wallet-components/src/add-card/cardExpiry/template.html": function(module, exports) {
        module.exports = '<div class="expirationField inputField" id="expirationField" directionality content>\n    <label class="expires" for="expiry_value">{{ content(\'creditcard.expiresLabel\') }}</label>\n    <div class="inputField" directionality>\n        <input ng-model="expiryDate"\n               name="expiry_value"\n               id="expiry_value"\n               value=""\n               maxlength="{{maxlength}}"\n               autocapitalize="off"\n               aria-describedby="expiryHelp"\n               autocomplete="off"\n               ui-validate="\'validate($value)\'"\n               placeholder="{{content(\'creditcard.expiresPlaceholder\')}}"\n               data-error-text="{{content(\'validation.validExpirationDate\')}}"\n               xo-error-tooltip\n               required />\n        <span id="expiryHelp" class="accessAid" ng-bind="content(\'creditcard.expiresPlaceholder\')"></span>\n    </div>\n</div>\n';
    },
    "./components/xo-wallet-components/src/add-card/cardMetaData/index.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            exports.$CardMetaData = undefined;
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _angular2 = _interopRequireDefault(_angular);
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            var CARD_META_DATA = {
                DEFAULT: {
                    fields: {
                        address: true,
                        cvv: true,
                        dob: false,
                        expiry: true,
                        issue: false,
                        phone: false
                    },
                    length: {
                        cvv: 3,
                        min: 16,
                        max: 16
                    },
                    luhn: true,
                    phoneType: "Mobile",
                    spaces: "4,8,12"
                },
                PLCC: {
                    fields: {
                        expiry: false,
                        cvv: false,
                        address: false
                    },
                    length: {
                        min: 10,
                        max: 16
                    }
                },
                MAESTRO: {
                    pattern: /^(5018|5020|5038|4903|4911|4936|564182|545250|504834|503615|6333|6304|6759|676[1-3]|0604)/,
                    length: {
                        min: 12,
                        max: 19
                    },
                    spaces: "4,8,12,16"
                },
                SWITCH: {
                    pattern: /^(5018|5020|5038|4903|4911|4936|564182|545250|504834|503615|6333|6304|6759|676[1-3]|0604)/,
                    fields: {
                        issue: true
                    },
                    length: {
                        min: 12,
                        max: 19
                    },
                    spaces: "4,8,12,16"
                },
                DINERSCLUB: {
                    pattern: /^(36|38|30[0-5])/,
                    length: {
                        min: 14,
                        max: 14
                    }
                },
                DISCOVER: {
                    pattern: /^(6011|65|64[4-9]|622|36|38|30[0-5])/,
                    length: {
                        min: 14
                    }
                },
                MASTERCARD: {
                    pattern: /^(5[1-5]|2(2(2[1-9]|[3-9]\d)|[3-6]\d\d|7[0-1]\d|720))/
                },
                AMEX: {
                    pattern: /^3[47]/,
                    length: {
                        cvv: 4,
                        min: 15,
                        max: 15
                    },
                    spaces: "4,10"
                },
                VISA: {
                    pattern: /^4/,
                    length: {
                        min: 13
                    },
                    subTypes: {
                        QIWI: {
                            pattern: /^(428122|489049|469395|446942|462012)/
                        }
                    }
                },
                JCB: {
                    pattern: /^(?:2131|1800|35[0-9]{3})/,
                    length: {
                        min: 15
                    }
                },
                CBNATIONALE: {},
                CETELEM: {
                    fields: {
                        dob: true
                    },
                    length: {
                        max: 19
                    },
                    spaces: "4,8,12,16"
                },
                COFIDIS: {
                    fields: {
                        dob: true,
                        expiry: false,
                        cvv: false
                    },
                    length: {
                        min: 8,
                        max: 9
                    },
                    spaces: "4,8",
                    luhn: false
                },
                COFINOGA: {
                    fields: {
                        dob: true,
                        cvv: false
                    },
                    length: {
                        min: 17,
                        max: 17
                    },
                    spaces: "4,8,12,16"
                },
                ELO: {
                    pattern: /^9/,
                    length: {
                        min: 13
                    }
                },
                HIPER: {
                    pattern: /^6/,
                    length: {
                        min: 13
                    }
                },
                HIPERCARD: {
                    pattern: /^7/,
                    length: {
                        min: 13
                    }
                },
                CUPCREDIT: {
                    fields: {
                        address: false,
                        phone: true
                    },
                    length: {
                        max: 19
                    }
                },
                CUPAMEXCREDIT: {
                    fields: {
                        address: false,
                        phone: true
                    },
                    length: {
                        cvv: 4,
                        min: 15,
                        max: 15
                    }
                },
                CUPDEBIT: {
                    fields: {
                        address: false,
                        cvv: false,
                        expiry: false,
                        phone: true
                    },
                    length: {
                        max: 19
                    }
                },
                CUPAMEXDEBIT: {
                    fields: {
                        address: false,
                        cvv: false,
                        expiry: false,
                        phone: true
                    },
                    length: {
                        min: 15,
                        max: 15
                    }
                }
            };
            Object.keys(CARD_META_DATA).forEach(function(key) {
                CARD_META_DATA[key] = $.extend(true, {}, CARD_META_DATA.DEFAULT, CARD_META_DATA[key]);
            });
            Object.keys(CARD_META_DATA).forEach(function(key) {
                CARD_META_DATA[key].spaces = CARD_META_DATA[key].spaces.split(",").map(Number);
            });
            function getTypeByPattern(cardMetaData, types, number) {
                var result = void 0;
                types.some(function(type) {
                    var metaData = cardMetaData[type];
                    if (metaData && metaData.pattern && metaData.pattern.test(number)) {
                        result = type;
                        return true;
                    }
                });
                return result;
            }
            var $CardMetaData = exports.$CardMetaData = {
                getMetaData: function getMetaData(card, field) {
                    var cardType = card && card.type || "DEFAULT";
                    if (cardType === "CUP") {
                        cardType = cardType + (card.dualType ? card.dualType : "");
                        cardType = cardType + ([ "DEBIT", "DEBITCARD" ].indexOf(card.productType) > -1 ? "DEBIT" : "CREDIT");
                    }
                    return _squid.$Class.get(CARD_META_DATA[cardType], field);
                },
                getCardType: function getCardType(types, number) {
                    var cardType = {};
                    if (_angular2["default"].isArray(types) && number) {
                        cardType.type = getTypeByPattern(CARD_META_DATA, types, number);
                        var metaData = CARD_META_DATA[cardType.type];
                        if (metaData && metaData.subTypes) {
                            cardType.subType = getTypeByPattern(metaData.subTypes, types, number);
                        }
                    }
                    return cardType;
                }
            };
            _angular2["default"].value("$CardMetaData", $CardMetaData);
            _squid.$Class;
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-wallet-components/src/add-card/cvv/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoCvvDirective = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _cardMetaData = __webpack_require__("./components/xo-wallet-components/src/add-card/cardMetaData/index.js");
        var _template = __webpack_require__("./components/xo-wallet-components/src/add-card/cvv/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoCvvDirective = exports.$xoCvvDirective = _squid.$Component.extend("$xoCvvDirective", {
            tag: "xo-cvv",
            template: _template2["default"],
            props: {
                card: {
                    type: "var"
                },
                showLabel: {
                    type: "var"
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    this.$on("maskCVV", function($event, isMasked) {
                        _this.maskCVV = isMasked;
                    });
                    this.maskCVV = (0, _squid.$feature)("maskCVV", false, _squid.$locale.country);
                    this.cvvLength = function() {
                        return _cardMetaData.$CardMetaData.getMetaData(_this.props.card, "length.cvv");
                    };
                    this.cvvRequired = function() {
                        return _this.props.card.type !== "MAESTRO" || (0, _squid.$feature)("maestroCvvRequired", false, _squid.$locale.country);
                    };
                }
            }
        });
        angular.value("$xoCvvDirective", $xoCvvDirective);
        _squid.$Component;
        _squid.$locale;
        _squid.$feature;
        _cardMetaData.$CardMetaData;
    },
    "./components/xo-wallet-components/src/add-card/cvv/template.html": function(module, exports) {
        module.exports = '<div content class="inputField cvvField" id="cvvField" directionality>\n    <label ng-if="showLabel" class="cvv nolap" for="cvv">{{ content(\'creditcard.cscLabel\') }}</label>\n\n    <div class="cvvSecurityCode inputField" directionality>\n        <input type="{{maskCVV ? \'password\' : \'tel\'}}" id="cvv" name="cvv" ng-model="card.security_code"\n               aria-describedby="securityCodeHelp"\n               ng-pattern="/^[0-9]{1,4}$/" ng-minlength="cvvLength()" maxlength="{{cvvLength()}}"\n               placeholder="{{cvvLength() === 3 ? content(\'creditcard.threeDigits\') : content(\'creditcard.fourDigits\')}}"\n               ng-required="cvvRequired()" ng-class="{\'four\': cvvLength() === 4}" autocomplete="off"\n               data-error-text="{{content(\'validation.validCSC\')}}" xo-error-tooltip />\n\n        <span id="securityCode" class="creditCard" role="img" ng-class="{\'four\': cvvLength() === 4}"\n              aria-label="{{cvvLength() === 4 ? content(\'creditcard.cscHelp4Digits\') : content(\'creditcard.cscHelp3Digits\')}}">\n        </span>\n        <span id="securityCodeHelp" class="accessAid" ng-bind="cvvLength() === 4 ? content(\'creditcard.cscHelp4Digits\') : content(\'creditcard.cscHelp3Digits\')"></span>\n    </div>\n</div>\n';
    },
    "./components/xo-wallet-components/src/confirm-upop/init/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _util = __webpack_require__("./components/xo-wallet-components/src/fi-contingency-list/util.js");
            var _index = __webpack_require__("./components/xo-models/src/fi/index.js");
            __webpack_require__("./components/xo-ui-components/src/spinner-button/directive.js");
            var _template = __webpack_require__("./components/xo-wallet-components/src/confirm-upop/init/template.html");
            var _template2 = _interopRequireDefault(_template);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            exports["default"] = _squid.$Component.extend("$xoInitOtpDirective", {
                tag: "xo-init-otp",
                template: _template2["default"],
                props: {
                    token: {
                        type: "var",
                        required: true
                    },
                    phone: {
                        type: "var",
                        required: false
                    },
                    cardmodel: {
                        type: "var",
                        required: true
                    },
                    onSuccess: {
                        type: "var",
                        required: true
                    },
                    flag: {
                        type: "var",
                        required: true
                    },
                    message: {
                        type: "var",
                        required: true
                    }
                },
                actions: {
                    initOtp: function initOtp() {
                        var _this = this;
                        var handleContingencies = function handleContingencies() {
                            var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                            var prop = arguments[1];
                            var errorData = void 0;
                            if (result.errorCodes) {
                                errorData = result;
                            } else {
                                errorData = {
                                    errorCodes: [ result["0"] || "ISSUER_DECLINE" ]
                                };
                            }
                            _this.message(_util.$fiErrorUtil.addPageErrors(errorData, "confirmUpop", prop, "error"));
                            if (window.scrollTo) {
                                window.scrollTo(0, 0);
                            }
                        };
                        this.isProcessing = true;
                        var resolveOTP = new _index.$ResolveOTP({
                            id: this.cardmodel.id
                        });
                        resolveOTP.action("init", {
                            silent: true,
                            data: {
                                phone: {
                                    country_code: this.phone.IntDialingCountryCode,
                                    number: this.phone.telephone
                                }
                            },
                            resultModel: {},
                            success: function success() {
                                _this.onSuccess();
                            },
                            error: function error() {
                                handleContingencies();
                            },
                            contingencies: {
                                INIT_OTP_CONTINGENCY: function INIT_OTP_CONTINGENCY(name, result) {
                                    var prop = {
                                        number: _this.cardmodel.card.number.slice(-4)
                                    };
                                    handleContingencies(result, prop);
                                    _util.$fiErrorUtil.addFieldErrors(result, _this.$element);
                                },
                                DEFAULT: function DEFAULT() {
                                    handleContingencies();
                                }
                            }
                        })["finally"](function() {
                            _this.isProcessing = false;
                        });
                    }
                },
                lifecycle: {
                    enter: function enter() {
                        var _this2 = this;
                        this.$watch("isProcessing", function(isProcessing) {
                            if (isProcessing) {
                                _this2.$element.addClass("processing");
                            } else {
                                _this2.$element.removeClass("processing");
                            }
                        });
                        $("#upopConfirmation .modalContainer").focus();
                    }
                }
            });
            _squid.$Component;
            _util.$fiErrorUtil;
            _index.$ResolveOTP;
            module.exports = exports["default"];
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-wallet-components/src/fi-contingency-list/util.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-wallet-components/src/fi-contingency-list/contingencies.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular, squid, contingencyList) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("fi.errorUtil", [ "squid" ]).factory("$fiErrorUtil", function($renderContent) {
                    return {
                        addPageErrors: function addPageErrors(errorData, contentBundle, prop, defaultKey) {
                            if (!errorData.errorCodes) {
                                errorData.errorCodes = errorData && [ errorData["0"] ];
                            }
                            var messages = [];
                            if (errorData.errorCodes && errorData.errorCodes.length) {
                                errorData.errorCodes.forEach(function(errorCode) {
                                    var contentKey = contingencyList[errorCode] || defaultKey || "errorGeneral";
                                    var message;
                                    if (angular.isArray(contentKey)) {
                                        for (var i = 0; i < contentKey.length; i++) {
                                            message = $renderContent(contentBundle + "." + contentKey[i], prop);
                                            if (message) {
                                                break;
                                            }
                                        }
                                    } else {
                                        message = $renderContent(contentBundle + "." + contentKey, prop);
                                    }
                                    messages.push(message);
                                });
                                return {
                                    msgs: messages,
                                    type: "error"
                                };
                            }
                        },
                        addFieldErrors: function addFieldErrors(errorData, element, modelPrefix) {
                            if (errorData.fields && errorData.fields.length) {
                                errorData.fields.forEach(function(field) {
                                    var $field = $(element).find('[ng-model="' + (modelPrefix ? modelPrefix : "") + field.field + '"]');
                                    $field.addClass("backendError");
                                    $field.attr("aria-invalid", true);
                                });
                            }
                            $(element).find(".backendError:first").focus();
                        },
                        addFieldErrorsByName: function addFieldErrorsByName(errorData, element, modelPrefix) {
                            if (errorData.fields && errorData.fields.length) {
                                errorData.fields.forEach(function(field) {
                                    var fieldName = void 0;
                                    if (modelPrefix && field.field && field.field.length > 0) {
                                        fieldName = modelPrefix + field.field[0].toUpperCase() + field.field.substring(1);
                                    } else {
                                        fieldName = field.field;
                                    }
                                    var $field = $(element).find('[name="' + fieldName + '"]');
                                    $field.addClass("backendError");
                                    $field.attr("aria-invalid", true);
                                });
                            }
                            $(element).find(".backendError:first").focus();
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-wallet-components/src/fi-contingency-list", "components/xo-wallet-components/src/fi-contingency-list/util.js");
    },
    "./components/xo-wallet-components/src/fi-contingency-list/contingencies.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
            var contingencyList = {
                INSTRUMENT_COUNT_EXCEEDED: "errorInstrumentCountExceeded",
                INSTRUMENT_COUNT_EXCEEDED_VERIFIED: "errorInstrumentCountExceeded",
                INSTRUMENT_COUNT_LIMIT_EXCEEDED: "errorInstrumentCountExceeded",
                INSTRUMENT_COUNT_LIMIT_EXCEEDED_VERIFIED: "errorInstrumentCountExceeded",
                INSTRUMENT_UNAVAILABLE: "errorInstrumentUnavailable",
                INSTRUMENT_REFUSED_DUE_TO_MAX_LIMIT: "errorInstrumentRefused",
                INSTRUMENT_REFUSED_DUE_TO_MAX_SHARED_INSTRUMENT_LIMIT: [ "errorInstrumentUnavailable", "errorInstrumentRefused" ],
                INSTRUMENT_SHARING_LIMIT_EXCEEDED: [ "errorInstrumentUnavailable", "errorInstrumentRefused" ],
                INSTRUMENT_ALREADY_EXISTS: "errorInstrumentAlreadyExists",
                INSTRUMENT_BILLING_ADDRESS_NOT_ACCEPTED: "errorInstrumentBillingAddressNotAccepted",
                BILLING_ADDRESS1: "errorInstrumentBillingAddressNotAccepted",
                BILLING_CITY: "errorInstrumentBillingAddressNotAccepted",
                BILLING_COUNTRY: "errorInstrumentBillingAddressNotAccepted",
                BILLING_DIFFERENT_COUNTRY: [ "errorInstrumentBillingAddressUnavailableIntl", "errorInstrumentBillingAddressNotAccepted" ],
                INSTRUMENT_UPDATE_NO_CHANGE: "errorInstrumentUpdateNoChange",
                INSTRUMENT_DUPLICATE_LIMIT_REACHED: "errorInstrumentRefused",
                NOT_ELIGIBLE_TO_EDIT_CARD: "notEligibleToEditCard",
                INTERNAL_ERROR: "errorInternalError",
                INSTRUMENT_REFUSED: "errorInstrumentRefused",
                INSTRUMENT_INTERNATIONAL: "errorIssuerRejectIntl",
                REJECT_REFUSED: [ "errorIssuerReject", "errorInstrumentRefused" ],
                PAYPAL_DEBIT_CARD_REFUSED: [ "errorPaypalDebitRefused", "errorGeneral" ],
                PAYPAL_CREDIT_CARD_REFUSED: [ "errorPaypalCreditRefused", "errorGeneral" ],
                PAYPAL_CARD_REFUSED: [ "errorPaypalRefused", "errorGeneral" ],
                EXCESSIVE_REJECTIONS: [ "errorExcessiveRejectGuest", "errorInstrumentRefused" ],
                CC_INVALID_CSC: [ "errorCheckDigits", "errorGeneral" ],
                INVALID_EXPIRATION_DATE: "errorInvalidExpirationDate",
                CHECK_DIGITS_NOT_PRESENT: [ "errorCheckDigitsNotPresent", "errorGeneral" ],
                REJECT_UNKNOWN: [ "errorIssuerReject", "errorInstrumentRefused" ],
                SETTLEMENT_DENIED: "errorInstrumentRefused",
                MAX_AMOUNT_EXCEEDED: [ "errorMaxAmountExceeded", "errorInstrumentRefused" ],
                ISSUER_ERROR: [ "errorIssuerDenied", "errorInstrumentRefused" ],
                MISSING_FIELD: [ "errorInvalidData", "errorGeneral" ],
                INVALID_PARAMETERS: [ "errorInvalidData", "errorGeneral" ],
                INVALID_DATA: [ "errorInvalidData", "errorGeneral" ],
                INVALID_ACCOUNT: [ "errorInvalidAccount", "errorGeneral" ],
                INVALID_INSTRUMENT_ID: [ "errorInvalidAccount", "errorGeneral" ],
                ACCOUNT_RESTRICTED: [ "errorAccountRestricted", "errorGeneral" ],
                ISSUER_RESTRICTED: [ "errorIssuerReject", "errorGeneral" ],
                ISSUER_REJECTED: [ "errorIssuerReject", "errorGeneral" ],
                ADDRESS_MISMATCH: "errorInstrumentBillingAddressNotMatch",
                CHECK_DIGITS_NOT_PROC: [ "errorCheckDigitsNotPresent", "errorGeneral" ],
                CHECK_DIGITS_UNSUPPORTED: [ "errorCheckDigits", "errorGeneral" ],
                CHECK_DIGITS_UNAVAILABLE: [ "errorCheckDigits", "errorGeneral" ],
                BILL_ADDR_UNAVAILABLE: [ "errorInstrumentBillingAddressUnavailable", "errorInstrumentBillingAddressNotAccepted" ],
                BILL_ADDR_UNSUPPORTED: [ "errorInstrumentBillingAddressUnsupported", "errorInstrumentBillingAddressNotAccepted" ],
                BILL_ADDR_UNAVAILABLE_GLOBAL: [ "errorInstrumentBillingAddressUnavailableIntl", "errorInstrumentBillingAddressNotAccepted" ],
                BILL_ADDR_NOT_ALLOWED: [ "errorInstrumentBillingAddressNotAccepted", "errorAddressNotAllowed" ],
                BILL_ADDR_UNAVAILABLE_INTL: [ "errorInstrumentBillingAddressUnavailableIntl", "errorInstrumentBillingAddressNotAccepted" ],
                INSTRUMENT_DISABLED: "errorInstrumentRefused",
                PI_TYPE_NOT_SUPPORTED: "errorInvalidCCNumberOrType_global",
                REJECT_AMEX_ADULT: [ "errorAmexAdult", "errorGeneral" ],
                INVALID_BANK_ROUTING_NUMBER: "invalidRoutingNumber",
                BANK_ROUTING_NUMBER_IS_EMPTY: "invalidPINumber",
                INVALID_BANK_ACCOUNT_NUMBER: "invalidPINumber",
                BANK_ACCOUNT_NUMBER_IS_EMPTY: "invalidPINumber",
                INVALID_BANK_IBAN: "invalidPINumber",
                INVALID_IBAN_CODE: "invalidPINumber",
                INVALID_BANK_IBAN_CONVERSION_ERROR: "invalidPINumber",
                INVALID_BENEFICIARY_FIRST_NAME: "errorInvalidFirstName",
                INVALID_BENEFICIARY_NAME: "errorInvalidFirstName",
                INVALID_BANK_BENEFICIARY_NUMBER: "errorGeneral",
                INVALID_BANK_ADDRESS: "errorGeneral",
                INVALID_CARD_NUMBER: "errorInvalidCCNumberOrType",
                INVALID_CARD_TYPE: "errorInvalidCCNumberOrType",
                INVALID_SECURITY_CODE: "errorInvalidCSC",
                INVALID_FIRST_NAME: "errorInvalidFirstName",
                INVALID_LAST_NAME: "errorInvalidLastName",
                INVALID_EXPIRY: "errorInvalidExpirationDate",
                INVALID_PHONE: "errorInvalidPhone",
                BANK_ADDRESS_IS_EMPTY: "errorGeneral",
                INVALID_BANK_BRANCH_NUMBER: "errorGeneral",
                ADD_REFUSED_DUE_TO_EXCEEDING_MAX_DUPLICATE_INSTRUMENT_LIMIT: "errorInstrumentUnavailable",
                EMPTY_DATA: "errorGeneral",
                ISSUER_DECLINE: "errorIssuerReject",
                WRONG_CONFIRMATION_VALUES: "wrongConfirmationValue",
                CONFIRMATION_RESEND_COUNT_EXCEEDED: "resendValExceeded",
                FREQUENT_REQUEST_VERIFICATION_CODE: "frequentVerificationCodeReq",
                TRANSACTION_TIMEOUT: "transactionTimeout",
                NOT_CONFIRMED: "notConfirmed",
                CONTACT_CARD_ISSUER_TO_VERIFY: "issuerVerify",
                CARD_NOT_ACTIVATED_FOR_UPOP: "cardNotActivatedUpop",
                RESTRICTED_CARD: "cardRestricted",
                INVALID_ONE_TIME_PASSWORD: "errorInvalidOtpCode",
                DUPLICATED_TRANSACTION: "duplicateTransaction"
            };
            return contingencyList;
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./components/xo-ui-components/src/spinner-button/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-ui-components/src/spinner-button/template.html") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, template) {
            return angular.module("xo-spinner-button.directive", []).directive("xoSpinnerButton", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        track: "@",
                        onClick: "=",
                        buttonText: "@",
                        isProcessing: "=",
                        validate: "="
                    },
                    controller: function controller($scope) {
                        $scope.submit = function() {
                            if ($scope.onClick) {
                                $scope.onClick();
                            } else {
                                $scope.validate = true;
                            }
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-ui-components/src/spinner-button/template.html": function(module, exports) {
        module.exports = '<div class="spinnerBtn" content>\n    <button track-submit={{track}} ng-click="submit()" class="btn full">\n        <div ng-show="isProcessing" ng-class="{processing: isProcessing}" class="spinner"></div>\n        <div ng-hide="isProcessing" class="text" ng-bind-html="htmlContent(buttonText)"></div>\n    </button>\n</div>\n';
    },
    "./components/xo-wallet-components/src/confirm-upop/init/template.html": function(module, exports) {
        module.exports = '<div class="initOtp" content>\n    <div class="confirmMsg" ng-bind-html="htmlContent(flag(\'fields.expiry\') ? \'confirmUpop.creditInitOtp\' : \'confirmUpop.debitInitOtp\')"></div>\n\n    <form id="otpForm" name="otpForm" autocomplete="off" ng-submit="otpForm.$valid && actions.initOtp()" ng-class="{true: \'validated\'}[validated]" novalidate>\n        <div class="expiration confidential" id="expiration" ng-if="flag(\'fields.expiry\') || flag(\'fields.cvv\')">\n            <xo-card-expiry ng-if="flag(\'fields.expiry\')" expiry-month="cardmodel.card.expiry_month" expiry-year="cardmodel.card.expiry_year"></xo-card-expiry>\n            <xo-cvv ng-if="flag(\'fields.cvv\')" card="cardmodel.card" show-label="true"></xo-cvv>\n        </div>\n        <xo-phone-input token="token" ng-if="flag(\'fields.phone\')" show-phone-type="false" phone="phone"></xo-phone-input>\n\n        <xo-spinner-button track=\'init_otp_code\' token="token" validate="validated"\n                           is-processing="isProcessing" button-text="confirmUpop.btnsendOtpCode"></xo-spinner-button>\n    </form>\n</div>\n';
    },
    "./components/xo-wallet-components/src/confirm-upop/confirm/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _angular2 = _interopRequireDefault(_angular);
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _util = __webpack_require__("./components/xo-wallet-components/src/fi-contingency-list/util.js");
            var _index = __webpack_require__("./components/xo-models/src/fi/index.js");
            var _index2 = __webpack_require__("./components/xo-models/src/checkout/index.js");
            __webpack_require__("./components/xo-ui-components/src/spinner-button/directive.js");
            var _template = __webpack_require__("./components/xo-wallet-components/src/confirm-upop/confirm/template.html");
            var _template2 = _interopRequireDefault(_template);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            var VERIFICATION_CODE_COUNTDOWN_IN_SECS = 180;
            var RESEND_CODE_LINK_TIMEOUT_MILLI_SECS = 6e4;
            var ONE_MINUTE_IN_SECS = 60;
            exports["default"] = _squid.$Component.extend("$xoConfirmOtpDirective", {
                tag: "xo-confirm-otp",
                template: _template2["default"],
                props: {
                    token: {
                        type: "var",
                        required: true
                    },
                    phone: {
                        type: "var",
                        required: false
                    },
                    cardmodel: {
                        type: "var",
                        required: true
                    },
                    onSuccess: {
                        type: "var",
                        required: true
                    },
                    message: {
                        type: "var",
                        required: true
                    }
                },
                resolve: {
                    models: function models() {
                        return {
                            checkoutSession: _index2.$CheckoutSessionModel.instance(this.props.token).retrieve()
                        };
                    }
                },
                actions: {
                    addMessage: function addMessage(type, contentKey) {
                        if (contentKey) {
                            this.message({
                                msgKeys: [ _angular2["default"].isArray(contentKey) ? contentKey[0] : contentKey ],
                                type: type || "error"
                            });
                        }
                    },
                    stopConfirmCodeTimer: function stopConfirmCodeTimer() {
                        if (this.confirmCodeTimer) {
                            _angular.$interval.cancel(this.confirmCodeTimer);
                        }
                        this.countdown = 0;
                    },
                    stopResendCodeTimer: function stopResendCodeTimer() {
                        if (this.resendCodeTimer) {
                            _angular.$timeout.cancel(this.resendCodeTimer);
                        }
                        this.showResendLink = false;
                    },
                    updateCountdown: function updateCountdown() {
                        if (this.countdown > 0) {
                            this.countdown--;
                            this.timer = Math.floor(this.countdown / ONE_MINUTE_IN_SECS) + ":" + ("0" + this.countdown % ONE_MINUTE_IN_SECS).slice(-2);
                        } else {
                            if (!this.isConfirmProcessing) {
                                this.actions.addMessage("warning", "confirmUpop.codeExpired");
                            }
                            this.actions.stopConfirmCodeTimer();
                            this.actions.stopResendCodeTimer();
                        }
                    },
                    startCountdown: function startCountdown(resetTimer) {
                        var _this = this;
                        if (resetTimer) {
                            this.actions.stopConfirmCodeTimer();
                            this.countdown = VERIFICATION_CODE_COUNTDOWN_IN_SECS;
                            this.actions.updateCountdown();
                            this.confirmCodeTimer = (0, _angular.$interval)(this.actions.updateCountdown, 1e3);
                        }
                        this.actions.stopResendCodeTimer();
                        this.showResendLink = false;
                        this.resendCodeTimer = (0, _angular.$timeout)(function() {
                            _this.showResendLink = true;
                        }, RESEND_CODE_LINK_TIMEOUT_MILLI_SECS);
                        this.actions.addMessage("success", "confirmUpop.codeSent");
                    },
                    processed: function processed() {
                        if (!this.countdown && this.isConfirmProcessing) {
                            this.actions.addMessage("warning", "confirmUpop.codeExpired");
                        }
                        this.isProcessing = this.isConfirmProcessing = false;
                    },
                    handleContingencies: function handleContingencies() {
                        var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                        var prop = arguments[1];
                        var errorData = void 0;
                        if (result.errorCodes) {
                            errorData = result;
                        } else {
                            errorData = {
                                errorCodes: [ result["0"] || "ISSUER_DECLINE" ]
                            };
                        }
                        this.message(_util.$fiErrorUtil.addPageErrors(errorData, "confirmUpop", prop, "error"));
                        if (window.scrollTo) {
                            window.scrollTo(0, 0);
                        }
                    },
                    sendNewCode: function sendNewCode() {
                        if (this.cardmodel && this.cardmodel.card) {
                            this.cardmodel.card.otp_code = "";
                        }
                        this.actions.resendCode(true);
                    },
                    resendCode: function resendCode(resetTimer) {
                        var _this2 = this;
                        this.isProcessing = true;
                        this.resolveOTP.action("init", {
                            silent: true,
                            data: {
                                phone: {
                                    country_code: this.phone.IntDialingCountryCode,
                                    number: this.phone.telephone
                                }
                            },
                            resultModel: {},
                            success: function success() {
                                _this2.actions.startCountdown(resetTimer);
                            },
                            error: function error() {
                                _this2.actions.handleContingencies();
                            },
                            contingencies: {
                                INIT_OTP_CONTINGENCY: function INIT_OTP_CONTINGENCY(name, result) {
                                    var prop = {
                                        number: _this2.cardLast4
                                    };
                                    _this2.actions.handleContingencies(result, prop);
                                    _util.$fiErrorUtil.addFieldErrors(result, _this2.$element);
                                },
                                DEFAULT: function DEFAULT() {
                                    _this2.actions.handleContingencies();
                                }
                            }
                        })["finally"](this.actions.processed);
                    },
                    confirmOTP: function confirmOTP() {
                        var _this3 = this;
                        this.isProcessing = this.isConfirmProcessing = true;
                        this.resolveOTP.action("complete", {
                            silent: true,
                            data: {
                                code: this.cardmodel.card.otp_code,
                                phone: {
                                    country_code: this.phone.IntDialingCountryCode,
                                    number: this.phone.telephone
                                },
                                card_data: {
                                    expiration_time: {
                                        month: this.cardmodel.card.expiry_month,
                                        year: this.cardmodel.card.expiry_year
                                    },
                                    card_verification_code: this.cardmodel.card.security_code
                                }
                            },
                            success: this.onSuccess,
                            error: function error() {
                                _this3.actions.handleContingencies({}, "confirmUpop");
                                _this3.actions.processed();
                            },
                            contingencies: {
                                COMPLETE_OTP_CONTINGENCY: function COMPLETE_OTP_CONTINGENCY(name, result) {
                                    var prop = {
                                        number: _this3.cardLast4
                                    };
                                    _this3.actions.handleContingencies(result, prop);
                                    _util.$fiErrorUtil.addFieldErrors(result, _this3.$element);
                                    _this3.actions.processed();
                                }
                            }
                        })["catch"](function() {
                            _this3.actions.handleContingencies();
                            _this3.actions.processed();
                        });
                    }
                },
                lifecycle: {
                    enter: function enter() {
                        var _this4 = this;
                        this.resolveOTP = new _index.$ResolveOTP({
                            id: this.cardmodel.id
                        });
                        this.isProcessing = this.showResendLink = false;
                        this.cardLast4 = this.cardmodel.card.number.slice(-4);
                        this.phoneLast4 = this.phone && this.phone.telephone && this.phone.telephone.slice(-4);
                        this.actions.startCountdown(true);
                        this.$watch("isProcessing", function(isProcessing) {
                            if (isProcessing) {
                                _this4.$element.addClass("processing");
                            } else {
                                _this4.$element.removeClass("processing");
                            }
                        });
                        $("#upopConfirmation .modalContainer").focus();
                    }
                }
            });
            _angular.$interval;
            _angular.$timeout;
            _squid.$Component;
            _util.$fiErrorUtil;
            _index.$ResolveOTP;
            _index2.$CheckoutSessionModel;
            module.exports = exports["default"];
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-wallet-components/src/confirm-upop/confirm/template.html": function(module, exports) {
        module.exports = '<div class="confirmOtp" content>\n    <div class="confirmMsg" ng-bind-html="htmlContent(\'confirmUpop.verificationCodeMsg\', {phoneLastFour: phoneLast4})"></div>\n\n    <div class="timer">\n        <span class="left">{{content(\'confirmUpop.timeRemaining\')}}</span>\n        <span class="timeLeft">{{timer}} {{content(\'confirmUpop.minutes\')}}</span>\n        <a link-button class="resendLink right focusableIcon" href="" ng-if="showResendLink" ng-click="actions.resendCode(false)">{{content(\'confirmUpop.resendCode\')}}</a>\n    </div>\n\n    <form id="otpForm" name="otpForm" autocomplete="off" ng-submit="otpForm.$valid && actions.confirmOTP()" ng-class="{true: \'validated\'}[validated]" novalidate>\n\n        <div class="confirmFields" ng-show="countdown || isConfirmProcessing">\n            <div class="inputField confidential">\n                <input id="otp_code"\n                       class="otp_code"\n                       type="tel"\n                       ng-model="cardmodel.card.otp_code"\n                       name="otp_code"\n                       value=""\n                       placeholder="{{ content(\'confirmUpop.verificationCodeHint\') }}"\n                       autocapitalize="off"\n                       autocomplete="off"\n                       aria-required="false"\n                       required\n                       scroll-to-top\n                       data-error-text="{{ content(\'confirmUpop.fieldInvalidOTP\') }}"\n                       xo-error-tooltip/>\n\n            </div>\n            <xo-spinner-button track=\'confirm_otp_code\' token="token" validate="validated"\n                               is-processing="isProcessing" button-text="common.confirm"></xo-spinner-button>\n        </div>\n    </form>\n    <div class="sendNewOtp">\n        <xo-spinner-button ng-if="!countdown && !isConfirmProcessing" track=\'resend_otp_code\' token="token" on-click="actions.sendNewCode"\n                           is-processing="isProcessing" button-text="confirmUpop.btnResendCode"></xo-spinner-button>\n    </div>\n</div>\n';
    },
    "./components/xo-wallet-components/src/confirm-upop/styles.less": "./css/app.less",
    "./components/xo-wallet-components/src/confirm-upop/template.html": function(module, exports) {
        module.exports = '<section id="upopConfirmation">\n    <div class="upopConfirm">\n        <div class="modalMask"></div>\n        <div class="modalWrapper" modal-box modal-cancel="closeModal()" ng-class="{\'modalWrapperAnimation\': !fromLoginOverlay}">\n            <div class="modalContainer" content tabindex="-1">\n                <a link-button track-submit="{{collectOtpInput ? \'close_otp_init\' : \'close_otp_confirm\'}}" class="close focusableIcon" href="#" ng-click="closeModal($event)"></a>\n                <xo-message message="message"></xo-message>\n                <div class="heading" ng-bind-html="htmlContent(\'confirmUpop.heading\', {acctLastFour: cardLast4})"></div>\n\n                <xo-init-otp token="token" message="setMessage" phone="props.phone" cardmodel="cardmodel" on-success="initSuccess" flag="flag" ng-if="collectOtpInput"></xo-init-otp>\n                <xo-confirm-otp token="token" message="setMessage" phone="props.phone" cardmodel="cardmodel" on-success="confirmed" ng-if="!collectOtpInput"></xo-confirm-otp>\n                <div class="pushlogo"></div>\n            </div>\n            <div class="logo"></div>\n        </div>\n    </div>\n</section>\n';
    },
    "./pages/xo-select-fi/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoSelectFiComponent = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _choice = __webpack_require__("./components/xo-models/src/choice/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/fi/index.js");
        var _index3 = __webpack_require__("./components/xo-models/src/fiMeta/index.js");
        var _index4 = _interopRequireDefault(_index3);
        __webpack_require__("./js/lib/index.js");
        __webpack_require__("./components/xo-ui-components/src/message/directive.js");
        __webpack_require__("./components/xo-ui-components/src/banner/directive.js");
        __webpack_require__("./components/xo-title/dist/directive.js");
        __webpack_require__("./components/xo-models/src/fi/lib/fiMessages.js");
        __webpack_require__("./components/xo-models/src/fi/lib/fiApis.js");
        __webpack_require__("./components/xo-ui-components/src/fi-panel/directive.js");
        __webpack_require__("./components/xo-ui-components/src/experience/directive.js");
        __webpack_require__("./components/xo-device-info/dist/index.js");
        __webpack_require__("./components/xo-credit-components/src/offer/directive.js");
        __webpack_require__("./components/xo-credit-components/src/offer/xo-credit-example-uk/directive.js");
        __webpack_require__("./components/xo-member-components/src/review-paywith/directive.js");
        __webpack_require__("./components/xo-page-components/src/marketingOffers/directive.js");
        __webpack_require__("./components/xo-page-components/src/notYou/directive.js");
        var _template = __webpack_require__("./pages/xo-select-fi/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./pages/xo-select-fi/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoSelectFiComponent = exports.$xoSelectFiComponent = _squid.$Component.extend("$xoSelectFiComponent", {
            tag: "xo-select-fi",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: true
                }
            },
            resolve: {
                models: function models() {
                    _index4["default"].instance(this.props.token).fetch();
                    return {
                        checkoutSession: _index.$CheckoutSessionModel.instance(this.props.token).retrieve(),
                        cart: _index.$CheckoutCartModel.instance(this.props.token).retrieve(),
                        auth: _auth.$AuthModel.instance().retrieve(),
                        checkoutAppData: _index.$CheckoutAppDataModel.instance(this.props.token).retrieve(),
                        variant: _choice.$ChoiceEligibility.instance().getVariant(this.props.token)
                    };
                }
            },
            actions: {},
            lifecycle: {
                enter: function enter() {
                    this.propValueObj = {
                        propHeader: "memberReview.propHead",
                        propVal: "memberReview.propVal",
                        propImage: "https://www.paypalobjects.com/images/checkout/hermes/scr_vp_fprd_shield_bags.png"
                    };
                    this.isMessengerBAIntegration = _squid.$integration.getConfig("IS_MESSENGER_BA_INTEGRATION");
                    this.personalizedBanner = {
                        show: false
                    };
                    this.personalizedBanner = {
                        show: false
                    };
                },
                populate: function populate() {
                    var _this = this;
                    var _models = this.models, checkoutSession = _models.checkoutSession, cart = _models.cart;
                    var masterPlanList = checkoutSession.getPlanList();
                    this.isBillingNoPurchase = cart.isBillingNoPurchase();
                    this.isBilling = cart.isBilling();
                    this.personalizedBanner.show = this.models.auth.rememberedOT() && (0, _squid.$feature)("oneTouchPersonalization");
                    this.showNotYou = this.models.auth && this.models.auth.showNotYou();
                    this.formattedNameInformal = (0, _squid.formatNameInformal)({
                        first_name: this.models.auth.first_name,
                        last_name: this.models.auth.last_name
                    }) || this.models.auth.email;
                    var selectedmethod = this.selectedmethod = {
                        index: 0,
                        planId: 0
                    };
                    var serializedPlans = {};
                    var balanceCodes = {};
                    var primaryList = [];
                    var balanceList = this.balanceList = [];
                    var cardMap = {
                        BILL_ME_LATER: "BILL_ME_LATER",
                        PAD: "PAD",
                        PAYPAL_EXTRAS_MASTERCARD: "PAYPAL_EXTRAS_MASTERCARD"
                    };
                    var getSerializedPrimary = function getSerializedPrimary(primary) {
                        var serial = primary.id + primary.amount.currency_code.toLowerCase();
                        if (primary.subtype) {
                            serial += primary.subtype;
                        }
                        return serial;
                    };
                    var getSerializedPlanId = function getSerializedPlanId(plan, balances) {
                        var pid = getSerializedPrimary(plan.primaryFs);
                        if (!balances) {
                            return pid;
                        }
                        balances.sort();
                        return pid + balances.join();
                    };
                    if (masterPlanList) {
                        var showBalanceCurrencies = checkoutSession.isMultipleBalancePlan();
                        if (!showBalanceCurrencies) {
                            var knownCurrency = masterPlanList[0].primaryFs.amount.currency_code;
                            showBalanceCurrencies = masterPlanList.some(function(plan) {
                                return plan.primaryFs.amount.currency_code !== knownCurrency || plan.secondaryFIs && (plan.secondaryFIs.length > 1 || plan.secondaryFIs[0].amount.currency_code !== knownCurrency);
                            });
                        }
                        var primaryFsIds = {};
                        masterPlanList.forEach(function(plan) {
                            var balances = plan.secondaryFIs || [];
                            var balCurCodes = [];
                            balances.forEach(function(balance) {
                                var code = balance.amount.currency_code;
                                balCurCodes.push(code);
                                if (!balanceCodes.hasOwnProperty(code)) {
                                    var balInfoAndState = {
                                        code: code,
                                        checked: false,
                                        enabled: true,
                                        intent: false,
                                        fake: false
                                    };
                                    if (showBalanceCurrencies) {
                                        balInfoAndState.amount = balance.amount.amount_formatted_currency;
                                    } else {
                                        balInfoAndState.amount = balance.amount.amount_formatted;
                                    }
                                    balanceCodes[code] = balInfoAndState;
                                    balanceList.push(balInfoAndState);
                                }
                            });
                            if (plan.primaryFs.type === "BALANCE") {
                                plan.currencies = [ plan.primaryFs.amount.currency_code ].concat(balCurCodes).join(", ");
                            }
                            serializedPlans[getSerializedPlanId(plan, balCurCodes)] = plan;
                            var serialPrimary = getSerializedPrimary(plan.primaryFs);
                            if (!primaryFsIds.hasOwnProperty(serialPrimary)) {
                                primaryFsIds[serialPrimary] = 1;
                                primaryList.push(plan);
                            }
                        });
                        balanceList.sort(function(balA, balB) {
                            return balA.code < balB.code ? -1 : 1;
                        });
                        this.isMultipleBalance = showBalanceCurrencies;
                        this.primaryList = primaryList;
                    }
                    var getPlansByPrimaryId = function getPlansByPrimaryId(pid) {
                        var matchingPlans = {};
                        for (var key in serializedPlans) {
                            if (serializedPlans.hasOwnProperty(key) && !key.indexOf(pid)) {
                                matchingPlans[key] = serializedPlans[key];
                            }
                        }
                        return matchingPlans;
                    };
                    this.capUserIntent = function(code, state) {
                        var balance = balanceCodes[code];
                        if (balance.enabled) {
                            balance.intent = state;
                        }
                    };
                    this.updateBalances = function(index) {
                        var primary = primaryList[index].primaryFs;
                        var bankOrOther = primary.type === "BANK" ? "BANK" : "OTHER";
                        var primaryCodeAsBalance = primary.type === "BALANCE" && primary.amount.currency_code;
                        var pid = getSerializedPrimary(primary);
                        var matchingPlans = getPlansByPrimaryId(pid);
                        if (!balanceList.length) {
                            if (matchingPlans.hasOwnProperty(pid)) {
                                selectedmethod.planId = matchingPlans[pid].planId;
                            }
                            return;
                        }
                        var combinedSerials = Object.keys(matchingPlans).join();
                        var cardName = cardMap[primary.name] || bankOrOther;
                        var includeCodes = [];
                        var excludeCodes = [];
                        _squid.$util.forEach(balanceCodes, function(balState, code) {
                            var isFake = balState.fake = primaryCodeAsBalance === code;
                            if (isFake) {
                                includeCodes.push(code);
                            }
                            if (combinedSerials.indexOf(code) === -1) {
                                balState.checked = balState.enabled = false;
                                if (!isFake) {
                                    excludeCodes.push(code);
                                }
                            } else {
                                _this.installment = _this.installment || {};
                                _this.installment.isSplitBalance = true;
                                var requiresBalance = true;
                                for (var serial in matchingPlans) {
                                    if (matchingPlans.hasOwnProperty(serial) && serial.indexOf(code) === -1) {
                                        requiresBalance = false;
                                        break;
                                    }
                                }
                                if (requiresBalance) {
                                    balState.checked = true;
                                    balState.enabled = false;
                                    includeCodes.push(code);
                                } else {
                                    balState.enabled = true;
                                    balState.checked = balState.intent;
                                }
                            }
                        });
                        if (primary.type !== "BALANCE" && (includeCodes.length || excludeCodes.length)) {
                            var msgs = [];
                            var fiName = (0, _squid.$renderContent)("fsMappings." + primary.name).string || primary.name;
                            _logger.$logger.info("checkout_fpti", {
                                primary: primary.id || primary.type,
                                denied: excludeCodes.join(),
                                forced: includeCodes.join()
                            });
                            [ [ "yes", includeCodes ], [ "no", excludeCodes ] ].forEach(function(pair) {
                                var codes = pair[1];
                                var codesLn = codes.length;
                                if (codesLn) {
                                    var msgKey = "memberReview." + pair[0] + "Bal_" + cardName;
                                    var msgObj = {
                                        fi: fiName
                                    };
                                    if (codesLn > 1) {
                                        msgKey += "_plural";
                                        if (codesLn > 2) {
                                            msgObj.code1 = codes.slice(0, -1).join(", ");
                                            msgObj.code2 = codes[codes.length - 1];
                                        } else {
                                            msgObj.code1 = codes[0];
                                            msgObj.code2 = codes[1];
                                        }
                                    } else {
                                        msgObj.code1 = codes[0];
                                    }
                                    msgs.push((0, _squid.$renderContent)(msgKey, msgObj));
                                }
                            });
                            checkoutSession.message = {
                                msgs: msgs,
                                type: "info"
                            };
                        } else {
                            checkoutSession.message = "";
                        }
                    };
                    if (this.isBillingNoPurchase) {
                        selectedmethod.planId = checkoutSession.getSelectedStickyInstrument().instrument_id;
                    } else if (balanceList.length) {
                        if (masterPlanList[0].secondaryFIs) {
                            masterPlanList[0].secondaryFIs.forEach(function(bal) {
                                _this.capUserIntent(bal.amount.currency_code, true);
                            });
                        }
                        this.updateBalances(0);
                    } else {
                        var preferredPlanId = checkoutSession.plan.id;
                        var preferredPlanIndex = _squid.$util.findIndex(primaryList, function(plan) {
                            return plan.planId === preferredPlanId;
                        }) || 0;
                        selectedmethod.index = preferredPlanIndex;
                        selectedmethod.planId = primaryList[preferredPlanIndex].planId;
                    }
                    this.getBAPlans = function() {
                        return checkoutSession.futurePaymentInstruments;
                    };
                    var preferredFiVariants = _squid.$config.choiceExperiment && _squid.$config.choiceExperiment.preferredCheckbox || [];
                    this.preferredFiVariant = preferredFiVariants.indexOf(this.models.variant) > -1;
                    var updateFS = function updateFS() {
                        var planId = void 0;
                        if (_this.selectedmethod.index === "applyForPPCRadio") {
                            return _squid.$promise.resolve();
                        }
                        if (_this.isBillingNoPurchase) {
                            planId = selectedmethod.planId;
                        } else {
                            var index = selectedmethod.index;
                            var plan = primaryList[index];
                            var checkedBalances = [];
                            _squid.$util.forEach(balanceCodes, function(balance, code) {
                                if (balance.checked) {
                                    checkedBalances.push(code);
                                }
                            });
                            var fundingsource = serializedPlans[getSerializedPlanId(plan, checkedBalances)];
                            if (!fundingsource) {
                                var pid = getSerializedPrimary(plan.primaryFs);
                                var pidForLogger = plan.primaryFs.id || plan.primaryFs.type;
                                _logger.$logger.info("checkout_fpti", {
                                    primary: pidForLogger,
                                    denied: checkedBalances.join()
                                });
                                checkedBalances.some(function(code) {
                                    fundingsource = serializedPlans[pid + code];
                                    return fundingsource;
                                });
                                if (fundingsource) {
                                    _logger.$logger.info("checkout_fpti", {
                                        primary: pidForLogger,
                                        denied: checkedBalances.join()
                                    });
                                }
                                if (!fundingsource) {
                                    fundingsource = serializedPlans[pid];
                                    if (fundingsource) {
                                        _logger.$logger.info("checkout_fpti", {
                                            primary: pidForLogger,
                                            denied: checkedBalances.join()
                                        });
                                    }
                                }
                                if (!fundingsource) {
                                    var serializedPlanKeys = Object.keys(serializedPlans);
                                    fundingsource = serializedPlans[serializedPlanKeys[_squid.$util.findIndex(serializedPlanKeys, function(serial) {
                                        return serial.indexOf(pid) === 0;
                                    })]];
                                    _logger.$logger.info("checkout_fpti", {
                                        primary: pidForLogger,
                                        forced: balanceList.map(function(balance) {
                                            return balance.code;
                                        }).join()
                                    });
                                }
                            }
                            planId = fundingsource.planId;
                        }
                        if (_this.isBillingNoPurchase && checkoutSession.getSelectedStickyInstrument() && checkoutSession.getSelectedStickyInstrument().instrument_id !== planId) {
                            return checkoutSession.action("setStickyFI", {
                                data: {
                                    instrument_id: planId
                                },
                                success: function success(result) {
                                    checkoutSession.message = {
                                        type: "success",
                                        msgKeys: [ "paymentMethod.paymentMethodUpdated" ]
                                    };
                                    return result;
                                },
                                DEFAULT: function DEFAULT() {
                                    _uiRouter.$state.go("checkout.review");
                                }
                            });
                        } else if (!_this.isBillingNoPurchase && checkoutSession.get("plan.sources")[0].id !== planId) {
                            return checkoutSession.fundingOptions.action("select", {
                                data: {
                                    planId: planId
                                },
                                success: function success(result) {
                                    checkoutSession.populate(result);
                                    return result;
                                },
                                contingencies: {
                                    NEED_AUTHENTICATED_CARD: function NEED_AUTHENTICATED_CARD(name, result) {
                                        if (result && result.resolution) {
                                            var card = result.resolution.data;
                                            if (card.fundingId && card.fi && card.fi.type) {
                                                _this.cardModel = new _index2.$AddCardModel();
                                                _this.cardModel.id = card.fundingId;
                                                _this.cardModel.card = new _index2.$CardModel({
                                                    number: "xxxx-xxxx-xxxx-" + card.fi.number,
                                                    type: card.fi.type.toUpperCase(),
                                                    productType: card.fi.productType
                                                });
                                            }
                                        }
                                        return _squid.$promise.reject(_uiRouter.$state.go(".confirmUpop"));
                                    },
                                    DEFAULT: function DEFAULT() {
                                        _uiRouter.$state.go("checkout.review");
                                    }
                                }
                            });
                        } else {
                            return _squid.$promise.resolve();
                        }
                    };
                    this["continue"] = function(evt) {
                        return updateFS().then(function(result) {
                            checkoutSession.message = "";
                            if (result) {
                                _this.models.checkoutSession.installments = result.installments;
                            }
                            if ((_this.models.checkoutSession.get("plan.paypal_credit") || _this.selectedmethod.index === "applyForPPCRadio") && _this.models.checkoutSession.creditOffer) {
                                var token = _this.props.token;
                                var installments = _index.$InstallmentOptionsModel.instance(token);
                                var data = {
                                    isMemberCredit: true
                                };
                                return (0, _squid.$populate)(data, {
                                    payee: _index.$CheckoutPayeeModel.instance(token),
                                    checkoutCart: _index.$CheckoutCartModel.instance(token),
                                    checkoutAppData: _this.models.checkoutAppData
                                }).then(function() {
                                    return installments.save({
                                        cache: true,
                                        data: data,
                                        success: function success(installmentResult) {
                                            var offers = installmentResult.installments && installmentResult.installments[0];
                                            var hasInstallments = offers && offers.installment_options && offers.installment_options.length;
                                            return hasInstallments;
                                        },
                                        contingencies: {
                                            DEFAULT: function DEFAULT() {
                                                return false;
                                            }
                                        },
                                        error: function error() {
                                            return false;
                                        }
                                    });
                                }).then(function(hasInstallments) {
                                    if (hasInstallments) {
                                        return _uiRouter.$state.go("checkout.chooseCreditOffer");
                                    } else if (_this.selectedmethod.index === "applyForPPCRadio") {
                                        return _uiRouter.$state.go("checkout.redirectToCape", {}, {
                                            location: false
                                        });
                                    } else {
                                        return _uiRouter.$state.go("checkout.review");
                                    }
                                });
                            } else {
                                return _uiRouter.$state.go("checkout.review");
                            }
                        });
                    };
                }
            },
            controller: function controller($scope, $rootScope) {
                $rootScope.showFiSelectPage = true;
                $scope.installment = $scope.installment || {};
                $scope.installment.showBanner = false;
                $scope.installment.showCYCO = false;
                $scope.installment.showCreditExample = false;
                $scope.showPPCAcquisitionRadioButton = function() {
                    return $scope.installment && $scope.installment.showPPCAcquisitionRadioButton;
                };
                $scope.continueButtonText = function() {
                    if (this.selectedmethod && this.selectedmethod.index === "applyForPPCRadio") {
                        return _squid.$locale.content.get("applyForBml.bmlApplyHeadline");
                    } else {
                        return _squid.$locale.content.get("common.continuetext");
                    }
                };
                $scope.showCreditPlacement = function(plan) {
                    return plan && !plan.primaryFs.isPinlessDebit && plan.primaryFs.name === "BILL_ME_LATER";
                };
            }
        });
        angular.value("$xoSelectFiComponent", $xoSelectFiComponent);
        _squid.$Component;
        _squid.$renderContent;
        _squid.$populate;
        _squid.$config;
        _squid.$feature;
        _squid.$integration;
        _squid.formatNameInformal;
        _squid.$util;
        _squid.$locale;
        _squid.$promise;
        _uiRouter.$state;
        _logger.$logger;
        _auth.$AuthModel;
        _index.$CheckoutSessionModel;
        _index.$InstallmentOptionsModel;
        _index.$CheckoutPayeeModel;
        _index.$CheckoutCartModel;
        _index.$CheckoutAppDataModel;
        _choice.$ChoiceEligibility;
        _index2.$AddCardModel;
        _index2.$CardModel;
    },
    "./components/xo-models/src/choice/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$ChoiceEligibility = undefined;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
        var checkPPCInstallments = function checkPPCInstallments(token, _ref) {
            var checkoutSessionModel = _ref.checkoutSessionModel, checkoutPayeeModel = _ref.checkoutPayeeModel, checkoutCartModel = _ref.checkoutCartModel, checkoutAppDataModel = _ref.checkoutAppDataModel;
            if (checkoutSessionModel.fundingOptions.hasCredit() && checkoutSessionModel.creditOffer && (0, 
            _squid.$feature)("creditInstallmentOffers")) {
                var installmentOptions = _checkout.$InstallmentOptionsModel.instance(token);
                return installmentOptions.save({
                    cache: true,
                    data: {
                        payee: checkoutPayeeModel,
                        checkoutCart: checkoutCartModel,
                        checkoutAppData: checkoutAppDataModel,
                        isMemberCredit: true
                    },
                    success: function success(result) {
                        var offers = result.installments && result.installments[0];
                        var hasInstallments = offers && offers.installment_options && offers.installment_options.length;
                        return hasInstallments;
                    },
                    contingencies: {
                        DEFAULT: function DEFAULT(message) {
                            _logger.$logger.info("installments_contingency", {
                                message: message
                            });
                            return false;
                        }
                    },
                    error: function error(err) {
                        _logger.$logger.info("installments_error", err);
                        return false;
                    }
                });
            } else {
                return _squid.$promise.resolve(false);
            }
        };
        var decideEligibility = function decideEligibility(token, _ref2) {
            var authModel = _ref2.authModel, checkoutCartModel = _ref2.checkoutCartModel, checkoutSessionModel = _ref2.checkoutSessionModel, checkoutAppDataModel = _ref2.checkoutAppDataModel, checkoutPayeeModel = _ref2.checkoutPayeeModel;
            var plan = checkoutSessionModel.plan, fundingOptions = checkoutSessionModel.fundingOptions;
            var plans = checkoutSessionModel.get("fundingOptions.plans");
            var splitBalance = plans && plans.some(function(option) {
                return option.primaryFs && option.secondaryFIs;
            });
            var MSB = plan.hasFundingMethodType("INCENTIVE");
            var billing = checkoutCartModel.isBilling();
            var PAD = plans && plans.some(function(option) {
                return option.primaryFs && option.primaryFs.subtype === "PAD";
            });
            var secondButton = checkoutAppDataModel.is_second_button_txn;
            var hasMerchantCountryChoice = (0, _squid.$feature)("choiceExperiment", false, checkoutAppDataModel.merchant.merchant_country);
            var fullBalance = plans && plans.some(function(option) {
                return option.primaryFs && option.primaryFs.type === "BALANCE";
            });
            var hasPreferred = fundingOptions.getPreferred();
            var isNotMerchantAccount = authModel.account_type !== 2;
            var isNotAndroidPay = !checkoutCartModel.isWalletTokenization();
            var isNotFbBaFlow = !_squid.$integration.getConfig("IS_MESSENGER_BA_INTEGRATION");
            var isThirdPartyWalletTransaction = _thirdPartyInfo.thirdPartyExperience.isThirdPartyExperience(token);
            var isNotGambling = !checkoutPayeeModel.isGambling();
            var involvedCurrencies = {};
            if (checkoutCartModel.get("purchase.amounts.total.currency_code") && plans) {
                involvedCurrencies[checkoutCartModel.purchase.amounts.total.currency_code] = 1;
                plans.forEach(function(option) {
                    involvedCurrencies[option.primaryFs.amount.currency_code] = 1;
                });
            }
            var singleCurrency = Object.keys(involvedCurrencies).length <= 1;
            var choiceVariantsName = "xo_hermes_choice_variant(?:_preferred_newusers)?_treatment_?(.*)";
            return (0, _squid.$pxp)("xo_hermes_choice_variant", {}, choiceVariantsName, true).then(function(choiceVariant) {
                var _$config$choiceExperi = _squid.$config.choiceExperiment;
                _$config$choiceExperi = _$config$choiceExperi === undefined ? {} : _$config$choiceExperi;
                var _$config$choiceExperi2 = _$config$choiceExperi.ignored;
                _$config$choiceExperi2 = _$config$choiceExperi2 === undefined ? {} : _$config$choiceExperi2;
                var _$config$choiceExperi3 = _$config$choiceExperi2.multipleFi, multipleFiIgnored = _$config$choiceExperi3 === undefined ? [] : _$config$choiceExperi3, _$config$choiceExperi4 = _$config$choiceExperi2.selectFi, selectFiIgnored = _$config$choiceExperi4 === undefined ? [] : _$config$choiceExperi4;
                var eligibilityCriteria = {
                    pxpVariant: choiceVariant,
                    noMSB: !MSB,
                    noBilling: !billing,
                    noSplitBalance: !splitBalance,
                    balanceWithPreferred: !(fullBalance && !hasPreferred),
                    noPAD: !PAD,
                    noSecondButton: !secondButton,
                    hasMerchantCountryChoice: hasMerchantCountryChoice,
                    singleCurrency: singleCurrency,
                    noMerchant: isNotMerchantAccount,
                    noAndroidPay: isNotAndroidPay,
                    isNotFbBaFlow: isNotFbBaFlow,
                    noThirdPartyWalletTransactions: !isThirdPartyWalletTransaction,
                    isNotGambling: isNotGambling
                };
                var choiceIneligibleReasons = Object.keys(eligibilityCriteria).filter(function(key) {
                    return selectFiIgnored.indexOf(key) === -1 && !eligibilityCriteria[key];
                });
                var transactionEligible = choiceIneligibleReasons.length === 0;
                if (!transactionEligible) {
                    _logger.$logger.info("choice_experiment_ineligible", {
                        failed: choiceIneligibleReasons.join()
                    });
                    _logger.$logger.info("checkout_fpti", {
                        from: "CHOICE_ELG_CHK",
                        to: "process_choice_elg_chk",
                        eligibility_reason: "pxp_control-" + choiceIneligibleReasons.join()
                    });
                    return "control";
                }
                return checkPPCInstallments(token, {
                    checkoutCartModel: checkoutCartModel,
                    checkoutSessionModel: checkoutSessionModel,
                    checkoutAppDataModel: checkoutAppDataModel,
                    checkoutPayeeModel: checkoutPayeeModel
                }).then(function(hasPPCInstallments) {
                    var multipleFiEligibility = (0, _angular.extend)({
                        creditInstallments: !hasPPCInstallments
                    }, eligibilityCriteria);
                    var multipleFiIneligibleReasons = Object.keys(multipleFiEligibility).filter(function(criteria) {
                        return multipleFiIgnored.indexOf(criteria) === -1 && !multipleFiEligibility[criteria];
                    }).join();
                    var multipleFiEligible = multipleFiIneligibleReasons.length === 0;
                    if (!multipleFiEligible) {
                        _logger.$logger.info("choice_experiment_var5_ineligible", {
                            failed: multipleFiIneligibleReasons
                        });
                        _logger.$logger.info("checkout_fpti", {
                            from: "CHOICE_ELG_CHK",
                            to: "process_choice_elg_chk",
                            eligibility_reason: "pxp_6-" + multipleFiIneligibleReasons
                        });
                        return "6";
                    }
                    _logger.$logger.info("choice_experiment_eligible", {
                        variant: "5"
                    });
                    _logger.$logger.info("checkout_fpti", {
                        from: "CHOICE_ELG_CHK",
                        to: "process_choice_elg_chk",
                        eligibility_reason: "pxp_treatment"
                    });
                    return "5";
                });
            });
        };
        var promiseControl = _squid.$promise.resolve("control");
        var $ChoiceEligibility = exports.$ChoiceEligibility = _squid.$Model.extend("$ChoiceEligibility", {
            getVariant: function getVariant(token) {
                var _this = this;
                if (!(0, _squid.$feature)("choiceExperiment")) {
                    return promiseControl;
                }
                var models = {};
                return (0, _squid.$populate)(models, {
                    authModel: _auth.$AuthModel.instance(),
                    checkoutCartModel: _checkout.$CheckoutCartModel.instance(token),
                    checkoutPayeeModel: _checkout.$CheckoutPayeeModel.instance(token),
                    checkoutSessionModel: _checkout.$CheckoutSessionModel.instance(token),
                    checkoutAppDataModel: _checkout.$CheckoutAppDataModel.instance(token)
                }).then(function() {
                    if (_this.variant && models.authModel.buyer_id === _this.buyerId) {
                        return _this.variant;
                    }
                    _this.variant = decideEligibility(token, models);
                    _this.buyerId = models.authModel.buyer_id;
                    return _this.variant;
                });
            }
        });
        _angular.extend;
        _squid.$Model;
        _squid.$pxp;
        _squid.$promise;
        _squid.$populate;
        _squid.$config;
        _squid.$feature;
        _squid.$integration;
        _logger.$logger;
        _auth.$AuthModel;
        _checkout.$CheckoutCartModel;
        _checkout.$CheckoutPayeeModel;
        _checkout.$CheckoutSessionModel;
        _checkout.$CheckoutAppDataModel;
        _checkout.$InstallmentOptionsModel;
        _thirdPartyInfo.thirdPartyExperience;
    },
    "./components/xo-models/src/fiMeta/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _cardart = __webpack_require__("./components/xo-models/src/cardart/index.js");
        var _dist = __webpack_require__("./components/squid/dist/index.js");
        var PADSUBTYPE = "DELAYED_TRANSFER";
        var MEFTSUBTYPE = "MEFT";
        var IACHSUBTYPE = "IACH";
        var ECHECKSUBTYPE = "ECHECK";
        var NAME_MAPPINGS = {
            MERCHANT_SPECIFIC_BALANCE: "INCENTIVE"
        };
        var allFis = function allFis(plan) {
            return plan.secondaryFIs ? [ plan.primaryFs ].concat(plan.secondaryFIs) : [ plan.primaryFs ];
        };
        var isSubType = function isSubType(subtype) {
            return function(fi) {
                return fi.subtype === subtype || fi.sub_type === subtype;
            };
        };
        exports["default"] = _squid.$Model.extend("$FiMetaModel", {
            invalidateOnLogout: true,
            onInvalidate: function onInvalidate() {
                if (this.resolver) {
                    delete this.resolver;
                }
            },
            fetch: function fetch() {
                var _this = this;
                if (this.resolver) {
                    return this.resolver.then(function() {
                        return _this;
                    });
                }
                if (_squid.$config.disableCardArt) {
                    return _squid.$promise.resolve(this);
                } else {
                    this.resolver = _squid.$promise.all({
                        session: _checkout.$CheckoutSessionModel.instance(this.id).retrieve(),
                        wallet: _cardart.$CardArtModel.instance(this.id).retrieve()
                    }).then(function(r) {
                        return _squid.$util.extend(_this, r);
                    });
                    return this.resolver;
                }
            },
            cardArtEnabled: function cardArtEnabled() {
                return this.wallet && this.wallet.cardArtEnabled;
            },
            getCardArt: function getCardArt(fi) {
                return this.wallet && this.cardArtEnabled() && this.wallet.getCardArt(fi);
            },
            plans: function plans() {
                return this.session.fundingOptions.plans;
            },
            hasPadPlan: function hasPadPlan() {
                return this.plans().map(allFis).some(function(fis) {
                    return fis.some(isSubType(PADSUBTYPE));
                });
            },
            type: function type(fi) {
                if (fi.type === "CREDIT" || fi.type === "BILL_ME_LATER") {
                    return "CREDIT";
                } else {
                    return fi.type;
                }
            },
            getName: function getName(fi) {
                if (fi.isPinlessDebit || fi.is_pinless_debit) {
                    return (0, _dist.$renderContent)("fsMappings.PINLESSDEBIT");
                }
                var name = NAME_MAPPINGS[fi.name] || fi.name;
                return this.wallet && this.wallet.getCustomName(fi) || (0, _dist.$renderContent)("fsMappings." + name).toString() || name;
            },
            getAmount: function getAmount(fi) {
                return fi.amount;
            },
            getCurrencyCode: function getCurrencyCode(fi) {
                return fi.amount.currency_code;
            },
            getAllCurrencyCodes: function getAllCurrencyCodes(plan) {
                return allFis(plan).map(this.getCurrencyCode);
            },
            getCardMask: function getCardMask(fi) {
                return this.wallet && this.wallet.getCardMask(fi);
            },
            isPinlessDebit: function isPinlessDebit(fi) {
                return fi.is_pinless_debit || fi.isPinlessDebit;
            },
            isPad: function isPad(fi) {
                return isSubType(PADSUBTYPE)(fi) || isSubType("PAD")(fi);
            },
            isMeft: function isMeft(fi) {
                return isSubType(MEFTSUBTYPE)(fi);
            },
            isIach: function isIach(fi) {
                return isSubType(IACHSUBTYPE)(fi);
            },
            isEcheck: function isEcheck(fi) {
                return isSubType(ECHECKSUBTYPE)(fi);
            }
        });
        _squid.$Model;
        _squid.$promise;
        _squid.$util;
        _squid.$config;
        _checkout.$CheckoutSessionModel;
        _cardart.$CardArtModel;
        _dist.$renderContent;
        module.exports = exports["default"];
    },
    "./components/xo-models/src/cardart/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$CardArtModel = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var imageSizeId = "0";
        var normalize = function normalize(instId) {
            return instId && instId.replace(/-/g, "");
        };
        var imageTypes = [ "png", "jpg", "gif", "bmp" ];
        var imageType = function imageType(mimeType) {
            return _squid.$util.find(imageTypes, function(t) {
                return mimeType.indexOf(t) !== -1;
            }) || "png";
        };
        function capFirst(string) {
            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
        }
        var $CardArtModel = exports.$CardArtModel = _squid.$Model.extend("$CardArtModel", {
            invalidateOnLogout: true,
            api: new _squid.$Api({
                uri: "/api/fi/wallet/wallet"
            }),
            getId: function getId(fs) {
                return normalize(fs.instrument_id || fs.id);
            },
            getCardMask: function getCardMask(fs) {
                var rep = this.getWalletRepresentation(fs);
                if (!rep) {
                    return {
                        mask: true
                    };
                }
                var selector = rep.type === "card" ? "product_class" : "type";
                var renderedType = void 0;
                if (rep.fs[selector] === "UNKNOWN" || !rep.fs[selector]) {
                    renderedType = "";
                } else {
                    renderedType = capFirst(rep.fs[selector]) + " ";
                }
                return {
                    before: renderedType,
                    mask: true,
                    after: rep.fs.last_nchars || rep.fs.last_nchars_card_number || ""
                };
            },
            getWalletRepresentation: function getWalletRepresentation(fs) {
                if (fs.type === "BALANCE") {
                    var currency = fs.amount.currency_code;
                    var bal = _squid.$util.find(this.balance_accounts, function(b) {
                        return b.currency_code === currency;
                    });
                    return bal ? {
                        type: "balance",
                        fs: bal
                    } : null;
                }
                var id = this.getId(fs);
                if (!id) {
                    return null;
                }
                var card = _squid.$util.find(this.card_accounts, function(c) {
                    return normalize(c.id) === id;
                });
                if (card) {
                    return {
                        type: "card",
                        fs: card
                    };
                }
                var bank = _squid.$util.find(this.bank_accounts, function(b) {
                    return normalize(b.id) === id;
                });
                if (bank) {
                    return {
                        type: "bank",
                        fs: bank
                    };
                } else {
                    return null;
                }
            },
            getCustomName: function getCustomName(fs) {
                var rep = this.getWalletRepresentation(fs);
                if (!rep) {
                    return false;
                }
                return rep.type === "card" && rep.fs.issuer && rep.fs.issuer.issuer_product_description;
            },
            getCardArt: function getCardArt(fs) {
                try {
                    var cardId = this.getId(fs);
                    var card = _squid.$util.find(this.card_accounts, function(c) {
                        return normalize(c.id) === cardId;
                    });
                    var primary_content = card.card_art_details.card_art.primary_content;
                    var base = primary_content.base_cdn_link_path || primary_content.base_cdnlink_path;
                    var path = base + imageSizeId + "." + imageType(primary_content.original_mime_type);
                    return path;
                } catch (e) {
                    return null;
                }
            }
        });
        angular.value("$CardArtModel", $CardArtModel);
        _squid.$Model;
        _squid.$Api;
        _squid.$util;
    },
    "./components/xo-ui-components/src/banner/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _index = __webpack_require__("./components/xo-models/src/user/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _template = __webpack_require__("./components/xo-ui-components/src/banner/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-ui-components/src/banner/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoBanner", {
            tag: "xo-banner",
            template: _template2["default"],
            transclude: true,
            props: {
                isNmj: {
                    type: "var",
                    required: false
                }
            },
            resolve: {
                models: function models() {
                    return {
                        auth: _auth.$AuthModel.instance().retrieve()
                    };
                },
                userPhoto: function userPhoto(resolvers) {
                    return resolvers.models.then(function(models) {
                        return {
                            photoData: _index.$UserPhotoModel.instance(models.auth.buyer_id).retrieve({
                                params: {
                                    min_size: 45
                                }
                            })
                        };
                    });
                }
            },
            lifecycle: {
                populate: function populate() {
                    var avatarElement = this.$element.find("#banner-picture");
                    var auth = this.models.auth;
                    var photoData = this.userPhoto.photoData;
                    var showInitials = auth.first_name && auth.last_name && this.props.isNmj;
                    if (avatarElement && auth.buyer_id) {
                        if (photoData && photoData.photo_url) {
                            avatarElement.css("background-image", 'url("' + photoData.photo_url + '")');
                            _logger.$logger.info("xoBanner_user");
                        }
                        if (!photoData.photo_url && showInitials) {
                            avatarElement.addClass("initials");
                            this.initials = "" + auth.first_name[0] + auth.last_name[0];
                            _logger.$logger.info("xoBanner_initials");
                        }
                    } else {
                        _logger.$logger.info("xoBanner_default");
                    }
                }
            }
        });
        _squid.$Component;
        _auth.$AuthModel;
        _index.$UserPhotoModel;
        _logger.$logger;
        module.exports = exports["default"];
    },
    "./components/xo-ui-components/src/banner/template.html": function(module, exports) {
        module.exports = '<div id="banner-wrapper">\n    <div id="banner-picture">{{ initials }}</div>\n    <div id="banner-content" ng-transclude></div>\n</div>';
    },
    "./components/xo-ui-components/src/banner/styles.less": "./css/app.less",
    "./components/xo-models/src/fi/lib/fiMessages.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-beaver/dist/logger.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("fi.messages", [ "squid" ]).factory("$fiMessages", function($renderContent, $logger) {
                    function getContentKeys(hasFi) {
                        if (hasFi) {
                            return {
                                member: "payment.processorDeclineMember",
                                generic: "payment.processorDeclineMemberGeneric",
                                buyerCredit: "payment.processorDeclineMemberBuyerCredit"
                            };
                        } else {
                            return {
                                member: "payment.processorDeclineMemberNoFI",
                                generic: "payment.processorDeclineMemberNoFIGeneric",
                                buyerCredit: "payment.processorDeclineMemberBuyerCreditNoFI"
                            };
                        }
                    }
                    function processorDeclinedMsg(checkoutSession, hasFi) {
                        var declinedInstruments = checkoutSession.get("declinedInstruments");
                        if (angular.isArray(declinedInstruments) && declinedInstruments.length) {
                            var msg;
                            var type = "warning";
                            var instrument = declinedInstruments[0];
                            var contentKeys = getContentKeys(hasFi);
                            if (instrument.type === "PAYMENT_CARD") {
                                if (instrument.card_type && instrument.last4) {
                                    $logger.info("processor_decline", {
                                        hasFi: hasFi,
                                        message: "member"
                                    });
                                    msg = $renderContent(contentKeys.member, {
                                        type: instrument.card_type,
                                        number: instrument.last4
                                    });
                                } else {
                                    $logger.info("processor_decline", {
                                        hasFi: hasFi,
                                        message: "generic"
                                    });
                                    msg = $renderContent(contentKeys.generic);
                                }
                            } else {
                                $logger.info("processor_decline", {
                                    hasFi: hasFi,
                                    message: "buyerCredit"
                                });
                                msg = $renderContent(contentKeys.buyerCredit);
                            }
                            checkoutSession.set("declinedInstruments", null);
                            return {
                                type: type,
                                msg: msg
                            };
                        }
                    }
                    function getAddCardControlMsg(checkoutSession) {
                        var disallowedInstruments = checkoutSession.get("fundingOptions").get("disallowedInstruments");
                        if (disallowedInstruments && disallowedInstruments.length === 1) {
                            $logger.info("checkout_fpti", {
                                int_error_description: "single_disallowed_FI_addcard_control_msg"
                            });
                        } else if (disallowedInstruments && disallowedInstruments.length > 1) {
                            $logger.info("checkout_fpti", {
                                int_error_description: "multi_disallowed_FI_addcard_control_msg"
                            });
                        } else {
                            $logger.info("checkout_fpti", {
                                int_error_description: "has_no_disallowed_FI_addcard_control_msg"
                            });
                        }
                        return {
                            msg: $renderContent("creditcard.noFIContingency"),
                            type: "info"
                        };
                    }
                    function getAddCardTreatmentMsg(checkoutSession) {
                        var msg;
                        var type;
                        var title;
                        var cardList;
                        var lastCard;
                        var disallowedInstruments = checkoutSession.get("fundingOptions").get("disallowedInstruments");
                        if (disallowedInstruments && disallowedInstruments.length === 1) {
                            cardList = disallowedInstruments[0].lastDigits ? disallowedInstruments[0].name + "-" + disallowedInstruments[0].lastDigits : disallowedInstruments[0].name;
                            $logger.info("checkout_fpti", {
                                int_error_description: "single_disallowed_FI_addcard_msg"
                            });
                            msg = $renderContent("creditcard.hasSingleDisallowedFi", {
                                cardList: cardList
                            });
                            type = "normal";
                            title = $renderContent("creditcard.hasDisallowedAddCardTitle");
                        } else if (disallowedInstruments && disallowedInstruments.length > 1) {
                            cardList = "";
                            for (var i = 0; i < disallowedInstruments.length; i++) {
                                if (i === disallowedInstruments.length - 1) {
                                    lastCard = disallowedInstruments[i].lastDigits ? disallowedInstruments[i].name + "-" + disallowedInstruments[i].lastDigits : disallowedInstruments[i].name;
                                } else if (i === disallowedInstruments.length - 2) {
                                    cardList += disallowedInstruments[i].lastDigits ? disallowedInstruments[i].name + "-" + disallowedInstruments[i].lastDigits : disallowedInstruments[i].name;
                                } else {
                                    cardList += disallowedInstruments[i].lastDigits ? disallowedInstruments[i].name + "-" + disallowedInstruments[i].lastDigits + ", " : disallowedInstruments[i].name + ", ";
                                }
                            }
                            $logger.info("checkout_fpti", {
                                int_error_description: "multi_disallowed_FI_addcard_msg"
                            });
                            msg = $renderContent("creditcard.hasMultipleDisallowedFi", {
                                cardList: cardList,
                                lastCard: lastCard
                            });
                            type = "normal";
                            title = $renderContent("creditcard.hasDisallowedAddCardTitle");
                        } else {
                            $logger.info("checkout_fpti", {
                                int_error_description: "has_no_FI_addcard_msg"
                            });
                            msg = $renderContent("creditcard.hasNoDisallowedFi");
                            type = "normal";
                            title = $renderContent("creditcard.noDisallowedAddCardTitle");
                        }
                        return {
                            msg: msg,
                            type: type,
                            title: title
                        };
                    }
                    function getGamblingMsg() {
                        return {
                            type: "error",
                            msg: $renderContent("creditcard.noEligibleFI")
                        };
                    }
                    return {
                        processorDeclinedMsg: processorDeclinedMsg,
                        getGamblingMsg: getGamblingMsg,
                        getAddCardTreatmentMsg: getAddCardTreatmentMsg,
                        getAddCardControlMsg: getAddCardControlMsg
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/fi/lib", "components/xo-models/src/fi/lib/fiMessages.js");
    },
    "./components/xo-models/src/fi/lib/fiApis.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("fi.apis", [ "squid" ]).factory("$fiApis", function($q) {
                    return {
                        patchCvv: function patchCvv(checkoutSession) {
                            var cvvData = checkoutSession.get("cvvData");
                            if (cvvData) {
                                return checkoutSession.action("patchCvv", {
                                    data: {
                                        id: cvvData.id,
                                        cvv: cvvData.security_code,
                                        type: cvvData.type,
                                        number: cvvData.number
                                    }
                                });
                            }
                            return $q.when();
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/fi/lib", "components/xo-models/src/fi/lib/fiApis.js");
    },
    "./components/xo-ui-components/src/fi-panel/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _dist = __webpack_require__("./components/squid/dist/index.js");
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _fiMeta = __webpack_require__("./components/xo-models/src/fiMeta/index.js");
        var _fiMeta2 = _interopRequireDefault(_fiMeta);
        var _template = __webpack_require__("./components/xo-ui-components/src/fi-panel/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-ui-components/src/fi-panel/styles.less");
        __webpack_require__("./components/xo-ui-components/src/cardicon/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var PROPS = {
            fi: {
                required: true,
                type: "var"
            },
            plan: {
                required: false,
                type: "var"
            },
            nameOverride: {
                required: false,
                type: "var"
            },
            ignorePad: {
                required: false,
                type: "var"
            },
            sparse: {
                required: false,
                type: "var"
            },
            showAmount: {
                required: false,
                type: "var"
            },
            showCurrencyCode: {
                required: false,
                type: "var"
            },
            showAllCurrencyCodes: {
                required: false,
                type: "var"
            },
            noNoNoSacEligible: {
                required: false,
                type: "var"
            }
        };
        exports["default"] = _squid.$Component.extend("xoFiPanel", {
            tag: "xo-fi-panel",
            template: _template2["default"],
            transclude: true,
            props: PROPS,
            resolve: {
                models: function models() {
                    return {
                        fiMeta: _fiMeta2["default"].instance(_angular.$rootScope.token).fetch()
                    };
                }
            },
            lifecycle: {
                populate: function populate() {
                    var _this = this;
                    render.call(this);
                    this.$watchGroup(Object.keys(PROPS).map(function(p) {
                        return "props." + p;
                    }), function() {
                        return render.call(_this);
                    });
                }
            }
        });
        function render() {
            var _props = this.props, fi = _props.fi, plan = _props.plan, sparse = _props.sparse, showAmount = _props.showAmount, showCurrencyCode = _props.showCurrencyCode, showAllCurrencyCodes = _props.showAllCurrencyCodes, nameOverride = _props.nameOverride, ignorePad = _props.ignorePad;
            var fiMeta = this.models.fiMeta;
            var type = !fi ? "BALANCE" : fiMeta.type(fi);
            this.name = nameOverride || fiMeta.getName(fi);
            if (showAmount) {
                this.amount = fiMeta.getAmount(fi);
            } else if (showAllCurrencyCodes) {
                this.currencyCodes = fiMeta.getAllCurrencyCodes(plan).join(", ");
            } else if (showCurrencyCode) {
                this.currencyCodes = fiMeta.getCurrencyCode(fi);
            }
            var sld = this.secondLineData = {};
            if (type === "CREDIT") {
                if (this.props.noNoNoSacEligible) {
                    this.secondLineType = "credit";
                    sld.sacEligible = this.props.noNoNoSacEligible;
                }
            } else if (!nameOverride && fiMeta.isPad(fi) && !ignorePad) {
                this.secondLineType = "pad";
                var mask = fiMeta.getCardMask(fi);
                Object.assign(sld, mask);
            } else if (fi) {
                var _mask = fiMeta.getCardMask(fi);
                if (_mask.before || _mask.after) {
                    this.secondLineType = "mask";
                    Object.assign(sld, _mask);
                    if (!sparse) {
                        if (_dist.$locale.country === "DE" && fiMeta.isMeft(fi)) {
                            sld.meft = true;
                        } else if (_dist.$locale.country === "DE" && (fiMeta.isIach(fi) || ignorePad)) {
                            sld.iach = true;
                        } else if (fiMeta.isEcheck(fi)) {
                            sld.echeck = true;
                        }
                    }
                }
            }
        }
        _squid.$Component;
        _dist.$locale;
        _angular.$rootScope;
        module.exports = exports["default"];
    },
    "./components/xo-ui-components/src/fi-panel/template.html": function(module, exports) {
        module.exports = '<div angular class="fsPanel" content ng-class="[fi.type]">\n    <div class="fsdetails fsPanelLeft">\n        <xo-fi-icon fi="fi" class-name="fsIcon"></xo-fi-icon>\n    </div>\n    <div class="fsPanelRight">\n        <div ng-class="{doubleheight: !secondLineType}">\n            <span ng-if="secondLineType === \'pad\'" class="fsPanelName">{{content(\'fundingInstruments.pad\')}}</span>\n            <span ng-if="secondLineType !== \'pad\'" class="fsPanelName" ng-bind-html="name"></span>&rlm; <span ng-if="currencyCodes">({{currencyCodes}})</span>\n            <span ng-if="amount" class="methodAmount">\n                <span class="amountFormatted">\n                    <format-currency\n                    code="amount.currency_code"\n                    amount="amount.amount"></format-currency>\n                </span>\n            </span>\n        </div>\n        <div ng-if="secondLineType" class="fsPanelSecondLine">\n            <div ng-switch="secondLineType">\n                <div ng-switch-when="credit" ng-bind-html="secondLineData.sacEligible"></div>\n                <div ng-switch-when="pad">\n                    {{name}}\n                    <span class="cardMask"><span/><span/><span/><span/></span>\n                    {{secondLineData.after}}\n                </div>\n                <div ng-switch-when="mask">\n                    {{secondLineData.before}}\n                    <span class="cardMask"><span/><span/><span/><span/></span>{{secondLineData.after}}\n\n                    <span ng-if="secondLineData.meft">\n                        {{content(\'fundingInstruments.meft\')}}\n                    </span>\n                    <span ng-if="secondLineData.iach">\n                        {{content(\'fundingInstruments.iach\')}}\n                    </span>\n                    <span ng-if="secondLineData.echeck">\n                        {{content(\'fundingInstruments.eCheck\')}}\n                    </span>\n                </div>\n            </div>\n        </div>\n        <div class="fsPanelChildren" ng-transclude></div>\n    </div>\n</div>\n';
    },
    "./components/xo-ui-components/src/fi-panel/styles.less": "./css/app.less",
    "./components/xo-ui-components/src/cardicon/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoFiIcon = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _index = __webpack_require__("./components/xo-models/src/fiMeta/index.js");
        var _index2 = _interopRequireDefault(_index);
        var _template = __webpack_require__("./components/xo-ui-components/src/cardicon/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoFiIcon = exports.$xoFiIcon = _squid.$Component.extend("xoFiIcon", {
            tag: "xo-fi-icon",
            wrapperType: "span",
            template: _template2["default"],
            transclude: true,
            props: {
                fi: {
                    type: "var",
                    required: true
                },
                className: {
                    type: "str",
                    required: true
                }
            },
            resolve: {
                models: function models() {
                    return {
                        fiMeta: _index2["default"].instance(_angular.$rootScope.token).fetch()
                    };
                }
            },
            lifecycle: {
                populate: function populate() {
                    this.retrievedCardArt = this.models.fiMeta.getCardArt(this.props.fi);
                    if (this.retrievedCardArt) {
                        this.cardStyle = {
                            "background-image": "url(" + this.retrievedCardArt + ")",
                            "background-size": "contain",
                            "background-position": "initial"
                        };
                    }
                }
            }
        });
        angular.value("$xoFiIcon", $xoFiIcon);
        _squid.$Component;
        _angular.$rootScope;
    },
    "./components/xo-ui-components/src/cardicon/template.html": function(module, exports) {
        module.exports = '<span ng-if="retrievedCardArt">\n    <span class="standardCardIcon fsIcon fsIcons img-retina" ng-class="className" ng-style="cardStyle"></span>\n</span>\n<span ng-if="!retrievedCardArt">\n    <div ng-if="models.fiMeta.isPinlessDebit(fi)" class="standardCardIcon pinlessGlyphIcon icon icon-card-half-solid"></div>\n    <div ng-if="!models.fiMeta.isPinlessDebit(fi)" class="standardCardIcon fsIcon fsIcons img-retina" ng-class="[fi.type, fi.card_type, fi.name, className]" ng-transclude>\n    </div>\n</span>\n\n\n';
    },
    "./components/xo-ui-components/src/experience/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$ExperienceComponent = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _template = __webpack_require__("./components/xo-ui-components/src/experience/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _fiMeta = __webpack_require__("./components/xo-models/src/fiMeta/index.js");
        var _fiMeta2 = _interopRequireDefault(_fiMeta);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $ExperienceComponent = exports.$ExperienceComponent = _squid.$Component.extend("ExperienceComponent", {
            tag: "experience",
            template: _template2["default"],
            transclude: true,
            props: {
                flag: {
                    type: "str",
                    required: true
                }
            },
            resolve: {
                models: function models() {
                    return {
                        fiMeta: _fiMeta2["default"].instance(_angular.$rootScope.token).fetch()
                    };
                }
            },
            lifecycle: {
                populate: function populate() {
                    var negate = this.props.flag[0] === "!";
                    this.renderExperience = this.models.fiMeta.cardArtEnabled();
                    if (negate) {
                        this.renderExperience = !this.renderExperience;
                    }
                }
            }
        });
        angular.value("$ExperienceComponent", $ExperienceComponent);
        _squid.$Component;
        _angular.$rootScope;
    },
    "./components/xo-ui-components/src/experience/template.html": function(module, exports) {
        module.exports = '<div ng-style="style">\n    <ng-transclude ng-if="renderExperience"></ng-transclude>\n</div>\n';
    },
    "./components/xo-credit-components/src/offer/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        var _app = __webpack_require__("./components/xo-models/src/app/index.js");
        var ACQ_Banner_Type = "acquisition";
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-credit-components/src/offer/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/fi/index.js"), __webpack_require__("./components/xo-beaver/dist/logger.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid, template) {
            squid.module("xo-offer.directive", [ "squid", "xomodel.checkout" ]).directive("xoOffer", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        promotion: "=",
                        bmlaction: "=",
                        installment: "=",
                        selectedmethod: "=",
                        reusetext: "=",
                        radio: "=",
                        parentContext: "="
                    },
                    controller: function controller($scope, $sce, $FallbackError, $populate, $state, $q, $CheckoutSessionModel, $CheckoutAppDataModel, $CheckoutCartModel, $pxp, $logger, $InstallmentOptionsModel, $feature, $locale, $CheckoutPayeeModel, $util, $CreditDataModel, $CreditOptionsModel, $config, $rootScope, $MarketingOfferModel, $fireMORSBeacon, $AuthModel, $CreditInstallmentModel, $cookies) {
                        var isCreditInWallet = void 0;
                        var isRedirectFromCape = void 0;
                        var BANNER_TYPES = {
                            PASSIVE: "PASSIVE",
                            PROMINENT: "PROMINENT"
                        };
                        var USE_CASE = {
                            REUSE: "REUSE",
                            ACQUISITION: "ACQUISITION"
                        };
                        var CREDIT_TYPE = {
                            CORE: "CORE",
                            SAC: "SAC",
                            EZP: "EZP",
                            BA: "BA"
                        };
                        var CREDIT_BANNER_DISPLAY_COUNT_MAX = 1;
                        var CREDIT_BANNER_DISPLAY_COUNT_KEY = "credit_banner_display_count_key";
                        var CREDIT_BANNER_DISPLAY_COUNT_MAX_TOP = 3;
                        var CREDIT_BANNER_DISPLAY_COUNT_KEY_TOP = "credit_banner_display_count_key_top";
                        $scope.isNewMember = function() {
                            var newMember = $scope.parentContext && $scope.parentContext.newMember;
                            if (!newMember) {
                                return false;
                            }
                            return newMember.variant === "one_page" || newMember.variant === "multi_page";
                        };
                        $scope.showProminentBannerSeperator = function() {
                            var hideBanner = $scope.parentContext && $scope.parentContext.newMember && $scope.parentContext.newMember.variant === "multi_page";
                            return !hideBanner;
                        };
                        var isNewMemberDecisionToHideBanner = function isNewMemberDecisionToHideBanner() {
                            if (!$scope.isNewMember()) {
                                return false;
                            }
                            var newMember = $scope.parentContext && $scope.parentContext.newMember;
                            if (newMember.useCEPDecision) {
                                return !newMember.creditOffer;
                            } else {
                                return true;
                            }
                        };
                        var hideBannerForNewMember = isNewMemberDecisionToHideBanner();
                        var getDefaultBanner = function getDefaultBanner(bannerType, useCase, creditType, amount, termsLink) {
                            if (bannerType === BANNER_TYPES.PROMINENT) {
                                if (useCase === USE_CASE.ACQUISITION) {
                                    if (creditType === CREDIT_TYPE.CORE || creditType === CREDIT_TYPE.BA) {
                                        return {
                                            bodyText: $scope.htmlContent("offers.bmlOfferSmallTitleWithAmount", {
                                                cartAmount: amount
                                            }),
                                            ctaText: $scope.htmlContent("offers.bmlOfferBtn"),
                                            termsText: $scope.htmlContent("offers.subjectToApproval"),
                                            termsLink: termsLink,
                                            termsLinkText: $scope.htmlContent("offers.seeTermsText")
                                        };
                                    } else if (creditType === CREDIT_TYPE.SAC) {
                                        return {
                                            bodyText: $scope.htmlContent("offers.bmlOfferLargeTitleWithAmount", {
                                                cartAmount: amount
                                            }),
                                            ctaText: $scope.htmlContent("offers.bmlOfferBtn"),
                                            termsText: $scope.htmlContent("offers.subjectToApproval"),
                                            termsLink: termsLink,
                                            termsLinkText: $scope.htmlContent("offers.seeTermsText")
                                        };
                                    } else if (creditType === CREDIT_TYPE.EZP) {
                                        return {
                                            bodyText: $scope.htmlContent("offers.bmlOfferSmallTitleWithAmount", {
                                                cartAmount: amount
                                            }),
                                            ctaText: $scope.htmlContent("offers.bmlOfferBtn"),
                                            termsText: $scope.htmlContent("offers.subjectToApproval")
                                        };
                                    }
                                } else if (useCase === USE_CASE.REUSE) {
                                    if (creditType === CREDIT_TYPE.CORE || creditType === CREDIT_TYPE.BA) {
                                        return {
                                            bodyText: $scope.htmlContent("offers.bmlExistingOfferTitle"),
                                            bodyText2: $scope.htmlContent("offers.bmlExistingOfferSmall"),
                                            ctaText: $scope.htmlContent("offers.bmlOfferReuseCta"),
                                            termsLink: termsLink,
                                            termsLinkText: $scope.htmlContent("offers.seeTermsText")
                                        };
                                    } else if (creditType === CREDIT_TYPE.SAC) {
                                        return {
                                            bodyText: $scope.htmlContent("offers.bmlExistingOfferTitle"),
                                            bodyText2: $scope.htmlContent("offers.bmlExistingOfferLarge"),
                                            ctaText: $scope.htmlContent("offers.bmlOfferReuseCta"),
                                            termsLink: termsLink,
                                            termsLinkText: $scope.htmlContent("offers.seeTermsText")
                                        };
                                    } else if (creditType === CREDIT_TYPE.EZP) {
                                        return {
                                            bodyText: $scope.htmlContent("offers.bmlExistingOfferTitle"),
                                            bodyText2: $scope.htmlContent("offers.bmlExistingOfferSmall"),
                                            ctaText: $scope.htmlContent("offers.cycoOfferBtn")
                                        };
                                    }
                                }
                            } else if (useCase === USE_CASE.ACQUISITION) {
                                if (creditType === CREDIT_TYPE.CORE || creditType === CREDIT_TYPE.BA) {
                                    return {
                                        bodyText: $scope.htmlContent("offers.bmlOfferPassiveDetails", {
                                            cartAmount: amount
                                        }),
                                        ctaText: $scope.htmlContent("offers.bmlOfferPassiveCta"),
                                        termsText: $scope.htmlContent("offers.subjectToApproval"),
                                        termsLink: termsLink,
                                        termsLinkText: $scope.htmlContent("offers.seeTermsText")
                                    };
                                } else if (creditType === CREDIT_TYPE.SAC) {
                                    return {
                                        bodyText: $scope.htmlContent("offers.bmlOfferPassiveSACDetails", {
                                            cartAmount: amount
                                        }),
                                        ctaText: $scope.htmlContent("offers.bmlOfferPassiveCta"),
                                        termsText: $scope.htmlContent("offers.subjectToApproval"),
                                        termsLink: termsLink,
                                        termsLinkText: $scope.htmlContent("offers.seeTermsText")
                                    };
                                } else if (creditType === CREDIT_TYPE.EZP) {
                                    return {
                                        bodyText: $scope.htmlContent("offers.bmlOfferPassiveDetails", {
                                            cartAmount: amount
                                        }),
                                        ctaText: $scope.htmlContent("offers.bmlOfferPassiveEZPCta"),
                                        termsText: $scope.htmlContent("offers.subjectToApproval")
                                    };
                                }
                            }
                        };
                        var getReuseOfferInfo = function getReuseOfferInfo(creditType, termsLink, amount) {
                            if (creditType === CREDIT_TYPE.CORE || creditType === CREDIT_TYPE.BA) {
                                return {
                                    bodyText: $scope.htmlContent("offers.bmlOfferPassiveDetails", {
                                        cartAmount: amount
                                    }) + ".",
                                    termsLink: termsLink,
                                    termsLinkText: $scope.htmlContent("offers.seeTermsText")
                                };
                            } else if (creditType === CREDIT_TYPE.SAC) {
                                return {
                                    bodyText: $scope.htmlContent("offers.bmlOfferPassiveSACDetails", {
                                        cartAmount: amount
                                    }) + ".",
                                    termsLink: termsLink,
                                    termsLinkText: $scope.htmlContent("offers.seeTermsText")
                                };
                            } else if (creditType === CREDIT_TYPE.EZP) {
                                return {
                                    bodyText: $scope.htmlContent("offers.bmlOfferPassiveDetails", {
                                        cartAmount: amount
                                    }) + "."
                                };
                            }
                        };
                        var getCreditType = function getCreditType(bmlOffer, isInst, isBillingNoPurchase) {
                            var instModel = $CreditInstallmentModel.instance($scope.token);
                            if (isBillingNoPurchase) {
                                return CREDIT_TYPE.BA;
                            } else if (instModel && instModel.creditType === CREDIT_TYPE.SAC) {
                                return CREDIT_TYPE.SAC;
                            } else if (isInst) {
                                return CREDIT_TYPE.EZP;
                            } else if (bmlOffer === 1) {
                                return CREDIT_TYPE.SAC;
                            } else if (bmlOffer === 2) {
                                return CREDIT_TYPE.CORE;
                            }
                            $logger.warn("unknown_credit_type");
                        };
                        var isCreditTxnLowerThanThreshold = function isCreditTxnLowerThanThreshold() {
                            var transactionAmount = $scope.getTransactionAmount();
                            var sacEligibleAmount = $CreditOptionsModel.sacEligibleAmount[$locale.country];
                            $logger.info("transactionAmount_sacEligibleAmount", {
                                transactionAmount: transactionAmount,
                                sacEligibleAmount: sacEligibleAmount
                            });
                            return transactionAmount < sacEligibleAmount;
                        };
                        var incrementTreatmentBannerDisplayedCount = function incrementTreatmentBannerDisplayedCount(localStorageKey) {
                            $logger.info("Inside incrementTreatmentBannerDisplayedCount");
                            if ($util.localStorageEnabled()) {
                                var public_device_key = "public_device_test";
                                var credit_banner_displayed_count = void 0;
                                var publicDeviceTest = localStorage.getItem(public_device_key);
                                if (publicDeviceTest !== "true") {
                                    credit_banner_displayed_count = localStorage.getItem(localStorageKey) || 0;
                                    $logger.info("incrementTreatmentBannerDisplayedCount: credit_banner_displayed_count" + credit_banner_displayed_count);
                                    credit_banner_displayed_count++;
                                    localStorage.setItem(localStorageKey, credit_banner_displayed_count.toString());
                                    $logger.info("incrementTreatmentBannerDisplayedCount: credit_banner_displayed_count" + credit_banner_displayed_count);
                                }
                            }
                        };
                        var isTreatmentCapped = function isTreatmentCapped(result, maxCount) {
                            $logger.info("Inside isTreatmentCapped");
                            if ($util.localStorageEnabled()) {
                                var public_device_key = "public_device_test";
                                var credit_banner_displayed_count = void 0;
                                var publicDeviceTest = localStorage.getItem(public_device_key);
                                if (publicDeviceTest === "true") {
                                    localStorage.removeItem(CREDIT_BANNER_DISPLAY_COUNT_KEY);
                                } else {
                                    credit_banner_displayed_count = localStorage.getItem(CREDIT_BANNER_DISPLAY_COUNT_KEY) || 0;
                                    $logger.info("isTreatmentCapped: credit_banner_displayed_count" + credit_banner_displayed_count);
                                    if (angular.isNumber(maxCount) && maxCount <= credit_banner_displayed_count) {
                                        $logger.info("Banner/interstitial treatment is capped");
                                        return true;
                                    }
                                }
                            }
                            return false;
                        };
                        var isTreatmentIneligible = function isTreatmentIneligible(result, maxCount, localStorageKey) {
                            if (CREDIT_TYPE.EZP === getCreditType($scope.bmlOffer, $scope.installmentOptionsPresent, $scope.isBillingNoPurchase)) {
                                $logger.info("INST available");
                                $scope.creditBannerTreatment = 0;
                                $scope.showCreditBannerControl = true;
                                $logger.info("Returning to control since its installments");
                                return true;
                            }
                            if (isTreatmentCapped(result, maxCount, localStorageKey)) {
                                return true;
                            }
                            return false;
                        };
                        var shouldSetInLayoutBanner = function shouldSetInLayoutBanner(result) {
                            var current = $state.current;
                            if (isTreatmentIneligible(result, CREDIT_BANNER_DISPLAY_COUNT_MAX_TOP, CREDIT_BANNER_DISPLAY_COUNT_KEY_TOP) || current.name === "checkout.selectFi") {
                                $scope.creditBannerTreatment = 0;
                                $scope.showCreditBannerControl = true;
                                $logger.info("setInLayoutBanner: Returning to control as fallback");
                                return false;
                            }
                            $logger.info("setInLayoutBanner: treatment is eligible and not capped");
                            incrementTreatmentBannerDisplayedCount(CREDIT_BANNER_DISPLAY_COUNT_KEY_TOP);
                            return true;
                        };
                        var shouldSetInterstitial = function shouldSetInterstitial(result) {
                            if (isCreditTxnLowerThanThreshold() || isTreatmentIneligible(result, CREDIT_BANNER_DISPLAY_COUNT_MAX, CREDIT_BANNER_DISPLAY_COUNT_KEY)) {
                                $logger.info("setInterstitial: returning false (should not show interstitial)");
                                return false;
                            }
                            $logger.info("setInterstitial: treatment is eligible and not capped");
                            incrementTreatmentBannerDisplayedCount(CREDIT_BANNER_DISPLAY_COUNT_KEY);
                            return true;
                        };
                        var showInterstitial = function showInterstitial() {
                            $logger.info("acq_banner", {
                                from: "xo_review",
                                to: "prepare_banner_interstitial"
                            });
                            return $state.go("checkout.bannerInterstitial", {
                                creditInterstitialTreatment: $scope.creditInterstitialTreatment,
                                banner: $scope.banner
                            }, {
                                location: false
                            });
                        };
                        $populate($scope, {
                            auth: $AuthModel.instance(),
                            checkoutSession: $CheckoutSessionModel.instance($scope.token),
                            checkoutCart: $CheckoutCartModel.instance($scope.token),
                            checkoutAppData: $CheckoutAppDataModel.instance($scope.token),
                            payee: $CheckoutPayeeModel.instance($scope.token)
                        }).then(function() {
                            var merchantId = $scope.payee.getId();
                            var country = $locale.country;
                            if (country !== "GB") {
                                return $q.when();
                            }
                            return $pxp("xo_hermes_cape_migration_UK", {
                                "ctx.COUNTRY": $locale.country,
                                "ctx.merchantID": merchantId,
                                uid: merchantId
                            }, "xo_cape_migration_UK.*").then(function(result) {
                                if (result && result.treatment_name === "xo_cape_migration_UK_test") {
                                    $scope.isUKBannerEligible = true;
                                }
                            });
                        }).then(function() {
                            $scope.placementCode = "210004";
                            $scope.presentation_types = [ "PayPalCreditCheckout" ];
                            $scope.pu_type = "PERSONAL";
                            var morsCallFailed = false;
                            $scope.bmlOffer = $scope.checkoutSession.bmlOffer;
                            $logger.info("bmlOffer: " + $scope.bmlOffer);
                            $scope.buyerCountry = $locale.country;
                            var isCoreSACEligible = $scope.bmlOffer === 1 || $scope.bmlOffer === 2;
                            isRedirectFromCape = $CreditDataModel.instance($scope.token).isRedirectFromCape();
                            $scope.isBillingNoPurchase = $scope.checkoutCart.isBillingNoPurchase();
                            if ($scope.isBillingNoPurchase) {
                                isCreditInWallet = $scope.checkoutSession.get("futurePayment.isCreditInWallet");
                            } else {
                                var plans = $scope.checkoutSession.get("fundingOptions.plans");
                                isCreditInWallet = $util.find(plans, function(fi) {
                                    return fi && fi.primaryFs && fi.primaryFs.name === "BILL_ME_LATER";
                                });
                            }
                            $scope.checkIfSelectFiDisplayedBanner = function(showBanner) {
                                var current = $state.current;
                                if (showBanner && current.name === "checkout.selectFi") {
                                    $rootScope.hideBanner = true;
                                } else if ($rootScope.hideBanner) {
                                    showBanner = false;
                                }
                                return showBanner;
                            };
                            var showBannerRules = function showBannerRules() {
                                if ($locale.country === "GB") {
                                    $scope.offerTypeKey = $scope.installmentOptionsPresent ? "offers.bmlInstallmentTitle" : $scope.isBmlOfferSmallOrLarge(ACQ_Banner_Type);
                                    $logger.info("isUkBannerEligible " + $scope.isUKBannerEligible);
                                    if ($scope.isUKBannerEligible && !isCreditInWallet && !isRedirectFromCape && (isCoreSACEligible || $scope.checkoutSession.creditOffer)) {
                                        $logger.info("checkout_fpti", {
                                            banner_type: "test_ACQUISITION"
                                        });
                                    } else if (!$scope.isUKBannerEligible && !isCreditInWallet && !isRedirectFromCape && (isCoreSACEligible || $scope.checkoutSession.creditOffer)) {
                                        $logger.info("checkout_fpti", {
                                            banner_type: "control_ACQUISITION"
                                        });
                                    }
                                    if ($scope.checkoutCart.isBilling()) {
                                        return $scope.showUKBanner && !isRedirectFromCape && (isCoreSACEligible || $scope.checkoutSession.creditOffer) && !isCreditInWallet;
                                    } else if ($scope.showUKBanner && !isCreditInWallet && !isRedirectFromCape && (isCoreSACEligible || $scope.checkoutSession.creditOffer)) {
                                        return true;
                                    } else {
                                        return false;
                                    }
                                } else {
                                    return !isCreditInWallet && $scope.installmentOptionsPresent && !isRedirectFromCape;
                                }
                            };
                            var showCYCORules = function showCYCORules() {
                                var commonRules = isCreditInWallet && $scope.checkoutSession.creditOffer && $scope.installmentOptionsPresent;
                                if ($locale.country === "GB") {
                                    return $scope.showUKBanner && commonRules;
                                } else {
                                    return commonRules;
                                }
                            };
                            $scope.isBmlOfferSmallOrLarge = function(bannerType) {
                                var key = void 0;
                                if ($scope.isBmlOfferLarge()) {
                                    key = bannerType === ACQ_Banner_Type ? "offers.bmlOfferLargeTitle" : "offers.bmlExistingOfferLarge";
                                } else {
                                    key = bannerType === ACQ_Banner_Type ? "offers.bmlOfferSmallTitle" : "offers.bmlExistingOfferSmall";
                                }
                                return key;
                            };
                            $scope.isBmlOfferLarge = function() {
                                var transactionAmount = $scope.getTransactionAmount();
                                var sacEligibleAmount = $CreditOptionsModel.sacEligibleAmount[$locale.country];
                                return transactionAmount >= sacEligibleAmount;
                            };
                            $scope.getTransactionAmount = function() {
                                var transactionAmount = $scope.checkoutCart.get("purchase.amounts.total.amount");
                                return parseFloat(transactionAmount) || 0;
                            };
                            if ($scope.buyerCountry === "US" && $scope.bmlOffer) {
                                if ($scope.isBmlOfferLarge()) {
                                    $scope.bmlOffer = 1;
                                } else {
                                    $scope.bmlOffer = 2;
                                }
                                $scope.installment.bmlOffer = $scope.bmlOffer;
                            }
                            var executeSsotCall = function executeSsotCall(silent) {
                                if ($feature("creditInstallmentOffers") && $scope.checkoutAppData.merchant.merchant_country === $locale.country && !$scope.isBillingNoPurchase) {
                                    var processInstallmentResponse = function processInstallmentResponse(result) {
                                        $scope.creditOffers = result.installments && result.installments[0];
                                        $scope.installmentCount = $scope.creditOffers && $scope.creditOffers.installment_options && $scope.creditOffers.installment_options.length;
                                        $scope.installmentOptionsPresent = $scope.installment.installmentOptionsPresent = $scope.checkoutSession.creditOffer && $scope.installmentCount > 0;
                                        $scope.showUKBanner = $scope.checkoutAppData.is_second_button_txn || $scope.isUKBannerEligible;
                                        if ($scope.buyerCountry === "US") {
                                            $scope.installment.showBanner = hideBannerForNewMember ? false : $scope.checkIfSelectFiDisplayedBanner(showBannerRules());
                                            $scope.installment.showWalletBanner = showBannerRules();
                                        } else {
                                            $scope.installment.showBanner = showBannerRules();
                                        }
                                        $scope.installment.showCYCO = showCYCORules();
                                        var hideSacBanner = $scope.installment.showBanner || isRedirectFromCape || $locale.country === "GB";
                                        $scope.showBml = hideSacBanner ? false : isCoreSACEligible;
                                    };
                                    $rootScope.instCache = $rootScope.instCache || {};
                                    var instCacheId = "" + $scope.checkoutSession.id;
                                    var cachedInst = $rootScope.instCache[instCacheId];
                                    if (cachedInst) {
                                        return $q(function(resolve) {
                                            return resolve(processInstallmentResponse(cachedInst));
                                        });
                                    } else {
                                        var offers = $InstallmentOptionsModel.instance($scope.token);
                                        return offers.save({
                                            silent: silent,
                                            data: {
                                                payee: $scope.payee,
                                                checkoutCart: $scope.checkoutCart,
                                                checkoutAppData: $scope.checkoutAppData,
                                                isMemberCredit: true
                                            },
                                            success: function success(result) {
                                                processInstallmentResponse(result);
                                                $rootScope.instCache[instCacheId] = result;
                                            },
                                            contingencies: {
                                                DEFAULT: function DEFAULT() {
                                                    $logger.info("GET_INSTALLMENT_CONTINGENCY");
                                                }
                                            }
                                        });
                                    }
                                } else {
                                    return $q(function(resolve) {
                                        var hideSacBanner = isRedirectFromCape || $locale.country === "GB";
                                        $scope.showBml = hideSacBanner ? false : isCoreSACEligible;
                                        $scope.showUKBanner = $scope.checkoutAppData.is_second_button_txn || $scope.isUKBannerEligible;
                                        $scope.installment.showBanner = showBannerRules();
                                        resolve();
                                    });
                                }
                            };
                            $scope.creditTerms = $config.urls.creditTerms;
                            $scope.creditReuseTerms = $config.urls.creditReuseTerms;
                            var mapResponseToBanner = function mapResponseToBanner(ad) {
                                var formatBannerField = function formatBannerField(content) {
                                    if (angular.isString(content)) {
                                        content = $sce.trustAsHtml(content.replace(/PayPal Credit/g, '<span class="nowrap">PayPal Credit</span>'));
                                    }
                                    return content;
                                };
                                var getMorsOfferType = function getMorsOfferType(offerType) {
                                    if (offerType === "CORE") {
                                        return CREDIT_TYPE.CORE;
                                    }
                                    if (offerType === "SAC") {
                                        return CREDIT_TYPE.SAC;
                                    }
                                    if (offerType === "PALA") {
                                        return CREDIT_TYPE.EZP;
                                    }
                                    $logger.warn("unknown_credit_type");
                                };
                                $scope.showPassiveBanner = ad["MessageType"] !== "Prominent";
                                $scope.banner.offerType = getMorsOfferType(ad["offertype"]);
                                $scope.showIncentiveBanner = ad["incentiveOfferProgramId"] !== undefined;
                                if (!$scope.showPassiveBanner) {
                                    $scope.banner.bodyText = formatBannerField(ad["OfferText1"]);
                                    $scope.banner.bodyText2 = formatBannerField(ad["OfferText2"]);
                                    $scope.banner.logo = ad["Logo"];
                                    $scope.banner.ctaText = formatBannerField(ad["CTAText"]);
                                    $scope.banner.termsText = formatBannerField(ad["TermsText"]);
                                    $scope.banner.termsLink = ad["TermsLink"];
                                    $scope.banner.termsLinkText = ad["TermsLinkText"];
                                } else {
                                    $scope.banner.ctaText = formatBannerField(ad["OfferText1"]);
                                    $scope.banner.bodyText = formatBannerField(ad["OfferText2"]);
                                    $scope.banner.logo = ad["Logo"];
                                    $scope.banner.termsText = formatBannerField(ad["TermsText"]);
                                    $scope.banner.termsLink = ad["TermsLink"];
                                    $scope.banner.termsLinkText = ad["TermsLinkText"];
                                }
                            };
                            var mapDefaultToBanner = function mapDefaultToBanner(creditReuseTerms, creditTerms) {
                                $scope.useFallbackBanner = true;
                                $scope.showPassiveBanner = !isCreditInWallet;
                                $scope.banner = getDefaultBanner($scope.showPassiveBanner ? BANNER_TYPES.PASSIVE : BANNER_TYPES.PROMINENT, isCreditInWallet ? USE_CASE.REUSE : USE_CASE.ACQUISITION, getCreditType($scope.bmlOffer, $scope.installmentOptionsPresent, $scope.isBillingNoPurchase), $scope.checkoutCart.get("purchase.amounts.total.amount_formatted", ""), isCreditInWallet ? creditReuseTerms : creditTerms);
                            };
                            var mapReuseText = function mapReuseText(creditReuseTerms) {
                                $scope.reuseOfferInfo = getReuseOfferInfo(getCreditType($scope.bmlOffer, $scope.installmentOptionsPresent, $scope.isBillingNoPurchase), creditReuseTerms, $scope.checkoutCart.get("purchase.amounts.total.amount_formatted", ""));
                            };
                            var shouldCallMors = $locale.country === "US" && $scope.placementCode && ($scope.bmlOffer || isCreditInWallet);
                            var executeMorsCall = function executeMorsCall(silent) {
                                $rootScope.MORS = $rootScope.MORS || {};
                                $scope.banner = {};
                                var morsCacheId = $scope.checkoutSession.id + "-" + $scope.placementCode + "-" + !!isCreditInWallet + "-" + getCreditType($scope.bmlOffer, $scope.installmentOptionsPresent, $scope.isBillingNoPurchase);
                                var cachedAd = $rootScope.MORS[morsCacheId];
                                if (cachedAd !== undefined) {
                                    return $q(function(resolve) {
                                        if (cachedAd === null) {
                                            morsCallFailed = true;
                                            resolve(mapDefaultToBanner($scope.creditReuseTerms, $scope.creditTerms));
                                        } else {
                                            $scope.ad = cachedAd;
                                            resolve(mapResponseToBanner(cachedAd));
                                        }
                                    });
                                } else {
                                    var walletInstruments = [];
                                    if (isCreditInWallet) {
                                        walletInstruments.push({
                                            financial_instrument_type: "FI_PAYPAL_CREDIT",
                                            financial_instrument_product_type: "PI_TYPE_CREDIT_TXN_CARD_BML",
                                            preferred: isCreditInWallet.isPreferred,
                                            out_of_wallet: false
                                        });
                                    }
                                    $scope.marketingOfferModel = new $MarketingOfferModel({
                                        countryCode: $locale.country,
                                        page: "HERMES_RYI_PAGE",
                                        site: "HERMES_RYI_PAGE",
                                        puType: $scope.pu_type,
                                        totalTransactionAmount: {
                                            currency_code: $scope.checkoutCart.get("purchase.amounts.total.currency_code", ""),
                                            value: $scope.checkoutCart.get("purchase.amounts.total.amount", 0) * 100
                                        },
                                        totalShippingAmount: {
                                            currency_code: $scope.checkoutCart.get("purchase.amounts.total.currency_code", ""),
                                            value: $scope.checkoutCart.get("purchase.amounts.shipping.amount", 0) * 100
                                        },
                                        payee: $scope.payee.merchant.id || "",
                                        payer: $scope.checkoutSession.payer.id || "",
                                        si: $scope.checkoutSession.id || "",
                                        targetPlacements: [ {
                                            placement_code: $scope.placementCode,
                                            presentation_types: $scope.presentation_types
                                        } ],
                                        walletInstruments: walletInstruments,
                                        installmentsNotAllowed: !$scope.checkoutSession.creditOffer || $scope.checkoutCart.isBilling()
                                    });
                                    return $MarketingOfferModel.instance($scope.token).save({
                                        silent: silent,
                                        data: $scope.marketingOfferModel.serialize(),
                                        success: function success(result) {
                                            $logger.info("MORS_response", result);
                                            var ads_arr = result && result.ads || [];
                                            var adFound = false;
                                            ads_arr.forEach(function(ad) {
                                                var adunit_id = ad.campaign.adunit_id;
                                                if (adunit_id.toString() === $scope.placementCode.toString() && ad.valid) {
                                                    adFound = true;
                                                    $scope.ad = {};
                                                    var content = ad.content.nvp;
                                                    content.forEach(function(obj) {
                                                        $scope.ad[obj.name] = obj.value;
                                                    });
                                                    $scope.ad["impressionUrl"] = ad.tracking.impression_url;
                                                    $scope.ad["clickUrl"] = ad.tracking.click_url;
                                                    $scope.ad["campaignId"] = ad.campaign.campaign_id;
                                                    $scope.ad["buyItemId"] = ad.campaign.buy_item_id;
                                                    $scope.ad["placementCode"] = ad.campaign.adunit_id;
                                                }
                                            });
                                            if (adFound) {
                                                mapResponseToBanner($scope.ad);
                                                $rootScope.MORS[morsCacheId] = $scope.ad;
                                            } else {
                                                $logger.info("MORS_ad_not_found_credit");
                                                $rootScope.$broadcast("MORSNotDisplayed");
                                                $rootScope.MORS[morsCacheId] = null;
                                                morsCallFailed = true;
                                            }
                                        },
                                        error: function error(err) {
                                            $logger.error("MORS_api_failure_credit", {
                                                error: err
                                            });
                                            $rootScope.MORS[morsCacheId] = null;
                                            morsCallFailed = true;
                                        }
                                    });
                                }
                            };
                            if (shouldCallMors) {
                                return executeMorsCall(true)["finally"](function() {
                                    if (morsCallFailed) {
                                        return executeSsotCall(true).then(function() {
                                            mapReuseText($scope.creditReuseTerms);
                                            mapDefaultToBanner($scope.creditReuseTerms, $scope.creditTerms);
                                        });
                                    } else {
                                        $scope.showBml = !isRedirectFromCape && isCoreSACEligible;
                                        $scope.installmentOptionsPresent = $scope.installment.installmentOptionsPresent = $scope.banner.offerType === CREDIT_TYPE.EZP;
                                        var showInstBanner = $scope.installmentOptionsPresent && !isCreditInWallet && !isRedirectFromCape;
                                        $scope.installment.showBanner = hideBannerForNewMember ? false : $scope.checkIfSelectFiDisplayedBanner(showInstBanner);
                                        $scope.installment.showWalletBanner = showInstBanner;
                                        $scope.installment.showCYCO = isCreditInWallet && $scope.checkoutSession.creditOffer && $scope.banner.offerType === CREDIT_TYPE.EZP;
                                        mapReuseText($scope.creditReuseTerms);
                                    }
                                });
                            } else {
                                return executeSsotCall(false);
                            }
                        }).then(function() {
                            var handleInterstitialTreatment = function handleInterstitialTreatment(result) {
                                var treatmentName = "xo_hermesnodeweb_us_ryi_ppc_ppcacquisition_interstitial_treatment_1";
                                var treatmentVariant = 1;
                                $scope.creditInterstitialTreatment = null;
                                if (result && result.treatment_name === treatmentName) {
                                    $scope.creditInterstitialTreatment = treatmentVariant;
                                    if (shouldSetInterstitial(result)) {
                                        $logger.info('Showing "' + treatmentName + '"');
                                        $scope.isRedirectingToInterstitial = true;
                                        showInterstitial();
                                    }
                                }
                                $logger.info("checkout_fpti", {
                                    ppc_acq_interstitial_variant_displayed: $scope.isRedirectingToInterstitial ? treatmentVariant : 0
                                });
                                return result;
                            };
                            var handleBannerTreatment = function handleBannerTreatment(result) {
                                $scope.creditBannerTreatment = 0;
                                switch (result && result.treatment_name) {
                                  case "xo_hermesnodeweb_us_ryi_ppc_acq_treatment1":
                                    $logger.info("Showing xo_hermesnodeweb_us_ryi_ppc_acq_treatment1");
                                    if ($scope.selectedmethod && $scope.installment && !$scope.installment.isSplitBalance) {
                                        $scope.creditBannerTreatment = 1;
                                        $scope.showPPCAcquisitionRadioButton = true;
                                        $scope.installment.showPPCAcquisitionRadioButton = true;
                                    } else {
                                        $scope.showCreditBannerControl = true;
                                    }
                                    break;

                                  case "xo_hermesnodeweb_us_ryi_ppc_acq_treatment2":
                                    $logger.info("Showing xo_hermesnodeweb_us_ryi_ppc_acq_treatment2");
                                    $scope.creditBannerTreatment = 2;
                                    $scope.showPPCAcquisitionGradientBanner = true;
                                    $scope.banner.logo = "https://www.paypalobjects.com/webstatic/credit/img/pp_credit_logo_white@2x.png";
                                    break;

                                  case "xo_hermesnodeweb_us_ryi_ppc_acq_treatment3":
                                    $logger.info("Showing xo_hermesnodeweb_us_ryi_ppc_acq_treatment3");
                                    if (shouldSetInLayoutBanner(result)) {
                                        $scope.creditBannerTreatment = 3;
                                        $scope.showPPCAcquisitionBannerLifestyle = true;
                                    }
                                    break;

                                  case "xo_hermesnodeweb_us_ryi_ppc_acq_treatment4":
                                    $logger.info("Showing xo_hermesnodeweb_us_ryi_ppc_acq_treatment4");
                                    if (shouldSetInLayoutBanner(result)) {
                                        $scope.creditBannerTreatment = 4;
                                        $scope.showPPCAcquisitionBannerIcon = true;
                                    }
                                    break;

                                  case "xo_hermesnodeweb_us_ryi_ppc_acq_treatment5":
                                    $logger.info("Showing xo_hermesnodeweb_us_ryi_ppc_acq_treatment5");
                                    if (shouldSetInLayoutBanner(result)) {
                                        $scope.creditBannerTreatment = 5;
                                        $scope.showPPCAcquisitionBannerProduct = true;
                                    }
                                    break;

                                  case "xo_hermesnodeweb_us_ryi_ppc_acq_control":
                                  default:
                                    $scope.creditBannerTreatment = 0;
                                    $scope.showCreditBannerControl = true;
                                    break;
                                }
                                $logger.info("checkout_fpti", {
                                    ppc_acq_banner_variant_displayed: $scope.creditBannerTreatment
                                });
                                return result;
                            };
                            var runPxpExperiment = function runPxpExperiment(experimentName, pxpPattern, resultKey, initializeBannerTreatment, handler) {
                                if (!hideBannerForNewMember && $scope.showBml && $locale.country === "US" && !$scope.isRedirectingToInterstitial && $scope.showPassiveBanner !== undefined && !$scope.showPassiveBanner && !$scope.isBillingNoPurchase) {
                                    if (initializeBannerTreatment) {
                                        $scope.creditBannerTreatment = 0;
                                    }
                                    if ($scope.creditInterstitialTreatment === 1) {
                                        $scope.showCreditBannerControl = true;
                                        return $q.when();
                                    } else if ($scope.isNewMember()) {
                                        $scope.showCreditBannerControl = true;
                                        return $q.when();
                                    } else if ($rootScope[resultKey]) {
                                        return handler($rootScope[resultKey]);
                                    } else if (_app.$PXPBlacklist.isMerchantBlacklisted($scope.payee.merchant.id)) {
                                        return handler();
                                    } else {
                                        return $pxp(experimentName, {
                                            "ctx.COUNTRY": $locale.country
                                        }, pxpPattern, false, true).then(function(result) {
                                            $rootScope[resultKey] = result;
                                            return handler(result);
                                        });
                                    }
                                }
                            };
                            $scope.isRedirectingToInterstitial = false;
                            return $q.when().then(function() {
                                return runPxpExperiment("xo_hermesnodeweb_us_ryi_ppc_ppcacquisition_interstitial", "xo_hermesnodeweb_us_ryi_ppc_ppcacquisition_interstitial.*", "creditInterstitialPXPResult", false, handleInterstitialTreatment);
                            }).then(function() {
                                return runPxpExperiment("xo_hermesnodeweb_us_ryi_ppc_ppcacquisitionbanner_v2", "xo_hermesnodeweb_us_ryi_ppc_acq.*", "creditBannerPXPResult", true, handleBannerTreatment);
                            });
                        }).then(function() {
                            var fpIsCreditInWallet = $scope.checkoutSession.get("futurePayment.isCreditInWallet");
                            $scope.selectExistingBml = function() {
                                if ($scope.ad) {
                                    $fireMORSBeacon.fireBeacon($scope.ad.clickUrl);
                                }
                                if ($scope.isBillingNoPurchase) {
                                    var fpList = $scope.checkoutSession.get("futurePaymentInstruments");
                                    var bml = fpList.find(function(fp) {
                                        return fp.type === "BILL_ME_LATER";
                                    });
                                    $scope.checkoutSession.action("setStickyFI", {
                                        data: {
                                            instrument_id: bml.instrument_id
                                        },
                                        success: function success(result) {
                                            $scope.checkoutSession.message = {
                                                type: "success",
                                                msgKeys: [ "paymentMethod.paymentMethodUpdated" ]
                                            };
                                            $state.go("checkout.review");
                                        }
                                    });
                                } else {
                                    var fiList = $scope.checkoutSession.get("fundingOptions.instruments");
                                    var fundingSource = $util.find(fiList, function(fi) {
                                        return fi.name === "BILL_ME_LATER";
                                    });
                                    $scope.checkoutSession.fundingOptions.action("select", {
                                        resultModel: $scope.checkoutSession,
                                        data: {
                                            planId: fundingSource.planId
                                        },
                                        success: function success(result) {
                                            if ($scope.selectedmethod) {
                                                $scope.selectedmethod.index = 0;
                                                $scope.selectedmethod.planId = $scope.checkoutSession.get("plan.sources")[0].id;
                                            }
                                            if (result) {
                                                $scope.checkoutSession.installments = result.installments;
                                            }
                                            if (fundingSource.type === "CREDIT" && $scope.installment.showCYCO) {
                                                $state.go("checkout.chooseCreditOffer");
                                            } else {
                                                if (!fundingSource.selected) {
                                                    $scope.checkoutSession.message = {
                                                        type: "success",
                                                        msgKeys: [ "paymentMethod.paymentMethodUpdated" ]
                                                    };
                                                    if ($scope.checkoutSession.selectedInstallmentData && !$scope.checkoutSession.selectedInstallmentData.preventChange) {
                                                        $scope.checkoutSession.selectedInstallmentData = undefined;
                                                    }
                                                }
                                                $state.go("checkout.review");
                                            }
                                        }
                                    });
                                }
                            };
                            $scope.getBmlOfferTitle = function(suffix, data) {
                                if ($scope.bmlOffer === 1) {
                                    return $scope.htmlContent("offers.bmlOfferLargeTitle" + suffix, data);
                                } else if ($scope.bmlOffer === 2) {
                                    return $scope.htmlContent("offers.bmlOfferSmallTitle" + suffix, data);
                                } else {
                                    return "";
                                }
                            };
                            if ($scope.buyerCountry === "US") {
                                $scope.bmlOfferTitle = $scope.getTransactionAmount() === 0 ? $scope.htmlContent("offers.bmlOfferTitleWithAmountZero") : $scope.getBmlOfferTitle("WithAmount", {
                                    cartAmount: $scope.checkoutCart.get("purchase.amounts.total.amount_formatted", "")
                                });
                                $scope.installment.bmlOfferTitle = $scope.bmlOfferTitle;
                            }
                            $scope.showAcquisitionBanner = function() {
                                var showBanner = void 0;
                                showBanner = $scope.showBml && $scope.buyerCountry !== "GB";
                                showBanner = showBanner || $scope.installment.showBanner;
                                showBanner = hideBannerForNewMember ? false : $scope.checkIfSelectFiDisplayedBanner(showBanner);
                                if ($scope.installment.showPPCAcquisitionRadioButton && !$scope.radio) {
                                    showBanner = false;
                                }
                                if (!$scope.usCreditBannerFptiFired && showBanner && $scope.banner && $scope.buyerCountry === "US") {
                                    $scope.usCreditBannerFptiFired = true;
                                    if ($scope.ad) {
                                        $logger.info("checkout_fpti", {
                                            banner_type: USE_CASE.ACQUISITION + "_" + $scope.ad["MessageType"] + "_MORS",
                                            caid: $scope.ad["campaignId"]
                                        });
                                        $logger.info("MORS_ad_displayed_credit_" + USE_CASE.ACQUISITION + "_" + $scope.ad["MessageType"]);
                                        $fireMORSBeacon.fireBeacon($scope.ad.impressionUrl);
                                        $rootScope.$broadcast("MORSDisplayed", {
                                            clickUrl: $scope.ad.clickUrl,
                                            placementId: $scope.placementCode
                                        });
                                    } else {
                                        $logger.info("checkout_fpti", {
                                            banner_type: USE_CASE.ACQUISITION + "_" + BANNER_TYPES.PASSIVE + "_MORSfallback"
                                        });
                                        $logger.info("MORS_fallback_ad_displayed_credit_" + USE_CASE.ACQUISITION + "_" + BANNER_TYPES.PASSIVE);
                                    }
                                }
                                return showBanner;
                            };
                            $scope.showReuseBanner = function() {
                                var showBanner = false;
                                var reuseRules = true;
                                if ($scope.isBillingNoPurchase) {
                                    var stickyFi = $scope.checkoutSession.getSelectedStickyInstrument();
                                    reuseRules = fpIsCreditInWallet && !(stickyFi.type === "BILL_ME_LATER");
                                } else {
                                    $scope.isCreditDefault = $scope.checkoutSession.get("plan.paypal_credit");
                                    reuseRules = isCreditInWallet && !$scope.isCreditDefault;
                                }
                                $scope.installment.showCreditExample = $scope.showUKBanner && $locale.country === "GB" && (reuseRules || $scope.installment.showBanner || $scope.bmlOffer);
                                $scope.showPPCLogo = true;
                                if (!$scope.fptiTrigger && $locale.country === "GB" && reuseRules) {
                                    if ($scope.isUKBannerEligible) {
                                        $logger.info("checkout_fpti", {
                                            banner_type: "test_REUSE"
                                        });
                                        $scope.fptiTrigger = true;
                                    } else {
                                        $logger.info("checkout_fpti", {
                                            banner_type: "control_REUSE"
                                        });
                                        $scope.fptiTrigger = true;
                                    }
                                }
                                if ($locale.country === "US" && reuseRules && !(isRedirectFromCape && isCreditInWallet)) {
                                    showBanner = true;
                                } else if (($scope.showUKBanner || $scope.checkoutCart.isBillingNoPurchase()) && !hideBannerForNewMember && $locale.country === "GB" && reuseRules) {
                                    $scope.reuseOfferTypeKey = $scope.installmentOptionsPresent ? "offers.bmlExistingOfferInstallment" : $scope.isBmlOfferSmallOrLarge();
                                    return true;
                                }
                                showBanner = hideBannerForNewMember ? false : $scope.checkIfSelectFiDisplayedBanner(showBanner);
                                if (!$scope.usCreditBannerFptiFired && showBanner && $scope.banner && $scope.buyerCountry === "US") {
                                    $scope.usCreditBannerFptiFired = true;
                                    if ($scope.ad) {
                                        $logger.info("checkout_fpti", {
                                            banner_type: USE_CASE.REUSE + "_" + $scope.ad["MessageType"] + "_MORS",
                                            caid: $scope.ad["campaignId"]
                                        });
                                        $logger.info("MORS_ad_displayed_credit_" + USE_CASE.REUSE + "_" + $scope.ad["MessageType"]);
                                        $fireMORSBeacon.fireBeacon($scope.ad.impressionUrl);
                                        $rootScope.$broadcast("MORSDisplayed", {
                                            clickUrl: $scope.ad.clickUrl,
                                            placementId: $scope.placementCode
                                        });
                                    } else {
                                        $logger.info("checkout_fpti", {
                                            banner_type: USE_CASE.REUSE + "_" + BANNER_TYPES.PASSIVE + "_MORSfallback"
                                        });
                                        $logger.info("MORS_fallback_ad_displayed_credit_" + USE_CASE.REUSE + "_" + BANNER_TYPES.PASSIVE);
                                    }
                                }
                                return showBanner;
                            };
                            $scope.bml = function() {
                                if ($scope.ad) {
                                    $fireMORSBeacon.fireBeacon($scope.ad.clickUrl);
                                }
                                if ($scope.installment.showBanner) {
                                    $state.go("checkout.chooseCreditOffer");
                                } else {
                                    $state.go("checkout.redirectToCape", {}, {
                                        location: false
                                    });
                                }
                            };
                            $scope.creditOffer = function() {
                                $state.go("checkout.chooseCreditOffer");
                            };
                            $scope.addPlcc = function() {
                                $scope.promotion.type = "plcc";
                                $state.go("checkout.review.sidebar.sidebarAddCard.addCardFlow.addCard");
                            };
                            $scope.showPlcc = $scope.checkoutSession.plccOffer;
                        }).then(function() {
                            if ([ 3, 4, 5 ].indexOf($scope.creditBannerTreatment) > -1) {
                                $rootScope.$emit("setOfferTopBanner", {
                                    creditBannerTreatment: $scope.creditBannerTreatment,
                                    banner: $scope.banner,
                                    bml: $scope.bml
                                });
                            }
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        _app.$PXPBlacklist;
    },
    "../node_modules/noop-loader/index.js!./components/xo-credit-components/src/offer/template.html": function(module, exports) {
        module.exports = '<div id="offerForm" action="#" method="POST" class="offer"  content>\n\n    <div id="bmlReuseOfferInfo" ng-if="reusetext">\n        <span class="offerInfo ng-binding ng-scope" ng-bind-html="reuseOfferInfo.bodyText"></span>\n        <span class="seeTermsLink ng-scope">\n            <a href=\'{{reuseOfferInfo.termsLink}}\'\n               class=\'popup bmlTermsLink\' target=\'_blank\'\n               xo-popup>{{reuseOfferInfo.termsLinkText}}</a>\n        </span>\n    </div>\n\n    <div ng-if="!reusetext">\n\n        <!-- US banners -->\n\n        <div ng-if="buyerCountry === \'US\'">\n\n            <!-- Acquisition radio button -->\n            <div id="bmlAcqOfferRadio" class="payWithOption radioBanner passiveBanner creditBanner"\n                 ng-if="showPPCAcquisitionRadioButton && banner.bodyText && showAcquisitionBanner()">\n                <div class="payWithOptionBody">\n                    <div class="payWithOptionIcon" track-link="acquisition_offer_banner_MORS" role="button">\n                        <span class="fsIcon BILL_ME_LATER" ng-if="useFallbackBanner"></span>\n                        <img ng-src="{{banner.logo}}" ng-if="!useFallbackBanner" />\n                    </div>\n                    <div class="payWithOptionContent">\n                        <!-- TODO If this treatment is the winner, integrate Cta content with MORS instead of hard coding -->\n                        <div><span class="name proceed" ng-bind-html="htmlContent(\'offers.bmlOfferPassiveCta\')"></span></div>\n                        <div><span class="payWithOptionDetails" ng-bind-html="banner.bodyText"></span></div>\n                        <div>\n                            <span class="payWithOptionTerms" ng-bind-html="banner.termsText"></span>\n                            <a href="{{banner.termsLink}}"\n                               class="popup payWithOptionTermsLink"\n                               target=\'_blank\'\n                               ng-bind-html="banner.termsLinkText"\n                               track-link="acquisition_offer_banner_MORS_terms_link"></a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Acquisition passive banner -->\n            <div id="bmlAcqOfferPassive" class="payWithOption passiveBanner creditBanner"\n                 ng-if="showPassiveBanner && banner.bodyText && showAcquisitionBanner()">\n                <span class="plusicon" ng-click="bml()" track-link="acquisition_offer_banner_MORS" role="button" tabindex="-1"></span>\n                <div class="payWithOptionBody">\n                    <div class="payWithOptionIcon" ng-click="bml()" track-link="acquisition_offer_banner_MORS" role="button" tabindex="-1">\n                        <span class="fsIcon BILL_ME_LATER" ng-if="useFallbackBanner"></span>\n                        <img ng-src="{{banner.logo}}" ng-if="!useFallbackBanner" />\n                    </div>\n                    <div class="payWithOptionContent">\n                        <div><a href="#" ng-click="bml()" class="name proceed" ng-bind-html="banner.ctaText" track-link="acquisition_offer_banner_MORS"></a></div>\n                        <div><span class="payWithOptionDetails" ng-bind-html="banner.bodyText"></span></div>\n                        <div>\n                            <span class="payWithOptionTerms" ng-bind-html="banner.termsText"></span>\n                            <a href="{{banner.termsLink}}"\n                               class="popup payWithOptionTermsLink"\n                               target=\'_blank\'\n                               ng-bind-html="banner.termsLinkText"\n                               track-link="acquisition_offer_banner_MORS_terms_link"></a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Acquisition prominent banner -->\n            <div id="bmlAcqOfferProminent" class="prominentBanner creditBanner" ng-if="!showPassiveBanner &&\n            (showCreditBannerControl || showPPCAcquisitionGradientBanner) && banner.bodyText && showAcquisitionBanner()">\n                <div class="prominentBannerSeparator" ng-if="showProminentBannerSeperator()">\n                    <span class="prominentBannerSeparatorLine"></span>\n                    <span class="prominentBannerSeparatorWord" ng-bind-html="htmlContent(\'offers.or\')"></span>\n                </div>\n                <div ng-class="{\'bmlCtaWrap\': true, \'purpleBlueGradient\': showPPCAcquisitionGradientBanner}">\n                    <span class="bmlApplyLink">\n                        <a href="#" ng-click="bml()" class="proceed" ng-bind-html="banner.ctaText" track-link="acquisition_offer_banner_MORS"></a>\n                    </span>\n                    <div class="acquisitionBannerLeft">\n                        <div class="prominentBannerIcon">\n                            <span class="creditIcon" ng-if="useFallbackBanner"></span>\n                            <img ng-src="{{banner.logo}}" ng-if="!useFallbackBanner" />\n                        </div>\n                    </div>\n                    <div class="acquisitionBannerRight">\n                        <p class="bmlOfferTitle" ng-class="{\'strongBmlOfferTitle\': showIncentiveBanner}" ng-bind-html="banner.bodyText"></p>\n                        <p id="bmlOfferTitleSecRow" ng-if="showIncentiveBanner" class="bmlOfferTitle" ng-bind-html="banner.bodyText2"></p>\n                        <p class="bmlSeeTerms offerSmallText">\n                            <span class="seeTermsLink ng-scope" ng-bind-html="banner.termsText"></span>\n                            <a href=\'{{banner.termsLink}}\'\n                               class=\'popup bmlTermsLink\'\n                               target=\'_blank\'\n                               ng-bind-html="banner.termsLinkText"\n                               track-link="acquisition_offer_banner_MORS_terms_link"\n                               xo-popup></a>\n                        </p>\n                    </div>\n                    <div class="clearfix"></div>\n                </div>\n            </div>\n\n            <!-- Reuse banner (always prominent) -->\n            <div id="bmlExistingOfferProminent" class="prominentBanner creditBanner" ng-if="banner.bodyText && showReuseBanner()">\n                <div class="prominentBannerSeparator">\n                    <span class="prominentBannerSeparatorLine"></span>\n                    <span class="prominentBannerSeparatorWord" ng-bind-html="htmlContent(\'offers.or\')"></span>\n                </div>\n                <div class="bmlCtaWrap">\n                    <div class="prominentBannerIcon">\n                        <span class="creditIcon" ng-if="useFallbackBanner"></span>\n                        <img ng-src="{{banner.logo}}" ng-if="!useFallbackBanner" />\n                    </div>\n                    <span class="bmlChangeLink">\n                        <a track-link="reuse_offer_banner_MORS" link-button ng-click="selectExistingBml()" class="proceed"\n                           ng-bind-html="banner.ctaText"></a>\n                    </span>\n                    <p class="bmlExistingOfferTitle" ng-bind-html="banner.bodyText"></p>\n\n                    <p class="bmlSeeTerms offerSmallText">\n                        <span class="clearfix bmlExistingOfferText"\n                              ng-bind-html="banner.bodyText2"></span>\n                        <span class="seeTermsLink ng-scope">\n                            <a href=\'{{creditReuseTerms}}\'\n                               class=\'popup bmlTermsLink\'\n                               target=\'_blank\'\n                               ng-bind-html="banner.termsLinkText"\n                               track-link="reuse_offer_banner_MORS_terms_link"\n                               xo-popup></a>\n                        </span>\n                    </p>\n                </div>\n            </div>\n        </div>\n\n        <!-- // End US banners -->\n\n        <!-- UK banners -->\n\n        <div ng-if="buyerCountry === \'GB\'">\n\n            <!-- Acquisition banner -->\n            <div id="installmentOffer" class="bmlCtaWrap prominentBanner creditBanner" ng-if="installment.showBanner && !showPPCAcquisitionRadioButton">\n                <div class="trayInner">\n                    <div class="acquisitionBannerLeft">\n                        <div class="creditIcon"> </div>\n                    </div>\n                    <div class="clearfix"></div>\n                    <span class="cycoApplyLink">\n                        <a track-click="acquisition_offer_banner" link-button ng-click="creditOffer()" class="proceed apply_uk_credit">{{content(\'offers.bmlOfferBtn\')}}\n                            <span class="frontArrow goTray"></span>\n                        </a>\n                    </span>\n                    <div class="offerText">\n                        <p ng-if="offerTypeKey"\n                           ng-bind-html="htmlContent(offerTypeKey,{monthlyPayment: creditOffers.installment_options[installmentCount -1].monthlyPayment.formattedAmt, term:creditOffers.installment_options[installmentCount -1].term,\n                           cartAmount:checkoutCart.get(\'purchase.amounts.total.amount_formatted\')})"></p>\n                        <p ng-if="!offerTypeKey || checkoutCart.isBilling()"\n                           ng-bind-html="htmlContent(\'offers.bmlOfferNoCart\')"></p>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Reuse banner -->\n            <div id="bmlExistingOffer" class="bmlCtaWrap prominentBanner creditBanner" ng-if="showReuseBanner()">\n                <div class="trayInner">\n                    <div class="creditIcon"/>\n                    <p class="bmlExistingOfferTitle" ng-bind-html="htmlContent(\'offers.bmlExistingOfferTitle\')"></p>\n\n                    <span class="bmlChangeLink">\n                        <a track-link="reuse_offer_banner" link-button ng-click="selectExistingBml()" class="proceed">{{content(\'offers.select\')}}</a>\n                    </span>\n\n                    <p class="bmlSeeTerms offerSmallText">\n                        <span class="clearfix bmlExistingOfferText"\n                              ng-bind-html="htmlContent(reuseOfferTypeKey,{monthlyPayment: creditOffers.installment_options[installmentCount -1].monthlyPayment.formattedAmt, term:creditOffers.installment_options[installmentCount -1].term})"></span>\n                    </p>\n\n                </div>\n            </div>\n        </div>\n\n        <!-- // End UK banners -->\n\n        <div id="plccOffer" class="bmlCtaWrap" ng-if="showPlcc">\n            <div class="trayInner">\n                <div class="plccOfferHeader">\n                    <img class="plccIcon" ng-src="{{promotion.logoUrl}}"/>\n                    <p class="headerText"> {{ content(\'offers.plccCardOfferHeader\',{ merchantName:promotion.name}) }}</p>\n                    <span class="plccAddNowLink">\n                        <a link-button ng-click="addPlcc()" class="proceed">{{content(\'offers.plccAddNowLink\')}}</a>\n                    </span>\n                    <p class="plccOfferDesc">{{ content(\'offers.plccCardOfferDesc\',{merchantName:promotion.name}) }}</p>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n';
    },
    "./components/xo-credit-components/src/offer/xo-credit-example-uk/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-credit-components/src/offer/xo-credit-example-uk/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/fi/index.js"), __webpack_require__("./components/xo-beaver/dist/logger.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid, template) {
            squid.module("xo-credit-example-uk.directive", [ "squid", "xomodel.checkout" ]).directive("xoCreditExampleUk", function() {
                return {
                    template: template
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-credit-components/src/offer/xo-credit-example-uk/template.html": function(module, exports) {
        module.exports = '<div id="xoCreditExampleUk" action="#" method="POST" content>\n    <p class="disclaimer reviewMsg bmlLender">{{content(\'chooseCreditOption.representativeEx\')}}</p>\n    <p class="disclaimer reviewMsg bmlLender">{{content(\'chooseCreditOption.representativeExHeader\')}}</p>\n    <table class="trayInner trayInnerDefault representativeEx row-fluid">\n        <tr class="span6">\n            <td class="representativeExKey">{{content(\'chooseCreditOption.purchaseRate\')}}</td>\n            <td class="representativeExampleAPRAmount">{{content(\'chooseCreditOption.purchaseRateValue\')}}</td>\n        </tr>\n        <tr class="span6">\n            <td class="representativeExKey">{{content(\'chooseCreditOption.representativeAPR\')}}</td>\n            <td class="representativeExampleAPRAmount">{{content(\'chooseCreditOption.representativeAPRValue\')}}</td>\n        </tr>\n        <tr class="span6 last">\n            <td class="representativeExKey">{{content(\'chooseCreditOption.exCreditLimit\')}}</td>\n            <td class="representativeExampleAPRAmount">{{content(\'chooseCreditOption.exCreditLimitValue\')}}</td>\n        </tr>\n    </table>\n    <p class="disclaimer reviewMsg bmlLender">{{content(\'chooseCreditOption.terms\')}}</p>\n</div>';
    },
    "./components/xo-member-components/src/review-paywith/directive.js": function(module, exports, __webpack_require__) {
        __webpack_require__("./components/xo-wallet-components/index.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js");
        __webpack_require__("./components/xo-ui-components/src/cardicon/directive.js");
        __webpack_require__("./components/xo-ui-components/src/fi-panel/directive.js");
        __webpack_require__("./components/xo-ui-components/src/experience/directive.js");
        __webpack_require__("./components/xo-credit-components/src/pay-with-credit/directive.js");
        __webpack_require__("./components/xo-credit-components/src/offer/directive.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        __webpack_require__("./components/xo-member-components/src/billing-address/directive.js");
        __webpack_require__("./components/xo-member-components/src/card-backup/directive.js");
        __webpack_require__("./components/xo-member-components/src/preferred-checkbox/directive.js");
        var _pxp = __webpack_require__("./components/xo-page-components/src/cart/lib/pxp.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index = __webpack_require__("./components/xo-models/src/fiMeta/index.js");
        var _index2 = _interopRequireDefault(_index);
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _template = __webpack_require__("./components/xo-member-components/src/review-paywith/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        (0, _angular.$registerDirective)("xo-review-paywith", function() {
            return {
                template: _template2["default"],
                restrict: "E",
                scope: {
                    token: "=",
                    showBmlPopup: "=",
                    installmentNotSelected: "=",
                    payButtonText: "=",
                    installment: "=",
                    padToggleFeature: "=",
                    selectedmethod: "=",
                    makeFiPreferred: "=",
                    selectFiVariant: "=",
                    nmjExperience: "=",
                    creditParentContext: "="
                },
                controller: function controller($scope, $rootScope, $q) {
                    $scope.locale = _squid.$locale;
                    $scope.formatCurrency = _squid.formatCurrency;
                    $scope.nmjMultiPage = $scope.nmjExperience && $scope.nmjExperience.multiPage;
                    $scope.showUachFeatureDiscalimer = false;
                    $scope.showChangeFI = function() {
                        return $scope.canChangeFI && !$scope.selectedmethod && !$scope.nmjExperience;
                    };
                    $scope.showCreditPlacement = function(fs) {
                        return fs && !fs.is_pinless_debit && fs.name === "PayPal Credit";
                    };
                    var populateModels = function populateModels() {
                        _index2["default"].instance($scope.token).fetch();
                        return (0, _squid.$populate)($scope, {
                            checkoutAppData: _checkout.$CheckoutAppDataModel.instance($scope.token),
                            checkoutCart: _checkout.$CheckoutCartModel.instance($scope.token),
                            checkoutSession: _checkout.$CheckoutSessionModel.instance($scope.token),
                            payee: _checkout.$CheckoutPayeeModel.instance($scope.token)
                        });
                    };
                    var setShowAmount = function setShowAmount() {
                        var userAction = $scope.checkoutAppData.useraction();
                        var noLineItemDetails = !(userAction && userAction.toLowerCase() === "commit") && $scope.checkoutCart.get("purchase.items.length", 0) === 0;
                        return (0, _pxp.$pxpCartAmt)($scope.checkoutAppData.get("merchant.merchant_country"), $scope.payee.get("merchant.id", ""), noLineItemDetails, $scope.checkoutCart.isPurchase()).then(function(showAmount) {
                            $scope.showAmt = $scope.checkoutCart.get("payment_action") !== "authorize" && showAmount;
                        });
                    };
                    var setNegativeBalanceData = function setNegativeBalanceData() {
                        var negBals = $scope.checkoutSession.negBals;
                        if (negBals && negBals[0].currency_code !== $scope.checkoutCart.purchase.amounts.currency_code) {
                            negBals = negBals.reverse();
                        }
                        $scope.negBals = negBals;
                    };
                    var setShowBillingAddress = function setShowBillingAddress() {
                        if (!$scope.nmjMultiPage) {
                            return;
                        }
                        var selectedInstrument = $scope.checkoutSession.plan.sources && $scope.checkoutSession.plan.sources[0];
                        if (selectedInstrument && selectedInstrument.type === "PAYMENT_CARD") {
                            $scope.showBillingAddress = true;
                        }
                    };
                    var setLoggingForCardBackup = function setLoggingForCardBackup() {
                        $scope.$watch("checkoutSession.cardBackup.isAllowed()", function(allowed) {
                            _logger.$logger.info("checkout_fpti", {
                                from: "processor_decline_retry",
                                to: "processor_decline_retry_eligible",
                                is_bkp_funding_shown: allowed ? 1 : 0
                            });
                        });
                    };
                    return populateModels().then(function() {
                        return $q.all([ setShowAmount(), setNegativeBalanceData(), setShowBillingAddress(), setLoggingForCardBackup() ]).then(function() {
                            var plans = $scope.checkoutSession.get("fundingOptions.plans");
                            var merchant = $scope.checkoutAppData.merchant;
                            $scope.merchant = merchant.brand_name || merchant.merchant_name || merchant.merchant_email;
                            var cvvData = $scope.checkoutSession.cvvData;
                            if (cvvData && !cvvData.lastAddedCard) {
                                _logger.$logger.info("checkout_fpti", {
                                    iscvvshown: "true"
                                });
                            }
                            $scope.sacEligible = function(fsType) {
                                if (fsType !== "BILL_ME_LATER") {
                                    return false;
                                }
                                var total = $scope.checkoutCart.get("purchase.amounts.total");
                                if (total && !$scope.installment.showCYCO && parseFloat(total.amount) >= _checkout.$CreditOptionsModel.sacEligibleAmount[_squid.$locale.country]) {
                                    return true;
                                }
                            };
                            var isBilling = $scope.checkoutCart.isBilling();
                            var isBillingNoPurchase = $scope.checkoutCart.isBillingNoPurchase();
                            var disableStickyForMerchant = _squid.$config.disableMerchantForStickyBA.indexOf($scope.payee.merchant.id) > -1;
                            var stickyInstrument = $scope.checkoutSession.getSelectedStickyInstrument();
                            var isWpsSubscription = $scope.checkoutAppData.is_wps_subscription_flow();
                            $scope.showPayMerchantWithPayPal = isBillingNoPurchase && (disableStickyForMerchant || !stickyInstrument);
                            $scope.showPayWithText = !$scope.nmjMultiPage && !$scope.showPayMerchantWithPayPal;
                            $scope.showPreferredLabel = $scope.selectFiVariant && $scope.makeFiPreferred && $scope.checkoutSession.getPlanList() && $scope.checkoutSession.getPlanList().length > 1;
                            var checkoutPlan = $scope.checkoutSession.plan;
                            $scope.canChangeFI = true;
                            if ($scope.showPayMerchantWithPayPal || checkoutPlan.isMSB() || $scope.nmjMultiPage) {
                                $scope.canChangeFI = false;
                            } else if (checkoutPlan.isBalance() && !(0, _squid.$feature)("choiceExperiment")) {
                                $scope.canChangeFI = $scope.checkoutSession.plan.hasConversion() || $scope.checkoutSession.fundingOptions.hasECheck() || $scope.checkoutSession.fundingOptions.hasCredit() || Boolean($scope.checkoutSession.getDisallowedPreferred()) || Boolean($scope.checkoutSession.fundingOptions.getPreferred());
                            }
                            $scope.hasMultipleBalances = plans && plans.filter(function(p) {
                                return p.primaryFs.type === "BALANCE";
                            }).length > 1;
                            $scope.gotoWallet = function() {
                                if ($scope.selectedmethod) {
                                    return _uiRouter.$state.go("checkout.review.sidebar.sidebarManageWallet");
                                }
                                if ($scope.canChangeFI) {
                                    return _uiRouter.$state.go("checkout.review.sidebar.wallet", {
                                        padToggleFeature: $scope.padToggleFeature
                                    });
                                }
                            };
                            $scope.bmlSeeTerms = function() {
                                $scope.showBmlPopup();
                            };
                            var currentPlanId = $scope.checkoutSession.plan.id;
                            $scope.isSplitPaymentWithBalanceAndIachPlan = false;
                            var padToggleFeatureSupported = (0, _squid.$feature)("padToggleFeatureSupported");
                            if (padToggleFeatureSupported) {
                                $scope.padToggleFeature.applicable = $scope.checkoutSession.fundingOptions.isPadToggleApplicable();
                                $scope.padToggleFeature.checkboxEnabled = $scope.padToggleFeature.applicable && $scope.checkoutSession.plan.isPAD() ? true : false;
                                $scope.padToggleFeature.defaultPlan = $scope.checkoutSession.plan.isPAD();
                            }
                            if (padToggleFeatureSupported && $scope.padToggleFeature.applicable) {
                                var checkoutPageSection = angular.element(document.getElementById("sliding-area"));
                                checkoutPageSection.css("overflow", "visible");
                            }
                            $scope.showPadToggle = function() {
                                var padToggle = false;
                                if (padToggleFeatureSupported && $scope.padToggleFeature.applicable) {
                                    var padToggleForFS = $scope.checkoutSession.fundingOptions.isPadToggleApplicableForFS($scope.checkoutSession.plan.id);
                                    var isPadPlan = $scope.checkoutSession.plan.isPAD();
                                    $scope.isIachPlan = $scope.checkoutSession.plan.isIACH();
                                    if ($scope.isIachPlan && !$scope.isSplitPaymentWithBalanceAndIachPlan) {
                                        $scope.isSplitPaymentWithBalanceAndIachPlan = $scope.checkoutSession.plan.isSplitPaymentWithBalanceAndIach();
                                    }
                                    $scope.padToggleFeature.showCheckbox = padToggleForFS && (isPadPlan || $scope.isIachPlan);
                                    if (!padToggleForFS) {
                                        $scope.padToggleFeature.checkboxEnabled = false;
                                        currentPlanId = $scope.checkoutSession.plan.id;
                                    } else if (currentPlanId !== $scope.checkoutSession.plan.id && !isPadPlan) {
                                        $scope.padToggleFeature.checkboxEnabled = false;
                                        currentPlanId = $scope.checkoutSession.plan.id;
                                    } else if (currentPlanId !== $scope.checkoutSession.plan.id && isPadPlan) {
                                        $scope.padToggleFeature.checkboxEnabled = true;
                                        currentPlanId = $scope.checkoutSession.plan.id;
                                    }
                                    if ($scope.padToggleFeature.pxpTreatmentEnabled && $scope.padToggleFeature.showCheckbox) {
                                        padToggle = true;
                                    }
                                }
                                return padToggle;
                            };
                            $scope.isPadToggleFeatureApplicable = function() {
                                var padToggle = false;
                                if (padToggleFeatureSupported && $scope.padToggleFeature.pxpTreatmentEnabled && $scope.padToggleFeature.applicable) {
                                    padToggle = true;
                                }
                                return padToggle;
                            };
                            $scope.getPadFsContent = function(fs) {
                                return $scope.isPadToggleFeatureApplicable() ? $scope.content("paymentMethod.padToggleFs", {
                                    bank: fs.name,
                                    last4: fs.last4
                                }) : $scope.content("paymentMethod.padFs", {
                                    bank: fs.name,
                                    date: fs.hop_date,
                                    last4: fs.last4
                                });
                            };
                            $scope.updatePlan = function(planId) {
                                currentPlanId = planId;
                                $scope.checkoutSession.fundingOptions.action("select", {
                                    data: {
                                        planId: planId
                                    },
                                    success: function success(result) {
                                        $scope.checkoutSession.populate(result);
                                        if (result) {
                                            $scope.checkoutSession.installments = result.installments;
                                        }
                                    }
                                });
                            };
                            function getBankInstrumentId() {
                                var instrumentId = void 0;
                                if ($scope.isSplitPaymentWithBalanceAndIachPlan) {
                                    var iachSource = $scope.checkoutSession.plan.sources.find(function(source) {
                                        return source.type === "BANK_ACCOUNT" && source.sub_type === "INSTANT_TRANSFER";
                                    });
                                    instrumentId = iachSource && iachSource.instrument_id;
                                } else if ($scope.isIachPlan) {
                                    instrumentId = $scope.checkoutSession.plan.sources[0].instrument_id;
                                }
                                return instrumentId;
                            }
                            $scope.padToggleCheckboxEvent = function() {
                                var planId = void 0;
                                if ($scope.padToggleFeature.checkboxEnabled) {
                                    var bankInstrumentId = getBankInstrumentId();
                                    planId = $scope.checkoutSession.fundingOptions.getBankPadPlanIdByInstrumentId(bankInstrumentId, "IACH");
                                    _logger.$logger.info("checkout_fpti", {
                                        pad_toggle_status: "padToggleOn"
                                    });
                                } else {
                                    var padInstrumentId = $scope.checkoutSession.plan.sources[0].instrument_id;
                                    planId = $scope.checkoutSession.fundingOptions.getBankPadPlanIdByInstrumentId(padInstrumentId, "PAD");
                                    _logger.$logger.info("checkout_fpti", {
                                        pad_toggle_status: "padToggleOff"
                                    });
                                }
                                $scope.updatePlan(planId);
                            };
                            var processAllLoadedPadToggle = function processAllLoadedPadToggle() {
                                if (padToggleFeatureSupported && $scope.showPadToggle()) {
                                    if ($scope.padToggleFeature.checkboxEnabled) {
                                        var section = document.querySelector("#padToggleHelp");
                                        section.focus();
                                        section.blur();
                                    }
                                    if (!$scope.padToggleFeature.fptiLogged) {
                                        if ($scope.padToggleFeature.checkboxEnabled) {
                                            _logger.$logger.info("pad_toggle_on_feature_shown");
                                            _logger.$logger.info("checkout_fpti", {
                                                pad_toggle_status: "padToggleOnShown"
                                            });
                                        } else {
                                            _logger.$logger.info("pad_toggle_off_feature_shown");
                                            _logger.$logger.info("checkout_fpti", {
                                                pad_toggle_status: "padToggleOffShown"
                                            });
                                        }
                                        $scope.padToggleFeature.fptiLogged = true;
                                    }
                                }
                            };
                            var handleAllLoadedForPadToggle = $rootScope.$on("allLoaded", processAllLoadedPadToggle);
                            $scope.$on("$destroy", handleAllLoadedForPadToggle);
                            var stickyEligible = isBilling && !disableStickyForMerchant;
                            _squid.$config.features.DEFAULT.enableStickyFunding = stickyEligible;
                            $scope.getPlanList = function(n) {
                                var planList = stickyEligible && isBillingNoPurchase ? $scope.checkoutSession.getSelectedStickyInstrument() && [ $scope.checkoutSession.getSelectedStickyInstrument() ] : $scope.checkoutSession.plan.sources;
                                $scope.showUachFeatureDiscalimer = false;
                                angular.forEach(planList, function(plan) {
                                    if (plan && plan.type === "BANK_ACCOUNT" && plan.unconfirmed_bank && (0, _squid.$feature)("directDebitAgreement", false, plan.country_code)) {
                                        $scope.showUachFeatureDiscalimer = true;
                                    }
                                });
                                if (!n) {
                                    return planList;
                                } else {
                                    return planList.slice(0, n);
                                }
                            };
                            $scope.showBackupPlan = function(plan) {
                                return plan.backup && !(stickyEligible && isBillingNoPurchase);
                            };
                            var isRP = void 0;
                            if (isBilling) {
                                isRP = $scope.checkoutCart.billing.type === "RECURRING_PAYMENTS";
                            }
                            $scope.showRpBaText = isRP || isWpsSubscription;
                            $scope.showExpandedText = function() {
                                $scope.isExpandedAgreementText = true;
                            };
                            if (_squid.$locale.country === "US") {
                                $scope.isExpandedAgreementText = true;
                            }
                            $scope.getBAContent = function() {
                                var consentCode = $scope.checkoutCart.billing.consent_code;
                                var useraction = $scope.checkoutAppData.useraction() === "commit" ? "Pay" : "Continue";
                                var stickyFI = $scope.checkoutSession.getSelectedStickyInstrument();
                                var stickyOrNoStickyText = stickyEligible && stickyFI ? "FiSticky" : "NoFiSticky";
                                var expandedOrCollapsedText = $scope.isExpandedAgreementText === true ? "Expanded" : "Collapsed";
                                var contentKey;
                                if (consentCode) {
                                    contentKey = "enterpriseAgreement." + consentCode + (stickyEligible && stickyFI ? "" : "No") + "FiStickyConsent";
                                } else {
                                    contentKey = "billingAgreement.";
                                    $scope.isCIB = $scope.checkoutCart.billing.type === "CHANNEL_INITIATED_BILLING";
                                    if ($scope.isCIB) {
                                        contentKey += "memberAgreementCib" + stickyOrNoStickyText + useraction + expandedOrCollapsedText;
                                    } else {
                                        contentKey += "memberAgreement" + stickyOrNoStickyText + useraction;
                                    }
                                }
                                return contentKey;
                            };
                            $scope.getRPContent = function() {
                                var contentKey = "billingAgreement.";
                                var useraction = $scope.checkoutAppData.useraction() === "commit" ? "Pay" : "Continue";
                                if (stickyEligible && $scope.checkoutSession.getSelectedStickyInstrument()) {
                                    contentKey += "rpAgreementFiSticky" + useraction;
                                } else {
                                    contentKey += "rpAgreementNoFiSticky" + useraction;
                                }
                                return contentKey;
                            };
                            $scope.getStickyFiName = function() {
                                var selectedStickyInstrument = $scope.checkoutSession.getSelectedStickyInstrument();
                                return stickyEligible && selectedStickyInstrument && selectedStickyInstrument.name;
                            };
                            $scope.getStickyFiLast4 = function() {
                                var selectedStickyInstrument = $scope.checkoutSession.getSelectedStickyInstrument();
                                return stickyEligible && selectedStickyInstrument && selectedStickyInstrument.last4 && "x-" + selectedStickyInstrument.last4;
                            };
                            $scope.showSinglePreferred = function() {
                                var planList = $scope.checkoutSession.getPlanList();
                                return $scope.makeFiPreferred && !$scope.selectedmethod && (!$scope.selectFiVariant || planList && planList.length > 1);
                            };
                            $scope.updateFS = function(fundingsource, index) {
                                $scope.selectedmethod.planId = fundingsource.planId;
                                $scope.selectedmethod.index = index;
                                if ($scope.makeFiPreferred) {
                                    $scope.makeFiPreferred.selected = false;
                                }
                                $scope.checkoutSession.cardBackup.resetIfDoesNotApply(fundingsource);
                            };
                            $scope.getSortedPlans = function() {
                                return $scope.checkoutSession.getPlanList();
                            };
                            $scope.showMultipleFi = function() {
                                var length = $scope.selectedmethod && $scope.getSortedPlans() && $scope.getSortedPlans().length || 0;
                                if ($scope.installment && $scope.installment.showPPCAcquisitionRadioButton) {
                                    length++;
                                }
                                return length > 1;
                            };
                            $scope.isBillingNoCards = function() {
                                if ($scope.checkoutCart.isBillingNoPurchase()) {
                                    var emptyPlan = $scope.checkoutSession.futurePaymentInstruments && $scope.checkoutSession.futurePaymentInstruments.length === 0;
                                    if ($scope.checkoutAppData.flags.allow_billing_agreement_without_bufs && emptyPlan) {
                                        $scope.canChangeFI = false;
                                        $scope.showEmptyPlanHeader = true;
                                        _logger.$logger.info("BA_nocards_toggle_on_and_empty_plan");
                                        return true;
                                    }
                                }
                                return false;
                            };
                            $scope.showPPCAcquisitionRadioButton = function() {
                                return $scope.installment && $scope.installment.showPPCAcquisitionRadioButton;
                            };
                            $scope.selectApplyForPPC = function() {
                                return $scope.updateFS({
                                    planId: "applyForPPCRadio"
                                });
                            };
                        });
                    });
                }
            };
        });
        _logger.$logger;
        _pxp.$pxpCartAmt;
        _checkout.$CheckoutCartModel;
        _checkout.$CheckoutAppDataModel;
        _checkout.$CheckoutSessionModel;
        _checkout.$CreditOptionsModel;
        _checkout.$CheckoutPayeeModel;
        _squid.formatCurrency;
        _squid.$config;
        _squid.$feature;
        _squid.$populate;
        _squid.$locale;
        _uiRouter.$state;
        _angular.$registerDirective;
    },
    "./components/xo-wallet-components/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _addCard = __webpack_require__("./components/xo-wallet-components/src/add-card/index.js");
        Object.keys(_addCard).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function get() {
                    return _addCard[key];
                }
            });
        });
    },
    "./components/xo-credit-components/src/pay-with-credit/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-credit-components/src/pay-with-credit/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-pay-with-credit.directive", [ "squid", "xomodel.checkout" ]).directive("xoPayWithCredit", function() {
                return {
                    template: template,
                    restrict: "E",
                    scope: {
                        token: "=",
                        doneFn: "="
                    },
                    controller: function controller($scope, $populate, $state, $CheckoutCartModel, $CheckoutSessionModel, $locale, $window, $logger, $config) {
                        var stateName = "gce_pay_with_credit";
                        $populate($scope, {
                            checkoutCart: $CheckoutCartModel.instance($scope.token),
                            checkoutSession: $CheckoutSessionModel.instance($scope.token)
                        }).then(function() {
                            var offerShown = false;
                            $scope.showPayWithCredit = function() {
                                if (!$scope.checkoutCart.get("purchase.amounts.total.amount")) {
                                    offerShown = false;
                                    return false;
                                }
                                var amount = parseFloat($scope.checkoutCart.purchase.amounts.total.amount);
                                var minAmount = $window.config.minCreditAmtNoInterest[$locale.country];
                                var hasCredit = $scope.checkoutSession.fundingOptions.hasCredit();
                                var fundingSource = $scope.checkoutSession.plan.sources;
                                var showOffer = $config.features.DEFAULT.showPayWithCreditOffer && !$scope.checkoutSession.plccOffer;
                                if (showOffer && minAmount && amount >= minAmount && hasCredit) {
                                    for (var i in fundingSource) {
                                        if (fundingSource[i].type === "BILL_ME_LATER") {
                                            offerShown = false;
                                            return false;
                                        }
                                    }
                                    if (!offerShown) {
                                        $logger.info(stateName + "_offer_shown");
                                    }
                                    offerShown = true;
                                    return true;
                                }
                                offerShown = false;
                                return false;
                            };
                            $scope.onSubmit = function() {
                                $logger.info(stateName + "_offer_clicked");
                                $scope.checkoutSession.message = null;
                                var instruments = $scope.checkoutSession.fundingOptions.instruments;
                                var creditPlanId;
                                for (var i in instruments) {
                                    if (instruments[i].type === "CREDIT" && instruments[i].name === "BILL_ME_LATER") {
                                        creditPlanId = instruments[i].planId;
                                    }
                                }
                                if (!creditPlanId) {
                                    $logger.info(stateName + "_credit_planid_not_found");
                                    return;
                                }
                                $scope.checkoutSession.fundingOptions.action("select", {
                                    resultModel: $scope.checkoutSession,
                                    data: {
                                        planId: creditPlanId
                                    },
                                    success: function success(result) {
                                        $scope.checkoutSession.message = {
                                            type: "success",
                                            msgKeys: [ "paymentMethod.paymentMethodUpdated" ]
                                        };
                                        $logger.info(stateName + "_success");
                                    }
                                });
                            };
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-credit-components/src/pay-with-credit/template.html": function(module, exports) {
        module.exports = '<div id="pay-with-credit" class="bmlCtaWrap" ng-if="showPayWithCredit()" content>\n    <div class="trayInner trayInnerDefault">\n        <div class="decreasedWidth noBottom">\n            <p>{{ content(\'memberReview.switchToBml\') }}</p>\n            <span class="disclaimer" bind-html-compile="htmlContent(\'offers.seeBmlTerms\')"></span>\n        </div>\n        <a href="" track-submit class="button-as-link edits" ng-click="onSubmit()">{{ content(\'common.select\') }}</a>\n    </div>\n</div>\t';
    },
    "./components/xo-member-components/src/billing-address/directive.js": function(module, exports, __webpack_require__) {
        __webpack_require__("./components/xo-member-components/src/billing-address/styles.less");
        var _template = __webpack_require__("./components/xo-member-components/src/billing-address/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _fi = __webpack_require__("./components/xo-models/src/fi/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        (0, _squid.$registerDirective)("xo-billing-address", function() {
            return {
                template: _template2["default"],
                scope: {
                    token: "=",
                    editUri: "="
                },
                lifecycle: {
                    enter: function enter() {
                        _logger.$logger.info("xo-billing-address_enter");
                    }
                },
                controller: function controller($scope, $q) {
                    var getBillingAddress = function getBillingAddress(cardId) {
                        return (0, _squid.$populate)($scope, {
                            cardInfo: _fi.$CardInfoModel.instance(cardId)
                        }).then(function() {
                            return $scope.cardInfo && $scope.cardInfo.billingAddress;
                        });
                    };
                    var updateScopeData = function updateScopeData(checkoutSession) {
                        $scope.selectedCardId = $scope.checkoutSession.plan.sources[0].instrument_id;
                        return getBillingAddress($scope.selectedCardId).then(function(address) {
                            $scope.address = address;
                            $scope.line3 = address.city + ", " + address.state + " " + address.postal_code;
                        });
                    };
                    (0, _squid.$populate)($scope, {
                        checkoutSession: _checkout.$CheckoutSessionModel.instance($scope.token)
                    }).then(function() {
                        $scope.header = _squid.$locale.content.get("addCard.billingAddress");
                        $scope.updateType = _squid.$locale.content.get("common.edit");
                        return updateScopeData($scope.checkoutSession);
                    });
                    $scope.$watchCollection("checkoutSession", function(newVal) {
                        if (newVal) {
                            if ($scope.cardInfo) {
                                $scope.cardInfo.invalidate();
                            }
                        }
                        return updateScopeData($scope.checkoutSession);
                    });
                }
            };
        });
        _squid.$locale;
        _squid.$populate;
        _squid.$registerDirective;
        _logger.$logger;
        _checkout.$CheckoutSessionModel;
        _fi.$CardInfoModel;
    },
    "./components/xo-member-components/src/billing-address/styles.less": "./css/app.less",
    "./components/xo-member-components/src/billing-address/template.html": function(module, exports) {
        module.exports = '<div id="billing-address-wrapper" ng-model="checkoutSession">\n    <div class="box-header">\n        <div class="headerText">{{header}}</div>\n    </div>\n    <div class="box-body">\n        <span>{{address.line1}},</span>\n        <span ng-if="address.line2">{{address.line2}},</span>\n        <span>{{line3}}</span>\n        <a track-link="edit_billing_address" ui-sref="checkout.payWithCard.sidebar.sidebarUpdateCard.addCardFlow.addCard({planId: selectedCardId})" class="addCardLink" role="button">\n            {{updateType}}\n        </a>\n\n    </div>\n</div>\n';
    },
    "./components/xo-member-components/src/card-backup/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _fiMeta = __webpack_require__("./components/xo-models/src/fiMeta/index.js");
        var _fiMeta2 = _interopRequireDefault(_fiMeta);
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _template = __webpack_require__("./components/xo-member-components/src/card-backup/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-member-components/src/card-backup/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$CardBackupComponent", {
            tag: "xo-card-backup",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: true
                },
                selectedmethod: {
                    type: "var",
                    required: false
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutSession: _checkout.$CheckoutSessionModel.instance(this.props.token).retrieve(),
                        fiMeta: _fiMeta2["default"].instance(this.props.token).fetch()
                    };
                }
            },
            actions: {
                getAllowedBackups: function getAllowedBackups() {
                    var planList = this.models.checkoutSession.getPlanList() || [];
                    var currentPlanId = this.props.selectedmethod ? this.props.selectedmethod.planId : planList[0].planId;
                    return planList.filter(function(a) {
                        return a.planId !== currentPlanId;
                    });
                },
                renderCover: function renderCover() {
                    var backup = this.models.checkoutSession.cardBackup.getPlan();
                    if (!backup) {
                        return (0, _squid.$renderContent)("paymentMethod.noBackup");
                    } else {
                        return this.actions.renderOption(backup) + " " + (0, _squid.$renderContent)("paymentMethod.backup");
                    }
                },
                renderOption: function renderOption(plan) {
                    return this.models.fiMeta.getName(plan.primaryFs) + " x-" + plan.primaryFs.lastDigits;
                },
                selectBackup: function selectBackup(plan) {
                    var _this = this;
                    var selectedmethodPlan = this.props.selectedmethod ? (this.models.checkoutSession.getPlanList() || []).find(function(p) {
                        return p.planId === _this.props.selectedmethod.planId;
                    }) : null;
                    this.models.checkoutSession.cardBackup.setPlan(plan, selectedmethodPlan);
                    this.actions.toggleDropdown();
                },
                toggleDropdown: function toggleDropdown() {
                    var _this2 = this;
                    this.showDropdown = !this.showDropdown;
                    if (this.showDropdown) {
                        (0, _angular.$timeout)(function() {
                            return _this2.actions.showDropdownUI();
                        });
                    }
                },
                showDropdownUI: function showDropdownUI(open) {
                    var position = this.$element.find(".card-backup-dropdown").position();
                    this.$element.find(".card-backup-options").css({
                        right: position && position.left < 0 ? position.left : 0,
                        visibility: "visible"
                    });
                }
            },
            lifecycle: {
                populate: function populate() {
                    var _this3 = this;
                    _angular.$document.on("focusin.cardBackup", function(event) {
                        if (_this3.showDropdown && !_this3.$element[0].contains(event.target)) {
                            _this3.showDropdown = false;
                        }
                    });
                },
                exit: function exit() {
                    _angular.$document.off("focusin.cardBackup");
                }
            }
        });
        _angular.$document;
        _angular.$timeout;
        _squid.$Component;
        _squid.$renderContent;
        _checkout.$CheckoutSessionModel;
        module.exports = exports["default"];
    },
    "./components/xo-member-components/src/card-backup/template.html": function(module, exports) {
        module.exports = '<div class="card-backup" content>\n    <div class="card-backup-head">\n        <span class="common-icon info"></span>\n        <a ng-click="actions.toggleDropdown()"\n            class="card-backup-cover link-dotted"\n            href="#" select-button aria-expanded="{{showDropdown}}" focus-when="!showDropdown" focused-once-before>\n            {{actions.renderCover()}}\n            <span class="card-backup-expand common-icon expand"></span>\n        </a>\n        <div ng-if="showDropdown" class="card-backup-dropdown" tabindex="-1" select-box select-cancel="actions.toggleDropdown()" form-autofocus>\n            <div class="arrow-top"></div>\n            <div class="card-backup-options">\n                <li ng-repeat="plan in actions.getAllowedBackups()"\n                    class="card-backup-option secondary">\n                    <a href="#" link-button\n                        ng-click="actions.selectBackup(plan)">\n                        {{actions.renderOption(plan)}}\n                    </a>\n                    <span ng-if="models.checkoutSession.cardBackup.getPlan() === plan"\n                        class="common-icon check-blue">\n                    </span>\n                </li>\n                <li class="card-backup-option secondary">\n                    <a href="#" link-button\n                        ng-click="actions.selectBackup(null)">\n                        {{content(\'paymentMethod.noBackup\')}}\n                    </a>\n                    <span ng-if="!models.checkoutSession.cardBackup.getPlan()"\n                        class="common-icon check-blue">\n                    </span>\n                </li>\n            </div>\n        </div>\n    </div>\n    <div class="card-backup-info secondary">\n        {{content(\'paymentMethod.cardBackupDescription\')}}\n    </div>\n</div>\n';
    },
    "./components/xo-member-components/src/card-backup/styles.less": "./css/app.less",
    "./components/xo-member-components/src/preferred-checkbox/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _template = __webpack_require__("./components/xo-member-components/src/preferred-checkbox/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-member-components/src/preferred-checkbox/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend({
            tag: "xo-preferred-checkbox",
            template: _template2["default"],
            props: {
                makeFiPreferred: {
                    type: "var",
                    required: true
                },
                plan: {
                    type: "var",
                    required: true
                }
            },
            actions: {
                toggleModel: function toggleModel() {
                    if (this.props.makeFiPreferred.selected) {
                        this.props.makeFiPreferred.planId = this.props.plan.planId;
                        this.props.makeFiPreferred.fiId = this.props.plan.primaryFs.type === "BALANCE" ? this.props.plan.primaryFs.type : this.props.plan.primaryFs.id;
                    }
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    this.showCheckbox = function() {
                        return (_this.props.plan.primaryFs.id || _this.props.plan.primaryFs.type === "BALANCE") && !_this.props.plan.primaryFs.isPreferred;
                    };
                    if (this.showCheckbox()) {
                        _logger.$logger.info("checkout_fpti", {
                            pref_fi_option_shown: "1"
                        });
                    }
                }
            }
        });
        _squid.$Component;
        _logger.$logger;
        module.exports = exports["default"];
    },
    "./components/xo-member-components/src/preferred-checkbox/template.html": function(module, exports) {
        module.exports = '<div ng-if="showCheckbox()" class="checkboxFiPreferred sCheckbox checkbox" ng-class="plan.primaryFs.name" content>\n    <input type="checkbox" ng-model="makeFiPreferred.selected" name="makeFiPreferred" id="makeFiPreferred" ng-change="actions.toggleModel()">\n    <label for="makeFiPreferred">{{\n    \tcontent(\n    \t\t\'memberReview.prefer_\' + plan.primaryFs.type,\n    \t\t{ name: content(\'fsMappings.\'+ plan.primaryFs.name) }\n    \t)\n\t}}</label>\n</div>\n';
    },
    "./components/xo-member-components/src/preferred-checkbox/styles.less": "./css/app.less",
    "./components/xo-page-components/src/cart/lib/pxp.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-cart.pxp", [ "squid.pxp" ]).factory("$pxpCartAmt", function($pxp, $q) {
                    return function(merchantCountry, merchantId, noLineItemDetails, isPurchase) {
                        if (merchantCountry !== "AU" && noLineItemDetails && isPurchase) {
                            var pageName = "xo_hermes_no_line_item_details";
                            var showAmtBlacklistTreatment = "xo_hermes_no_line_items_show_amount_blacklist_test_group";
                            var showAmtTreatment = "xo_hermes_no_line_items_show_amount_test_group";
                            return $q.all([ $pxp(pageName, {
                                "ctx.merchantID": merchantId,
                                uid: merchantId
                            }, showAmtBlacklistTreatment), $pxp(pageName, {
                                "ctx.merchantID": merchantId,
                                uid: merchantId
                            }, showAmtTreatment) ]).then(function(results) {
                                var showAmtBlacklist = results[0];
                                var showAmt = results[1];
                                if (showAmtBlacklist && showAmtBlacklist.treatment_name === showAmtBlacklistTreatment) {
                                    return true;
                                }
                                if (showAmt && showAmt.treatment_name === showAmtTreatment) {
                                    return true;
                                }
                                return false;
                            });
                        }
                        return $q.when(!noLineItemDetails && isPurchase);
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-page-components/src/cart/lib", "components/xo-page-components/src/cart/lib/pxp.js");
    },
    "./components/xo-member-components/src/review-paywith/template.html": function(module, exports) {
        module.exports = '<div class="paywith asideView" content>\n    <div class="trayInner trayInnerDefault" ng-class="{installments:(checkoutSession.installments.length > 1)}">\n        <div id="paymentMethod">\n            <div ng-click="gotoWallet()" ng-if="!showMultipleFi() && !isBillingNoCards()" focusable="canChangeFI || selectedmethod" ng-class="{editable:canChangeFI || selectedmethod}" class="focusable singleFi">\n                <h4 class="noBottom paymentsHeader zeta">\n                    <span ng-if="isPadToggleFeatureApplicable()">\n                        {{ content(\'paymentMethod.payWith\') }}\n                    </span>\n                    <span ng-if="!isPadToggleFeatureApplicable()">\n                        <span ng-if="checkoutSession.plan.isPAD()">\n                        {{ content(\'paymentMethod.payAfter\') }}\n                        </span>\n                        <span ng-if="!checkoutSession.plan.isPAD()">\n                            <span ng-if="showPayMerchantWithPayPal">\n                                {{ content(\'paymentMethod.payMerchantWithPayPal\', {merchantName: merchant}) }}\n                            </span>\n                            <span ng-if="showPayWithText">\n                                {{ content(\'paymentMethod.payWith\') }}\n                            </span>\n                        </span>\n                    </span>\n                </h4>\n                <experience flag=\'!cardart\'>\n                    <ul class="charges">\n                        <li ng-repeat="fs in getPlanList()" class="clearfix fs" ng-if="fs.amount.doubleValue != 0">\n                            <div ng-class="[\'method\', fs.type, fs.sub_type, fs.card_type]">\n                                <!-- xo-fi-icon fi="fs" class-name="fsIcons"></xo-fi-icon -->\n                                <span class="fsIcons" ng-if="!fs.is_pinless_debit"></span>\n                                <span class="pinlessGlyphIcon icon icon-card-half-solid" aria-hidden="true" ng-if="fs.is_pinless_debit"></span>\n                                <span class="name">\n                                    <span ng-if="fs.type === \'PPCREDIT\'">\n                                        {{ content(\'paymentMethod.billmelater\') }}\n                                    </span>\n                                    <span ng-if="fs.sub_type === \'DELAYED_TRANSFER\' && !isPadToggleFeatureApplicable()" ng-bind-html="htmlContent(\'paymentMethod.padFs\', {bank: fs.name, date: fs.hop_date, last4: fs.last4})">\n                                    </span>\n                                    <span ng-if="fs.sub_type === \'DELAYED_TRANSFER\' && isPadToggleFeatureApplicable()" ng-bind-html="htmlContent(\'paymentMethod.padToggleFs\', {bank: fs.name, last4: fs.last4})">\n                                    </span>\n                                    <span ng-if="fs.type === \'INCENTIVE\'">\n                                        {{ content(\'paymentMethod.msbOffer\') }}\n                                    </span>\n                                    <span class="forceRTL" ng-if="fs.type === \'BALANCE\'">\n                                        {{ content(\'paymentMethod.paypalBalance\') }}\n                                    </span>\n                                    <span ng-if="fs.type === \'PAYPAL_EXTRAS_MASTERCARD\'">\n                                        {{ content(\'fsMappings.PAYPAL_EXTRAS_MASTERCARD\') }}\n                                    </span>\n                                    <span ng-if="fs.type !== \'PPCREDIT\' && fs.type !== \'INCENTIVE\' && fs.type !== \'BALANCE\' && fs.sub_type !== \'DELAYED_TRANSFER\' && fs.type !== \'PAYPAL_EXTRAS_MASTERCARD\'">\n                                        <span class="fsNamePinlessDebit" ng-if="fs.is_pinless_debit">\n                                            {{ content(\'paymentMethod.pinlessDebit\') }}\n                                        </span>\n                                        <span class="fsname" ng-if="!fs.is_pinless_debit">\n                                            {{fs.name}}\n                                        </span>\n                                        <span ng-if="fs.type === \'ECHECK\'">{{ content(\'paymentMethod.eCheck\') }}</span>\n                                        <span class="fsLastDigitsPinlessDebit" ng-if="fs.is_pinless_debit">\n                                            {{fs.last4 ? \'x-\' + fs.last4 : \'\'}}\n                                        </span>\n                                        <span class="fslastdigits" ng-if="!fs.is_pinless_debit">\n                                            {{fs.last4 ? \'x-\' + fs.last4 : \'\'}}\n                                        </span>\n                                        <span ng-if="countryCode === \'DE\'">\n                                            <span ng-if="fs.sub_type === \'MEFT\'">\n                                                {{ content(\'paymentMethod.meft\') }}\n                                            </span>\n                                            <span ng-if="fs.sub_type === \'IACH\'">\n                                                {{ content(\'paymentMethod.iach\') }}\n                                            </span>\n                                            <span ng-if="fs.sub_type === \'INSTANT_TRANSFER\' && fs.type === \'BANK\'">\n                                                {{ content(\'paymentMethod.instantTransfer\') }}\n                                            </span>\n                                        </span>\n                                    </span>\n                                    <span ng-if="fs.is_preferred && showPreferredLabel" class="preferredLabel">\n                                        <br>\n                                        {{ content(\'memberReview.preferred\') }}\n                                    </span>\n                                </span>\n                                <span ng-if="showCreditPlacement(fs)">\n                                    <xo-offer token="token" promotion="promotion"\n                                              bmlaction="bmlaction" installment="installment"\n                                              selectedmethod="selectedmethod" reusetext="true" parent-context="creditParentContext">\n                                    </xo-offer>\n                                </span>\n                                <p class="msbHelpText secondary" ng-if="fs.type === \'INCENTIVE\'">\n                                    {{ content(\'paymentMethod.msbHelpText\', {amount: formatCurrency(fs.amount.amount, fs.amount.currency_code)})}}\n\n                                    <a class="msbDetails" id="msb_{{$index}}" link-button>{{ content(\'paymentMethod.msbDetails\')}}</a>\n                                </p>\n\n                                <xo-tooltip ng-if="fs.type === \'INCENTIVE\'" trigger="#msb_{{$index}}" show-event="click" hide-event="mouseleave" ng-click="$event.stopPropagation()">\n                                    <div class="tip tipDesc">\n                                        <h4>{{ content(\'paymentMethod.msbToolTipOffer\') }}</h4>\n                                        <div class="msbToolTipDescription">\n                                            <p ng-if="fs.minPurchaseAmount">\n                                                {{ content(\'paymentMethod.msbToolTipText\', {amount: formatCurrency(fs.amount.amount, fs.amount.currency_code), minimumPurchase:fs.minPurchaseAmount})\n                                                }}\n                                            </p>\n                                            <p ng-if="!fs.minPurchaseAmount">\n                                                {{ content(\'paymentMethod.msbToolTipText2\', {amount: formatCurrency(fs.amount.amount, fs.amount.currency_code)}) }}\n                                            </p>\n                                            <p>\n                                            </p>\n                                        </div>\n                                    </div>\n                                </xo-tooltip>\n\n                                <xo-tooltip class="tip tipHint padHelpToolTip" ng-if="fs.sub_type === \'DELAYED_TRANSFER\'"\n                                            trigger="#padHelp" show-event="mouseover" hide-event="mouseleave">\n                                    <div class="tipText tipHintText">\n                                        <p class="padHeader">\n                                            {{content(\'paymentMethod.padHelpTxt\')}}\n                                        </p>\n                                        <ul class="bul">\n                                            <li>\n                                                <span ng-bind-html="htmlContent(\'paymentMethod.padHelpTxtList1\', {date: fs.hop_date, country: locale.country, lang: locale.lang})"></span>\n                                            </li>\n                                            <li>\n                                                <span ng-bind-html="htmlContent(\'paymentMethod.padHelpTxtList2\', {country: locale.country, lang: locale.lang})"></span>\n                                            </li>\n                                            <li>\n                                                <span ng-bind-html="htmlContent(\'paymentMethod.padHelpTxtList3\')"></span>\n                                            </li>\n                                        </ul>\n                                        <p>\n                                            <span ng-bind-html="htmlContent(\'paymentMethod.padTnc\', {country: locale.country, lang: locale.lang})"></span>\n                                        </p>\n                                    </div>\n                                </xo-tooltip>\n                            </div>\n                            <div ng-if="(checkoutSession.installments.length > 1)" ng-click="$event.stopPropagation()">\n                                <div ng-if="!installmentNotSelected || checkoutSession.selectedInstallmentData">\n                                    <a ui-sref="checkout.review.sidebar.installmentOptions" ng-init="installments = checkoutSession.plan.installments" class="getInstallments btn btn-secondary">\n                                        <span ng-if="checkoutSession.selectedInstallmentData">{{checkoutSession.selectedInstallmentData.term}}X {{content(\'paymentMethod.of\')}} {{checkoutSession.selectedInstallmentData.monthly_payment.formatted_value}}</span>\n                                        <span ng-if="!checkoutSession.selectedInstallmentData">{{content(\'paymentMethod.changeInstallmentLink\') }}</span>\n                                        <span class="raq"></span>\n                                    </a>\n                                </div>\n\n                                <div ng-if="installmentNotSelected && !checkoutSession.selectedInstallmentData">\n                                    <a ui-sref="checkout.review.sidebar.installmentOptions" ng-init="installments = checkoutSession.plan.installments" class="getInstallmentsError btn btn-secondary">\n                                        {{content(\'paymentMethod.changeInstallmentLink\') }}\n                                        <span class="raq"></span>\n                                    </a>\n                                </div>\n                            </div>\n                            <span ng-if="showAmt && !(checkoutSession.installments.length > 1)" class="methodAmount">\n                                <span class="amountFormatted"><format-currency code="fs.amount.currency_code" amount="fs.amount.amount"></format-currency></span>\n                            </span>\n                        </li>\n                        <li class="method backupFunding" ng-if="showBackupPlan(checkoutSession.plan)">\n                            {{checkoutSession.plan.backup.name}}\n                            <span ng-if="!checkoutSession.plan.isAuthRequired">x-{{checkoutSession.plan.backup.last4}} {{ content(\'paymentMethod.backup\') }}</span>\n                        </li>\n                        <li ng-if="showSinglePreferred()" stop-propagation tabindex="-1">\n                            <xo-preferred-checkbox make-fi-preferred="makeFiPreferred" plan="checkoutSession.fundingOptions.plans[0]"></xo-preferred-checkbox>\n                        </li>\n                        <li ng-repeat="fs in checkoutSession.plan.sources" class="clearfix" ng-if="fs.sub_type === \'ECHECK\' || (countryCode === \'AU\' && fs.sub_type === \'DELAYED_TRANSFER\')">\n                            <span class="disclaimer" ng-if="fs.sub_type === \'ECHECK\'">\n                                {{ content(\'paymentMethod.eCheckDescription\') }}\n                            </span>\n                            <span class="disclaimer" ng-if="countryCode === \'AU\' && fs.sub_type === \'DELAYED_TRANSFER\'">\n                                <a id="pad_details">{{ content(\'paymentMethod.payAfterDeliveryDetails\') }}</a>\n                                <xo-tooltip trigger="#pad_details" on-events="click">\n                                    <div class="tip tipDesc">\n                                        {{ content(\'paymentMethod.padHelpTxt\', {date: fs.HOPDate}) }}\n                                        {{ content(\'paymentMethod.padHelpTxtList\') }}\n                                    </div>\n                                </xo-tooltip>\n                            </span>\n                        </li>\n                        <li ng-if="showAmt && negBals" class="nbr-line fsicon-margin">\n                            <span ng-bind-html="content(\'memberReview.nbrMerchantCut\', { merchantName: merchant })"></span>&rlm;:\n                            <span class="nbr-amt ltrOverride">\n                                <format-currency code="checkoutCart.purchase.amounts.total.currency_code" amount="checkoutCart.purchase.amounts.total.amount"></format-currency>\n                            </span>\n                        </li>\n                        <li ng-if="showAmt" ng-repeat="nb in negBals" class="nbr-line fsicon-margin">\n                            {{ content(\'memberReview.nbrPaypalCut\') }}:\n                            <span class="nbr-amt ltrOverride">\n                                <format-currency code="nb.currency_code" amount="nb.amount"></format-currency>\n                            </span>\n                        </li>\n                        <li ng-if="checkoutSession.cvvData && !checkoutSession.cvvData.lastAddedCard" class="clearfix reviewEnterCvvContainer" ng-click="$event.stopPropagation()" tabindex="-1">\n                            <div class="reviewEnterCvv">\n                                <span class="enterCvvPrompt">{{ content(\'memberReview.enterCSC\') }}</span>\n                                <xo-cvv card="checkoutSession.cvvData" show-label="false"></xo-cvv>\n                            </div>\n                        </li>\n\n                        <li id="currencyConversion" class="conversion" ng-if="checkoutSession.plan.conversion" ng-click="$event.stopPropagation()"\n                            tabindex="-1">\n                            <div ng-if="checkoutSession.plan.conversion.paypal">\n                                <span class="conversionRateLabel">{{content(\'currencyOptions.paypalRate\')}}</span>\n                                <span class="conversionRate">{{content(\'paymentMethod.conversionRate\', {currencyFrom: checkoutSession.plan.conversion.from, currencyTo: checkoutSession.plan.conversion.to})}}</span>\n                            </div>\n                            <div ng-if="!checkoutSession.plan.conversion.paypal" class="conversionIssuerDisclaimer">\n                                {{content(\'currencyOptions.issuerFeesDisclaimer\')}}\n                            </div>\n                            <a id="conversionLink" ng-if="checkoutSession.plan.conversion.changeable" ui-sref="checkout.review.sidebar.currencyConversion"\n                               focus-when-state="checkout.review.sidebar.currencyConversion" transitions-to="checkout.review"\n                               ng-bind="content(\'currencyOptions.viewConversion\')">\n                            </a>\n                        </li>\n                    </ul>\n                </experience>\n                <experience flag=\'cardart\'>\n                    <div class="charges">\n                        <li ng-repeat="fs in getPlanList()" class="clearfix fs" ng-if="fs.amount.doubleValue != 0">\n                            <xo-fi-panel fi="fs"\n                                show-amount="showAmt && !(checkoutSession.installments.length > 1)"\n                                name-override="fs.sub_type === \'DELAYED_TRANSFER\' && getPadFsContent(fs)"\n                                >\n                                <span ng-if="showCreditPlacement(fs)">\n                                    <xo-offer token="token" promotion="promotion"\n                                              bmlaction="bmlaction" installment="installment"\n                                              selectedmethod="selectedmethod" reusetext="true" parent-context="creditParentContext">\n                                    </xo-offer>\n                                </span>\n                                <p class="msbHelpText secondary" ng-if="fs.type === \'INCENTIVE\'">\n                                    {{ content(\'paymentMethod.msbHelpText\', {amount: formatCurrency(fs.amount.amount, fs.amount.currency_code)})}}\n\n                                    <a class="msbDetails" id="msb_{{$index}}" link-button>{{ content(\'paymentMethod.msbDetails\')}}</a>\n                                </p>\n                                <div class="method backupFunding" ng-if="fs.type === \'BANK_ACCOUNT\' && showBackupPlan(checkoutSession.plan)">\n                                    {{checkoutSession.plan.backup.name}}\n                                    <span ng-if="!checkoutSession.plan.isAuthRequired">\n                                        <span class="cardMask"><span/><span/><span/><span/></span>{{checkoutSession.plan.backup.last4}} {{ content(\'paymentMethod.backup\') }}\n                                    </span>\n                                </div>\n                                <div ng-if="fs.is_preferred && makeFiPreferred">\n                                    <span class="preferredLabel">{{ content(\'memberReview.preferred\') }}</span>\n                                </div>\n                            </xo-fi-panel>\n                            <xo-tooltip ng-if="fs.type === \'INCENTIVE\'" trigger="#msb_{{$index}}" show-event="click" hide-event="click" ng-click="$event.stopPropagation()">\n                                <div class="tip tipDesc">\n                                    <h4>{{ content(\'paymentMethod.msbToolTipOffer\') }}</h4>\n                                    <div class="msbToolTipDescription">\n                                        <p ng-if="fs.minPurchaseAmount">\n                                            {{ content(\'paymentMethod.msbToolTipText\', {amount: formatCurrency(fs.amount.amount, fs.amount.currency_code), minimumPurchase:fs.minPurchaseAmount}) }}\n                                        </p>\n                                        <p ng-if="!fs.minPurchaseAmount">\n                                            {{ content(\'paymentMethod.msbToolTipText2\', {amount: formatCurrency(fs.amount.amount, fs.amount.currency_code)}) }}\n                                        </p>\n                                        <p>\n                                        </p>\n                                    </div>\n                                </div>\n                            </xo-tooltip>\n                            <xo-tooltip class="tip tipHint padHelpToolTip" ng-if="fs.sub_type === \'DELAYED_TRANSFER\'"\n                                        trigger="#padHelp" show-event="mouseover" hide-event="mouseleave">\n                                <div class="tipText tipHintText">\n                                    <p class="padHeader">\n                                        {{content(\'paymentMethod.padHelpTxt\')}}\n                                    </p>\n                                    <ul class="bul">\n                                        <li>\n                                            <span ng-bind-html="htmlContent(\'paymentMethod.padHelpTxtList1\', {date: fs.hop_date, country: locale.country, lang: locale.lang})"></span>\n                                        </li>\n                                        <li>\n                                            <span ng-bind-html="htmlContent(\'paymentMethod.padHelpTxtList2\', {country: locale.country, lang: locale.lang})"></span>\n                                        </li>\n                                        <li>\n                                            <span ng-bind-html="htmlContent(\'paymentMethod.padHelpTxtList3\')"></span>\n                                        </li>\n                                    </ul>\n                                    <p>\n                                        <span ng-bind-html="htmlContent(\'paymentMethod.padTnc\', {country: locale.country, lang: locale.lang})"></span>\n                                    </p>\n                                </div>\n                            </xo-tooltip>\n                        </li>\n                        <div ng-if="showSinglePreferred()" stop-propagation tabindex="-1">\n                            <xo-preferred-checkbox make-fi-preferred="makeFiPreferred" plan="checkoutSession.fundingOptions.plans[0]"></xo-preferred-checkbox>\n                        </div>\n                        <div ng-if="(checkoutSession.installments.length > 1)" ng-click="$event.stopPropagation()">\n                            <div ng-if="!installmentNotSelected || checkoutSession.selectedInstallmentData">\n                                <a ui-sref="checkout.review.sidebar.installmentOptions" ng-init="installments = checkoutSession.plan.installments" class="getInstallments btn btn-secondary">\n                                    <span ng-if="checkoutSession.selectedInstallmentData">{{checkoutSession.selectedInstallmentData.term}}X {{content(\'paymentMethod.of\')}} {{checkoutSession.selectedInstallmentData.monthly_payment.formatted_value}}</span>\n                                    <span ng-if="!checkoutSession.selectedInstallmentData">{{content(\'paymentMethod.changeInstallmentLink\') }}</span>\n                                    <span class="raq"></span>\n                                </a>\n                            </div>\n\n                            <div ng-if="installmentNotSelected && !checkoutSession.selectedInstallmentData">\n                                <a ui-sref="checkout.review.sidebar.installmentOptions" ng-init="installments = checkoutSession.plan.installments" class="getInstallmentsError btn btn-secondary">\n                                    {{content(\'paymentMethod.changeInstallmentLink\') }}\n                                    <span class="raq"></span>\n                                </a>\n                            </div>\n                        </div>\n                        <li ng-if="showAmt && negBals" class="nbr-line fsicon-margin">\n                            <span ng-bind-html="content(\'memberReview.nbrMerchantCut\', { merchantName: merchant })"></span>:\n                            <span class="nbr-amt ltrOverride">\n                                <format-currency code="checkoutCart.purchase.amounts.total.currency_code" amount="checkoutCart.purchase.amounts.total.amount"></format-currency>\n                            </span>\n                        </li>\n                        <li ng-if="showAmt" ng-repeat="nb in negBals" class="nbr-line fsicon-margin">\n                            {{ content(\'memberReview.nbrPaypalCut\') }}:\n                            <span class="nbr-amt ltrOverride">\n                                <format-currency code="nb.currency_code" amount="nb.amount"></format-currency>\n                            </span>\n                        </li>\n                        <li ng-if="checkoutSession.cvvData && !checkoutSession.cvvData.lastAddedCard" class="clearfix reviewEnterCvvContainer" ng-click="$event.stopPropagation()" tabindex="-1">\n                            <div class="reviewEnterCvv">\n                                <span class="enterCvvPrompt">{{ content(\'memberReview.enterCSC\') }}</span>\n                                <xo-cvv card="checkoutSession.cvvData" show-label="false"></xo-cvv>\n                            </div>\n                        </li>\n\n                        <div id="currencyConversion" class="conversion" ng-if="checkoutSession.plan.conversion" ng-click="$event.stopPropagation()"\n                            tabindex="-1">\n                            <div ng-if="checkoutSession.plan.conversion.paypal">\n                                <span class="conversionRateLabel">{{content(\'currencyOptions.paypalRate\')}}</span>\n                                <span class="conversionRate">{{content(\'paymentMethod.conversionRate\', {currencyFrom: checkoutSession.plan.conversion.from, currencyTo: checkoutSession.plan.conversion.to})}}</span>\n                            </div>\n                            <div ng-if="!checkoutSession.plan.conversion.paypal" class="conversionIssuerDisclaimer">\n                                {{content(\'currencyOptions.issuerFeesDisclaimer\')}}\n                            </div>\n                            <a id="conversionLink" ng-if="checkoutSession.plan.conversion.changeable" ui-sref="checkout.review.sidebar.currencyConversion"\n                               focus-when-state="checkout.review.sidebar.currencyConversion" transitions-to="checkout.review"\n                               ng-bind="content(\'currencyOptions.viewConversion\')">\n                            </a>\n                        </div>\n                    </div>\n                </experience>\n            </div>\n\n            <div ng-if="showMultipleFi()" ng-class="{editable:canChangeFI}" class="multipleFi">\n                <h4 class="noBottom paymentsHeader zeta">\n                    <span ng-if="checkoutSession.plan.isPAD()">\n                        {{ content(\'paymentMethod.payAfter\') }}\n                    </span>\n                    <span ng-if="!checkoutSession.plan.isPAD()">\n                        <span ng-if="showPayMerchantWithPayPal">\n                            {{ content(\'paymentMethod.payMerchantWithPayPal\', {merchantName: merchant}) }}\n                        </span>\n                        <span ng-if="showPayWithText">\n                            {{ content(\'paymentMethod.payWith\') }}\n                        </span>\n                    </span>\n                </h4>\n                <ul class="charges">\n                        <!--List of Plans-->\n                    <li role="presentation" class="fundingsource" ng-repeat="plan in getSortedPlans()">\n                        <experience flag=\'!cardart\'>\n                            <div class="row-fluid radioButton">\n                                <input type="radio" id="{{plan.planId}}" name="selectedFI" value="{{plan.planId}}" ng-model="selectedmethod.planId" ng-click="updateFS(plan, $index)"\n                                />\n                                <label class="noBottom" for="{{plan.planId}}">\n                                    <div ng-if="plan.secondaryFIs && plan.secondaryFIs.length">\n                                        <div class="fsdetails" ng-class="[plan.secondaryFIs[0].type]">\n                                            <span class="fsIcon" ng-class="[plan.secondaryFIs[0].type, plan.secondaryFIs[0].name]"></span>\n                                            <span class="fsName">{{content(\'fsMappings.\'+ plan.secondaryFIs[0].name) || plan.secondaryFIs[0].name}}</span>\n                                            <span class="colon" ng-if="plan.secondaryFIs.length === 1">: </span>\n                                            <span class="amount" ng-if="plan.secondaryFIs.length === 1 && plan.secondaryFIs[0].amount">{{plan.secondaryFIs[0].amount.amount_formatted}}</span>\n                                        </div>\n                                    </div>\n                                    <div ng-class="{singleInstrumentContainer: !plan.secondaryFIs}">\n                                        <span class="fsIcon pinlessIcon icon icon-card-half-solid" aria-hidden="true" ng-if="plan.primaryFs.isPinlessDebit"></span>\n                                        <span class="fsIcon" ng-class="[plan.primaryFs.type, plan.primaryFs.name]" ng-if="!plan.primaryFs.isPinlessDebit"></span>\n                                        <div class="fsdetails" ng-class="[plan.primaryFs.type]">\n                                            <span ng-switch="plan.primaryFs.subtype">\n                                                <span class="fundingContainerPAD" ng-switch-when="PAD">\n                                                    <span class="subtype">{{content(\'fundingInstruments.pad\')}}</span><br>\n                                                    <span class="name">{{content(\'fsMappings.\'+plan.primaryFs.name) || plan.primaryFs.name}}</span>\n                                                    <span class="lastdigits" ng-if="plan.primaryFs.lastDigits">x-{{plan.primaryFs.lastDigits}}</span>\n                                                </span>\n                                                <span ng-switch-default>\n                                                    <span class="fsName" ng-if="plan.primaryFs.isPinlessDebit">{{content(\'fsMappings.PINLESSDEBIT\')}}</span>\n                                                    <!--<span class="fsName" ng-if="!plan.primaryFs.isPinlessDebit" ng-bind-html="content(\'fsMappings.\'+plan.primaryFs.name) || (plan.primaryFs.name + \'&#8207;\').toString()"></span>-->\n                                                    <span class="fsName" ng-if="!plan.primaryFs.isPinlessDebit">{{content(\'fsMappings.\'+plan.primaryFs.name) || (plan.primaryFs.name)}} &rlm;</span>\n                                                    <span class="lastdigits" ng-if="plan.primaryFs.lastDigits">x-{{plan.primaryFs.lastDigits}}</span>\n                                                    <span class="subtype" ng-if="locale.country === \'DE\' && plan.primaryFs.subtype === \'MEFT\'">{{content(\'fundingInstruments.meft\')}}</span>\n                                                    <span class="subtype" ng-if="locale.country === \'DE\' && plan.primaryFs.subtype === \'IACH\'">{{content(\'fundingInstruments.iach\')}}</span>\n                                                    <span class="colon" ng-if="plan.secondaryFIs.length === 1">: </span>\n                                                </span>\n                                            </span>\n                                            <span class="amount" ng-if="plan.secondaryFIs && plan.secondaryFIs.length === 1 && plan.primaryFs.amount">{{plan.primaryFs.amount.amount_formatted}}</span>\n                                            <div ng-if="plan.primaryFs.isPreferred && makeFiPreferred">\n                                                <span class="preferredLabel">{{ content(\'memberReview.preferred\') }}</span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </label>\n                            </div>\n                            <div class="fsSubdetails">\n                                <div ng-if="sacEligible(plan.primaryFs.name)">\n                                    <div class="bmlDetails" bind-html-compile="htmlContent(\'fundingInstruments.bmlDetailsWallet\')"></div>\n                                </div>\n                                <xo-preferred-checkbox ng-if="makeFiPreferred && plan.planId === selectedmethod.planId" make-fi-preferred="makeFiPreferred" plan="plan"></xo-preferred-checkbox>\n                                <div ng-if="plan.planId === selectedmethod.planId">\n                                    <span class="method backupFunding" ng-if="showBackupPlan(plan)">\n                                        {{plan.backup.name}}\n                                        <span ng-if="!plan.isAuthRequired">x-{{plan.backup.last4}} {{ content(\'paymentMethod.backup\') }}</span>\n                                    </span>\n                                </div>\n                                <div ng-if="plan.primaryFs.subtype === \'ECHECK\'" class="disclaimer">\n                                    {{ content(\'paymentMethod.eCheckDescription\') }}\n                                </div>\n                            </div>\n                        </experience>\n                        <experience flag=\'cardart\'>\n                            <div class="row-fluid radioButton fsPanelRadioWrapper">\n                                <input type="radio" id="{{plan.planId}}" name="selectedFI" value="{{plan.planId}}" ng-model="selectedmethod.planId" ng-click="updateFS(plan, $index)"\n                                />\n                                <label class="noBottom" for="{{plan.planId}}">\n                                    <div class="positionDecoupler">\n                                        <xo-fi-panel fi="plan.primaryFs"\n                                            show-currency-code="plan.primaryFs.type === \'BALANCE\' && hasMultipleBalances"\n                                            no-no-no-sac-eligible="sacEligible(plan.primaryFs.name) && content(\'fundingInstruments.bmlDetailsWallet\')"\n                                        >\n                                            <xo-preferred-checkbox ng-if="makeFiPreferred && plan.planId === selectedmethod.planId" make-fi-preferred="makeFiPreferred" plan="plan"></xo-preferred-checkbox>\n                                            <div ng-if="plan.planId === selectedmethod.planId" ng-class="fsSubdetails">\n                                                <span class="method backupFunding" ng-if="showBackupPlan(plan)">\n                                                    {{plan.backup.name}}\n                                                    <span ng-if="!plan.isAuthRequired">\n                                                        <span class="cardMask"><span/><span/><span/><span/></span>{{plan.backup.last4}} {{ content(\'paymentMethod.backup\') }}\n                                                    </span>\n                                                </span>\n                                            </div>\n                                            <div ng-if="plan.primaryFs.subtype === \'ECHECK\'" class="disclaimer">\n                                                {{ content(\'paymentMethod.eCheckDescription\') }}\n                                            </div>\n                                            <div ng-if="plan.primaryFs.isPreferred && makeFiPreferred">\n                                                <span class="preferredLabel">{{ content(\'memberReview.preferred\') }}</span>\n                                            </div>\n                                        </xo-fi-panel>\n                                    </div>\n                                </label>\n                            </div>\n                        </experience>\n\n                    </li>\n                    <li role="presentation" class="fundingsource" ng-if="showPPCAcquisitionRadioButton()">\n                        <div class="row-fluid radioButton">\n                            <input type="radio" id="applyForPPCRadio" name="selectedFI" value="applyForPPCRadio" ng-click="selectApplyForPPC()"/>\n                            <label class="noBottom" for="applyForPPCRadio">\n                                <xo-offer token="token" promotion="promotion" bmlaction="bmlaction" installment="installment"\n                                    selectedmethod="selectedmethod" radio="true" parent-context="creditParentContext">\n                                </xo-offer>\n                            </label>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n\n            <div ng-if="checkoutSession.cardBackup.isAllowed()">\n                <xo-card-backup token="token" selectedmethod="selectedmethod"></xo-card-backup>\n            </div>\n\n            <!-- Show billing address associated to the selected card-->\n            <div ng-if="showBillingAddress" class="charges" ng-model="checkoutSession">\n                <div id="billingAddressDisplay">\n                    <xo-billing-address token="token" edit-uri=""></xo-billing-address>\n                </div>\n            </div>\n\n            <div ng-if="selectedmethod && !nmjExperience" class="multipleFi addCard">\n                <a track-link="add_card" ui-sref="checkout.review.sidebar.sidebarAddCard.addCardFlow.addCard" class="addCardLink" role="button">\n                    <span class="plusicon"></span>\n                    <p class="addOption">\n                        <span class="name">{{content(\'fundingInstruments.addNewCard\')}}</span>\n                    </p>\n                </a>\n            </div>\n\n            <!-- For single step nmj, openup wallet page in the sidebar against the review page -->\n            <div ng-if="nmjExperience && !nmjExperience.multiPage" class="multipleFi switchCard">\n                <a track-link="view_wallet" ui-sref="checkout.review.sidebar.wallet" class="addCardLink" role="button">\n                    <span class="plusicon"></span>\n                    <p class="addOption">\n                        <span class="name">{{content(\'addCard.switchCard\')}}</span>\n                    </p>\n                </a>\n            </div>\n\n            <!-- For multi step nmj, openup add card page in the sidebar against the pay-with-card page -->\n            <div ng-if="nmjExperience && nmjExperience.multiPage" class="multipleFi switchCard">\n                <a track-link="add_card" ui-sref="checkout.payWithCard.sidebar.sidebarAddCard.addCardFlow.addCard" class="addCardLink" role="button">\n                    <span class="plusicon"></span>\n                    <p class="addOption">\n                        <span class="name">{{content(\'addCard.switchCard\')}}</span>\n                    </p>\n                </a>\n            </div>\n\n            <h4 class="noBottom paymentsHeader zeta" ng-if="showEmptyPlanHeader">\n                <span>\n                    {{ content(\'paymentMethod.emptyPlanHeader\') }}\n                </span>\n            </h4>\n            <div class="cibBillingTxt secondary" ng-if="checkoutCart.isBilling() && isCIB && !showRpBaText">\n                <span class="cibTextBox" data-ng-bind-html="htmlContent(getBAContent(), { merchantName: merchant,\n                    partner: merchant, fiName: getStickyFiName(), fiFormatLast4: getStickyFiLast4(), country: locale.country, lang: locale.lang})">\n                </span>\n                <span ng-if="!isExpandedAgreementText">...\n                <a href="javascript:void(0);" class="textLink"\n                   ng-click="showExpandedText()"\n                   onclick="return false;">{{content(\'billingAgreement.memberAgreementCibShowMore\')}}</a>\n                    </span>\n            </div>\n\n            <div class="padToggle checkbox" ng-if="showPadToggle()">\n                <input type="checkbox" ng-checked="padToggleFeature.checkboxEnabled" ng-change="padToggleCheckboxEvent()" ng-model="padToggleFeature.checkboxEnabled" id="padToggle" name="padToggle"\n                       ng-true-value="true" ng-false-value="false"/>\n                <label for="padToggle" id="padToggleLabel" class="padToggleSectionTitle">{{ content(\'paymentMethod.padToggleTitle\') }}</label>\n                <div id="padToggleOnSection" class="padToggleSection" ng-if="padToggleFeature.checkboxEnabled">\n                    <p id="padToggleOnText" class="padToggleSectionOnInfoText">\n                        <span ng-bind-html="htmlContent(\'paymentMethod.padToggleOnInfoText\', {date: checkoutSession.plan.sources[0].hop_date, lang: locale.lang, country: locale.country})"></span>\n                    </p>\n                    <xo-tooltip ng-if="padToggleFeature.checkboxEnabled" trigger="#padToggleHelp" show-event="mouseover" hide-event="mouseleave">\n                        <div class="padToggleHelpToolTip">\n                            <p class="padToggleHelpToolTipHeader">\n                                {{content(\'paymentMethod.padToggleHelpTooltipHeader\')}}\n                            </p>\n                            <p class="padToggleHelpToolTipText">\n                                <span ng-bind-html="htmlContent(\'paymentMethod.padToggleHelpTooltipText\', {lang: locale.lang, country: locale.country})"></span>\n                            </p>\n                        </div>\n                    </xo-tooltip>\n                    <div class="padToggleSectionOnBalanceText" ng-if="isSplitPaymentWithBalanceAndIachPlan">\n                        <div>\n                            <span class="balanceMsgIcon"/>\n                        </div>\n                        <div class="balanceMsg">\n                            <span ng-bind-html="htmlContent(\'paymentMethod.padToggleOnBalanceText\')"/>\n                        </div>\n                    </div>\n                </div>\n                <div class="padToggleSection" ng-if="!padToggleFeature.checkboxEnabled">\n                    <p class="padToggleSectionOffInfoText">\n                        <span ng-bind-html="htmlContent(\'paymentMethod.padToggleOffInfoText\', {lang: locale.lang, country: locale.country})"></span>\n                    </p>\n                </div>\n            </div>\n\n            <p class="billingTxt secondary" ng-if="checkoutCart.isBilling() && !isCIB && !showRpBaText">\n                <span data-ng-bind-html="htmlContent(getBAContent(), { merchantName: merchant, fiName: getStickyFiName(), fiFormatLast4: getStickyFiLast4(), country: locale.country, lang: locale.lang})"></span>\n            </p>\n\n            <p id="rpAgreement" class="billingTxt secondary" ng-if="checkoutCart.isBilling() && showRpBaText">\n                <span data-ng-bind-html="htmlContent(getRPContent(), { merchantName: merchant, fiName: getStickyFiName(), fiFormatLast4: getStickyFiLast4(), country: locale.country, lang: locale.lang})"></span>\n            </p>\n\n            <div class="payWithCredit">\n                <xo-pay-with-credit token="token"></xo-pay-with-credit>\n            </div>\n\n            <!-- AU only direct debit agreement message for a AU buyer with unconfirmed bank -->\n            <p bind-html-compile="htmlContent(\'paymentMethod.directDebitAgreement\', { payButtonText: payButtonText })" ng-if="showUachFeatureDiscalimer"\n               class="disclaimer directDebitAgreement"></p>\n\n            <a ng-if="showChangeFI()" ui-sref="checkout.review.sidebar.wallet" class="edits changePayment"\n               select-button aria-label="{{ content(\'paymentMethod.label\') }}" focus-when-state="checkout.review.sidebar.wallet" transitions-to="checkout.review">\n                {{ locale.country === \'BR\' ? content(\'common.changePayment\') : content(\'common.change\') }}\n                <span class="frontArrow goTray"></span>\n            </a>\n\n            <a ng-if="selectedmethod && !nmjExperience" ui-sref="checkout.review.sidebar.sidebarManageWallet" class="edits changePayment"\n               select-button focus-when-state="checkout.review.sidebar.sidebarManageWallet" transitions-to="checkout.review">\n                {{ content(\'asideHeader.manage\') }}\n                <span class="frontArrow goTray"></span>\n            </a>\n        </div>\n    </div>\n</div>\n';
    },
    "./components/xo-page-components/src/marketingOffers/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-page-components/src/marketingOffers/template.html"), __webpack_require__("./components/xo-title/dist/directive.js"), __webpack_require__("./components/xo-models/src/marketingoffer/index.js"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/auth/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, template) {
            return angular.module("xo-page-components.marketingOffers", [ "squid", "xo-title.directive", "xomodel.marketingoffer", "xomodel.checkout", "xomodel.auth" ]).directive("xoMarketingOffers", function() {
                return {
                    template: template,
                    scope: {
                        placementCode: "=",
                        titleTxtProperty: "=",
                        subtitleProperty: "=",
                        token: "=",
                        pageName: "=",
                        backgroundImage: "="
                    },
                    controller: function controller($scope, $sce, $rootScope, $populate, $state, $locale, $renderContent, $logger, $pxp, $config, $CheckoutCartModel, $MarketingOfferModel, $fireMORSBeacon, $element, $feature, $CheckoutSessionModel, $CheckoutPayeeModel, $AuthModel) {
                        var morsOfferFlag = $scope.placementCode === "202003" && $feature("morsValuePropOffers");
                        var populateObj;
                        if (morsOfferFlag) {
                            populateObj = {
                                checkoutCart: $CheckoutCartModel.instance($scope.token),
                                checkoutSession: $CheckoutSessionModel.instance($scope.token),
                                payee: $CheckoutPayeeModel.instance($scope.token),
                                auth: $AuthModel.instance()
                            };
                        } else {
                            populateObj = {
                                checkoutCart: $CheckoutCartModel.instance($scope.token)
                            };
                        }
                        $populate($scope, populateObj).then(function() {
                            $scope.locale = $locale;
                            $scope.token = $rootScope.token;
                            function setDefaultValues() {
                                $scope.ad = {
                                    Title: $renderContent($scope.titleTxtProperty),
                                    Body: $renderContent($scope.subtitleProperty),
                                    backgroundImage: $scope.backgroundImage
                                };
                            }
                            $scope.$watch("ad.backgroundImage", function(imageUrl) {
                                if (imageUrl) {
                                    var url = imageUrl;
                                    var propImg = angular.element($element[0].querySelector("div.prop-img"));
                                    var isRetina = window && window.matchMedia && window.matchMedia("(-webkit-min-device-pixel-ratio: 2), " + "(min--moz-device-pixel-ratio: 2), " + "(-o-min-device-pixel-ratio: 2/1)," + "(min-device-pixel-ratio: 2)," + "(min-resolution: 192dpi), " + "(min-resolution: 2dppx)").matches;
                                    if (isRetina && url) {
                                        var index = url.lastIndexOf(".");
                                        url = url.substring(0, index) + "_2x" + url.substring(index, url.length);
                                        propImg.css({
                                            "background-image": "url(" + url + ")",
                                            height: "150px",
                                            "margin-top": "0px"
                                        });
                                    } else {
                                        propImg.css({
                                            "background-image": "url(" + url + ")",
                                            height: "150px",
                                            "margin-top": "0px"
                                        });
                                    }
                                }
                            });
                            if ($scope.placementCode === "202002") {
                                $scope.pu_type = "ANONYMOUS";
                                $scope.presentation_types = [ "CompositeText" ];
                                $scope.pxpInfo = {
                                    name: "xo_xoon_hermes_mors",
                                    pattern: "(xo_xoon_hermes_mors_)(.*)",
                                    treatment: "xo_xoon_hermes_mors_treatment"
                                };
                            } else if ($scope.placementCode === "202003") {
                                $scope.className = "props";
                                $scope.pu_type = "PERSONAL";
                                $scope.presentation_types = [ "GenericComposite" ];
                                $scope.pxpInfo = {
                                    name: "xo_mors_hermes_placements_ryi",
                                    pattern: "(xo_mors_hermes_placements_ryi_)(.*)",
                                    treatment: "xo_mors_hermes_placements_ryi_treatment"
                                };
                            } else {
                                setDefaultValues();
                            }
                            if ($locale.country === "US" && $locale.lang === "en" && $scope.placementCode && $feature("morsValuePropOffers")) {
                                $scope.marketingOfferData = new $MarketingOfferModel({
                                    countryCode: $scope.locale.country,
                                    page: $scope.pageName,
                                    puType: $scope.pu_type,
                                    locale: $locale.lang + "_" + $locale.country,
                                    totalTransactionAmount: {
                                        currency_code: $scope.checkoutCart.get("purchase.amounts.total.currency_code", ""),
                                        value: Math.round($scope.checkoutCart.get("purchase.amounts.total.amount", 0) * 100)
                                    },
                                    totalShippingAmount: {
                                        currency_code: $scope.checkoutCart.get("purchase.amounts.total.currency_code", ""),
                                        value: Math.round($scope.checkoutCart.get("purchase.amounts.shipping.amount", 0) * 100)
                                    },
                                    payee: morsOfferFlag ? $scope.payee.merchant.id : "",
                                    payer: morsOfferFlag ? $scope.checkoutSession.payer.id : "",
                                    si: morsOfferFlag ? $scope.checkoutSession.id : "",
                                    visitor_id: morsOfferFlag ? $scope.auth.visitor_id : "",
                                    targetPlacements: [ {
                                        placement_code: $scope.placementCode,
                                        presentation_types: $scope.presentation_types
                                    } ]
                                });
                                $pxp($scope.pxpInfo.name, {
                                    "ctx.COUNTRY": $locale.country
                                }, $scope.pxpInfo.pattern).then(function(res) {
                                    $logger.info("MO treatment: " + (res ? res.treatment_name : "[no pxp response!]"));
                                    if (res && res.treatment_name === $scope.pxpInfo.treatment) {
                                        return $MarketingOfferModel.instance($scope.token).save({
                                            silent: true,
                                            data: $scope.marketingOfferData.serialize(),
                                            success: function success(result) {
                                                var ads_arr = result && result.ads || [];
                                                var adFound = false;
                                                ads_arr.forEach(function(ad) {
                                                    var adunit_id = ad.campaign.adunit_id;
                                                    if (adunit_id.toString() === $scope.placementCode.toString() && ad.valid) {
                                                        adFound = true;
                                                        $scope.ad = {};
                                                        var content = ad.content.nvp;
                                                        content.forEach(function(obj) {
                                                            $scope.ad[obj.name] = obj.value;
                                                        });
                                                        $scope.ad["impressionUrl"] = ad.tracking.impression_url;
                                                        $scope.ad["clickUrl"] = ad.tracking.click_url;
                                                    }
                                                });
                                                if (adFound) {
                                                    $scope.ad.Body = $sce.trustAsHtml($scope.ad.Body);
                                                    $logger.info("MORS_ad_displayed");
                                                    $fireMORSBeacon.fireBeacon($scope.ad.impressionUrl);
                                                    $rootScope.$broadcast("MORSDisplayed", {
                                                        clickUrl: $scope.ad.clickUrl,
                                                        placementId: $scope.placementCode
                                                    });
                                                } else {
                                                    $logger.info("MORS_ad_not_found");
                                                    setDefaultValues();
                                                    $rootScope.$broadcast("MORSNotDisplayed");
                                                }
                                            },
                                            error: function error(err) {
                                                setDefaultValues();
                                                $logger.error("MORS_api_failure", {
                                                    error: err
                                                });
                                            }
                                        });
                                    } else {
                                        setDefaultValues();
                                        $rootScope.$broadcast("MORSNotDisplayed");
                                    }
                                });
                            } else {
                                setDefaultValues();
                                $rootScope.$broadcast("MORSNotDisplayed");
                            }
                            $scope.$on("localeChange", function() {
                                setDefaultValues();
                            });
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-page-components/src/marketingOffers/template.html": function(module, exports) {
        module.exports = '<div class="marketingOffers {{className}}" content >\n    <div ng-if="ad.backgroundImage" class="prop-img"></div>\n    <xo-title title-txt="{{ ad.Title }}"></xo-title>\n    <p class="subTitle" ng-bind-html="ad.Body"></p>\n</div>\n';
    },
    "./components/xo-page-components/src/notYou/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoNotYouComponent = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _template = __webpack_require__("./components/xo-page-components/src/notYou/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-page-components/src/notYou/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoNotYouComponent = exports.$xoNotYouComponent = _squid.$Component.extend("$xoNotYou", {
            tag: "xo-not-you",
            template: _template2["default"],
            resolve: {
                models: function models() {
                    return {
                        auth: _auth.$AuthModel.instance().retrieve()
                    };
                }
            },
            actions: {
                logout: function logout() {
                    var _this = this;
                    _logger.$logger.info("not_you_logout");
                    if (window.xchild && _squid.$util.isIFrame() && window.paypal && !window.paypal.isWebView()) {
                        window.xchild.hide();
                        var url = window.location.href.split("#")[0];
                        var xprops = _squid.$util.extend({}, window.xprops);
                        xprops.url = url;
                        xprops.payment = function() {
                            return _this.models.auth.logout().then(function() {
                                return _angular.$rootScope.token;
                            });
                        };
                        return window.ppxo.Checkout.renderPopupTo(window.xchild.getParentRenderWindow(), xprops);
                    }
                    this.models.auth.logout().then(function() {
                        _uiRouter.$state.go("checkout.login", {
                            source: "NOT_YOU"
                        });
                    });
                }
            },
            lifecycle: {
                populate: function populate() {
                    this.token = _angular.$rootScope.token;
                }
            }
        });
        angular.value("$xoNotYouComponent", $xoNotYouComponent);
        _squid.$Component;
        _squid.$util;
        _angular.$rootScope;
        _uiRouter.$state;
        _logger.$logger;
        _auth.$AuthModel;
    },
    "./components/xo-page-components/src/notYou/template.html": function(module, exports) {
        module.exports = '<a content track-link="login_with_diff_user" href="" class="textLink" ng-click="actions.logout()">{{ content(\'memberReview.notYou\')}}</a>\n';
    },
    "./components/xo-page-components/src/notYou/styles.less": "./css/app.less",
    "./pages/xo-select-fi/template.html": function(module, exports) {
        module.exports = '<section id=\'xoSelectFi\' class="review" content tabindex=-1 role="presentation">\n    <xo-title title-txt="{{content(\'memberReview.memberReviewTitle\')}}" class="accessAid"></xo-title>\n\n    <div class="row-fluid justMember">\n        <div class="span14 trayInner reviewSections">\n            <xo-banner ng-if="personalizedBanner.show && !isMessengerBAIntegration">\n                <p class="userEmail" id="reviewUserInfo">\n                    {{ content(\'memberReview.loggedInWithOneTouch\', {userName: formattedNameInformal, lastName: models.auth.last_name, firstName: models.auth.first_name}) }}\n                    <span ng-if="showNotYou">\n                        <xo-not-you></xo-not-you>\n                    </span>\n                </p>\n            </xo-banner>\n            <xo-message message="models.checkoutSession.message"></xo-message>\n            <div ng-if="!personalizedBanner.show && !isMessengerBAIntegration">\n                <p class="userEmail" id="reviewUserInfo">\n                    {{ content(\'creditcard.hi\', {userName: formattedNameInformal}) }}\n                    <span ng-if="showNotYou">\n                        <xo-not-you></xo-not-you>\n                    </span>\n                </p>\n            </div>\n\n            <div class="reviews reviews_first">\n                <div class="paywith asideView" content>\n                    <div class="trayInner trayInnerDefault multipleFi">\n                        <div class="">\n                            <h4 class="noBottom paymentsHeader alpha">\n                                {{ content(\'memberReview.selectFi\') }}\n                            </h4>\n                            <div\n                                class="split_bal_option"\n                                ng-if="balanceList.length">\n                                <div\n                                    class="sCheckbox checkbox"\n                                    ng-repeat="balance in balanceList"\n                                    ng-class="{disabled: !balance.enabled}">\n                                    <input\n                                        ng-if="balance.fake"\n                                        type="checkbox"\n                                        disabled="disabled"\n                                        checked="checked">\n                                    <input\n                                        ng-if="!balance.fake"\n                                        id="bal_{{balance.code}}"\n                                        type="checkbox"\n                                        ng-model="balance.checked"\n                                        ng-disabled="!balance.enabled"\n                                        value="{{balance.code}}"\n                                        ng-change="capUserIntent(balance.code, balance.checked)">\n                                    <label\n                                        for="bal_{{balance.code}}"\n                                        class="choice-split-balance"\n                                        ng-class="{disabled: !balance.enabled}"\n                                        bind-html-compile="htmlContent(\'memberReview.useBalanceLabel\', { amt: balance.amount })">\n                                    </label>\n                                </div>\n                            </div>\n                            <ul class="charges">\n\n                                <!--List of Plans-->\n                                <li role="presentation" class="fundingsource" ng-if="!isBillingNoPurchase" ng-repeat="plan in primaryList">\n\n\n                                    <experience flag=\'cardart\'>\n                                        <div class="row-fluid radioButton fsPanelRadioWrapper">\n                                            <input type="radio" id="{{plan.planId}}" name="selectedFI" value="{{ $index }}"\n                                            ng-model="selectedmethod.index" ng-change="updateBalances($index)"/>\n\n                                            <label class="noBottom" for="{{plan.planId}}">\n                                                <div class="positionDecoupler">\n                                                    <xo-fi-panel fi="plan.primaryFs" plan="plan"\n                                                        show-all-currency-codes="\n                                                            plan.primaryFs.name === \'BALANCE\' &&\n                                                            plan.secondaryFIs[0].name === \'BALANCE\' &&\n                                                            isMultipleBalance"\n                                                        show-currency-code="plan.primaryFs.name === \'BALANCE\' && isMultipleBalance"\n                                                    >\n                                                        <div ng-if="!isBilling && plan.primaryFs.isPreferred && preferredFiVariant && plan.primaryFs.subtype !== \'PAD\'">\n                                                            <span class="preferredLabel">{{ content(\'memberReview.preferred\') }}</span>\n                                                        </div>\n                                                        <div class="fsSubdetails">\n                                                            <div ng-if="sacEligible(plan.primaryFs.name)">\n                                                                <div class="bmlDetails" bind-html-compile="htmlContent(\'fundingInstruments.bmlDetailsWallet\')"></div>\n                                                            </div>\n                                                            <div ng-if="plan.primaryFs.subtype === \'ECHECK\'" class="disclaimer">\n                                                                {{ content(\'paymentMethod.eCheckDescription\') }}\n                                                            </div>\n                                                            <div ng-if="showCreditPlacement(plan)">\n                                                                <xo-offer token="token" promotion="promotion"\n                                                                bmlaction="bmlaction" installment="installment"\n                                                                selectedmethod="selectedmethod" reusetext="true">\n                                                                </xo-offer>\n                                                            </div>\n                                                        </div>\n                                                    </xo-fi-panel>\n                                                </div>\n                                            </label>\n                                        </div>\n                                    </experience>\n\n                                    <experience flag=\'!cardart\'>\n                                        <div class="row-fluid radioButton">\n                                            <input type="radio" id="{{plan.planId}}" name="selectedFI" value="{{ $index }}"\n                                            ng-model="selectedmethod.index" ng-change="updateBalances($index)"/>\n\n                                            <label class="noBottom" for="{{plan.planId}}">\n                                                <div ng-class="{singleInstrumentContainer: !plan.secondaryFIs}" class=\'fiContainer\'>\n                                                    <span class="fsIcon pinlessIcon icon icon-card-half-solid" aria-hidden="true" ng-if="plan.primaryFs.isPinlessDebit"></span>\n                                                    <span class="fsIcon" ng-class="[plan.primaryFs.type, plan.primaryFs.name]" ng-if="!plan.primaryFs.isPinlessDebit"></span>\n                                                    <div class="fsdetails" ng-class="[plan.primaryFs.type]">\n                                                        <span ng-switch="plan.primaryFs.subtype">\n                                                            <span class="fundingContainerPAD" ng-switch-when="PAD">\n                                                                <span class="subtype">{{content(\'fundingInstruments.pad\')}}</span><br>\n                                                                <span class="name">{{content(\'fsMappings.\'+plan.primaryFs.name) || plan.primaryFs.name}} </span>\n                                                                <span class="lastdigits" ng-if="plan.primaryFs.lastDigits">x-{{plan.primaryFs.lastDigits}}</span>\n                                                            </span>\n                                                            <span ng-switch-default>\n\n                                                                <span class="fsName" ng-if="plan.primaryFs.isPinlessDebit">{{content(\'fsMappings.PINLESSDEBIT\')}}</span>\n                                                                <span class="fsName" ng-if="!plan.primaryFs.isPinlessDebit">{{content(\'fsMappings.\'+plan.primaryFs.name) || (plan.primaryFs.name)}} &rlm;</span>\n                                                                <span ng-if="plan.primaryFs.name === \'BALANCE\' && isMultipleBalance">({{plan.currencies}})</span>\n                                                                <span class="lastdigits" ng-if="plan.primaryFs.lastDigits">x-{{plan.primaryFs.lastDigits}}</span>\n                                                                <span class="subtype" ng-if="locale.country === \'DE\' && plan.primaryFs.subtype === \'MEFT\'">{{content(\'fundingInstruments.meft\')}}</span>\n                                                                <span class="subtype" ng-if="locale.country === \'DE\' && plan.primaryFs.subtype === \'IACH\'">{{content(\'fundingInstruments.iach\')}}</span>\n                                                            </span>\n                                                        </span>\n                                                        <div ng-if="!isBilling && plan.primaryFs.isPreferred && preferredFiVariant && plan.primaryFs.subtype !== \'PAD\'">\n                                                            <span class="preferredLabel">{{ content(\'memberReview.preferred\') }}</span>\n                                                        </div>\n                                                    </div>\n                                                    <div ng-if="showCreditPlacement(plan)">\n                                                        <xo-offer token="token" promotion="promotion"\n                                                        bmlaction="bmlaction" installment="installment"\n                                                        selectedmethod="selectedmethod" reusetext="true">\n                                                        </xo-offer>\n                                                    </div>\n                                                </div>\n                                            </label>\n                                        </div>\n                                        <div class="fsSubdetails">\n                                            <div ng-if="sacEligible(plan.primaryFs.name)">\n                                                <div class="bmlDetails" bind-html-compile="htmlContent(\'fundingInstruments.bmlDetailsWallet\')"></div>\n                                            </div>\n                                            <div ng-if="plan.primaryFs.subtype === \'ECHECK\'" class="disclaimer">\n                                                {{ content(\'paymentMethod.eCheckDescription\') }}\n                                            </div>\n                                        </div>\n                                    </experience>\n                                </li>\n                                <li role="presentation" class="fundingsource" ng-if="isBillingNoPurchase" ng-repeat="stickyFI in getBAPlans()">\n                                    <experience flag="!cardart">\n                                        <div class="row-fluid radioButton">\n\n                                            <input type="radio" id="{{stickyFI.instrument_id}}" name="selectedFI" value="{{stickyFI.instrument_id}}" ng-model="selectedmethod.planId"/>\n\n                                            <label class="noBottom" for="{{stickyFI.instrument_id}}">\n                                                <div>\n                                                    <span class="fsIcon" ng-class="[stickyFI.type, stickyFI.name, stickyFI.card_type]"></span>\n                                                    <div class="fsdetails">\n                                                        <span ng-switch="fundingsource.subtype">\n                                                            <span ng-switch-default>\n                                                                <span class="name">{{content(\'fsMappings.\'+ stickyFI.name) || stickyFI.name}}</span>\n                                                                <span class="lastdigits" ng-if="stickyFI.last4">x-{{stickyFI.last4}}</span>\n                                                            </span>\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                            </label>\n                                        </div>\n                                    </experience>\n                                    <experience flag="cardart">\n                                        <div class="row-fluid radioButton">\n                                            <input type="radio" id="{{stickyFI.instrument_id}}" name="selectedFI" value="{{stickyFI.instrument_id}}" ng-model="selectedmethod.planId"/>\n\n                                            <label class="noBottom" for="{{stickyFI.instrument_id}}">\n                                                <div class="positionDecoupler">\n                                                    <xo-fi-panel fi="stickyFI"></xo-fi-panel>\n                                    </experience>\n                                </li>\n                                <li role="presentation" class="fundingsource" ng-if="showPPCAcquisitionRadioButton()">\n                                    <div class="row-fluid radioButton">\n                                        <input type="radio" id="applyForPPCRadio" name="selectedFI" value="applyForPPCRadio"\n                                               ng-model="selectedmethod.index" />\n                                        <label class="noBottom" for="applyForPPCRadio">\n                                            <xo-offer token="token" promotion="promotion" bmlaction="bmlaction" installment="installment"\n                                                      selectedmethod="selectedmethod" radio="true">\n                                            </xo-offer>\n                                        </label>\n                                    </div>\n                                </li>\n\n                            </ul>\n\n                            <div class="multipleFi addCard">\n                                <a track-link="choose_FI_interstitial" ui-sref="checkout.pageAddCard.addCardFlow.addCard"\n                                    class="addCardLink" role="button">\n                                    <span class="plusicon"></span>\n                                    <p class="addOption">\n                                        <span class="name">{{content(\'fundingInstruments.addNewCard\')}}</span>\n                                    </p>\n                                </a>\n                            </div>\n\n                            <div class="offers">\n                                <xo-offer token="token" promotion="promotion" bmlaction="bmlaction"installment="installment"\n                                    selectedmethod="selectedmethod">\n                                </xo-offer>\n                            </div>\n                        </div>\n                    </div>\n                    <div id="button" class="buttons reviewButton">\n                        <button track-submit=\'choose_FI_interstitial\' class="btn full confirmButton continueButton" ng-click="continue()">{{continueButtonText()}}</button>\n                    </div>\n\n                    <xo-credit-example-uk ng-if="installment.showCreditExample"></xo-credit-example-uk>\n\n                </div>\n            </div>\n        </div>\n        <div class="span10">\n            <xo-marketing-offers placement-code="\'202003\'"\n                                 token="token"\n                                 page-name="\'HERMES_RYI_PAGE\'"\n                                 title-txt-property="propValueObj.propHeader"\n                                 subtitle-property="propValueObj.propVal"\n                                 background-image= "propValueObj.propImage"\n            >\n            </xo-marketing-offers>\n        </div>\n    </div>\n    <div ui-view></div>\n</section>\n';
    },
    "./pages/xo-select-fi/styles.less": "./css/app.less",
    "./pages/xo-review/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$ReviewRoute = undefined;
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _route = __webpack_require__("./components/xo-wallet-components/src/confirm-upop/route.js");
        var _route2 = _interopRequireDefault(_route);
        __webpack_require__("./components/xo-login-components/src/onetouch-interstitial/route.js");
        var _route3 = __webpack_require__("./pages/xo-sidebar/route.js");
        var _route4 = _interopRequireDefault(_route3);
        var _route5 = __webpack_require__("./pages/xo-sidepage/route.js");
        var _route6 = _interopRequireDefault(_route5);
        var _directive = __webpack_require__("./pages/xo-review/directive.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _choice = __webpack_require__("./components/xo-models/src/choice/index.js");
        var _credit = __webpack_require__("./components/xo-models/src/credit/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $ReviewRoute = exports.$ReviewRoute = _squid.$ComponentRoute.extend("$ReviewRoute", {
            path: "review",
            directive: _directive.$xoReviewPageComponent,
            titleContent: "memberReview.memberReviewTitle",
            trackingData: {
                fptiState: "review",
                templateName: "memberReview.dust",
                pageGoal: "Payment Review",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-review",
                        pagename2: "%::fullpage-review:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            resolve: {
                action: function action($rootScope, $state) {
                    if (!(0, _squid.$feature)("choiceExperiment")) {
                        return;
                    }
                    var _$config$choiceExperi = _squid.$config.choiceExperiment;
                    _$config$choiceExperi = _$config$choiceExperi === undefined ? {} : _$config$choiceExperi;
                    var _$config$choiceExperi2 = _$config$choiceExperi.selectFi, fiPageVariants = _$config$choiceExperi2 === undefined ? [] : _$config$choiceExperi2, _$config$choiceExperi3 = _$config$choiceExperi.skipSelectFi, skipFiPageVariants = _$config$choiceExperi3 === undefined ? [] : _$config$choiceExperi3;
                    var fromState = $state.fromState;
                    var skipStates = [ "checkout.review", "checkout.selectFi", "checkout.authorizationmessage", "checkout.pageAddCard.addCardFlow.addCard", "checkout.chooseCreditOffer", "checkout.payWithCard", "checkout.shipTo" ];
                    if (!fromState.name || skipStates.some(function(state) {
                        return fromState.name.indexOf(state) !== -1;
                    })) {
                        return;
                    }
                    var isCapeReturnKey = _credit.$CreditDataModel.instance($rootScope.token).getCapeKey();
                    if (isCapeReturnKey) {
                        return;
                    }
                    return _choice.$ChoiceEligibility.instance().getVariant($rootScope.token).then(function(variant) {
                        if (fiPageVariants.indexOf(variant) === -1) {
                            return;
                        }
                        var models = {};
                        return (0, _squid.$populate)(models, {
                            checkoutSession: _checkout.$CheckoutSessionModel.instance($rootScope.token)
                        }).then(function() {
                            var plans = models.checkoutSession.get("fundingOptions.plans");
                            var isPreferredDefault = skipFiPageVariants.indexOf(variant) > -1 && plans && plans[0].primaryFs.isPreferred;
                            var stickyPlans = models.checkoutSession.futurePaymentInstruments;
                            if (!isPreferredDefault && (plans && plans.length > 1 || stickyPlans && stickyPlans.length > 1)) {
                                return {
                                    to: "checkout.selectFi",
                                    newState: true
                                };
                            } else {
                                _logger.$logger.info("skip_selectFi", {
                                    reason: isPreferredDefault ? "default_is_preferred" : "not_enough_plans"
                                });
                                return;
                            }
                        });
                    });
                }
            },
            children: [ {
                route: _route4["default"],
                attributes: {
                    "back-uri": "backUri",
                    promotion: "promotion",
                    update: "update",
                    token: "token",
                    installment: "installment"
                }
            }, {
                name: "$OneTouchUpsellRoute",
                attributes: {
                    token: "token",
                    "on-complete": "onComplete"
                }
            }, {
                route: _route2["default"],
                props: function props() {
                    var props = {
                        token: this.token,
                        cardmodel: this.cardModel
                    };
                    if (this.upopCallbacks.isOnUpdate) {
                        props.onSuccess = this.upopCallbacks.onUpdateSuccess;
                        props.onCancel = this.upopCallbacks.onUpdateCancel;
                    } else {
                        props.onSuccess = this.upopCallbacks.onConfirmUpopSuccess;
                        props.onCancel = this.upopCallbacks.onConfirmUpopCancel;
                    }
                    return props;
                }
            }, {
                route: _route6["default"],
                props: function props() {
                    return {
                        token: this.token
                    };
                }
            } ]
        });
        angular.value("$ReviewRoute", $ReviewRoute);
        _logger.$logger;
        _squid.$ComponentRoute;
        _squid.$feature;
        _squid.$config;
        _squid.$populate;
        _directive.$xoReviewPageComponent;
        _checkout.$CheckoutSessionModel;
        _choice.$ChoiceEligibility;
        _credit.$CreditDataModel;
    },
    "./components/xo-login-components/src/onetouch-interstitial/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-login-components/src/onetouch-interstitial/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("xo-onetouch-upsell.route", [ "squid", "xo-onetouch-upsell.directive" ]).factory("$OneTouchUpsellRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("OneTouchUpsellRoute", {
                        name: "oneTouchUpsell",
                        directive: "xo-onetouch-upsell",
                        trackingData: {
                            fptiState: "onetouch-upsell",
                            buzname: {
                                fullpage: {
                                    pagename: "%::onetouch-upsell",
                                    pagename2: "%::onetouch-upsell:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        query: [ "oneTouchFlowName" ],
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-login-components/src/onetouch-interstitial", "components/xo-login-components/src/onetouch-interstitial/route.js");
    },
    "./components/xo-login-components/src/onetouch-interstitial/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        var _ul = __webpack_require__("./components/xo-login-components/src/unified-login/ul.js");
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-login-components/src/onetouch-interstitial/template.html"), __webpack_require__("./components/xo-ui-components/src/accessibility/ui.js"), __webpack_require__("./components/xo-login-components/src/onetouch-interstitial/kmliUpsell.js"), __webpack_require__("./components/xo-tracking/dist/index.js"), __webpack_require__("./components/ul-inline/dist/inject.js"), __webpack_require__("./components/xo-device-info/dist/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular, squid, template, ui) {
            return angular.module("xo-onetouch-upsell.directive", [ "squid", "xolocale", "tracking", "xo-device-info" ]).directive("xoOnetouchUpsell", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        onComplete: "=",
                        disableCloseButton: "=",
                        ignoreBgClicks: "="
                    },
                    controller: function controller($scope, $rootScope, $state, $element, $timeout, $logger, $KmliUpsell, $LocaleModel, $locale, $CalDataModel, $config, $meta, $DeviceInfo, $stateParams, $AuthModel) {
                        $scope.oneTouchFlowName = $stateParams.oneTouchFlowName;
                        $scope.modalActive = false;
                        $scope.locale = $LocaleModel.instance();
                        $scope.disableCloseButton = $scope.disableCloseButton || $DeviceInfo.isDevice();
                        $scope.upsellOptInDisplayed = false;
                        var ulMeta = $config.ulMeta || {};
                        var PAYPAL = window.PAYPAL || {};
                        var ulTimeOutValue = 5e3;
                        var ulTimeoutPromise = null;
                        var fptiData = $KmliUpsell.getFPTIAttributes();
                        if (!$scope.onComplete) {
                            $scope.onComplete = function(params) {
                                $AuthModel.instance().retrieve().then(function(auth) {
                                    auth.isKmliSet = params && params.isKmliSet;
                                    $state.go("checkout.review");
                                });
                            };
                        }
                        $KmliUpsell.eligible().then(function(eligibility) {
                            if (eligibility && eligibility.interstitial && eligibility.interstitial.color) {
                                $scope.color = eligibility.interstitial.color;
                                $scope.showUpsellBanner = eligibility.banner;
                            }
                        });
                        function closeInterstitial(params) {
                            $("#wrapper > xo-spinner").attr("style", "");
                            $("body").removeClass("kmliUpsellActive");
                            $element.removeClass("upsellOpen");
                            $scope.onComplete(params);
                        }
                        function failureHandler(reason) {
                            $logger.info("KMLI_UPSELL_error_" + reason);
                            closeInterstitial();
                        }
                        var startTimerTS;
                        function startTimer(tag) {
                            startTimerTS = Date.now();
                            $logger.info("KMLI_UPSELL_START_TIMER_" + tag, {
                                startTime: startTimerTS
                            });
                            $logger.info("checkout_fpti", {
                                from: "Interstitial_Timer",
                                to: "prepare_" + tag
                            });
                            ulTimeoutPromise = $timeout(function() {
                                var stop_time = Date.now();
                                var time_taken = stop_time - startTimerTS;
                                $logger.info("checkout_fpti", {
                                    from: "Interstitial_Timer",
                                    to: "process_timeout",
                                    int_error_code: "ULLOGIN_TIMEOUT",
                                    int_error_description: "ULLOGIN_TIMEOUT",
                                    error_source: "unifiedloginnodeweb",
                                    error_type: "soft_decline",
                                    page_load_time: time_taken
                                });
                                failureHandler("timedout");
                                $rootScope.$emit("loaded");
                            }, ulTimeOutValue);
                        }
                        function stopTimer(tag) {
                            var stopTimerTS = Date.now();
                            var timeTaken = stopTimerTS - startTimerTS;
                            $logger.info("KMLI_UPSELL_STOP_TIMER_" + tag, {
                                stopTimer: stopTimerTS,
                                page_load_time: timeTaken
                            });
                            $logger.info("checkout_fpti", {
                                from: "Interstitial_Timer",
                                to: "process_" + tag,
                                page_load_time: timeTaken
                            });
                            if (ulTimeoutPromise) {
                                $timeout.cancel(ulTimeoutPromise);
                            }
                        }
                        function logSubmit(data) {
                            var fptiPayload = {
                                from: fptiData.stateName,
                                to: "process" + fptiData.transInfix + "optin"
                            };
                            if (data && data.errorCode) {
                                angular.extend(fptiPayload, {
                                    int_error_code: data.errorCode,
                                    error_type: "hard_decline",
                                    error_source: "unifiedloginnodeweb"
                                });
                            }
                            $logger.info("checkout_fpti", fptiPayload);
                        }
                        $scope.hideModal = function(event) {
                            if (event) {
                                event.preventDefault();
                            } else if ($scope.ignoreBgClicks) {
                                return;
                            }
                            $logger.info("checkout_fpti", {
                                from: fptiData.stateName,
                                to: "process" + fptiData.transInfix + "decline",
                                click_source: "close_button"
                            });
                            closeInterstitial();
                        };
                        var ulEventHandlers = {
                            oneTouchInterstitialOptInLoaded: function oneTouchInterstitialOptInLoaded(data) {
                                stopTimer(data.event);
                                $rootScope.$emit("loaded");
                                $("#wrapper > xo-spinner").hide();
                                $("body").addClass("kmliUpsellActive");
                                $timeout(function() {
                                    $element.addClass("upsellOpen");
                                    $element.one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend", function() {
                                        $scope.$apply(function() {
                                            $scope.modalActive = true;
                                            $("#injectedOneTouchInterstitial").focus();
                                            var escHandler = function escHandler(event) {
                                                if (event.keyCode === ui.KEYS.ESC) {
                                                    $scope.hideModal();
                                                }
                                            };
                                            $element.find("iframe").contents().on("keydown", escHandler);
                                            $element.on("keydown", escHandler);
                                        });
                                    });
                                });
                            },
                            oneTouchInterstitialOptInAttempted: function oneTouchInterstitialOptInAttempted(data) {
                                $rootScope.$emit("loading");
                                startTimer(data.event);
                            },
                            oneTouchInterstitialOptInSuccess: function oneTouchInterstitialOptInSuccess(data) {
                                stopTimer(data.event);
                                $rootScope.$emit("loaded");
                                logSubmit();
                                closeInterstitial(data);
                            },
                            oneTouchInterstitialOptInFailed: function oneTouchInterstitialOptInFailed(data) {
                                stopTimer(data.event);
                                $rootScope.$emit("loaded");
                                logSubmit({
                                    errorCode: data.event
                                });
                                closeInterstitial(data);
                            },
                            oneTouchInterstitialOptInNotAuthorized: function oneTouchInterstitialOptInNotAuthorized(data) {
                                stopTimer(data.event);
                                logSubmit({
                                    errorCode: data.event
                                });
                                $rootScope.$emit("loaded");
                                closeInterstitial(data);
                            },
                            oneTouchInterstitialOptInNotNowClicked: function oneTouchInterstitialOptInNotNowClicked(data) {
                                $logger.info("checkout_fpti", {
                                    from: fptiData.stateName,
                                    to: "process" + fptiData.transInfix + "decline",
                                    click_source: "not_now_link"
                                });
                                closeInterstitial(data);
                            }
                        };
                        function postMessageHandler(response) {
                            $timeout(function() {
                                $logger.info("ul_postmessaged_received", response);
                                var data = response.data || response.error;
                                var eventId = data && data.event;
                                if (eventId) {
                                    $logger.debug("KMLI_UPSELL_" + eventId, response);
                                    var handler = ulEventHandlers[eventId];
                                    if (handler) {
                                        handler(data);
                                    }
                                }
                            });
                        }
                        function upsellOptInDisplayed() {
                            return $AuthModel.instance().retrieve().then(function(auth) {
                                if (auth.upsellOptInDisplayed) {
                                    $scope.upsellOptInDisplayed = true;
                                }
                            });
                        }
                        function loadOneTouchUpsell() {
                            upsellOptInDisplayed().then(function() {
                                if ($scope.upsellOptInDisplayed) {
                                    $scope.onComplete();
                                } else {
                                    $rootScope.$emit("loading");
                                    var options = {
                                        targetElement: document.getElementById("injectedOneTouchInterstitial"),
                                        queryParams: {
                                            stsRedirectUri: ulMeta.stsReturnUrl,
                                            "country.x": $scope.locale.country,
                                            "locale.x": $scope.locale.getLocaleCode(),
                                            flowId: $scope.token,
                                            correlationId: $CalDataModel.getCalCorrId(),
                                            flowName: $scope.oneTouchFlowName
                                        },
                                        iframePathname: "/signin/activate-one-touch",
                                        onPostMessage: postMessageHandler
                                    };
                                    angular.extend(options.queryParams, $KmliUpsell.getOptions());
                                    if ($config.deploy.isLocal()) {
                                        if ($meta.stage) {
                                            options.origin = "https://" + $meta.stage;
                                        } else {
                                            options.origin = $config.onboarding.url.split("/webapps/")[0];
                                        }
                                    }
                                    if (PAYPAL && PAYPAL.unifiedLogin) {
                                        startTimer("initializeUpsell");
                                        PAYPAL.unifiedLogin.inject(options);
                                    } else {
                                        failureHandler("PAYPAL.unifiedLogin_undefined");
                                    }
                                }
                            });
                        }
                        $timeout(function() {
                            $element.addClass("upsellOpen");
                        });
                        $scope.optinOneTouch = function() {
                            var flowName = "checkoutInterstitial";
                            var fptiPayload = {
                                stateName: fptiData.stateName,
                                transInfix: "process" + fptiData.transInfix + "optin"
                            };
                            var silent = true;
                            return _ul.$ul.optInToOneTouch($scope.token, $locale.country, $locale.getLocaleCode(), silent, fptiPayload, flowName).then(closeInterstitial({
                                isKmliSet: true
                            }))["catch"](function(err) {
                                closeInterstitial({
                                    isKmliSet: false,
                                    error: err
                                });
                            });
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        _ul.$ul;
    },
    "./components/xo-login-components/src/unified-login/ul.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$ul = undefined;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _config = __webpack_require__("./components/squid/dist/core/config.js");
        var _model = __webpack_require__("./components/xo-tracking/dist/model.js");
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var $ul = exports.$ul = {
            optInToOneTouch: function optInToOneTouch(token, locale_country, locale_code, silent, fptiData, flowName) {
                return (0, _angular.$q)(function(resolve, reject) {
                    var PAYPAL = window.PAYPAL || {};
                    var ulTimeOutValue = 1e4;
                    var ulTimeoutPromise = null;
                    function logSubmit(data) {
                        var fptiPayload = {
                            from: fptiData && fptiData.stateName ? fptiData.stateName : "poma_page",
                            to: fptiData && fptiData.transInfix ? fptiData.transInfix : "process_kmli_optin"
                        };
                        if (data && data.errorCode) {
                            angular.extend(fptiPayload, {
                                int_error_code: data.errorCode,
                                error_type: "hard_decline",
                                error_source: "unifiedloginnodeweb"
                            });
                        }
                        _logger.$logger.info("checkout_fpti", fptiPayload);
                    }
                    function failureHandler(reason) {
                        logSubmit({
                            errorCode: reason
                        });
                        _logger.$logger.info("UL_Loading_error_" + reason);
                        return reject(new Error("UL_Loading_error_" + reason));
                    }
                    function startTimer(tag) {
                        _logger.$logger.info("UL_START_TIMER_" + tag);
                        ulTimeoutPromise = (0, _angular.$timeout)(function() {
                            failureHandler("timed_out");
                            if (!silent) {
                                _angular.$rootScope.$emit("loaded");
                            }
                        }, ulTimeOutValue);
                    }
                    function stopTimer(tag) {
                        if (!silent) {
                            _angular.$rootScope.$emit("loaded");
                        }
                        _logger.$logger.info("UL_STOP_TIMER_" + tag);
                        if (ulTimeoutPromise) {
                            _angular.$timeout.cancel(ulTimeoutPromise);
                            ulTimeoutPromise = null;
                        }
                    }
                    var ulEventHandlers = {
                        oneTouchInterstitialOptInLoaded: function oneTouchInterstitialOptInLoaded(data) {},
                        oneTouchInterstitialOptInAttempted: function oneTouchInterstitialOptInAttempted(data) {},
                        oneTouchInterstitialOptInSuccess: function oneTouchInterstitialOptInSuccess(data) {
                            stopTimer(data.event);
                            logSubmit();
                            _auth.$AuthModel.instance().retrieve().then(function(auth) {
                                auth.refresh_token = true;
                            });
                            return resolve();
                        },
                        oneTouchInterstitialOptInFailed: function oneTouchInterstitialOptInFailed(data) {
                            stopTimer(data.event);
                            failureHandler(data.event);
                        },
                        oneTouchInterstitialOptInNotAuthorized: function oneTouchInterstitialOptInNotAuthorized(data) {
                            var child = document.getElementById("ulTargetAttribute");
                            child.parentNode.removeChild(child);
                            stopTimer(data.event);
                            failureHandler(data.event);
                        }
                    };
                    function postMessageHandler(response) {
                        (0, _angular.$timeout)(function() {
                            _logger.$logger.info("ul_postmessaged_received", response);
                            var data = response.data || response.error;
                            var eventId = data && data.event;
                            if (eventId) {
                                _logger.$logger.debug("UL" + eventId, response);
                                var handler = ulEventHandlers[eventId];
                                if (handler) {
                                    handler(data);
                                }
                            }
                        });
                    }
                    function loadOneTouchUpsell() {
                        if (!silent) {
                            _angular.$rootScope.$emit("loading");
                        }
                        var ulTargetAttribute = document.createElement("div");
                        ulTargetAttribute.setAttribute("id", "ulTargetAttribute");
                        ulTargetAttribute.style.width = "0px";
                        ulTargetAttribute.style.margin = "0px";
                        ulTargetAttribute.style.height = "0px";
                        ulTargetAttribute.style.padding = "0px";
                        document.body.appendChild(ulTargetAttribute);
                        var options = {
                            targetElement: document.getElementById("ulTargetAttribute"),
                            queryParams: {
                                "country.x": locale_country,
                                "locale.x": locale_code,
                                flowId: token,
                                correlationId: _model.$CalDataModel.getCalCorrId(),
                                flowName: flowName ? flowName : "checkoutOnlyMember"
                            },
                            iframePathname: "/signin/activate-one-touch",
                            onPostMessage: postMessageHandler
                        };
                        if (_config.$config.deploy.isLocal()) {
                            if (_config.$meta.stage) {
                                options.origin = "https://" + _config.$meta.stage;
                            } else {
                                options.origin = _config.$config.onboarding.url.split("/webapps/")[0];
                            }
                        }
                        if (PAYPAL && PAYPAL.unifiedLogin) {
                            startTimer("initializeUl");
                            PAYPAL.unifiedLogin.inject(options);
                        } else {
                            failureHandler("PAYPAL.unifiedLogin_undefined");
                        }
                    }
                    loadOneTouchUpsell();
                });
            }
        };
        angular.value("$ul", $ul);
        _angular.$rootScope;
        _angular.$q;
        _angular.$timeout;
        _logger.$logger;
        _config.$config;
        _config.$meta;
        _model.$CalDataModel;
        _auth.$AuthModel;
    },
    "../node_modules/noop-loader/index.js!./components/xo-login-components/src/onetouch-interstitial/template.html": function(module, exports) {
        module.exports = '<div class="kmliUpsell" ng-class="{mobile: isDevice}" content>\n\n    <div ng-if="ulUpsell">\n        <!-- =============================================\n                Regular interstial (also used by POMA)\n            ============================================== -->\n        <div class="upsellMask"></div>\n        <div class="upsellWrapper" simple-modal="modalActive" modal-cancel="hideModal()">\n            <div class="upsellContainer">\n                <xo-spinner></xo-spinner>\n                <div class="aside">\n                    <a class="close" href="#" title="Close" ng-click="hideModal($event)" ng-hide="disableCloseButton" aria-label="{{content(\'common.back\')}}"></a>\n                    <section class="login" id="login">\n                        <div id="injectedOneTouchInterstitial" tabindex="-1">\n                        </div>\n                    </section>\n                </div>\n                <div class="pushLogo"></div>\n            </div>\n            <div class="logo"></div>\n        </div>\n    </div>\n\n    <div ng-if="!ulUpsell">\n        <!-- ===========================\n                RYI optin interstial\n            ============================ -->\n        <div class="upsellMask_white"></div>\n        <div class="upsellWrapper" ng-class="{whiteWithBlur: color === \'white\' , blackWithBlur: color === \'black\'}" simple-modal="modalActive" modal-cancel="hideModal()">\n            <div class="upsellContainer">\n                <div ng-if="showUpsellBanner" class="fill"></div>\n                <div class="aside">\n                    <a class="close" href="#" title="Close" ng-click="hideModal($event)" ng-hide="disableCloseButton" aria-label="{{content(\'common.back\')}}"></a>\n                    <section class="login" id="login">\n                        <div class="promoHeading" ng-bind-html="content(\'oneTouchUpsell.promoHeading\')"></div>\n                        <div class="promo">\n                            <div class="icon password"></div>\n                            <div class="text" ng-bind-html="content(\'oneTouchUpsell.promoText1\')"></div>\n                        </div>\n                        <div class="promo">\n                            <div class="icon merchants"></div>\n                            <div class="text" ng-bind-html="content(\'oneTouchUpsell.promoText2\')"></div>\n                        </div>\n                        <div class="promo">\n                            <div class="icon secure"></div>\n                            <div class="text" ng-bind-html="content(\'oneTouchUpsell.promoText3\')"></div>\n                        </div>\n                        <div class="buttons">\n                            <input type="button" value="{{content(\'common.activate\')}}" class="btn full" ng-click="optinOneTouch()">\n                            <div class="cancel">\n                                <a href="#" prevent-default ng-click="hideModal($event)">{{content(\'common.noThanks\')}}</a>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n                <div class="pushLogo"></div>\n            </div>\n            <div class="logo" id="pp_min_logo"></div>\n        </div>\n    </div>\n</div>\n';
    },
    "./pages/xo-sidebar/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        __webpack_require__("./components/xo-wallet-components/src/add-bank/route.js");
        __webpack_require__("./components/xo-wallet-components/src/add-card/route.js");
        __webpack_require__("./components/xo-member-components/src/select-shipping/add-shipping/route.js");
        __webpack_require__("./components/xo-member-components/src/select-shipping/delete-shipping/route.js");
        __webpack_require__("./components/xo-member-components/src/select-shipping/update-shipping/route.js");
        __webpack_require__("./pages/xo-shipping/route.js");
        __webpack_require__("./pages/xo-sidebar/directive.js");
        __webpack_require__("./pages/xo-sidebar-add-shipping/route.js");
        __webpack_require__("./pages/xo-sidebar-update-shipping/route.js");
        __webpack_require__("./pages/xo-sidebar-add-card/route.js");
        __webpack_require__("./pages/xo-sidebar-add-bank/route.js");
        __webpack_require__("./pages/xo-sidebar-currency-conversion/route.js");
        __webpack_require__("./pages/xo-sidebar-installment-options/route.js");
        __webpack_require__("./pages/xo-wallet/route.js");
        var _route = __webpack_require__("./pages/xo-sidebar-manage-wallet/route.js");
        var _route2 = _interopRequireDefault(_route);
        var _route3 = __webpack_require__("./pages/xo-sidebar-update-card/route.js");
        var _route4 = _interopRequireDefault(_route3);
        var _index = __webpack_require__("./components/squid/dist/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$SidebarRoute", {
            path: "sidebar",
            directive: "xo-sidebar",
            children: [ {
                name: "$SidebarShippingRoute",
                attributes: {
                    token: "props.token",
                    "back-uri": "props.backUri"
                }
            }, {
                name: "$SidebarAddShippingRoute",
                attributes: {
                    token: "props.token",
                    "back-uri": "props.backUri"
                }
            }, {
                name: "$SidebarAddCardRoute",
                attributes: {
                    token: "props.token",
                    promotion: "props.promotion",
                    "back-uri": "props.backUri",
                    "done-uri": "props.doneUri"
                }
            }, {
                name: "$SidebarAddBankRoute",
                attributes: {
                    token: "props.token"
                }
            }, {
                name: "$SidebarWalletRoute",
                props: function props() {
                    return {
                        token: this.props.token,
                        promotion: this.props.promotion,
                        installment: this.props.installment
                    };
                },
                config: function config() {
                    return {
                        heading: "asideHeader.fundingInstruments",
                        subHeading: "asideHeader.fundingInstrumentsSubHead",
                        addRoute: "checkout.review.sidebar.sidebarAddCard.addCardFlow.addCard"
                    };
                }
            }, {
                name: "$AddBankFlowRoute",
                attributes: {
                    token: "props.token",
                    "parent-callbacks": "callbacks"
                }
            }, {
                name: "$AddCardPageRoute",
                attributes: {
                    token: "props.token",
                    "parent-callbacks": "callbacks"
                }
            }, {
                name: "$AddShippingRoute",
                attributes: {
                    token: "props.token",
                    "parent-callbacks": "callbacks",
                    "done-fn": "callbacks.done",
                    "back-uri": "props.backUri",
                    sidebar: "sidebar",
                    update: "props.update"
                }
            }, {
                name: "$UpdateShippingRoute",
                attributes: {
                    token: "props.token",
                    "parent-callbacks": "callbacks",
                    "done-fn": "callbacks.done",
                    sidebar: "sidebar"
                }
            }, {
                name: "$DeleteShippingRoute",
                attributes: {
                    token: "props.token",
                    "parent-callbacks": "callbacks",
                    sidebar: "sidebar"
                }
            }, {
                name: "$SidebarCurrencyConversionRoute",
                attributes: {
                    token: "props.token"
                }
            }, {
                name: "$SidebarInstallmentOptionsRoute",
                attributes: {
                    token: "props.token"
                }
            }, {
                route: _route2["default"],
                props: function props() {
                    return {
                        token: this.token
                    };
                }
            }, {
                route: _route4["default"],
                props: function props() {
                    return {
                        token: this.token,
                        backUri: this.props.backUri,
                        doneUri: this.props.doneUri
                    };
                }
            } ]
        });
        _index.$Route;
        module.exports = exports["default"];
    },
    "./components/xo-wallet-components/src/add-bank/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-wallet-components/src/add-bank/directive.js"), __webpack_require__("./components/xo-wallet-components/src/add-bank/addbank/route.js"), __webpack_require__("./components/xo-wallet-components/src/add-bank/sepa/route.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-add-bank.route", [ "squid", "xo-add-bank.directive", "xo-add-bank.addbank.route", "xo-add-bank.sepa.route" ]).factory("$AddBankFlowRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("BankRoute", {
                        name: "bank",
                        directive: "xo-add-bank-flow",
                        titleContent: "asideHeader.addBank",
                        children: [ {
                            name: "$XOAddBankRoute",
                            attributes: {
                                token: "token",
                                "parent-callbacks": "callbacks",
                                "error-message": "errorMessage",
                                bank: "bank",
                                sidebar: "sidebar",
                                hideparenthead: "hideparenthead",
                                "page-level": "pageLevel"
                            }
                        }, {
                            name: "$XOSepaRoute",
                            attributes: {
                                token: "token",
                                "parent-callbacks": "callbacks",
                                model: "bank",
                                sidebar: "sidebar",
                                hideparenthead: "hideparenthead"
                            }
                        } ]
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-wallet-components/src/add-bank", "components/xo-wallet-components/src/add-bank/route.js");
    },
    "./components/xo-wallet-components/src/add-bank/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-bank/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/fi/index.js"), __webpack_require__("./components/xo-ui-components/src/message/directive.js"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            return squid.module("xo-add-bank.directive", [ "squid", "xomodel.checkout", "xomodel.fi", "xo-message.directive", "xo-error-tooltip.directive", "fi.errorUtil" ]).directive("xoAddBankFlow", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        parentCallbacks: "=",
                        sidebar: "=",
                        hideparenthead: "=",
                        pageLevel: "="
                    },
                    controller: function controller($scope, $rootScope, $AddBankModel, $CheckoutCartModel, $populate, $CheckoutSessionModel, $state, $locale, $element, $fiErrorUtil) {
                        function handleContingency(name, result) {
                            $scope.errorMessage = $fiErrorUtil.addPageErrors(result, "bank");
                            $fiErrorUtil.addFieldErrors(result, $element, "model.");
                            $state.go("^.add");
                        }
                        function updateFundingOptions() {
                            $scope.checkoutSession.fundingOptions.action("update", {
                                resultModel: $scope.checkoutSession,
                                data: {
                                    planId: $scope.bankId
                                },
                                success: function success(result) {
                                    $scope.checkoutSession.message = {
                                        type: "success",
                                        msgKeys: [ "paymentMethod.paymentMethodUpdated" ]
                                    };
                                    $scope.parentCallbacks.done();
                                },
                                contingencies: {
                                    ADD_BANK_CONTINGENCY: handleContingency
                                }
                            });
                        }
                        $scope.callbacks = {
                            addBankDone: function addBankDone(bank) {
                                $scope.bank = bank;
                                $state.go("^.sepa");
                            },
                            sepaDone: function sepaDone() {
                                $populate($scope, {
                                    checkoutSession: $CheckoutSessionModel.instance($scope.token),
                                    cart: $CheckoutCartModel.instance($scope.token)
                                }).then(function() {
                                    $scope.locale = $locale;
                                    var addBankReq = $scope.bank.getBankData();
                                    $scope.bank.action("add", {
                                        data: addBankReq,
                                        resultModel: {},
                                        success: function success(data) {
                                            $scope.bankId = data.id;
                                            var sepaStatus = data.sepaStatus;
                                            if (sepaStatus === "AUTHORIZED") {
                                                return updateFundingOptions();
                                            }
                                            $scope.bank.action("sepaAccept", {
                                                data: {
                                                    bank: {
                                                        id: data.id
                                                    }
                                                },
                                                resultModel: {},
                                                success: updateFundingOptions,
                                                contingencies: {
                                                    DEFAULT: handleContingency
                                                }
                                            });
                                        },
                                        contingencies: {
                                            ADD_BANK_CONTINGENCY: handleContingency
                                        }
                                    });
                                });
                            }
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-bank/template.html": function(module, exports) {
        module.exports = "<div ui-view></div>";
    },
    "./components/xo-wallet-components/src/add-bank/addbank/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-wallet-components/src/add-bank/addbank/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-add-bank.addbank.route", [ "squid", "xo-add-bank.addbank.directive" ]).factory("$XOAddBankRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("AddRoute", {
                        name: "add",
                        titleContent: "asideHeader.addBank",
                        directive: "xo-add-bank",
                        trackingData: {
                            fptiState: "add_bank"
                        },
                        loginRequired: true,
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-wallet-components/src/add-bank/addbank", "components/xo-wallet-components/src/add-bank/addbank/route.js");
    },
    "./components/xo-wallet-components/src/add-bank/addbank/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-bank/addbank/template.html"), __webpack_require__("./components/xo-models/src/fi/index.js"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/auth/index.js"), __webpack_require__("./components/xo-wallet-components/src/add-bank/bank-input/directive.js"), __webpack_require__("./components/xo-ui-components/src/message/directive.js"), __webpack_require__("./components/xo-ui-components/src/popup/directive.js"), __webpack_require__("./components/xo-tray-height/dist/directive.js"), __webpack_require__("./components/xo-page-components/src/aside-header/directive.js"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js"), __webpack_require__("./components/xo-wallet-components/src/fi-contingency-list/util.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid, template) {
            return squid.module("xo-add-bank.addbank.directive", [ "squid", "xomodel.fi", "xomodel.checkout", "xomodel.auth", "xo-add-bank.bank-input.directive", "xo-message.directive", "xo-popup.directive", "xo-tray-height.directive", "xo-aside-header.directive", "xo-error-tooltip.directive", "fi.errorUtil" ]).directive("xoAddBank", function() {
                return {
                    template: template,
                    scope: {
                        parentCallbacks: "=",
                        errorMessage: "=",
                        bank: "=",
                        sidebar: "=",
                        hideparenthead: "=",
                        message: "=",
                        pageLevel: "="
                    },
                    controller: function controller($scope, $populate, $AddBankModel, $BillingAddressesModel, $AuthModel, $element, $locale, $fiErrorUtil) {
                        $scope.model = $scope.bank || new $AddBankModel({
                            id: 123
                        });
                        $scope.locale = $locale;
                        if ($scope.hideparenthead) {
                            $scope.hideparenthead.toggle = false;
                        }
                        $scope.onSubmit = function() {
                            if ($scope.pageLevel) {
                                $scope.pageLevel.message = null;
                            }
                            var data = $scope.model.getBankData();
                            function mapValidationErrors(err) {
                                var fields = err && err.fields || [];
                                fields.forEach(function(fieldError) {
                                    if (fieldError && fieldError.property) {
                                        fieldError.field = fieldError.property;
                                    }
                                });
                                return {
                                    fields: fields
                                };
                            }
                            $scope.model.action("validate", {
                                data: data,
                                resultModel: {},
                                success: function success(successData) {
                                    $scope.model.creditorDetails = successData.creditorDetails;
                                    $scope.model.fiDetails = successData.fiDetails;
                                    $scope.parentCallbacks.addBankDone($scope.model);
                                },
                                contingencies: {
                                    VALIDATE_BANK_CONTINGENCY: function VALIDATE_BANK_CONTINGENCY(name, contingencyData) {
                                        $scope.errorMessage = $fiErrorUtil.addPageErrors(contingencyData, "bank");
                                        $fiErrorUtil.addFieldErrors(contingencyData, $element, "model.");
                                    }
                                },
                                validation: function validation(res) {
                                    $fiErrorUtil.addFieldErrors(mapValidationErrors(res), $element, "model.");
                                }
                            });
                        };
                        $populate($scope, {
                            auth: $AuthModel.instance(),
                            billingAddresses: $BillingAddressesModel.instance()
                        }).then(function() {
                            $scope.model.address = $scope.billingAddresses.addresses && $scope.billingAddresses.addresses[0];
                            $scope.model.user.first_name = $scope.auth.first_name;
                            $scope.model.user.last_name = $scope.auth.last_name;
                            $scope.model.user.country = $scope.model.address && $scope.model.address.country;
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-bank/addbank/template.html": function(module, exports) {
        module.exports = '<xo-aside-header back-url="checkout.review.sidebar.wallet" heading=\'asideHeader.addBank\' ng-if="sidebar"></xo-aside-header>\n<xo-message message="errorMessage"></xo-message>\n<div class="container" ng-class="{asideContent: sidebar}" xo-tray-height>\n\t<form id="bankForm" name="bankForm" method="post" class="asideProceed formSmall" novalidate="novalidate">\n        <div id="bankFields" class="clearfix" content>\n\n\n            <div id="name" class="fieldGroup clearfix">\n                <div class="inputField  half confidential firstname">\n                    <label for="firstName" class="focus accessAid">\n                        {{ content(\'common.firstName\') }}\n                    </label>\n                    <input ng-model="model.user.first_name" name="firstName" value="" autocapitalize="off" aria-required="true" autocomplete="off" placeholder="{{ content(\'common.firstName\') }}" xo-error-tooltip required />\n                </div>\n\n                <div class="inputField half last-child confidential lastname">\n                    <label for="lastName" class="focus accessAid">\n                        {{ content(\'common.lastName\') }}\n                    </label>\n                    <input ng-readonly="model.user.last_name" ng-model="model.user.last_name" name="lastName" value="" autocapitalize="off" aria-required="true" autocomplete="off" placeholder="{{ content(\'common.lastName\') }}" xo-error-tooltip required />\n                </div>\n            </div>\n\n            <xo-bank-input user="model.user" bank="model.bank"></xo-bank-input>\n\n            <p class="infoTxt secondary " data-ng-bind-html="htmlContent( \'bank.addBankDisclaimer\') "></p>\n\n            <div class="buttons">\n                <input track-submit id="proceedButton" type="submit" value="{{ content(\'common.continuetext\') }}" class="btn full" validate-submit="onSubmit()" />\n            </div>\n        </div>\n    </form>\n</div>\n';
    },
    "./components/xo-wallet-components/src/add-bank/bank-input/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-bank/bank-input/template.html"), __webpack_require__("./components/xo-models/src/fi/index.js"), __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            return squid.module("xo-add-bank.bank-input.directive", [ "squid", "xomodel.fi", "xo-dropdown.directive", "xo-error-tooltip.directive" ]).directive("xoBankInput", function($rootScope) {
                return {
                    template: template,
                    scope: {
                        user: "=",
                        bank: "="
                    },
                    link: function link(scope, element, attr) {
                        var IBANMask = "AA00 0000 0000 0000 0000 0000 0000 0000 00";
                        element.on("keyup", function(event) {
                            $("#ibanNumber").mask(IBANMask, {
                                translation: {
                                    0: {
                                        pattern: /[A-Za-z0-9]/
                                    }
                                }
                            });
                        });
                    },
                    controller: function controller($scope, $AddBankModel) {
                        $scope.showIBAN = false;
                        var days = [];
                        var months = [];
                        var years = [];
                        var i;
                        for (i = 1; i <= 31; i += 1) {
                            var d = i < 10 ? "0" + i : i.toString();
                            days.push(d);
                        }
                        for (i = 1; i <= 12; i += 1) {
                            var m = i < 10 ? "0" + i : i.toString();
                            months.push(m);
                        }
                        var year = new Date().getFullYear();
                        for (i = year - 17; i >= year - 100; i -= 1) {
                            years.push(i);
                        }
                        $scope.days = days;
                        $scope.months = months;
                        $scope.years = years;
                        $scope.toggleIBAN = function() {
                            $scope.showIBAN = !$scope.showIBAN;
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-bank/bank-input/template.html": function(module, exports) {
        module.exports = '<div id="bankFields" content>\n\n    <div class="bban" ng-if = "!showIBAN">\n        <p class="entryToggleLinks">{{content(\'bank.enterBBAN\')}}\n            <a class="toggle rightLink" href ng-click="toggleIBAN()">{{content(\'bank.insteadIBAN\')}}</a>\n        </p>\n\n        <div class="inputField restricted">\n            <label for="bankAccountNumber" class="accessAid nolap">\n                {{content(\'DEMemberGuest.account\')}}\n            </label>\n            <input id="bankAccountNumber" name="bankAccountNumber" type="text" value="" ng-model="bank.bank_account_number" placeholder="{{content(\'DEMemberGuest.accountPlaceholder\')}}" autocomplete="off" pattern="[0-9]*" maxlength="10" aria-required="true"\n                   xo-validation=\'{\n                "validator": "validBankAccount",\n                "required":  "{{showIBAN}}"\n            }\' data-error-text="{{content(\'scripts.validNumber\')}}" xo-error-tooltip />\n        </div>\n\n        <div class="inputField restricted">\n            <label for="blz" class="accessAid nolap">\n                {{content(\'DEMemberGuest.sort\')}}\n            </label>\n            <input id="blz" name="blz" type="text" value="" ng-model="bank.bank_routing_number" placeholder="{{content(\'DEMemberGuest.sortPlaceholder\')}}" autocomplete="off" pattern="[0-9]*" maxlength="8" aria-required="true"  xo-validation=\'{\n                "validator": "validRouting",\n                "required":  "{{showIBAN}}"\n            }\' data-error-text="{{content(\'scripts.validNumber\')}}" xo-error-tooltip />\n        </div>\n    </div>\n    <div class="iban" ng-if="showIBAN">\n        <p class="entryToggleLinks">{{content(\'bank.enterIBAN\')}}\n            <a class="toggle rightLink" href ng-click="toggleIBAN()">{{content(\'bank.insteadBBAN\')}}</a>\n        </p>\n        <div class="inputField restricted">\n            <label for="ibanNumber" class="accessAid nolap">\n                {{content(\'bank.iban\')}}\n            </label>\n            <input id="ibanNumber" name="ibanNumber" type="text" value="" placeholder="{{content(\'bank.IBANPlaceholder\')}}" autocomplete="off" maxlength="42" aria-required="true" ng-model="bank.iban_number" xo-validation=\'{ "validator": "validIBANWithValidCountryCode",\n            "required":  "{{showIBAN}}"} \' data-error-text="{{content(\'scripts.validIBAN\')}}" xo-error-tooltip />\n        </div>\n    </div>\n\n    <div id="dobBank" class="dobbank">\n        <fieldset>\n            <legend class="fieldLegend" for="dob">{{content(\'DEMemberGuest.dob\')}}</legend>\n\n            <div class="dropdown fidobDay">\n                <select xo-dropdown name="dobDay" ng-model="user.dob_day" id="dobDay" aria-label="{{content(\'applyForBml.bmlApplyDay\')}}" aria-required="true" required>\n                    <option value="">{{content(\'applyForBml.bmlApplyDD\')}}</option>\n                    <option ng-repeat="day in days" value="{{day}}" ng-selected="user.dob_day===\'{{day}}\'">{{day}}</option>\n                </select>\n            </div>\n\n\n            <div class="dropdown fidobMonth">\n                <select xo-dropdown name="dobMonth" ng-model="user.dob_month" id="dobMonth" aria-label="{{content(\'applyForBml.bmlApplyMonth\')}}" aria-required="true" required>\n                    <option value="">{{content(\'applyForBml.bmlApplyMM\')}}</option>\n                    <option ng-repeat="month in months" value="{{month}}" ng-selected="user.dob_month===\'{{month}}\'">{{month}}</option>\n                </select>\n            </div>\n\n            <div class="dropdown fidobYear">\n                <select xo-dropdown name="dobYear" ng-model="user.dob_year" id="dobYear" aria-label="{{content(\'applyForBml.bmlApplyYear\')}}" aria-required="true" required>\n                    <option value="">{{content(\'applyForBml.bmlApplyYYYY\')}}</option>\n                    <option ng-repeat="year in years" value="{{year}}" ng-selected="user.dob_year===\'{{year}}\'">{{year}}</option>\n                </select>\n            </div>\n\n        </fieldset>\n    </div>\n</div>\n';
    },
    "./components/xo-ui-components/src/dropdown/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(console) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/jquery/dist/jquery.min.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, $) {
                $.fn.dropdown = function() {
                    console.warn("Dropdown deprecated");
                };
                squid.module("xo-dropdown.directive", [ "squid" ]).directive("xoDropdown", function($parse, $window, $timeout, $injector, $rootScope, $config, $locale, $experiment, $util, $compile) {
                    var userAgent = ($window.navigator || {}).userAgent;
                    var isWinOS = Boolean(userAgent.match(/\(win/i));
                    return {
                        restrict: "A",
                        scope: {
                            dropdownTextBindVar: "="
                        },
                        link: function link($scope, $element, attrs) {
                            var $parentScope = $scope.$parent;
                            var $select = $($element);
                            var selectInitialValue = "";
                            var ngChange = "";
                            var $span = $('<span class="custom-select" aria-hidden="true"><span><span></span></span></span>');
                            $select.parent().addClass("custom-select-container");
                            $select.bind("mouseenter", function() {
                                $span.addClass("active");
                            });
                            $select.bind("focus", function() {
                                selectInitialValue = $parse(attrs.ngModel)($parentScope);
                                $span.addClass("active");
                            });
                            $select.bind("mouseleave", function() {
                                $span.removeClass("active");
                            });
                            function executeSelectChange() {
                                $timeout(function() {
                                    var val = $parse(attrs.ngModel)($parentScope);
                                    if (selectInitialValue !== val) {
                                        if (ngChange) {
                                            ngChange($parentScope);
                                        }
                                        selectInitialValue = val;
                                    }
                                }, 10);
                            }
                            if (isWinOS) {
                                if (attrs["ngChange"]) {
                                    ngChange = $parse(attrs.ngChange);
                                    attrs["ngChange"] = "";
                                }
                                $select.bind("blur", function() {
                                    executeSelectChange();
                                    $span.removeClass("active");
                                });
                                $select.bind("click", function() {
                                    executeSelectChange();
                                });
                            } else {
                                $select.bind("blur", function() {
                                    $span.removeClass("active");
                                });
                            }
                            $select.after($span);
                            $select.addClass("replaced");
                            if (attrs["default"]) {
                                var defaultOption = document.createElement("option");
                                defaultOption.innerText = attrs["default"];
                                $select.append(defaultOption);
                            }
                            var match = (attrs.ngOptions || "").match(/in ([\w\.]+)/);
                            if (angular.isDefined($scope.dropdownTextBindVar)) {
                                var selectTextElement = $span.find("span span");
                                if (selectTextElement.length) {
                                    $(selectTextElement).attr("ng-bind", "dropdownTextBindVar");
                                    $(selectTextElement).html($compile(selectTextElement[0])($scope));
                                }
                                $scope.$watch("dropdownTextBindVar", function(newVal) {
                                    if (document.documentElement.getAttribute("dir") === "rtl") {
                                        $span.toggleClass("ltrOverride", !$util.hasRTL(newVal));
                                    }
                                });
                            } else {
                                var updateCover = function updateCover() {
                                    $timeout(function() {
                                        var text = $select.find(":selected").text().trim();
                                        $span.find("span span").text(text);
                                        if (document.documentElement.getAttribute("dir") === "rtl") {
                                            $span.toggleClass("ltrOverride", !$util.hasRTL(text));
                                        }
                                    }, 10);
                                };
                                $parentScope.$watch(attrs.ngModel, updateCover);
                                $scope.$on("contentChange", updateCover);
                                if (match) {
                                    $parentScope.$watch(match[1], updateCover);
                                }
                                $select.bind("keyup", function(event) {
                                    if (event.which >= 37 || event.which <= 40) {
                                        updateCover();
                                    }
                                });
                            }
                            toggleOptionsLTROverride();
                            if (match) {
                                $parentScope.$watch(match[1], function(newVal) {
                                    toggleOptionsLTROverride();
                                });
                            }
                            function toggleOptionsLTROverride() {
                                if (document.documentElement.getAttribute("dir") === "rtl") {
                                    $timeout(function() {
                                        var options = $select.find("option");
                                        for (var i = 0; i < options.length; i++) {
                                            $(options.get(i)).toggleClass("ltrOverride", !$util.hasRTL(options.get(i).text));
                                        }
                                    });
                                }
                            }
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/console-browserify/index.js"));
    },
    "./components/xo-tray-height/dist/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/jquery/dist/jquery.min.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, $) {
            squid.module("xo-tray-height.directive", [ "squid" ]).directive("xoTrayHeight", function($timeout) {
                return {
                    restrict: "A",
                    link: function link($scope, element, attrs) {
                        var topClass = "xo-sidebar-wrapper";
                        var topSelector = "." + topClass;
                        var topElem = document.querySelector(topSelector);
                        var inScope = topElem && topElem.querySelector("[xo-tray-height]");
                        var useNewFlow = topElem && inScope;
                        function calculate() {
                            var curElem = element[0];
                            while (!~curElem.className.indexOf(topClass)) {
                                var style = getComputedStyle(curElem, null);
                                if (style.position !== "absolute") {
                                    curElem.style.position = "relative";
                                }
                                curElem.style.height = "100%";
                                curElem = curElem.parentNode;
                            }
                        }
                        function deprecatedCalculate() {
                            _logger.$logger.warn("xo-tray-height-fallback", {
                                message: "Using the fallback sidebar height calculation. " + "height may not be 100%. You should not be here!"
                            });
                            var height;
                            var headerHeight;
                            var mainHeight;
                            var trayMinheight = 400;
                            var asideContentHeight;
                            var $aside = $(element).parents("aside:visible");
                            var $asideContent = $aside.find(".asideContent");
                            if (!$aside || !$asideContent) {
                                return;
                            }
                            headerHeight = $aside.find(".header").outerHeight(true);
                            mainHeight = $("#main").outerHeight(true);
                            height = mainHeight - headerHeight;
                            asideContentHeight = $asideContent.outerHeight(true);
                            if ($scope.miniBrowser) {
                                $aside.find(".aside").css("height", "534px");
                                var minHeight = 534 - headerHeight;
                                $asideContent.css("height", minHeight);
                            } else if (asideContentHeight > height) {
                                $asideContent.css("height", height);
                                $aside.find("aside:visible").addClass("hasScroll");
                            } else {
                                height = height > trayMinheight ? height : trayMinheight;
                                $asideContent.css("height", height);
                                $aside.removeClass("hasScroll");
                            }
                        }
                        if (useNewFlow) {
                            calculate();
                        } else {
                            $timeout(deprecatedCalculate, 1);
                            $scope.$on("SidebarError", function() {
                                deprecatedCalculate();
                            });
                        }
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        _logger.$logger;
    },
    "./components/xo-page-components/src/aside-header/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-page-components/src/aside-header/template.html") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            squid.module("xo-aside-header.directive", [ "squid" ]).directive("xoAsideHeader", function() {
                return {
                    template: template,
                    restrict: "E",
                    scope: {
                        hdrtype: "@",
                        heading: "@",
                        subHead: "@",
                        addLink: "@",
                        backUrl: "@",
                        closeUrl: "@",
                        hidex: "@",
                        headerLeftLink: "=",
                        headerLeft: "@",
                        headerLeftIcon: "@",
                        headerRightLink: "=",
                        headerRight: "@",
                        headerRightIcon: "@",
                        subHeaderLeftLink: "@",
                        subHeaderLeft: "@",
                        subHeaderLeftIcon: "@",
                        subHeaderRightLink: "@",
                        subHeaderRight: "@",
                        subHeaderRightIcon: "@",
                        showDualFi: "="
                    },
                    controller: function controller($scope, $element, $state, $timeout) {
                        $timeout(function() {
                            $element.find(".header").focus();
                        });
                        if (angular.isUndefined($scope.closeUrl)) {
                            $scope.closeUrl = "checkout.review";
                        }
                        if ($scope.addLink) {
                            $scope.subHeaderRight = "asideHeader.add";
                            $scope.subHeaderRightLink = $scope.addLink;
                        }
                        $scope.onClickLink = function(event, target, showDualFi) {
                            event.preventDefault();
                            if (showDualFi) {
                                $scope.showFiOptions = true;
                            } else if (angular.isFunction(target)) {
                                target();
                            } else {
                                $state.go(target);
                            }
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-page-components/src/aside-header/template.html": function(module, exports) {
        module.exports = '<div class="header noButtons" tabindex="-1" ng-class="[hdrtype]" content>\n    <div class="primaryHeader">\n        <h1 class="asideAlpha walletHeading noHead noBottom alpha">{{ content(heading) }}</h1>\n        <a link-button ui-sref="{{backUrl}}" class="backArrow focusableIcon goTray" ng-if="backUrl"><span class="accessAid">{{ content(\'common.back\') }}</span></a>\n        <a link-button ng-click="onClickLink($event, headerLeftLink)" class="left" ng-if="headerLeftLink">\n            <span ng-if="headerLeftIcon" class="leftIcon"></span>\n            <span class="accessAid">{{ content(headerLeft) }}</span>\n        </a>\n        <a link-button ui-sref="{{closeUrl}}" class="close focusableIcon" ng-if="!backUrl && !hidex"><span class="accessAid">{{ content(\'common.back\') }}</span></a>\n        <a link-button ng-click="onClickLink($event, headerRightLink)" class="right focusableIcon" ng-if="headerRightLink">\n            <span ng-if="headerRightIcon" class="rightIcon"></span>\n            <span class="accessAid">{{ content(headerRight) }}</span>\n        </a>\n    </div>\n\n    <div class="subHeader" ng-class="{\'addOptions\': !subHeaderLeftLink}" ng-if="subHeaderLeftLink || subHeaderRightLink">\n        <h2 class="subheading gamma" ng-if="!subHeaderLeftLink">{{ content(subHead) }}</h2>\n        <a link-button ui-sref="{{subHeaderLeftLink}}" ng-click="onClickLink($event, subHeaderLeftLink, showDualFi)" ng-if="subHeaderLeftLink" id="leftLink" class="left">\n            <span ng-if="subHeaderLeftIcon" class="leftIcon"></span>\n            <span class="leftText">{{ content(subHeaderLeft) }}</span>\n        </a>\n        <a link-button ui-sref="{{subHeaderRightLink}}" ng-class="{\'addLink\': !subHeaderLeftLink}"  ng-click="onClickLink($event, subHeaderRightLink)" ng-if="subHeaderRightLink" id="rightLink" class="right">\n            <span ng-if="subHeaderRightIcon" class="rightIcon"></span>\n            <span class="rightText">{{ content(subHeaderRight) }}</span>\n        </a>\n    </div>\n</div>\n<div class="fundingInstrumentList" id="fundingInstrumentList" ng-if="showFiOptions">\n    <ul>\n        <li class="bank">\n            <a link-button ui-sref="checkout.review.sidebar.sidebarAddBank.bank.add" id="addBank" class="submit">\n                <span class="icon"></span>\n                <span class="description">{{ content(\'DEMemberGuest.addBank\')}}</span>\n            </a>\n        </li>\n        <li class="cards">\n            <a link-button ui-sref="checkout.review.sidebar.sidebarAddCard.addCardFlow.addCard" id="addCC" class="submit">\n                <span class="icon"></span>\n                <span class="description">{{ content(\'DEMemberGuest.addCC\')}}</span>\n            </a>\n        </li>\n    </ul>\n</div>\n';
    },
    "./components/xo-wallet-components/src/add-bank/sepa/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-wallet-components/src/add-bank/sepa/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-add-bank.sepa.route", [ "squid", "xo-add-bank.sepa.directive" ]).factory("$XOSepaRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("SepaRoute", {
                        name: "sepa",
                        directive: "xo-sepa",
                        titleContent: "DEMemberGuest.sepaTitle",
                        trackingData: {
                            fptiState: "sepa_mandate",
                            buzname: {
                                fullpage: {
                                    pagename: "%::sepa_mandate",
                                    pagename2: "%::sepa_mandate:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        loginRequired: true,
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-wallet-components/src/add-bank/sepa", "components/xo-wallet-components/src/add-bank/sepa/route.js");
    },
    "./components/xo-wallet-components/src/add-bank/sepa/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-bank/sepa/template.html"), __webpack_require__("./components/xo-wallet-components/src/fi-contingency-list/contingencies.js"), __webpack_require__("./components/xo-page-components/src/aside-header/directive.js"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            return squid.module("xo-add-bank.sepa.directive", [ "squid", "xo-aside-header.directive", "xo-error-tooltip.directive" ]).directive("xoSepa", function($state, $timeout) {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        parentCallbacks: "=",
                        model: "=",
                        sidebar: "=",
                        hideparenthead: "="
                    },
                    controller: function controller($scope) {
                        if (!$scope.model) {
                            return $state.go("^.add");
                        }
                        $("body").addClass("pageSepaMandate");
                        $scope.$on("$destroy", function() {
                            $("body").removeClass("pageSepaMandate");
                        });
                        if ($scope.hideparenthead) {
                            $scope.hideparenthead.toggle = true;
                        }
                        function getDate() {
                            var today = new Date();
                            var dd = today.getDate();
                            var mm = today.getMonth() + 1;
                            var yyyy = today.getFullYear();
                            if (dd < 10) {
                                dd = "0" + dd;
                            }
                            if (mm < 10) {
                                mm = "0" + mm;
                            }
                            return dd + "." + mm + "." + yyyy;
                        }
                        $scope.date = getDate();
                        $scope.onSubmit = function() {
                            $scope.parentCallbacks.sepaDone();
                        };
                    },
                    link: function link($scope, element, attrs) {
                        $timeout(function() {
                            $(element).find(".asideContent").height($("#main").height() - $("#tray").find(".header").height() + 10);
                        }, 10);
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-bank/sepa/template.html": function(module, exports) {
        module.exports = '<div class="aside" id="sepaMandate">\n<xo-aside-header back-url="^.add" heading=\'DEMemberGuest.ddAgreementHead\' ng-if="sidebar"></xo-aside-header>\n<h1 class="gamma noHead" ng-if="!sidebar">{{ content(\'DEMemberGuest.ddAgreementHead\') }}</h1>\n<div class="container" ng-class="{asideContent: sidebar}" content>\n    <form ng-submit="onSubmit()" id="sepaMandateForm" method="post" class="asideProceed formSmall"\n          novalidate="novalidate">\n            <div class="sepaText">\n                <p>{{ content(\'DEMemberGuest.ddAgreementPara1\') }}</p>\n                <div class="sepaDetails">\n                    <div class="span">\n                        <p>\n                            <span class="col1">{{content(\'DEMemberGuest.accountCarrier\')}} </span>\n                            <span class="col2">\n                                <span>{{model.user.first_name}}</span>\n                                <span>{{model.user.last_name}}</span>\n                                <br/>{{model.address.line1}}\n                                <br/>{{model.address.line2}}\n                                <br/>{{model.address.postal_code}} {{model.address.city}}\n                            </span>\n                        </p>\n                    </div>\n                    <div class="span">\n                        <p>\n                            <span class="col1">{{content(\'DEMemberGuest.IBAN\')}}</span>\n                            <span class="col2">{{model.fiDetails.piDetails.piAccountNumber}}</span>\n                        </p>\n\n                        <p>\n                            <span class="col1">{{content(\'DEMemberGuest.bankName\')}}</span>\n                            <span class="col2">{{model.fiDetails.piDetails.isssuerDetails.name}}</span>\n                        </p>\n\n                        <p>\n                            <span class="col1">{{content(\'DEMemberGuest.bic\')}}</span>\n                            <span class="col2">{{model.fiDetails.piDetails.bic}}</span>\n                        </p>\n                    </div>\n                    <div class="span">\n                        <p>\n                            <span class="col1">{{content(\'DEMemberGuest.creditor\')}}</span>\n                            <span class="col2">\n                                <span>{{model.creditorDetails.creditorName}}</span>\n                                <br/><span class="confidential streets street-address">{{model.creditorDetails.address.address1}}</span>\n                                <br/><span class="confidential postal-code">{{model.creditorDetails.address.zip}}</span>\n                                    <span class="confidential locality">{{model.creditorDetails.address.city}}</span>\n                                    <span class="confidential country adr-break">{{model.creditorDetails.address.isoCountry}}</span>\n\n                            </span>\n                        </p>\n\n                        <p>\n                            <span class="col1">{{content(\'DEMemberGuest.creditorId\')}}</span>\n                            <span class="col2 creditorId">{{model.creditorDetails.creditorId}}</span>\n                        </p>\n                    </div>\n                </div>\n                <p class="secondary">{{content(\'DEMemberGuest.ddAgreementPara2WithoutLink\')}}</p>\n\n                <p class="help">{{date}}, {{model.address.city}}, {{content(\'DEMemberGuest.country\'+model.address.country)}}</p>\n            </div>\n\n                <div class="buttons">\n                    <input id="proceedButton" type="submit" value="{{ content(\'DEMemberGuest.agreeBtn\') }}"\n                           class="btn full " ng-click="validated=true "/>\n                    <a id="cancelBtn" ui-sref="^.add" class="btn full btn-secondary goTray"\n                       role="button">\n                        {{content(\'DEMemberGuest.cancelBtn\')}}\n                    </a>\n                </div>\n\n    </form>\n\n</div>\n</div>\n';
    },
    "./components/xo-wallet-components/src/add-card/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-wallet-components/src/add-card/directive.js"), __webpack_require__("./components/xo-wallet-components/src/add-card/addcard/route.js"), __webpack_require__("./components/xo-wallet-components/src/add-card/selectcard/route.js"), __webpack_require__("./components/xo-wallet-components/src/add-card/addbilling/route.js"), __webpack_require__("./components/xo-wallet-components/src/add-card/addCep/route.js"), __webpack_require__("./components/xo-wallet-components/src/confirm-upop/route.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-add-card.route", [ "squid", "xo-add-card.directive", "xo-add-card.addcard.route", "xo-add-card.selectcard.route", "xo-add-card.addbilling.route", "xo-add-card.addcep.route", "xo-confirm-upop.route" ]).factory("$AddCardFlowRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("CardRoute", {
                        name: "addCardFlow",
                        directive: "xo-add-card-flow",
                        titleContent: "asideHeader.addCard",
                        children: [ {
                            name: "$AddCardRoute",
                            attributes: {
                                token: "token",
                                cardmodel: "cardmodel",
                                done: "addCCDone",
                                messagetitle: "messagetitle",
                                message: "message",
                                pagetitle: "pagetitle",
                                sidebar: "sidebar",
                                showmeftsection: "showmeftsection",
                                hideparenthead: "hideparenthead",
                                billingaddressupdated: "billingaddressupdated",
                                isupdatecard: "isupdatecard",
                                "parent-callbacks": "callbacks",
                                "selected-promotion-card-type": "selectedPromotionCardType",
                                promotion: "promotion",
                                "page-level": "pageLevel",
                                logout: "logout",
                                phone: "phone",
                                "show-cancel": "showCancel",
                                "show-set-preferred-fi": "showSetPreferredFi",
                                "on-success": "onSuccess",
                                "back-uri": "backUri"
                            }
                        }, {
                            name: "$SelectCardRoute",
                            attributes: {
                                token: "token",
                                "parent-callbacks": "callbacks",
                                message: "message",
                                pagetitle: "pagetitle",
                                sidebar: "sidebar",
                                "selected-promotion-card-type": "selectedPromotionCardType",
                                promotion: "promotion"
                            }
                        }, {
                            name: "$AddBillingRoute",
                            attributes: {
                                token: "token",
                                sidebar: "sidebar",
                                showmeftsection: "showmeftsection",
                                "parent-callbacks": "callbacks",
                                hideparenthead: "hideparenthead",
                                billingaddressupdated: "billingaddressupdated",
                                "prefill-address": "prefillAddress"
                            }
                        }, {
                            name: "$AddCepRoute",
                            attributes: {
                                token: "token",
                                sidebar: "sidebar",
                                "done-fn": "cepDone",
                                "prefill-address": "prefillAddress"
                            }
                        } ]
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-wallet-components/src/add-card", "components/xo-wallet-components/src/add-card/route.js");
    },
    "./components/xo-wallet-components/src/add-card/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-card/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/fi/index.js"), __webpack_require__("./components/xo-models/src/address/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid, template) {
            return squid.module("xo-add-card.directive", [ "squid", "xomodel.checkout", "xomodel.fi", "xomodel.address" ]).directive("xoAddCardFlow", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        parentCallbacks: "=",
                        messagetitle: "=",
                        message: "=",
                        pagetitle: "=",
                        sidebar: "=",
                        showmeftsection: "=",
                        hideparenthead: "=",
                        promotion: "=",
                        pageLevel: "=",
                        logout: "=",
                        phone: "=",
                        fundingid: "=",
                        showCancel: "=",
                        showSetPreferredFi: "=",
                        onSuccess: "=",
                        backUri: "="
                    },
                    controller: function controller($scope, $state, $populate, $AddCardModel, $CardModel, $CheckoutSessionModel, $PrefillAddressModel, $util, $renderContent) {
                        $scope.addCCDone = function() {
                            $scope.parentCallbacks.finish();
                        };
                        $scope.callbacks = {
                            done: $scope.parentCallbacks.finish,
                            cancel: $scope.parentCallbacks.cancel,
                            showCep: function showCep() {
                                $scope.prefillAddress = new $PrefillAddressModel({
                                    id: $scope.token
                                });
                                $state.go("^.addCep");
                            },
                            cardTypeSelected: function cardTypeSelected(type) {
                                $scope.selectedPromotionCardType = {
                                    type: type
                                };
                                $state.go("^.addCard");
                            }
                        };
                        $scope.cepDone = function() {
                            $state.go("^.addBilling");
                        };
                        $scope.selectedPromotionCardType = {
                            type: $scope.promotion && $scope.promotion.type
                        };
                        if ($scope.promotion) {
                            $scope.promotion.type = null;
                        }
                        $scope.billingaddressupdated = {
                            value: false
                        };
                        $scope.phone = {
                            hide_type: true
                        };
                        $scope.cardmodel = new $AddCardModel({
                            card: new $CardModel()
                        });
                        $populate($scope, {
                            checkoutSession: $CheckoutSessionModel.instance($scope.token).retrieve({
                                contingencies: {
                                    NEED_CREDIT_CARD: angular.noop,
                                    EXPIRED_CREDIT_CARD: angular.noop
                                }
                            })
                        }).then(function() {
                            if ($scope.checkoutSession.errorData && $scope.checkoutSession.errorData.resolution) {
                                var card = $scope.checkoutSession.errorData.resolution.data;
                                if (card.fundingId && card.fi && card.fi.type) {
                                    $scope.cardmodel.id = card.fundingId;
                                    $scope.cardmodel.card = new $CardModel({
                                        number: "xxxx-xxxx-xxxx-" + card.fi.number,
                                        type: card.fi.type.toUpperCase(),
                                        productType: card.fi.productType
                                    });
                                }
                            }
                            if ($scope.fundingid) {
                                var fundingSource = $util.find($scope.checkoutSession.fundingOptions.instruments, function(funding) {
                                    if (funding && funding.id === $scope.fundingid) {
                                        return funding;
                                    }
                                });
                                if (fundingSource) {
                                    $scope.cardmodel.id = fundingSource.id;
                                    $scope.cardmodel.card = new $CardModel({
                                        number: "xxxx-xxxx-xxxx-" + fundingSource.lastDigits,
                                        lastDigits: fundingSource.lastDigits,
                                        type: fundingSource.name,
                                        name: $renderContent("fsMappings." + fundingSource.name)
                                    });
                                }
                            }
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-card/template.html": "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-bank/template.html",
    "./components/xo-models/src/address/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xomodel.address", [ "squid" ]).factory("$AddressNormalizationModel", function($Model, $Api) {
                    return $Model.extend("AddressNormalizationModel", {
                        api: new $Api({
                            uri: "/api/address/normalize"
                        })
                    });
                }).factory("$PrefillAddressModel", function($Model, $Api) {
                    return $Model.extend("PrefillAddressModel", {
                        api: new $Api({
                            uri: "/api/address/prefill"
                        })
                    });
                }).factory("$ValidateAddressModel", function($Model, $Api) {
                    return $Model.extend("ValidateAddressModel", {
                        api: new $Api({
                            uri: "/api/address/validate"
                        })
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/address", "components/xo-models/src/address/index.js");
    },
    "./components/xo-wallet-components/src/add-card/addcard/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            var _route = __webpack_require__("./components/xo-wallet-components/src/confirm-upop/route.js");
            var _route2 = _interopRequireDefault(_route);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-wallet-components/src/add-card/addcard/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-add-card.addcard.route", [ "squid", "xo-add-card.addcard.directive" ]).factory("$AddCardRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("AddCardRoute", {
                        name: "addCard",
                        directive: "xo-add-card",
                        titleContent: "asideHeader.addCard",
                        trackingData: {
                            fptiState: "add_or_update_cc"
                        },
                        loginRequired: true,
                        children: [ {
                            route: _route2["default"],
                            attributes: {
                                token: "token",
                                phone: "phone",
                                cardmodel: "cardmodel",
                                "on-success": "onSuccess"
                            }
                        } ]
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-wallet-components/src/add-card/addcard", "components/xo-wallet-components/src/add-card/addcard/route.js");
    },
    "./components/xo-wallet-components/src/add-card/addcard/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        var _cardMetaData = __webpack_require__("./components/xo-wallet-components/src/add-card/cardMetaData/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _choice = __webpack_require__("./components/xo-models/src/choice/index.js");
        __webpack_require__("./components/xo-ui-components/src/address-box/directive.js");
        __webpack_require__("./components/xo-ui-components/src/banner/directive.js");
        var _newMember = __webpack_require__("./components/xo-models/src/newMember/index.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/xo-wallet-components/src/add-card/addcard/styles.less");
        var _app = __webpack_require__("./components/xo-models/src/app/index.js");
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/module.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-card/addcard/template.html"), __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/auth/index.js"), __webpack_require__("./components/xo-models/src/fi/index.js"), __webpack_require__("./components/xo-wallet-components/src/add-card/creditcard-input/directive.js"), __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js"), __webpack_require__("./components/xo-ui-components/src/user-assist-banner/directive.js"), __webpack_require__("./components/xo-tray-height/dist/directive.js"), __webpack_require__("./components/xo-page-components/src/aside-header/directive.js"), __webpack_require__("./components/xo-ui-components/src/message/directive.js"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js"), __webpack_require__("./components/angular-ui-utils/ui-utils.min.js"), __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js"), __webpack_require__("./components/xo-wallet-components/src/fi-contingency-list/util.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, module, template, $) {
            return module("xo-add-card.addcard.directive", [ "squid", "xomodel.checkout", "xomodel.auth", "xomodel.fi", "xo-add-card.creditcard-input.directive", "xo-dropdown.directive", "xo-tray-height.directive", "xo-aside-header.directive", "xo-message.directive", "xo-error-tooltip.directive", "ui.validate", "xo-accessibility.directive", "fi.errorUtil" ]).directive("xoAddCard", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        done: "=",
                        messagetitle: "=",
                        message: "=",
                        pagetitle: "=",
                        sidebar: "=",
                        showmeftsection: "=",
                        hideparenthead: "=",
                        billingaddressupdated: "=",
                        cardmodel: "=",
                        parentCallbacks: "=",
                        selectedPromotionCardType: "=",
                        promotion: "=",
                        pageLevel: "=",
                        logout: "=",
                        phone: "=",
                        manageCardFlow: "=",
                        showCancel: "=",
                        showSetPreferredFi: "=",
                        onSuccess: "=",
                        backUri: "="
                    },
                    controller: function controller($scope, $populate, $state, $stateParams, $BillingAddressesModel, $CardTypesModel, $CheckoutSessionModel, $AuthModel, $CheckoutCartModel, $timeout, $element, $rootScope, $locale, $util, $config, $ResolveOTP, $Class, $fiErrorUtil, $renderContent, $meta, $FlowEligibilityModel, $q, $PreferredFi, $feature) {
                        $scope.address_box = {
                            changeFn: function changeFn(type) {
                                _logger.$logger.info("xo-address-box_changeFn - " + type);
                                $state.go("^.addBilling", {
                                    flow_type: "edit"
                                });
                            }
                        };
                        $populate($scope, {
                            cart: $CheckoutCartModel.instance($scope.token),
                            auth: $AuthModel.instance(),
                            billingAddresses: $BillingAddressesModel.instance(),
                            checkoutSession: $CheckoutSessionModel.instance($scope.token).retrieve({
                                contingencies: {
                                    NEED_CREDIT_CARD: angular.noop,
                                    EXPIRED_CREDIT_CARD: angular.noop
                                }
                            }),
                            flowEligibility: $FlowEligibilityModel.instance($scope.token).retrieve({
                                params: {
                                    geolocation: $meta.geolocation,
                                    localeCountry: $locale.country
                                }
                            }),
                            tokenizedWalletInfoModel: _app.$TokenizedWalletInfoModel.instance($scope.token).retrieve()
                        }).then(function() {
                            if ($scope.auth) {
                                $scope.formattedNameInformal = (0, _squid.formatNameInformal)({
                                    first_name: $scope.auth.first_name,
                                    last_name: $scope.auth.last_name
                                }) || $scope.auth.email;
                            }
                            _newMember.$NewMemberEligibility.instance().getVariant($scope.token).then(function(variant) {
                                $scope.isNmj = !$scope.sidebar && variant && (variant === "one_page" || variant === "multi_page");
                                if ($scope.isNmj) {
                                    $scope.showAddBank = $feature("enableExternalAddBank");
                                    $scope.addBankUri = "/webapps/hermes/add-bank?token=" + $scope.token;
                                    _logger.$logger.info("external_addbank_" + ($scope.showAddBank ? "enabled" : "disabled"));
                                    var contentKey = {
                                        header: "",
                                        body: ""
                                    };
                                    var disallowedInstruments = $scope.checkoutSession.get("fundingOptions").get("disallowedInstruments");
                                    if (disallowedInstruments && disallowedInstruments.length === 1) {
                                        contentKey.header = "addCard.assistHeaderHasDisallowedFi";
                                        contentKey.body = "addCard.assistBodySingleDisallowedFi";
                                        _logger.$logger.info("checkout_fpti", {
                                            int_error_description: "nmj_single_disallowed_FI_addcard_msg"
                                        });
                                    } else if (disallowedInstruments && disallowedInstruments.length > 1) {
                                        contentKey.header = "addCard.assistHeaderHasDisallowedFi";
                                        contentKey.body = "addCard.assistBodyMultiDisallowedFi";
                                        _logger.$logger.info("checkout_fpti", {
                                            int_error_description: "nmj_multi_disallowed_FI_addcard_msg"
                                        });
                                    } else {
                                        contentKey.header = "addCard.assistHeader";
                                        contentKey.body = "addCard.assistBody";
                                        _logger.$logger.info("checkout_fpti", {
                                            int_error_description: "nmj_has_no_FI_addcard_msg"
                                        });
                                    }
                                    $scope.contentKey = contentKey;
                                }
                            });
                            return _choice.$ChoiceEligibility.instance().getVariant($scope.token).then(function(variant) {
                                var multipleFiVariants = $config.choiceExperiment && $config.choiceExperiment.multipleFi || [];
                                if (multipleFiVariants.indexOf(variant) !== -1) {
                                    $scope.showMultipleFI = true;
                                }
                            });
                        }).then(function() {
                            if ($scope.cart.isWalletTokenization()) {
                                _logger.$logger.info("tokenized_wallet", {
                                    from: "ADD_DEBIT_CARD",
                                    to: "prepare_ADD_DEBIT_CARD",
                                    context_id: $scope.token,
                                    context_type: "BA-Token",
                                    ba_token: $meta.baToken
                                });
                            }
                            $scope.debitCardFlow = angular.isArray($scope.flowEligibility.paymentCardProductClass) && $scope.flowEligibility.paymentCardProductClass.length === 1 && $scope.flowEligibility.paymentCardProductClass[0] === "DEBIT";
                            if ($scope.showmeftsection) {
                                $scope.showmeftsection.toggle = true;
                            }
                            if ($scope.hideparenthead) {
                                $scope.hideparenthead.toggle = false;
                            }
                            $scope.manageCardFlow = $scope.sidebar && $scope.cardmodel.card.isExisting();
                            var type = $scope.selectedPromotionCardType && $scope.selectedPromotionCardType.type;
                            if ($scope.checkoutSession.plccOffer && !type && $scope.promotion) {
                                $state.go("^.selectCard");
                            }
                            $scope.showplcc = type === "plcc";
                            $scope.country = $locale.country;
                            $scope.showNotYou = $scope.auth.is_auth_api_call && $util.param("source") !== "consumerApp" && $scope.logout;
                            $scope.showHiMsg = Boolean($scope.messagetitle);
                            $scope.cardmodel.cardType = "creditCard";
                            if ($scope.checkoutSession.plccOffer && $scope.showplcc) {
                                $scope.cardmodel.cardType = "privateLabel";
                                $scope.cardmodel.sponsor_id = $scope.checkoutSession.plccOffer.sponsor_id;
                            }
                            $scope.cardmodel.user = {
                                first_name: $scope.auth.first_name,
                                last_name: $scope.auth.last_name
                            };
                            $scope.cardmodel.address = $scope.billingAddresses.addresses[0];
                            if ($scope.billingaddressupdated.value) {
                                $scope.billingaddressupdated = {
                                    msgs: [ $locale.content.get("editCard.newAddressAdded") ],
                                    type: "success",
                                    value: true
                                };
                            }
                            $scope.showSidebarBackArrow = $scope.sidebar && !$scope.debitCardFlow && !$scope.checkoutSession.plccOffer && !$scope.cardmodel.card.isExisting();
                            $scope.backUri = $scope.backUri || ($scope.showMultipleFI ? "checkout.review" : "checkout.review.sidebar.wallet");
                            $scope.manageCardFlowBackUri = $scope.backUri || ($scope.showMultipeFI ? "checkout.review.sidebar.sidebarManageWallet" : "checkout.review.sidebar.wallet");
                            $scope.gotoBilling = function(address) {
                                if ($scope.pageLevel) {
                                    $scope.pageLevel.message = null;
                                }
                                if (!address) {
                                    if ($locale.country === "BR") {
                                        $scope.parentCallbacks.showCep();
                                    } else {
                                        var el = $(".tokenization #sidepageAddCard");
                                        if (el) {
                                            el.addClass("slideLeft");
                                        }
                                        $state.go("^.addBilling");
                                    }
                                }
                            };
                            $scope.isCUP = function() {
                                return $scope.cardmodel.card && $scope.cardmodel.card.type && $scope.cardmodel.card.type === "CUP";
                            };
                            $scope.isUpdateDebitCard = function() {
                                return $stateParams.message === "EXPIRED_DEBIT_CARD";
                            };
                            $scope.flag = function(field) {
                                return _cardMetaData.$CardMetaData.getMetaData($scope.cardmodel.card, field);
                            };
                            $scope.buttonText = function() {
                                if ($scope.debitCardFlow) {
                                    return "creditcard.saveBtn";
                                }
                                var contentString = "creditcard.addBtn";
                                if ($scope.cardmodel.card.isExisting()) {
                                    contentString = "creditcard.updateBtn";
                                } else if ($scope.isCUP()) {
                                    contentString = "creditcard.continuetext";
                                }
                                return contentString;
                            };
                            $scope.cardTypeChanged = function() {
                                $scope.phone.phoneType = $scope.flag("phoneType");
                            };
                            function addErrorMessage(contentKey) {
                                if (contentKey) {
                                    contentKey = angular.isArray(contentKey) ? contentKey[0] : contentKey;
                                    var message = $locale.content.get("creditcard." + contentKey);
                                    $scope.message.msgs.push(message);
                                }
                            }
                            function handleContingencies(result, contentBundle, defaultErrorKey, prop) {
                                var errorData;
                                if (result.errorCodes) {
                                    errorData = result;
                                } else {
                                    errorData = {
                                        errorCodes: result && [ result["0"] ]
                                    };
                                }
                                $scope.message = $fiErrorUtil.addPageErrors(errorData, contentBundle, prop, defaultErrorKey);
                                if (window.scrollTo) {
                                    window.scrollTo(0, 0);
                                }
                            }
                            function handleFIContingency(name, result) {
                                if ($scope.cart.isWalletTokenization()) {
                                    var fpti_payload = {
                                        from: "ADD_DEBIT_CARD",
                                        to: "process_ADD_debit_card",
                                        context_id: $scope.token,
                                        context_type: "BA-Token",
                                        ba_token: $meta.baToken,
                                        int_error_code: name,
                                        error_source: "filifecycleserv"
                                    };
                                    _logger.$logger.info("tokenized_wallet", fpti_payload);
                                }
                                switch (name) {
                                  case "ADD_CARD_CONTINGENCY":
                                    if ($scope.sidebar) {
                                        $scope.$emit("SidebarError");
                                    }
                                    $scope.billingaddressupdated.value = false;
                                    if (result && result.errorCodes) {
                                        handleContingencies(result, "creditcard", "errorInvalidData");
                                        $fiErrorUtil.addFieldErrors(result, $element);
                                    } else if (result && result["0"]) {
                                        handleContingencies(result, "creditcard");
                                    } else {
                                        handleContingencies({}, "creditcard", "errorInternalError");
                                    }
                                    break;

                                  case "DISALLOWED_CUPSECURE_ADDITION":
                                    handleContingencies({}, "creditcard", "errorInternalError");
                                    break;

                                  case "VALIDATION_ERROR":
                                    var $field = $($element).find('[ng-model="card.number"]');
                                    $field.addClass("backendError");
                                    $field.attr("aria-invalid", true);
                                    $field.focus();
                                    break;

                                  default:
                                    handleContingencies({
                                        errorCodes: [ name ]
                                    }, "creditcard", "errorInternalError");
                                    break;
                                }
                            }
                            $scope.cancelFn = function() {
                                if ($scope.parentCallbacks.cancel) {
                                    return $scope.parentCallbacks.cancel();
                                }
                                if ($scope.showMultipleFI) {
                                    if ($scope.manageCardFlow) {
                                        return $state.go("checkout.review.sidebar.sidebarManageWallet");
                                    }
                                    return $state.go("checkout.review");
                                }
                                if ($scope.sidebar) {
                                    if (!$scope.checkoutSession.plccOffer) {
                                        return $state.go("checkout.review.sidebar.wallet");
                                    } else {
                                        return $state.go("^.selectCard");
                                    }
                                }
                                $scope.done();
                            };
                            function initiateOTP() {
                                var resolveOTP = new $ResolveOTP({
                                    id: $scope.cardmodel.id
                                });
                                resolveOTP.action("init", {
                                    data: {
                                        phone: {
                                            country_code: $scope.phone.IntDialingCountryCode,
                                            number: $scope.phone.telephone
                                        }
                                    },
                                    resultModel: {},
                                    success: function success() {
                                        $state.go(".confirmUpop");
                                    },
                                    error: function error() {
                                        handleContingencies({}, "confirmUpop", "declineMessage");
                                    },
                                    contingencies: {
                                        INIT_OTP_CONTINGENCY: function INIT_OTP_CONTINGENCY(name, result) {
                                            var prop = {
                                                number: $scope.cardmodel && $scope.cardmodel.card && $scope.cardmodel.card.last4()
                                            };
                                            handleContingencies(result, "confirmUpop", "declineMessage", prop);
                                            $fiErrorUtil.addFieldErrors(result, $element);
                                        },
                                        DEFAULT: function DEFAULT() {
                                            handleContingencies({}, "confirmUpop", "declineMessage");
                                        }
                                    }
                                });
                            }
                            function handleCheckoutSession(result, isNewCard) {
                                if ($scope.cardmodel && $scope.cardmodel.cardType === "privateLabel") {
                                    delete $scope.checkoutSession.plccOffer;
                                }
                                delete $scope.checkoutSession.errorData;
                                var cardAdded = $scope.cardmodel && $scope.cardmodel.card;
                                var numberAdded;
                                var cardTypeAdded;
                                if (cardAdded) {
                                    numberAdded = angular.isString(cardAdded.number) && cardAdded.number.replace(/\s/g, "");
                                    cardTypeAdded = cardAdded.type;
                                }
                                var last4Added = angular.isString(numberAdded) && numberAdded.substr(numberAdded.length - 4);
                                var cvvData = $scope.checkoutSession.cvvData;
                                var last4ToUse;
                                var cardTypeToUse;
                                if (cvvData) {
                                    last4ToUse = cvvData.number;
                                    cardTypeToUse = cvvData.type;
                                }
                                if (last4ToUse === last4Added && cardTypeAdded === cardTypeToUse) {
                                    $scope.checkoutSession.set("cvvData.security_code", $scope.cardmodel.get("card.security_code"));
                                    $scope.checkoutSession.set("cvvData.lastAddedCard", true);
                                }
                                var updateCardSidebarMessage = $renderContent("wallet.cardUpdated", {
                                    type: cardTypeAdded,
                                    number: last4Added
                                });
                                var updateCardPageMessage = $renderContent("smallToolTip.cardUpdated");
                                var addCardMessage = $renderContent("smallToolTip.cardAdded");
                                var msgs = [ addCardMessage ];
                                if (!isNewCard) {
                                    msgs = $scope.manageCardFlow ? [ updateCardSidebarMessage ] : [ updateCardPageMessage ];
                                }
                                $scope.checkoutSession.message = {
                                    type: "success",
                                    msgs: msgs
                                };
                                $scope.done();
                            }
                            $scope.onSubmit = function() {
                                if ($scope.pageLevel) {
                                    $scope.pageLevel.message = null;
                                }
                                var isNewCard = !$scope.cardmodel.card.isExisting();
                                if (isNewCard) {
                                    delete $scope.cardmodel.id;
                                }
                                if ($("#plccAgree").is(":checked")) {
                                    $scope.cardmodel.preference = true;
                                }
                                if ($scope.isCUP() && $scope.cardmodel.id && ($scope.checkoutSession.get("errorData.cause") === "NEED_AUTHENTICATED_CARD" || $scope.checkoutSession.get("errorData.cause") === "EXPIRED_CREDIT_CARD")) {
                                    initiateOTP();
                                } else {
                                    $scope.cardmodel.save({
                                        success: function success() {
                                            if ($scope.isCUP()) {
                                                initiateOTP();
                                            } else if ($scope.cart.isWalletTokenization()) {
                                                var fpti_payload = {
                                                    from: "ADD_DEBIT_CARD",
                                                    to: "process_ADD_debit_card",
                                                    context_id: $scope.token,
                                                    context_type: "BA-Token",
                                                    ba_token: $meta.baToken
                                                };
                                                var handleNotifyChangeContingency = function handleNotifyChangeContingency(name) {
                                                    fpti_payload.int_error_desc = name + "_addedButCannotUse";
                                                    fpti_payload.error_source = "paymentapiplatformserv";
                                                    fpti_payload.int_error_code = name;
                                                    _logger.$logger.info("tokenized_wallet", fpti_payload);
                                                    $scope.message.msgs = [];
                                                    $scope.message.type = "info";
                                                    addErrorMessage("addedButCannotUse");
                                                };
                                                $scope.checkoutSession.fundingOptions.action("notifyChange", {
                                                    resultModel: $scope.checkoutSession,
                                                    data: {
                                                        planId: $scope.cardmodel.id,
                                                        operation: "ADDED"
                                                    },
                                                    success: function success(result) {
                                                        _logger.$logger.info("tokenized_wallet", fpti_payload);
                                                        handleCheckoutSession(result, isNewCard);
                                                    },
                                                    contingencies: {
                                                        TRANSACTION_REFUSED: handleNotifyChangeContingency,
                                                        NOTIFY_CHANGE_FUNDING_CONTINGENCY: handleNotifyChangeContingency
                                                    }
                                                });
                                            } else {
                                                return $q.when().then(function() {
                                                    if ($scope.showSetPreferredFi && $("#makeFiPreferred").is(":checked")) {
                                                        _logger.$logger.info("set_preferredFI_checked");
                                                        var preferredFi = new $PreferredFi({
                                                            preferred: [ $scope.cardmodel.id ]
                                                        });
                                                        return preferredFi.save({
                                                            success: function success() {
                                                                _logger.$logger.info("SET_PREFERREDFI_SUCCESS", {
                                                                    preferred: [ $scope.cardmodel.id ]
                                                                });
                                                            },
                                                            transientError: true,
                                                            error: function error(err) {
                                                                _logger.$logger.error("SET_PREFERREDFI_ERROR", {
                                                                    error: err
                                                                });
                                                            },
                                                            contingencies: {
                                                                DEFAULT: function DEFAULT(name, contingency) {
                                                                    _logger.$logger.info("SET_PREFERREDFI_CONTINGENCY", name);
                                                                }
                                                            }
                                                        });
                                                    }
                                                }).then(function() {
                                                    return $scope.checkoutSession.fundingOptions.action("update", {
                                                        resultModel: $scope.checkoutSession,
                                                        data: {
                                                            planId: $scope.cardmodel.id
                                                        },
                                                        success: function success(result) {
                                                            handleCheckoutSession(result, isNewCard);
                                                        },
                                                        contingencies: {
                                                            TRANSACTION_REFUSED: function TRANSACTION_REFUSED(name) {
                                                                $scope.message.msgs = [];
                                                                $scope.message.type = "info";
                                                                addErrorMessage("addedButCannotUse");
                                                            }
                                                        }
                                                    });
                                                });
                                            }
                                        },
                                        contingencies: {
                                            DEFAULT: handleFIContingency
                                        },
                                        error: function error() {
                                            handleContingencies({}, "creditcard", "errorInternalError");
                                        },
                                        validation: function validation(res) {}
                                    });
                                }
                            };
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        _cardMetaData.$CardMetaData;
        _logger.$logger;
        _choice.$ChoiceEligibility;
        _newMember.$NewMemberEligibility;
        _squid.formatNameInformal;
        _app.$TokenizedWalletInfoModel;
    },
    "./components/xo-ui-components/src/address-box/directive.js": function(module, exports, __webpack_require__) {
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/xo-ui-components/src/address-box/styles.less");
        var _template = __webpack_require__("./components/xo-ui-components/src/address-box/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        (0, _squid.$registerDirective)("xo-address-box", function() {
            return {
                template: _template2["default"],
                scope: {
                    header: "=",
                    fullname: "=",
                    addresses: "=",
                    changeFn: "="
                },
                lifecycle: {
                    enter: function enter() {
                        _logger.$logger.info("xo-address-box_enter");
                    }
                },
                controller: function controller($scope) {
                    var addressList = $scope.addresses && $scope.addresses.addresses || [];
                    $scope.address = addressList[0] || {};
                    $scope.line3 = $scope.address.city + ", " + $scope.address.state + " " + $scope.address.postal_code;
                    $scope.updateType = addressList.length > 1 ? _squid.$locale.content.get("common.change") : _squid.$locale.content.get("common.edit");
                    $scope.updateFn = function() {
                        return $scope.changeFn($scope.updateType);
                    };
                    $scope.fullname = $scope.fullname;
                    if ($scope.fullname) {
                        $scope.name = $scope.fullname.first_name + " " + $scope.fullname.last_name;
                    }
                }
            };
        });
        _squid.$registerDirective;
        _squid.$locale;
        _logger.$logger;
    },
    "./components/xo-ui-components/src/address-box/styles.less": "./css/app.less",
    "./components/xo-ui-components/src/address-box/template.html": function(module, exports) {
        module.exports = '<div id="address-box-wrapper">\n\n    <div class="box-header">\n        <div class="headerText">{{header}}</div>\n        <div class="updateButton">\n            <a ng-click="updateFn()">{{updateType}}</a>\n        </div>\n    </div>\n    <div class="box-body">\n        <p ng-if="name">{{name}}</p>\n        <p>{{address.line1}}</p>\n        <p>{{address.line2}}</p>\n        <p>{{line3}}</p>\n    </div>\n</div>\n';
    },
    "./components/xo-wallet-components/src/add-card/addcard/styles.less": "./css/app.less",
    "./components/squid/dist/module.js": function(module, exports) {
        module.exports = angular.module;
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-card/addcard/template.html": function(module, exports) {
        module.exports = '\n<div content modal-box="!!sidebar" modal-cancel="cancelFn()" xo-tray-height class=wallet>\n    <xo-aside-header back-url="{{backUri}}" heading="asideHeader.addCard" ng-if="showSidebarBackArrow"></xo-aside-header>\n    <div class="header noButtons" ng-if="manageCardFlow">\n        <h1 class="asideAlpha walletHeading noHead noBottom alpha">{{ content(\'asideHeader.updateCard\', {type: cardmodel.card.name, number: cardmodel.card.lastDigits}) }}</h1>\n        <a link-button ui-sref="{{manageCardFlowBackUri}}" class="backArrow goTray">\n            <span class="accessAid">{{ content(\'common.back\') }}</span>\n        </a>\n    </div>\n    <xo-aside-header back-url="^.selectCard" heading=\'asideHeader.selectCard\' ng-if="sidebar && checkoutSession.plccOffer"></xo-aside-header>\n    <p class="userEmail" id="reviewUserInfo" ng-if="showHiMsg">\n        {{ content(\'creditcard.hi\', {userName: auth.first_name ? auth.first_name : auth.email}) }}\n            <span ng-if="showNotYou">\n                <a track-link="login_with_diff_user" href="" ng-click="logout()" style="font-weight:700;">{{ content(\'memberReview.notYou\')}}</a>\n            </span>\n    </p>\n    <h1 class="gamma" ng-if="messagetitle">{{ messagetitle }}</h1>\n    <div class="reviews" ng-if="isNmj">\n        <xo-banner is-nmj="isNmj">\n            <p class="userEmail" id="reviewUserInfo">\n                <span ng-if="isNmj">{{ content(\'memberReview.hiUser_welcome\', {userName: formattedNameInformal}) }}</span>\n            </p>\n        </xo-banner>\n        <xo-assist-banner header="content(contentKey.header)" body="content(contentKey.body)">\n        </xo-assist-banner>\n    </div>\n    <xo-message message="message" ng-if="!sidebar && !isNmj"></xo-message>\n    <h1 class="gamma" ng-if="pagetitle">{{ pagetitle }}</h1>\n\n    <div ng-if="showAddBank" class="addBankLink BANK_ACCOUNT">\n        <a track-link="add_bank" href="{{addBankUri}}" role="button">\n            <span class="fsIcons"></span>\n            <span class="name">{{ content(\'addCard.addBank\') }}</span>\n        </a>\n    </div>\n\n    <div ng-class="{true: \'sidebar\'}[asideContent]" xo-tray-height>\n        <form id="creditCardForm" name="creditCardForm" class="addCard asideView asideContent" content form-autofocus novalidate>\n            <div class="trayInner container">\n                <p id="addCardDebitCardFlow" ng-if="debitCardFlow && !isUpdateDebitCard()">\n                    {{ content(\'addCard.commonAddTopupDebitCard\', { type: tokenizedWalletInfoModel.brandName() }) }}\n                </p>\n                <xo-message message="message" ng-if="sidebar"></xo-message>\n                <xo-message id="billingAddressUpdatedMsg" ng-if="billingaddressupdated.value" message="billingaddressupdated"></xo-message>\n                <xo-name-input user="cardmodel.user" country="{{country}}"></xo-name-input>\n\n                <xo-credit-card token="token" card="cardmodel.card" user="cardmodel.user"\n                                selected-promotion-card-type="selectedPromotionCardType"\n                                card-type-changed="cardTypeChanged" promotion="promotion"\n                                manage-card-flow="manageCardFlow"></xo-credit-card>\n\n                <xo-address-box ng-if="isNmj && cardmodel && cardmodel.address"\n                                header="content(\'addCard.billingAddress\')"\n                                fullname="cardmodel.user"\n                                addresses="billingAddresses"\n                                change-fn="address_box.changeFn">\n                </xo-address-box>\n\n                <div ng-if="!isNmj && flag(\'fields.address\')" id="billingAddress" class="dropdown billingAddress confidential">\n                    <label for="billingAddressDropdown" class="billingAddressLabel">\n                        {{ content("addressBook.billingAddress") }}\n                        <a href="" link-button ng-click="gotoBilling()" class="addNewBillingAddress" aria-label="{{ content(\'addCard.addNewBillingAddress\') }}">{{ content("addressBook.add") }}</a>\n                    </label>\n                    <div class="dropdown billingAddress nullable">\n                        <select xo-dropdown default="{{content(\'addCard.addNewBillingAddress\')}}" ng-model="cardmodel.address"\n                                ng-change="gotoBilling(cardmodel.address)"\n                                ng-options="address.full_address for address in billingAddresses.addresses"\n                                name="billingAddress" id="billingAddressDropdown" required>\n                        </select>\n                    </div>\n                </div>\n\n                <div ng-if="flag(\'fields.phone\')">\n                    <div class="otpVerification" ng-bind-html="htmlContent(\'confirmUpop.debitInitOtp\')"></div>\n                    <xo-phone-input token="token" show-phone-type="false" phone="phone"></xo-phone-input>\n                </div>\n\n                <div class="addressLabel">\n                    <a href="" link-button ng-click="gotoBilling()">{{ content("addCard.addNewBillingAddress") }}</a>\n                </div>\n\n                <div ng-if="showplcc">\n                    <div class="plccAgree checkbox">\n                        <input type="checkbox" checked="true" name="plccAgree" id="plccAgree" />\n                        <label class="noBottom" for="plccAgree">{{content(\'addCard.plccPreferMethod\', { merchant: promotion.name})}}</label>\n                    </div>\n                    <div class="legal">{{content(\'addCard.plccLegal\', { merchant: promotion.name})}}</div>\n                </div>\n\n                <div ng-if="showSetPreferredFi">\n                    <div class="checkbox">\n                        <input type="checkbox" name="makeFiPreferred" id="makeFiPreferred" />\n                        <label for="makeFiPreferred">{{ content(\'addCard.makeFiPreferred\') }}</label>\n                    </div>\n                    <div class="legal infoTxt">{{content(\'addCard.makeFiPreferredLegal\')}}\n                        <span id="setPreferredFiLearnMore" bind-html-compile="htmlContent(\'addCard.learnMore\')"></span>\n                    </div>\n                </div>\n\n                <input track-submit="{{cardmodel.card.isExisting() ? \'update_cc\' : \'add_cc\' }}" type="submit" value="{{ content(buttonText()) }}" id="proceedButton" class="btn full" validate-submit="onSubmit()" />\n\n                <div ng-if="showCancel" class="linkButton">\n                    <a link-button prevent-default href="#" ng-click="parentCallbacks.cancel()">{{content(\'common.cancel\')}}</a>\n                </div>\n            </div>\n        </form>\n    </div>\n\n    <div ui-view></div>\n</div>\n';
    },
    "./components/xo-wallet-components/src/add-card/creditcard-input/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        var _cardMetaData = __webpack_require__("./components/xo-wallet-components/src/add-card/cardMetaData/index.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-ui-components/src/directionality/directive.js");
        __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/add-card/cardExpiry/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/add-card/cardIssueDate/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/add-card/cvv/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/add-card/dob/directive.js");
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-card/creditcard-input/template.html"), __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/xo-models/src/fi/index.js"), __webpack_require__("./components/angular-ui-utils/ui-utils.min.js"), __webpack_require__("./components/xo-form-components/src/name-input/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template, $) {
            squid.module("xo-add-card.creditcard-input.directive", [ "squid", "xomodel.fi", "xo-tooltip.directive", "xo-error-tooltip.directive", "xo-name-input.directive", "ui.validate" ]).directive("scrollToTop", function() {
                return {
                    link: function link(scope, element, attr) {
                        $(element).on("focus", function() {
                            if ($("#mxCardTitle").is(":visible")) {
                                $("#creditCardForm").scrollTop($(element).offset().top);
                            }
                        });
                    }
                };
            }).directive("xoCreditCard", function($timeout, $util) {
                return {
                    template: template,
                    restrict: "E",
                    scope: {
                        token: "=",
                        card: "=",
                        user: "=",
                        selectedPromotionCardType: "=",
                        promotion: "=",
                        cardTypeChanged: "=",
                        cardNumberChanged: "=",
                        manageCardFlow: "="
                    },
                    controller: function controller($scope, $populate, $CardTypesModel, $Class, $locale, $CardTypeFromBinModel, $config, $feature, $pxp, $logger, $stateParams, $FlowEligibilityModel, $meta) {
                        $scope.cardLengthValid = function(number) {
                            if ($scope.card && $scope.card.isExisting()) {
                                return true;
                            }
                            number = (number || "").replace(/[^0-9]+/g, "");
                            return number.length >= $scope.flag("length.min") && number.length <= $scope.flag("length.max");
                        };
                        $scope.cardLuhnValid = function(input) {
                            if (!$scope.flag("luhn")) {
                                return true;
                            }
                            if ($scope.card && $scope.card.isExisting()) {
                                return true;
                            }
                            input = (input || "").replace(/[^0-9]+/g, "");
                            var sum = 0;
                            var numdigits = input.length;
                            var parity = numdigits % 2;
                            var i = 0;
                            var digit;
                            for (;i < numdigits; i++) {
                                digit = parseInt(input.charAt(i), 10);
                                if (i % 2 === parity) {
                                    digit *= 2;
                                }
                                if (digit > 9) {
                                    digit -= 9;
                                }
                                sum += digit;
                            }
                            return sum % 10 === 0;
                        };
                        $scope.cardProductValid = function() {
                            return $scope.debitCardFlow ? $scope.card.productType === "DEBIT" : true;
                        };
                        $scope.isPlcc = $scope.selectedPromotionCardType && $scope.selectedPromotionCardType.type === "plcc" ? true : false;
                        $scope.flag = function(field) {
                            if ($scope.isPlcc && !$scope.card.type) {
                                $scope.card.type = "PLCC";
                            }
                            return _cardMetaData.$CardMetaData.getMetaData($scope.card, field);
                        };
                        $scope.maxLength = function() {
                            if ($scope.card && $scope.card.isExisting()) {
                                return 30;
                            }
                            return $scope.flag("length.max") + $scope.flag("spaces.length");
                        };
                        $populate($scope, {
                            flowEligibility: $FlowEligibilityModel.instance($scope.token).retrieve({
                                params: {
                                    geolocation: $meta.geolocation,
                                    localeCountry: $locale.country
                                }
                            })
                        }).then(function() {
                            $scope.debitCardFlow = angular.isArray($scope.flowEligibility.paymentCardProductClass) && $scope.flowEligibility.paymentCardProductClass.length === 1 && $scope.flowEligibility.paymentCardProductClass[0] === "DEBIT";
                            $scope.locale = $locale;
                            $scope.country = $scope.locale.country;
                            var cardTypeServiceCall = $feature("cardTypeServiceCallRequired", false, $scope.country);
                            $scope.tokenizedWalletCardTypeServiceCall = false;
                            var isUnsupportedCard;
                            var lastVerifiedBin = "";
                            var lastRequestedBin;
                            $scope.mxDebitCards = [ "BANAMEX", "BANCOARFACA", "BBVA", "BANORTE", "HSBC", "INBURSA", "SANTANDER" ];
                            if ($scope.card && $scope.card.number) {
                                $scope.unformattedCardNumber = ($scope.card.number || "").replace(/[^0-9]+/g, "").slice(0, $scope.maxLength());
                            }
                            $scope.showMXCardLogos = function() {
                                return $locale.country === "MX";
                            };
                            function pxpMXCardLabels() {
                                if ($scope.showMXCardLogos()) {
                                    $pxp("xo_hermes_mx_cardlogo", {}, "xo_hermes_mx_cardlogo_treatment").then(function(result) {
                                        $scope.showLabels = result && result.treatment_name === "xo_hermes_mx_cardlogo_treatment";
                                    });
                                } else {
                                    $scope.showLabels = false;
                                }
                            }
                            $populate($scope, {
                                cardTypes: $CardTypesModel.instance($scope.token + ":" + $locale.country, {
                                    token: $scope.token,
                                    country: $locale.country
                                })
                            }).then(function() {
                                var forceDropDown = false;
                                $scope.supportedCardNamesCommaSeparated = $scope.cardTypes.supportedNames().join(", ");
                                $scope.$on("localeChange", function() {
                                    $scope.cardTypes = $CardTypesModel.instance($scope.token + ":" + $locale.country, {
                                        token: $scope.token,
                                        country: $locale.country
                                    });
                                    $scope.cardTypes.retrieve().then(function() {
                                        if ($scope.card.type && $scope.cardTypes.allowed.indexOf($scope.card.type) === -1) {
                                            delete $scope.card.type;
                                            forceDropDown = false;
                                            $scope.changeCardNumber(true);
                                        }
                                    });
                                    $scope.country = $locale.country;
                                    pxpMXCardLabels();
                                });
                                pxpMXCardLabels();
                                $scope.cvvShown = function() {
                                    if ($scope.card.type === "CETELEM" && $scope.locale.country === "FR") {
                                        return false;
                                    }
                                    if ($scope.card.type === "CUP" && $scope.card.productType === "DEBITCARD") {
                                        return false;
                                    }
                                    if ($scope.isPlcc && $scope.card.type) {
                                        return true;
                                    }
                                    return $scope.flag("fields.cvv");
                                };
                                $scope.expiryShown = function() {
                                    if ($scope.isPlcc && $scope.card.type) {
                                        return true;
                                    }
                                    if ($scope.card.type === "CUP" && $scope.card.productType === "DEBITCARD") {
                                        return false;
                                    }
                                    return $scope.flag("fields.expiry");
                                };
                                $scope.enableDropDown = function() {
                                    return Boolean([ "ES", "FR", "GB", "IT" ].indexOf($scope.locale.country) > -1) || forceDropDown;
                                };
                                $scope.showDropDown = function() {
                                    if ($scope.enableDropDown()) {
                                        return true;
                                    }
                                    if (!$scope.card.type && $scope.card.number && $scope.card.number.length >= 4 && !(cardTypeServiceCall || $scope.tokenizedWalletCardTypeServiceCall) && !$scope.isPlcc) {
                                        return true;
                                    }
                                    if (!$scope.card.type && $scope.card.number && $scope.card.number.length >= 7 && (cardTypeServiceCall || $scope.tokenizedWalletCardTypeServiceCall) && isUnsupportedCard) {
                                        return true;
                                    }
                                    return false;
                                };
                                $scope.showAcceptedCardLogos = function() {
                                    return !$scope.showDropDown() && $feature("showAcceptedCardLogos", false, $scope.country);
                                };
                                $scope.getCardTypeByNumber = function(types, number) {
                                    if ($scope.isPlcc && number.length > 6 || !$scope.isPlcc) {
                                        return _cardMetaData.$CardMetaData.getCardType(types, number);
                                    }
                                };
                                function formatCardNumber(number) {
                                    var spaces = $scope.flag("spaces");
                                    var formatted = [];
                                    for (var i = 0; i < number.length; i++) {
                                        if (spaces.indexOf(i) > -1) {
                                            formatted.push(" ");
                                        }
                                        formatted.push(number.charAt(i));
                                    }
                                    number = formatted.join("");
                                    return number;
                                }
                                $scope.$watch("card.type", function() {
                                    if ($scope.cardTypeChanged) {
                                        $scope.cardTypeChanged();
                                    }
                                });
                                $scope.ccOnBlur = function() {
                                    if ($scope.cardNumberChanged) {
                                        $scope.cardNumberChanged($scope.unformattedCardNumber);
                                    }
                                };
                                function selectCardTypeForDualBrands(result) {
                                    var dualCardTypes = $feature("dualCardTypes", {});
                                    var match;
                                    Object.keys(dualCardTypes).some(function(key) {
                                        return result.some(function(cardType) {
                                            if (cardType.type === key) {
                                                match = key;
                                                return true;
                                            }
                                        });
                                    });
                                    if (match) {
                                        var regex = new RegExp(dualCardTypes[match]);
                                        var selected = $util.find(result, function(cardType) {
                                            if (regex.test(cardType.type)) {
                                                return true;
                                            }
                                        });
                                        if (selected && selected.type === "CUP") {
                                            $util.some(result, function(cardType) {
                                                if (/^AMEX$/.test(cardType.type)) {
                                                    selected.dualType = cardType.type;
                                                    return true;
                                                }
                                            });
                                        }
                                        return selected;
                                    } else {
                                        return $util.find(result, function(cardType) {
                                            return $scope.cardTypes.allowed.indexOf(cardType.type) > -1;
                                        });
                                    }
                                }
                                function selectCardType(result) {
                                    if (angular.isArray(result)) {
                                        if (result.length >= 2) {
                                            result = selectCardTypeForDualBrands(result);
                                        } else {
                                            result = result[0];
                                        }
                                    }
                                    return result || {};
                                }
                                function clearCardType() {
                                    $scope.card.type = "";
                                    $scope.card.dualType = "";
                                    $scope.card.productType = "";
                                }
                                function getCardTypeByNumberServiceCall(number) {
                                    if (number.length >= 6) {
                                        var bin = number;
                                        if (!$scope.debitCardFlow) {
                                            bin = bin.slice(0, 6);
                                        }
                                        if (lastVerifiedBin) {
                                            if (lastVerifiedBin.bin === bin) {
                                                $scope.card.type = lastVerifiedBin.type;
                                                $scope.card.dualType = lastVerifiedBin.dualType;
                                                $scope.card.productType = lastVerifiedBin.productType;
                                                return;
                                            } else if ($scope.debitCardFlow && bin.startsWith(lastVerifiedBin.bin) && lastVerifiedBin.productType) {
                                                $scope.card.type = lastVerifiedBin.type;
                                                $scope.card.dualType = lastVerifiedBin.dualType;
                                                $scope.card.productType = lastVerifiedBin.productType;
                                                return;
                                            }
                                        }
                                        if (isUnsupportedCard === bin || bin === lastRequestedBin || $scope.debitCardFlow && lastRequestedBin) {
                                            return;
                                        }
                                        lastRequestedBin = bin;
                                        var params = {
                                            country: $scope.country,
                                            user_country: $scope.country,
                                            bin: bin
                                        };
                                        $scope.cardTypeFromBinModel = new $CardTypeFromBinModel(params);
                                        $scope.cardTypeFromBinModel.retrieve({
                                            silent: true,
                                            success: function success(result) {
                                                result = selectCardType(result);
                                                var type = result.type;
                                                lastRequestedBin = undefined;
                                                var disallowedCard = false;
                                                if ($scope.cardTypes.allowed.indexOf(type) === -1) {
                                                    disallowedCard = true;
                                                }
                                                if (disallowedCard) {
                                                    clearCardType();
                                                    isUnsupportedCard = bin;
                                                    $scope.allowedCardsTooltip = true;
                                                    return;
                                                }
                                                isUnsupportedCard = undefined;
                                                forceDropDown = false;
                                                if (!$scope.showDropDown()) {
                                                    $scope.card.type = type;
                                                    $scope.card.dualType = result.dualType;
                                                    $scope.card.productType = result.productType;
                                                }
                                                lastVerifiedBin = {
                                                    bin: bin,
                                                    type: type,
                                                    dualType: result.dualType,
                                                    productType: result.productType
                                                };
                                                if ($scope.card.type && number.length >= $scope.flag("length.min")) {
                                                    if (/android/i.test(navigator.userAgent)) {
                                                        return;
                                                    }
                                                    var ccNumber = ($scope.card.number || "").replace(/[^0-9]+/g, "").slice(0, $scope.maxLength());
                                                    if (ccNumber.indexOf(number) >= 0) {
                                                        $scope.card.number = formatCardNumber(ccNumber);
                                                    }
                                                }
                                                return;
                                            },
                                            contingencies: {
                                                GET_FI_ISSUER_DETAILS_ERR: function GET_FI_ISSUER_DETAILS_ERR(name, result) {
                                                    clearCardType();
                                                    isUnsupportedCard = bin;
                                                    lastRequestedBin = undefined;
                                                }
                                            },
                                            error: function error() {
                                                clearCardType();
                                                isUnsupportedCard = bin;
                                                lastRequestedBin = undefined;
                                            }
                                        });
                                    } else {
                                        isUnsupportedCard = undefined;
                                        lastRequestedBin = undefined;
                                        forceDropDown = false;
                                        clearCardType();
                                    }
                                }
                                $scope.getAllowedCardTypeByNumber = function(number) {
                                    return $scope.getCardTypeByNumber($scope.cardTypes.allowed, number);
                                };
                                $scope.getDisallowedCardTypeByNumber = function(number) {
                                    return $scope.getCardTypeByNumber($scope.cardTypes.disallowed, number);
                                };
                                $scope.enableAddMode = function() {
                                    if ($scope.card.isExisting()) {
                                        $scope.card.number = "";
                                    }
                                };
                                $scope.changeType = function() {
                                    forceDropDown = true;
                                    $scope.changeCardNumber(true);
                                    if (!$scope.flag("fields.expiry")) {
                                        delete $scope.card.expiry_month;
                                        delete $scope.card.expiry_year;
                                    }
                                    if (!$scope.flag("fields.issue")) {
                                        delete $scope.card.start_month;
                                        delete $scope.card.start_year;
                                        delete $scope.card.issue_number;
                                    }
                                    if (!$scope.flag("fields.dob")) {
                                        delete $scope.card.dob_day;
                                        delete $scope.card.dob_month;
                                        delete $scope.card.dob_year;
                                    }
                                    if (!$scope.flag("fields.cvv")) {
                                        delete $scope.card.security_code;
                                    }
                                };
                                $scope.changeCardNumber = function(isCardTypeChanged) {
                                    $scope.enableAddMode();
                                    $scope.allowedCardsTooltip = false;
                                    var regex = /[０-９]/;
                                    if ($feature("disableFullWidthCharacters") && regex.test($scope.card.number)) {
                                        $logger.info("checkout_fpti", {
                                            is_fullwidth_character: true
                                        });
                                    }
                                    var number = ($scope.card.number || "").replace(/[^0-9]+/g, "").slice(0, $scope.maxLength());
                                    var formattedNumber;
                                    $scope.unformattedCardNumber = number;
                                    var cardType;
                                    if ($scope.debitCardFlow) {
                                        if (number.length >= $scope.flag("length.min")) {
                                            $scope.tokenizedWalletCardTypeServiceCall = true;
                                        } else {
                                            $scope.tokenizedWalletCardTypeServiceCall = false;
                                            lastVerifiedBin = "";
                                        }
                                    }
                                    if (cardTypeServiceCall || $scope.tokenizedWalletCardTypeServiceCall) {
                                        if (!isCardTypeChanged) {
                                            getCardTypeByNumberServiceCall(number);
                                        }
                                        if (isUnsupportedCard) {
                                            $scope.allowedCardsTooltip = true;
                                        }
                                    } else {
                                        if (!isCardTypeChanged) {
                                            if (number.length < 4) {
                                                forceDropDown = false;
                                            }
                                            if (!$scope.enableDropDown()) {
                                                cardType = $scope.getAllowedCardTypeByNumber(number);
                                                $scope.card.type = cardType.type;
                                                $scope.card.subType = cardType.subType;
                                            }
                                        }
                                        if ($scope.isPlcc && $scope.card.type) {
                                            $scope.cvvShown();
                                            $scope.expiryShown();
                                        }
                                        if (!$scope.card.type && !$scope.isPlcc && (number.length >= 4 || $scope.getDisallowedCardTypeByNumber(number).type)) {
                                            $scope.allowedCardsTooltip = true;
                                        }
                                    }
                                    formattedNumber = formatCardNumber(number);
                                    if ($scope.card.number === formattedNumber) {
                                        return;
                                    }
                                    $timeout(function() {
                                        $scope.card.number = formatCardNumber(number);
                                        var ccField = document.getElementById("cc");
                                        if (!ccField) {
                                            return;
                                        }
                                        var inputLength = ccField.value.length;
                                        var cursorStart = ccField.selectionStart;
                                        $timeout(function() {
                                            if (cursorStart === inputLength) {
                                                ccField.selectionStart = ccField.selectionEnd = ccField.value.length;
                                            } else {
                                                ccField.selectionStart = ccField.selectionEnd = cursorStart;
                                            }
                                        });
                                    });
                                };
                            });
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        _cardMetaData.$CardMetaData;
    },
    "./components/xo-ui-components/src/directionality/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            __webpack_require__("./components/xo-ui-components/src/directionality/styles.less");
            (0, _angular.$registerDirective)("directionality", function() {
                return {
                    restrict: "A",
                    link: function link(scope, element) {
                        var currentWatchDeregister = void 0;
                        var input = element.find("input");
                        if (!input.length) {
                            listenForInputRendered();
                            return;
                        }
                        function listenForInputRendered() {
                            element.bind("DOMNodeInserted", checkDOMNodeInserted);
                            function checkDOMNodeInserted(event) {
                                if (event && event.target && event.target.tagName === "INPUT") {
                                    element.unbind("DOMNodeInserted", checkDOMNodeInserted);
                                    input = angular.element(event.target);
                                    init();
                                }
                            }
                        }
                        function setDirectionality(value) {
                            if (value) {
                                element.toggleClass("ltrOverride", !_squid.$util.hasRTL(value));
                            } else {
                                element.toggleClass("ltrOverride", _angular.$document.prop("documentElement").getAttribute("dir") !== "rtl");
                            }
                        }
                        function jqueryOnKeyupHandler(event) {
                            setDirectionality(event.target.value);
                        }
                        function resetDirectionalityListener() {
                            input.unbind("keyup", jqueryOnKeyupHandler);
                            if (currentWatchDeregister) {
                                currentWatchDeregister();
                            }
                            if (document.documentElement.getAttribute("dir") === "rtl") {
                                (0, _angular.$timeout)(function() {
                                    currentWatchDeregister = scope.$watch(input.attr("ng-model"), function(value) {
                                        setDirectionality(value);
                                    });
                                    input.on("keyup", jqueryOnKeyupHandler);
                                });
                            }
                        }
                        function init() {
                            resetDirectionalityListener();
                            scope.$on("localeChange", function() {
                                resetDirectionalityListener();
                            });
                        }
                        init();
                    }
                };
            });
            (0, _angular.$registerDirective)("directionality-text", function() {
                return {
                    restrict: "A",
                    link: function link(scope, element, attrs) {
                        if (document.documentElement.getAttribute("dir") === "rtl") {
                            var $element = $(element);
                            (0, _angular.$timeout)(function() {
                                if (attrs.directionalityText) {
                                    scope.$watch(attrs.directionalityText, function() {
                                        $element.toggleClass("ltrOverride", !_squid.$util.hasRTL((0, _angular.$parse)(attrs.directionalityText)(scope)));
                                    });
                                } else {
                                    $element.toggleClass("ltrOverride", !_squid.$util.hasRTL(element.text()));
                                }
                            });
                        }
                    }
                };
            });
            _angular.$document;
            _angular.$parse;
            _angular.$registerDirective;
            _angular.$timeout;
            _squid.$util;
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-ui-components/src/directionality/styles.less": "./css/app.less",
    "./components/xo-wallet-components/src/add-card/cardIssueDate/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            exports.$xoCardIssueDateDirective = undefined;
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
            __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js");
            var _template = __webpack_require__("./components/xo-wallet-components/src/add-card/cardIssueDate/template.html");
            var _template2 = _interopRequireDefault(_template);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            var $xoCardIssueDateDirective = exports.$xoCardIssueDateDirective = _squid.$Component.extend("$xoCardIssueDateDirective", {
                tag: "xo-card-issue-date",
                template: _template2["default"],
                props: {
                    issueMonth: {
                        type: "var",
                        required: true
                    },
                    issueYear: {
                        type: "var",
                        required: true
                    }
                },
                lifecycle: {
                    enter: function enter() {
                        var _this = this;
                        this.dateFormat = (0, _squid.$feature)("ccIssueDateDateFormat", "MMYY", _squid.$locale.country);
                        if (this.dateFormat === "MMYY") {
                            this.maxlength = 5;
                            this.mask = "99/99";
                        } else if (this.dateFormat === "MMYYYY") {
                            this.maxlength = 7;
                            this.mask = "99/9999";
                        }
                        this.formatIssueDate = function(event) {
                            var key = event.keyCode || event.charCode;
                            var $el = $(event.target);
                            var val = $el.val().replace(/[^0-9\/]/gi, "");
                            var strokes = val.length;
                            if (key === 8 || key === 46) {
                                return;
                            }
                            if (strokes === 2) {
                                val += "/";
                            }
                            _this.issueDate = val;
                            $el.mask(_this.mask);
                        };
                        var currentYear = new Date().getFullYear();
                        var validMonths = _squid.$util.map(_squid.$util.range(1, 13), function(num) {
                            return ("0" + num).substr(-2);
                        });
                        var validYears = _squid.$util.map(_squid.$util.range(currentYear - 10, currentYear + 1), function(y) {
                            return y.toString();
                        });
                        this.validate = function(issueDate) {
                            if (!issueDate) {
                                return;
                            }
                            var month = void 0, year = void 0, unformatted = void 0;
                            var isValid = false;
                            unformatted = issueDate.replace(/[^0-9]/gi, "");
                            if (unformatted.length > 3) {
                                month = unformatted.substring(0, 2);
                                if (_this.dateFormat === "MMYY") {
                                    year = currentYear.toString().substring(0, 2) + unformatted.substring(2, 4);
                                } else if (_this.dateFormat === "MMYYYY") {
                                    year = unformatted.substring(2, 6);
                                }
                                isValid = validMonths.indexOf(month) > -1 && validYears.indexOf(year) > -1;
                                if (isValid) {
                                    var date = new Date(year, parseInt(month, 10) - 1);
                                    var today = new Date();
                                    isValid = date < today;
                                }
                            }
                            _this.issueYear = year;
                            _this.issueMonth = month;
                            return isValid;
                        };
                    }
                }
            });
            angular.value("$xoCardIssueDateDirective", $xoCardIssueDateDirective);
            _squid.$Component;
            _squid.$locale;
            _squid.$feature;
            _squid.$util;
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-wallet-components/src/add-card/cardIssueDate/template.html": function(module, exports) {
        module.exports = '<div content directionality>\n    <input ng-model="issueDate"\n           name="issue_date_value"\n           id="issue_date_value"\n           value=""\n           maxlength="{{maxlength}}"\n           autocapitalize="off"\n           aria-describedby="issueHelp"\n           autocomplete="off"\n           ui-validate="\'validate($value)\'"\n           ng-keyup="formatIssueDate($event)"\n           placeholder="{{content(\'creditcard.expiresPlaceholder\')}}"\n           data-error-text="{{content(\'validation.validIssueDate\')}}"\n           xo-error-tooltip\n           required />\n    <span id="issueHelp" class="accessAid" ng-bind="content(\'creditcard.expiresPlaceholder\')"></span>\n</div>\n';
    },
    "./components/xo-wallet-components/src/add-card/dob/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _template = __webpack_require__("./components/xo-wallet-components/src/add-card/dob/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoDobCardInputDirective", {
            tag: "xo-dob-card-input",
            template: _template2["default"],
            props: {
                user: {
                    type: "var"
                }
            },
            lifecycle: {
                enter: function enter() {
                    function pad() {
                        var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;
                        return function(num) {
                            return (new Array(length + 1).join("0") + num).substr(-length);
                        };
                    }
                    var year = new Date().getFullYear();
                    this.days = _squid.$util.map(_squid.$util.range(1, 32), pad());
                    this.months = _squid.$util.map(_squid.$util.range(1, 13), pad());
                    this.years = _squid.$util.map(_squid.$util.range(year - 100, year), pad(4)).reverse();
                }
            }
        });
        _squid.$Component;
        _squid.$util;
        module.exports = exports["default"];
    },
    "./components/xo-wallet-components/src/add-card/dob/template.html": function(module, exports) {
        module.exports = '<div content id="cardDOB" class="cardDOB inputField invisiField confidential last-child">\n    <label class="dobLabel nolap" for="dobDayCC">{{ content(\'creditcard.dob\') }}</label>\n\n    <div class="dropdown fidobDay nullable">\n        <select xo-dropdown name="dobDayCC" id="dobDayCC" ng-model="user.dob_day"\n                ng-options="day for day in days track by day" ng-required="true">\n            <option value="">{{ content(\'applyForBml.bmlApplyDD\') }}</option>\n        </select>\n    </div>\n\n    <div class="dropdown fidobMonth nullable">\n        <select xo-dropdown name="dobMonthCC" id="dobMonthCC" ng-model="user.dob_month"\n                ng-options="month for month in months track by month" ng-required="true">\n            <option value="">{{ content(\'applyForBml.bmlApplyMM\') }}</option>\n        </select>\n    </div>\n\n    <div class="dropdown fidobYear nullable">\n        <select xo-dropdown name="dobYearCC" id="dobYearCC" ng-model="user.dob_year"\n                ng-options="year for year in years track by year" ng-required="true">\n            <option value="">{{ content(\'applyForBml.bmlApplyYYYY\') }}</option>\n        </select>\n    </div>\n</div>\n';
    },
    "./components/xo-form-components/src/name-input/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-form-components/src/name-input/template.html"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js"), __webpack_require__("./components/xo-ui-components/src/floating-label/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, template) {
            return angular.module("xo-name-input.directive", [ "squid", "xo-error-tooltip.directive", "floating-label.directive" ]).directive("xoNameInput", function() {
                return {
                    template: template,
                    scope: {
                        user: "=",
                        country: "@"
                    },
                    controller: function controller($populate, $scope, $locale, $MetadataModel) {
                        $scope.locale = $locale;
                        $scope.metadata = $MetadataModel.create();
                        $scope.$watch("country", function() {
                            $scope.metadata.choose($scope.country || $locale.country, $locale.lang);
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-form-components/src/name-input/template.html": function(module, exports) {
        module.exports = '<div class="fieldGroup name clearfix" ng-class="country || locale.country" content>\n  <div ng-if="metadata.nameEntry.layout" ng-repeat="layoutItem in metadata.nameEntry.layout">\n\n    <!-- First name -->\n    <div ng-if="layoutItem.$ === \'givenName\'">\n      <div class="inputField half confidential" ng-class="{\'last-child\': $last}" floating-label directionality>\n\n        <input ng-model="user.first_name"\n               id="firstName"\n               name="firstName"\n               value=""\n               pattern="(?!^\\d+$)^.+$"\n               autocapitalize="off"\n               aria-required="false"\n               autocomplete="off"\n               maxlength="100"\n               xo-error-tooltip\n               ng-required="{{layoutItem.required}}" />\n          <label for="firstName">\n              {{content(\'common.firstName\')}}\n          </label>\n      </div>\n    </div>\n\n    <!-- Last name -->\n    <div ng-if="layoutItem.$ === \'surname\'">\n      <div class="inputField half confidential" ng-class="{\'last-child\': $last}" floating-label directionality>\n        <input ng-model="user.last_name"\n               id="lastName"\n               name="lastName"\n               value=""\n               pattern="(?!^\\d+$)^.+$"\n               autocapitalize="off"\n               aria-required="false"\n               autocomplete="off"\n               maxlength="100"\n               xo-error-tooltip\n               ng-required="{{layoutItem.required}}" />\n          <label for="lastName">\n              {{content(\'common.lastName\')}}\n          </label>\n      </div>\n    </div>\n  </div>\n  <div ng-if="!metadata.nameEntry.layout">\n    <div class="inputField half confidential" floating-label directionality>\n\n      <input ng-model="user.first_name"\n             id="firstName"\n             name="firstName"\n             value=""\n             pattern="(?!^\\d+$)^.+$"\n             autocapitalize="off"\n             aria-required="false"\n             autocomplete="off"\n             maxlength="100"\n             xo-error-tooltip\n             ng-required="true" />\n        <label for="firstName">\n            {{content(\'common.firstName\')}}\n        </label>\n    </div>\n\n    <!-- Last name -->\n    <div class="inputField half confidential last-child" floating-label directionality>\n\n      <input ng-model="user.last_name"\n             id="lastName"\n             name="lastName"\n             value=""\n             pattern="(?!^\\d+$)^.+$"\n             autocapitalize="off"\n             aria-required="false"\n             autocomplete="off"\n             maxlength="100"\n             xo-error-tooltip\n             ng-required="true" />\n        <label for="lastName">\n            {{content(\'common.lastName\')}}\n        </label>\n    </div>\n  </div>\n</div>\n';
    },
    "./components/xo-ui-components/src/floating-label/directive.js": function(module, exports, __webpack_require__) {
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/xo-ui-components/src/floating-label/styles.less");
        var treatmentType;
        var newLocale;
        var oldLocale;
        function getTreatment() {
            if (treatmentType !== undefined) {
                return treatmentType;
            }
            if ((0, _squid.$feature)("floatingLabels")) {
                return true;
            }
            var token = _angular.$rootScope.token;
            var throttle = _squid.$config["floatingLabelLocales"] && _squid.$config["floatingLabelLocales"][_squid.$locale.country] && _squid.$config["floatingLabelLocales"][_squid.$locale.country][_squid.$locale.lang];
            var id = _squid.$locale.lang + "_" + _squid.$locale.country + token;
            treatmentType = throttle && (0, _squid.$experiment)("floating_label_exp", throttle, id, {}) ? true : false;
            return treatmentType;
        }
        (0, _angular.$registerDirective)("floating-label", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    scope.$on("localeChange", function() {
                        newLocale = _squid.$locale.country + "_" + _squid.$locale.lang;
                        if (oldLocale !== newLocale) {
                            treatmentType = undefined;
                            oldLocale = newLocale;
                        }
                        scope.showFloatingLabels = getTreatment();
                    });
                    (0, _angular.$timeout)(function() {
                        scope.showFloatingLabels = getTreatment();
                        scope.$watch("showFloatingLabels", function(val) {
                            if (val) {
                                element.addClass("floatingLabel");
                                element.removeClass("noFloatingLabel");
                            } else {
                                element.removeClass("floatingLabel");
                                element.addClass("noFloatingLabel");
                            }
                        });
                        var input = element.find("input");
                        if (input.attr("placeholder")) {
                            input.addClass("hasPlaceholder");
                        }
                        scope.$watch(input.attr("ng-model"), function(value) {
                            input.toggleClass("focused", !!value);
                        });
                        input.on("keyup", function(event) {
                            var val = event.target.value;
                            input.toggleClass("focused", !!val);
                        });
                        input.on("focus blur click", function(event) {
                            if (scope.showFloatingLabels) {
                                input.toggleClass("focused", event.type === "focus" || this.value.length > 0);
                            }
                        }).trigger("blur");
                    });
                }
            };
        });
        (0, _angular.$registerDirective)("floating-label-dropdown", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    scope.$on("localeChange", function() {
                        newLocale = _squid.$locale.country + "_" + _squid.$locale.lang;
                        if (oldLocale !== newLocale) {
                            treatmentType = undefined;
                            oldLocale = newLocale;
                        }
                        scope.showFloatingLabels = getTreatment();
                    });
                    (0, _angular.$timeout)(function() {
                        scope.showFloatingLabels = getTreatment();
                        scope.$watch("showFloatingLabels", function(val) {
                            if (val) {
                                element.addClass("floatingLabel");
                                element.removeClass("noFloatingLabel");
                            } else {
                                element.removeClass("floatingLabel");
                                element.addClass("noFloatingLabel");
                            }
                        });
                        var select = element.find("select");
                        var label = element.find("label");
                        var flSpan = element.find(".custom-select span span");
                        select.on("change mouseenter mouseleave blur", function(event) {
                            select.toggleClass("focused", event.type === "change" || this.value.length > 0);
                            flSpan.toggleClass("noValue", this.value.length < 1);
                            label.toggleClass("hide", this.value.length < 1);
                        }).trigger("mouseleave");
                    });
                }
            };
        });
        _angular.$timeout;
        _angular.$rootScope;
        _angular.$registerDirective;
        _squid.$locale;
        _squid.$experiment;
        _squid.$config;
        _squid.$feature;
    },
    "./components/xo-ui-components/src/floating-label/styles.less": "./css/app.less",
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-card/creditcard-input/template.html": function(module, exports) {
        module.exports = '<div class="creditCardInput" content>\n    <!-- These two hidden fields are added to avoid autofill issue by chome for password and login field -->\n    <input style="display:none">\n    <input type="password" style="display:none">\n\n    <div class="cardIconsGroup" ng-if="!debitCardFlow && !manageCardFlow && showAcceptedCardLogos()">\n        <div class="icons" ng-repeat = "cardType in cardTypes.allowed"><div class = "cardIcon {{cardType}}"></div></div>\n    </div>\n\n    <div class="debitAndCreditIconsGroup" ng-if="!debitCardFlow && !manageCardFlow && showMXCardLogos()">\n        <p id="mxCardTitle" class="cardIconTitle">{{content(\'creditcard.cardIconTitle\')}} </p>\n        <div class="cardIconsSection">\n            <p class="creditIconLabel" ng-if="showLabels">{{content(\'creditcard.creditIconLabel\')}}</p>\n            <div class="mxCardIconGroup">\n                <div class="icons" ng-repeat="cardType in cardTypes.allowed">\n                    <div class="cardIcon {{cardType}}"></div>\n                </div>\n            </div>\n            <br>\n            <p class="debitIconLabel" ng-if="showLabels">{{content(\'creditcard.debitIconLabel\')}}</p>\n            <div class="icons"\n                 ng-repeat="cardType in mxDebitCards">\n                <div class="debitcardIcon {{cardType}}"></div>\n            </div>\n        </div>\n    </div>\n\n    <div ng-if="isPlcc" class="plccCardNumberTitle" >{{content(\'addCard.plccAddCard\', { merchant: promotion.name})}}</div>\n\n    <div class="dropdown cardType confidential nullable" ng-if="!manageCardFlow && showDropDown()">\n        <label for="cardType" id="cardTypeLabel" class="accessAid">{{ content(\'creditcard.typeLabel\') }}</label>\n        <select xo-dropdown name="cardType" ng-model="card.type" ng-change="changeType()" ng-required="true"\n                ng-options="cardType as content(\'cardTypes.\' + cardType) for cardType in cardTypes.allowed track by cardType"\n                id="cardType" aria-labelledby="cardTypeLabel" data-show-card-type="false">\n            <option value="" selected>{{ content(\'creditcard.typeLabel\') }}</option>\n        </select>\n    </div>\n\n    <div ng-if="!manageCardFlow" class="inputField confidential cardNumber creditCardField" directionality>\n        <label for="cc" class="focus accessAid">\n            {{ content(\'creditcard.cardNumber\') }}\n        </label>\n\n        <input type="tel" ui-validate="{luhn: \'cardLuhnValid($value)\', len: \'cardLengthValid($value)\', prodType: \'cardProductValid($value)\'}"\n                ui-validate-watch="\'card.type\'"\n                ng-model="card.number" name="cardNumber" id="cc" value="" ng-change="changeCardNumber(false)"\n                ng-blur="ccOnBlur()"\n                maxlength="{{maxLength()}}" data-number="{{unformattedCardNumber}}"\n                autocapitalize="off" data-country="{{ locale.country }}" autocomplete="off"\n                placeholder="{{ content(\'creditcard.cardNumber\') }}"\n                ng-pattern="/.*/"\n                pattern="[0-9]*"\n                scroll-to-top\n                data-error-text="{{content(debitCardFlow ? \'validation.validDebitCard\' : \'validation.validCreditCard\')}}" xo-error-tooltip />\n\n        <xo-tooltip trigger="#cc" ng-if="allowedCardsTooltip" show-event="keyup">\n            <div class="tip tipDesc tipCreditCard">\n                {{ !debitCardFlow ? content(\'creditcard.acceptableCards\') : content(\'creditcard.acceptDebitCardOnly\') }}\n                <span class="acceptedCards" ng-if="!debitCardFlow">\n                    {{supportedCardNamesCommaSeparated}}\n                </span>\n            </div>\n        </xo-tooltip>\n\n        <span ng-if="card.type" class="creditCard {{card.type}} {{card.subType}}" aria-label="{{card.type}}" id="creditCard" role="img">{{card.type}}</span>\n    </div>\n\n    <!-- Issue no and start date for maestro cards -->\n    <div id="cardIssueInfo" data-cardspecific="true" class="fieldGroup clearfix" ng-if="flag(\'fields.issue\')">\n        <div>\n            <div class="startDate inputField invisiField half confidential">\n                <label class="starts nolap" for="startmonth">{{ content(\'creditcard.startDate\') }}</label>\n\n                <xo-card-issue-date issue-month="card.start_month" issue-year="card.start_year"></xo-card-issue-date>\n\n            </div>\n\n            <div class="issueNo inputField half last-child confidential last-child">\n                <input id="issueNo" name="issueNo" placeholder="{{content(\'creditcard.issueNoLabel\')}}" type="text" ng-model="card.issue_number" autocapitalize="off" autocomplete="off" maxlength="2" ng-pattern="/^[0-9]+$/" pattern="[0-9]*"/>\n\n                <xo-tooltip trigger="#issueNo">\n                    <div class="tip tipDesc tipIssueNo">\n                        {{ content(\'creditcard.issueNoLabelToolTip\') }}\n                    </div>\n                </xo-tooltip>\n            </div>\n        </div>\n    </div>\n\n    <div class="expiration confidential" id="expiration" ng-if="expiryShown() || cvvShown()">\n        <xo-card-expiry ng-if="expiryShown()" expiry-month="card.expiry_month" expiry-year="card.expiry_year"></xo-card-expiry>\n        <xo-cvv ng-if="cvvShown()" card="card" show-label="true"></xo-cvv>\n    </div>\n    \n    <!-- DOB fields for Country specific cards -->\n    <xo-dob-card-input ng-if="flag(\'fields.dob\')" user="user"></xo-dob-card-input>\n</div>\n';
    },
    "./components/xo-ui-components/src/user-assist-banner/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoCardLoader = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/xo-ui-components/src/user-assist-banner/styles.less");
        var _template = __webpack_require__("./components/xo-ui-components/src/user-assist-banner/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _popupHandler = __webpack_require__("./components/xo-ui-components/src/user-assist-banner/popupHandler.js");
        var _popupHandler2 = _interopRequireDefault(_popupHandler);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoCardLoader = exports.$xoCardLoader = _squid.$Component.extend("xoAssistBanner", {
            tag: "xo-assist-banner",
            template: _template2["default"],
            props: {
                header: {
                    type: "var"
                },
                body: {
                    type: "var"
                },
                hideHighlight: {
                    type: "var"
                }
            },
            lifecycle: {
                enter: function enter() {
                    _logger.$logger.info("xo-assist-banner_enter");
                }
            },
            controller: function controller($scope, $rootScope, $window, $DeviceInfo, $state, $locale) {
                _logger.$logger.info("xo-assist-banner:controller");
                $scope.token = $rootScope.token;
                $scope.showFeedback = function() {
                    return !$DeviceInfo.isDevice();
                };
                $scope.showOL = function showOL(event) {
                    event.preventDefault();
                    var placeholder = "main:ec:hermes";
                    var page = $state.current.get("trackingData.buzname.fullpage.pagename2", "unknown").replace("%", placeholder);
                    var data = {
                        opVars: {
                            rlogId: $window.meta.rlogId || "",
                            page: page || window.location.hash,
                            csci: "Unknown",
                            calc: $window.meta.correlationId,
                            custId: "Unknown",
                            merchantId: "Unknown",
                            token: $scope.token || "Unknown"
                        },
                        locale: {
                            country: $locale.country,
                            languageCode: $locale.lang + "_" + $locale.country
                        }
                    };
                    (0, _popupHandler2["default"])(data);
                };
            }
        });
        angular.value("$xoCardLoader", $xoCardLoader);
        _squid.$Component;
        _logger.$logger;
    },
    "./components/xo-ui-components/src/user-assist-banner/styles.less": "./css/app.less",
    "./components/xo-ui-components/src/user-assist-banner/template.html": function(module, exports) {
        module.exports = '<div content id="assist-banner-wrapper">\n    <div ng-if="!hideHighlight" class="banner-highlight-bar"></div>\n    <div class="banner-header">\n        <p>{{header}}</p>\n    </div>\n    <div class="banner-body">\n        <p ng-bind-html="body"></p>\n    </div>\n    <div class="banner-feedback" ng-if="showFeedback()">\n         <span>{{ content(\'common.haveFeedback\') }}</span>\n         <a href="#" id="footer_sfLink" ng-click="showOL($event)">{{ content(\'common.letUsKnow\') }}</a>\n    </div>\n</div>\n';
    },
    "./components/xo-ui-components/src/user-assist-banner/popupHandler.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
            var _doc = document;
            var _w = window;
            var _tm = new Date().getTime();
            var _sH = screen.height;
            var _ht = escape(_w.location.href);
            var _hr = escape(_doc.referrer);
            var _sW = screen.width;
            function popUp(opinionlabURL) {
                _w.open(opinionlabURL, "comments", "width=535,height=192" + ",screenX=" + (_sW - 535) / 2 + ",screenY=" + (_sH - 192) / 2 + ",top=" + (_sH - 192) / 2 + ",left=" + (_sW - 535) / 2 + ",resizable=yes" + ",copyhistory=yes" + ",scrollbars=no");
            }
            function updateCustomVars(data) {
                var opVars = data.opVars;
                var locale = data.locale;
                _ht = "https://" + locale.country + ".paypal.com/" + locale.languageCode + "/00/" + escape(opVars.page.replace(/\s|\//g, "_")) + ".page";
                var customVar = (opVars.rlogId || opVars.calc) + "|" + opVars.csci + "|" + opVars.page + "|" + locale.country + "|" + locale.languageCode + "|" + opVars.custId + "|" + opVars.merchantId + "|" + opVars.token + "|" + "Unknown";
                return customVar;
            }
            function _fC(_u) {
                var _sp = "%3A\\/\\/";
                var _rp = "%3A//";
                var _aT = _sp + ",\\/,\\.,-,_," + _rp + ",%2F,%2E,%2D,%5F";
                var _aA = _aT.split(",");
                for (var i = 0; i < 5; i++) {
                    eval("_u=_u.replace(/" + _aA[i] + "/g,_aA[i+5])");
                }
                return _u;
            }
            return function(locale) {
                var custom_var = updateCustomVars(locale);
                var opinionlabURL = "https://secure.opinionlab.com/ccc01/comment_card.asp?" + "time1=" + _tm + "&time2=" + new Date().getTime() + "&prev=" + _fC(_hr) + "&referer=" + _fC(_ht) + "&height=" + _sH + "&width=" + _sW + "&custom_var=" + custom_var;
                popUp(opinionlabURL);
            };
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./components/xo-wallet-components/src/add-card/selectcard/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/xo-wallet-components/src/add-card/selectcard/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("xo-add-card.selectcard.route", [ "xo-add-card.selectcard.directive" ]).factory("$SelectCardRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("SelectCardRoute", {
                        name: "selectCard",
                        directive: "xo-select-card",
                        titleContent: "asideHeader.selectCard",
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-wallet-components/src/add-card/selectcard", "components/xo-wallet-components/src/add-card/selectcard/route.js");
    },
    "./components/xo-wallet-components/src/add-card/selectcard/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-card/selectcard/template.html") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, template) {
            return angular.module("xo-add-card.selectcard.directive", []).directive("xoSelectCard", function() {
                return {
                    template: template,
                    scope: {
                        parentCallbacks: "=",
                        token: "=",
                        promotion: "="
                    },
                    controller: function controller($scope, $populate, $CheckoutSessionModel) {
                        $populate($scope, {
                            checkoutSession: $CheckoutSessionModel.instance($scope.token)
                        }).then(function() {
                            $scope.selectCardType = function(type) {
                                $scope.parentCallbacks.cardTypeSelected(type);
                            };
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-card/selectcard/template.html": function(module, exports) {
        module.exports = '<div id="selectCardType">\n\t<xo-aside-header hdrtype=\'tall\' heading=\'asideHeader.selectCard\' sub-head=\'asideHeader.fundingInstrumentsSubHead\' back-url="checkout.review.sidebar.wallet"></xo-aside-header>\n\n\t<div class="asideContent fundingCards" id="selectFundingType" content>\n\t\t<div class="allCards">\n\t\t\t<ul class="allFundingInstrumentsList clearfix">\n\n\t\t\t\t<li class="fundingsource fs-item">\n\t\t\t\t\t<a class="source" role="button" ng-click="selectCardType(\'cc\')">\n\t\t\t\t\t\t<span class="fsIcon"></span>\n\t\t\t\t\t\t<p class="fsdetails">\n\t\t\t\t\t\t\t<span class="name">Debit or Credit Card</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<span class="forwardIcon"/>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t\t<li class="fundingsource fs-item">\n\t\t\t\t\t<a class="source" role="button" ng-click="selectCardType(\'plcc\')">\n\t\t\t\t\t\t<img class="plccIcon" ng-src="{{promotion.logoUrl}}"/>\n\t\t\t\t\t\t<p class="fsdetails">\n\t\t\t\t\t\t\t<span class="name">{{content(\'addCard.plccAddCard\', { merchant: promotion.name})}}</span>\n\t\t\t\t\t\t\t<span class="secondary">{{content(\'addCard.plccSelectIncentive\')}}</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<span class="forwardIcon"/>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n</div>\n';
    },
    "./components/xo-wallet-components/src/add-card/addbilling/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-wallet-components/src/add-card/addbilling/directive.js"), __webpack_require__("./components/xo-address-components/src/add-address/directive.js"), __webpack_require__("./components/xo-address-components/src/address-normalization/route.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-add-card.addbilling.route", [ "squid", "xo-add-card.addbilling.directive", "xo-add-address.directive", "xo-address-normalization.route" ]).factory("$AddBillingRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("AddBillingRoute", {
                        name: "addBilling",
                        directive: "xo-add-billing",
                        titleContent: "addBillingAddress.title",
                        query: [ "flow_type" ],
                        trackingData: {
                            fptiState: "edit_billing"
                        },
                        loginRequired: true,
                        children: [ {
                            name: "$AddressNormalizationRoute",
                            attributes: {
                                id: "token",
                                sidebar: "sidebar",
                                address: "address",
                                "done-fn": "uponNormalization"
                            }
                        } ]
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-wallet-components/src/add-card/addbilling", "components/xo-wallet-components/src/add-card/addbilling/route.js");
    },
    "./components/xo-wallet-components/src/add-card/addbilling/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/module.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-card/addbilling/template.html"), __webpack_require__("./components/angular-ui-utils/ui-utils.min.js"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/fi/index.js"), __webpack_require__("./components/xo-models/src/address/index.js"), __webpack_require__("./components/xo-address-components/src/add-address/directive.js"), __webpack_require__("./components/xo-page-components/src/aside-header/directive.js"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js"), __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, module, template) {
            return module("xo-add-card.addbilling.directive", [ "squid", "xomodel.checkout", "xomodel.fi", "xomodel.address", "xo-add-address.directive", "xo-aside-header.directive", "xo-error-tooltip.directive", "ui.validate", "xo-accessibility.directive" ]).directive("xoAddBilling", function() {
                return {
                    template: template,
                    scope: {
                        auth: "=",
                        token: "=",
                        doneFn: "=",
                        parentCallbacks: "=",
                        sidebar: "=",
                        showmeftsection: "=",
                        hideparenthead: "=",
                        billingaddressupdated: "=",
                        prefillAddress: "="
                    },
                    controller: function controller($scope, $populate, $stateParams, $BillingAddressesModel, $BillingAddressModel, $PrefillAddressModel, $feature, $state, $element, $config, $locale, $timeout, $FlowEligibilityModel, $meta) {
                        var country = $locale.getCountryCodeISO();
                        $scope.billing = true;
                        $scope.normalize = $feature("addressNormalization");
                        $scope.country = country;
                        var $el = $($element);
                        if ($scope.showmeftsection) {
                            $scope.showmeftsection.toggle = false;
                        }
                        if ($scope.hideparenthead) {
                            $scope.hideparenthead.toggle = true;
                        }
                        function isUserInputtedAddress(address) {
                            return address.id === "0";
                        }
                        function handleValidation(res) {
                            if (res && res.fields && res.fields.length) {
                                res.fields.forEach(function(field) {
                                    if (field.field) {
                                        var $field = $($el.find('[name="' + field.field + '"]'));
                                        if ($field.length === 0 && field.field === "zip") {
                                            $field = $($el.find('[ng-model="address.postal_code"], [ng-model="zipCode"]'));
                                        }
                                        $field.addClass("backendError");
                                        $field.attr("aria-invalid", true);
                                    }
                                });
                            }
                            $el.find("form").find(".backendError, .ng-invalid").first().focus();
                        }
                        var prefilledAddress = $scope.prefillAddress && $scope.prefillAddress.address;
                        if (prefilledAddress) {
                            $scope.prefilled = true;
                        }
                        $scope.address = $scope.address || prefilledAddress || {
                            country: country
                        };
                        var editFlow = function editFlow() {
                            _logger.$logger.info("xo-billing_editFlow_check", {
                                flow_type: $stateParams.flow_type
                            });
                            if ($stateParams.flow_type === "edit") {
                                $scope.address = $scope.billingAddresses.addresses[0];
                            }
                        };
                        $populate($scope, {
                            billingAddresses: $BillingAddressesModel.instance(),
                            flowEligibility: $FlowEligibilityModel.instance($scope.token).retrieve({
                                params: {
                                    geolocation: $meta.geolocation,
                                    localeCountry: $locale.country
                                }
                            })
                        }).then(function() {
                            editFlow();
                            $scope.debitCardFlow = angular.isArray($scope.flowEligibility.paymentCardProductClass) && $scope.flowEligibility.paymentCardProductClass.length === 1 && $scope.flowEligibility.paymentCardProductClass[0] === "DEBIT";
                            $scope.cancelFn = function() {
                                $scope.done();
                            };
                            $scope.done = function(target) {
                                var el = $(".tokenization #sidepageAddCard");
                                if (el) {
                                    el.removeClass("slideLeft");
                                }
                                target = target || "^.addCard";
                                $state.go(target);
                            };
                            $scope.onSubmit = function() {
                                $scope.updateAddress();
                            };
                            $scope.prefill = function() {
                                $scope.address.country = $scope.country;
                                $scope.prefillAddress = new $PrefillAddressModel({
                                    id: $scope.token,
                                    address: $scope.address
                                });
                                $scope.prefillAddress.save({
                                    data: $scope.prefillAddress,
                                    success: function success(result) {
                                        $scope.address = result;
                                        $scope.prefilled = true;
                                        $scope.showAddressFields = true;
                                        $timeout(function() {
                                            var value = $scope.address.state;
                                            var $option = $el.find('[value="' + value + '"]');
                                            $option.prop("selected", "selected");
                                            $option.trigger("change");
                                            value = $option.attr("label");
                                        }, 1e3);
                                    }
                                });
                            };
                            $scope.updateAddress = function() {
                                var newBilling = new $BillingAddressModel({
                                    line1: $scope.address.line1,
                                    line2: $scope.address.line2,
                                    city: $scope.address.city,
                                    state: $scope.address.state,
                                    postal_code: $scope.address.postal_code,
                                    normalization_status: $scope.address.normalization_status,
                                    country: country,
                                    id: "0"
                                });
                                newBilling.save({
                                    data: $scope.billingAddress,
                                    success: function success() {
                                        if ($scope.normalize) {
                                            $scope.billing = false;
                                            $scope.address.full_address = newBilling.full_address;
                                            $state.go(".addressNormalization");
                                        } else {
                                            $scope.updateBillingAddressAndReturn("^.addCard", newBilling);
                                        }
                                    },
                                    validation: function validation(res) {
                                        handleValidation(res);
                                    }
                                });
                            };
                            $scope.uponNormalization = function(normalizedAddress, isBack) {
                                if (isBack) {
                                    $scope.billing = true;
                                    $state.go("^");
                                } else {
                                    $scope.updateBillingAddressAndReturn("^.^.addCard", normalizedAddress);
                                }
                            };
                            $scope.updateBillingAddressAndReturn = function(target, address) {
                                var newBillingAddress;
                                if (address && address instanceof $BillingAddressModel) {
                                    newBillingAddress = address;
                                } else {
                                    newBillingAddress = new $BillingAddressModel({
                                        line1: address.line1,
                                        line2: address.line2,
                                        city: address.city,
                                        state: address.state,
                                        postal_code: address.postal_code,
                                        normalization_status: address.normalization_status,
                                        country: address.country || $scope.country,
                                        full_address: address.full_address || $scope.address.full_address,
                                        id: "0"
                                    });
                                }
                                var addresses = $scope.billingAddresses.addresses;
                                if (!isUserInputtedAddress(addresses[0])) {
                                    addresses.unshift(newBillingAddress);
                                } else {
                                    addresses[0] = newBillingAddress;
                                }
                                $scope.billingaddressupdated.value = true;
                                $scope.done(target);
                            };
                            var el = $(".tokenization #sidepageAddCard");
                            if (el) {
                                el.addClass("slideLeft");
                            }
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        _logger.$logger;
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-card/addbilling/template.html": function(module, exports) {
        module.exports = '<div id="addBillingAddress" ng-if="billing" modal-box="address" modal-cancel="cancelFn()">\n    <xo-aside-header heading=\'asideHeader.addBillingAddress\' ng-if="debitCardFlow"\n                     hidex="true"\n                     header-left-link="done"\n                     header-left="common.back"\n                     header-left-icon="true"></xo-aside-header>\n\n    <xo-aside-header back-url="^.addCard" heading="asideHeader.addBillingAddress" ng-if="sidebar"></xo-aside-header>\n\n    <h1 class="gamma addBillingTitle" ng-if="!sidebar && !debitCardFlow">{{ content(\'addBillingAddress.title\') }}</h1>\n\n    <form id="billingAddressForm" name="billingAddressForm" class="asideView addressForm" content form-autofocus novalidate>\n        <div class="trayInner container">\n            <div class="clearfix">\n                <xo-add-address country="country" address="address" token="token"></xo-add-address>\n            </div>\n\n            <div class="buttons clearfix">\n                <a ng-hide="sidebar || debitCardFlow" id="backButton" ui-sref="^.addCard" class="btn btn-secondary" role="button">{{ content(\'common.back\') }}</a>\n                <input ng-if="country===\'BR\' && !prefilled" type="submit" id="proceedButton" value="{{ content(\'common.continueLabel\') }}" class="btn" ng-class="{full:sidebar}" validate-submit="prefill()" />\n                <input track-submit ng-if="country!==\'BR\' || prefilled" type="submit" id="proceedButton" value="{{ content(\'common.save\') }}" class="btn" ng-class="{full:sidebar}" validate-submit="onSubmit()" />\n            </div>\n        </div>\n    </form>\n</div>\n<div ui-view></div>\n';
    },
    "./components/xo-address-components/src/add-address/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            exports.$xoAddAddressComponent = undefined;
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _angular2 = _interopRequireDefault(_angular);
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _template = __webpack_require__("./components/xo-address-components/src/add-address/template.html");
            var _template2 = _interopRequireDefault(_template);
            __webpack_require__("./components/jquery/dist/jquery.min.js");
            __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-address-components/src/add-address/template.html");
            __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
            __webpack_require__("./components/xo-ui-components/src/dropdown-multiline/directive.js");
            __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js");
            __webpack_require__("./components/xo-form-components/src/name-input/directive.js");
            __webpack_require__("./components/xo-models/src/address/index.js");
            __webpack_require__("./components/xo-form-components/src/zipcode/directive.js");
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            var $xoAddAddressComponent = exports.$xoAddAddressComponent = _squid.$Component.extend("$xoAddAddressComponent", {
                tag: "xo-add-address",
                template: _template2["default"],
                props: {
                    address: {
                        type: "var",
                        required: false
                    },
                    isShipping: {
                        type: "var",
                        required: false
                    },
                    country: {
                        type: "var",
                        required: false
                    },
                    metadata: {
                        type: "str",
                        required: false
                    },
                    hideButtonHandler: {
                        type: "var",
                        required: false
                    },
                    hideCep: {
                        type: "var",
                        required: false
                    },
                    hideName: {
                        type: "var",
                        required: false
                    },
                    triggerZipCodeBlur: {
                        type: "var",
                        required: false
                    },
                    triggerZipCodeKeyPress: {
                        type: "var",
                        required: false
                    },
                    renderBillingAddCheckbox: {
                        type: "var",
                        required: false
                    }
                },
                controller: function controller($scope, $populate, $rootScope, $locale, $window, $feature, $PrefillAddressModel, $MetadataModel) {
                    var country = $scope.country || $scope.address && $scope.address.country;
                    $scope.country = country;
                    $scope.locale = $locale;
                    $scope.metadata = $MetadataModel.create();
                    $scope.$watch("country", function setMetadata() {
                        $scope.metadata.choose($scope.country, $scope.locale.lang);
                    });
                    $scope.$on("contentChange", function setMetadata() {
                        $scope.metadata.choose($scope.country, $scope.locale.lang);
                    });
                    $scope.addPrefix = function(baseId) {
                        return ($scope.isShipping ? "shipping" : "billing") + baseId.replace(/^(.)/, function(match) {
                            return match[0].toUpperCase();
                        });
                    };
                    $scope.normalizeCountry = function(countryCode) {
                        return $feature("AddressFormat", countryCode, countryCode) || countryCode;
                    };
                    $scope.isAddPreferred = $feature("preferredShipping", false, $scope.country) && $scope.isShipping;
                    $scope.isAddressLookupEnabled = $feature("addressLookup", false, $scope.country);
                    var sortStates = $feature("sortStatesForAddress", false, $scope.country);
                    $scope.isShowLookupFields = $scope.isAddressLookupEnabled;
                    if ($scope.isShowLookupFields) {
                        if ($scope.hideButtonHandler) {
                            $scope.hideButtonHandler(true);
                        } else {
                            $scope.isShowLookupFields = false;
                        }
                    }
                    function getSortedStateList() {
                        var states = $locale.content.get(sortStates, {});
                        var statesList = [];
                        _angular2["default"].forEach(states, function(key, value) {
                            statesList.push({
                                code: value,
                                sname: key
                            });
                        });
                        statesList.sort(function(a, b) {
                            return a.sname.localeCompare(b.sname);
                        });
                        $scope.sortedStatesList = statesList;
                    }
                    if (sortStates) {
                        getSortedStateList();
                    }
                    $scope.formatZip = function() {
                        var unformatted = $scope.address.postal_code.replace(/[^0-9]/gi, "");
                        var formatted = [ [ "", unformatted.slice(0, 3) ], [ "-", unformatted.slice(3) ] ].map(function(x) {
                            return x[1] && x[0] + x[1] || "";
                        }).join("");
                        $scope.address.postal_code = formatted;
                    };
                    function getAddress(address) {
                        var COMMA = ", ";
                        var SPACE = " ";
                        var line1, line2;
                        function prefix(str, prefixStr) {
                            if (str) {
                                return (prefixStr ? prefixStr : "") + str;
                            }
                            return "";
                        }
                        if (!address.deliveryAddresses || _angular2["default"].isArray(address.deliveryAddresses) && address.deliveryAddresses.length === 0) {
                            return;
                        }
                        var array = address.deliveryAddresses;
                        if (array.length > 1) {
                            line2 = array.pop();
                        }
                        line1 = array.join(COMMA);
                        var displayLine1 = line1 + prefix(line2, COMMA);
                        var displayLine2 = prefix(address.city) + prefix(address.state, COMMA) + prefix(address.postal_code, SPACE);
                        var displayLine3 = prefix(address.country);
                        return {
                            line1: line1,
                            line2: line2,
                            city: address.city,
                            state: address.state,
                            postal_code: address.postal_code,
                            country: address.country,
                            displayLine1: displayLine1,
                            displayLine2: displayLine2,
                            displayLine3: displayLine3,
                            dropDownAddress: displayLine1 + prefix(displayLine2, " \\n ") + prefix(displayLine3, " \\n ")
                        };
                    }
                    function populateAddressFormFields(address) {
                        $scope.address.line1 = address.line1;
                        $scope.address.line2 = address.line2;
                        $scope.address.city = address.city;
                        $scope.address.state = address.state;
                        $scope.address.postal_code = address.postal_code;
                        $scope.address.neighborhood = address.neighborhood;
                    }
                    function populateErrorMessage() {
                        var messages = [];
                        messages.push($scope.locale.content.get("addressBook.lookupError"));
                        $scope.lookupFailureMessage = {
                            msgs: messages,
                            type: "warning"
                        };
                        $scope.isShowLookupFields = false;
                        $scope.isLookupFailure = true;
                    }
                    function processLookupResult(list) {
                        if (list.length > 1) {
                            $scope.isLookupSuccess = true;
                            $scope.isShowLookupDropDown = true;
                            $scope.lookupAddressList = list.map(function(addr) {
                                return getAddress(addr);
                            });
                        } else if (list.length === 1) {
                            $scope.isLookupSuccess = true;
                            $scope.isShowLookupDropDown = false;
                            var address = getAddress(list[0]);
                            $scope.singleAddress = address;
                            populateAddressFormFields(address);
                        } else {
                            populateErrorMessage();
                        }
                    }
                    if ($scope.address) {
                        $scope.lastPrefilledZip = $scope.address.postal_code;
                    }
                    $scope.prefill = function() {
                        var cepPattern = /^(\d{5}-\d{3}|\d{5}|\d{8})$/;
                        var first_name;
                        var last_name;
                        if ($scope.lastPrefilledZip === $scope.address.postal_code || !cepPattern.test($scope.address.postal_code)) {
                            return;
                        }
                        if ($scope.isShipping) {
                            first_name = $scope.address.first_name;
                            last_name = $scope.address.last_name;
                        }
                        $scope.prefillAddress = new $PrefillAddressModel({
                            id: $scope.token,
                            address: {
                                country: $scope.address.country,
                                postal_code: $scope.address.postal_code
                            }
                        });
                        $scope.prefillAddress.save({
                            data: $scope.prefillAddress,
                            success: function success(result) {
                                if (result) {
                                    populateAddressFormFields(result);
                                    $scope.lastPrefilledZip = $scope.address.postal_code;
                                    if ($scope.isShipping) {
                                        $scope.address.first_name = first_name;
                                        $scope.address.last_name = last_name;
                                    }
                                }
                            }
                        });
                    };
                    $scope.findAddress = function() {
                        $scope.lookupAddress = $PrefillAddressModel.create($scope.token, {
                            address: {
                                country: $scope.address.country,
                                postal_code: $scope.address.postal_code,
                                house_number: $scope.address.house_number,
                                building_name: $scope.address.building_name
                            }
                        });
                        if (document.querySelector("#lookupZip.ng-invalid")) {
                            document.querySelector("#addressLookupFields").classList.add("validated");
                        } else {
                            $scope.isLookupProcessing = true;
                            $scope.lookupAddress.save({
                                data: $scope.lookupAddress,
                                silent: true,
                                success: function success(result) {
                                    processLookupResult(result);
                                    $scope.hideButtonHandler(false);
                                },
                                contingencies: {
                                    INTERNAL_ERROR: populateErrorMessage
                                }
                            });
                        }
                    };
                    $scope.changeAddressDropDown = function() {
                        populateAddressFormFields($scope.address.selectedAddress);
                    };
                    $scope.showFullAddress = function() {
                        $scope.isShowLookupFields = false;
                        $scope.hideButtonHandler(false);
                    };
                    var stateNamesInGroup = [];
                    $scope.retrieveStateNamesInGroup = function(groups) {
                        if (stateNamesInGroup.length) {
                            return stateNamesInGroup;
                        }
                        var content = $locale.content;
                        _angular2["default"].forEach(groups, function(group) {
                            var groupName = content.common[group];
                            var statesList = content[group];
                            _angular2["default"].forEach(statesList, function(value, key) {
                                stateNamesInGroup.push({
                                    key: key,
                                    value: value,
                                    group: groupName
                                });
                            });
                        });
                        return stateNamesInGroup;
                    };
                    $scope.zipCodeBlur = function() {
                        if ($scope.triggerZipCodeBlur) {
                            $rootScope.$emit("zip_code_blur");
                        }
                    };
                    $scope.zipCodeKeyPress = function(event) {
                        if ($scope.triggerZipCodeKeyPress) {
                            $rootScope.$emit("zip_code_keypress", {
                                event: event
                            });
                        }
                    };
                }
            });
            _angular2["default"].module("xo-add-address.directive", [ "squid", "xo-dropdown.directive", "xo-dropdown-multiline.directive", "xo-error-tooltip.directive", "xo-name-input.directive", "xomodel.address", "xo-zipcode.directive" ]).directive("discriminate", function($timeout, $parse) {
                return {
                    restrict: "A",
                    link: function link(scope, element, attrs) {
                        $timeout(function() {
                            var discriminatorFn = $parse(attrs.discriminate);
                            $(element).find("[for],[id],[name]").each(function() {
                                var baseFor = $(this).attr("for");
                                var baseId = $(this).attr("id");
                                var baseName = $(this).attr("name");
                                if (baseFor) {
                                    $(this).attr("for", discriminatorFn(scope, {
                                        baseId: baseFor
                                    }));
                                }
                                if (baseId) {
                                    $(this).attr("id", discriminatorFn(scope, {
                                        baseId: baseId
                                    }));
                                }
                                if (baseName) {
                                    $(this).attr("name", discriminatorFn(scope, {
                                        baseId: baseName
                                    }));
                                }
                            });
                        });
                    }
                };
            });
            _angular2["default"].value("$xoAddAddressComponent", $xoAddAddressComponent);
            _squid.$Component;
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-address-components/src/add-address/template.html": function(module, exports) {
        module.exports = '<div id="addressForm" class="addressForm" content ng-class="country">\n\n    <xo-name-input user="address" country="{{country}}" ng-if="isShipping && !hideName"></xo-name-input>\n\n    <div ng-switch="normalizeCountry(country)" discriminate="addPrefix(baseId)" class="addressGroup clearfix">\n\n        <div ng-switch-when="BR">\n            <xo-zipcode id="zipcode" country="BR" zip-code="address.postal_code" zip-label="{{content(\'common.cep\')}}" zip-error-key="common.valueInvalid" done-fn="prefill" ng-if="!hideCep"></xo-zipcode>\n\n            <div name="addressFields" id="addressFields">\n                <div class="streetName clearfix">\n                    <div class="inputField confidential line1" floating-label>\n                        <input type="text" name="line1" id="line1" ng-model="address.line1" value="" maxlength="60" autocapitalize="off" aria-required="true" autocomplete="off" data-error-key="common.valueInvalid" xo-error-tooltip required />\n                        <label for="line1" id="line1Label">{{ content(\'common.streetAddress\') }}</label>\n                    </div>\n                    <div class="inputField streetNumber" floating-label>\n                        <input type="text" name="streetNumber" id="streetNumber" ng-pattern="/^(?=.*[0-9])([a-zA-Z0-9]+)$/" ng-model="address.streetNumber" value="" maxlength="6" ariaRequired="true" autocomplete="off" data-error-key="common.valueInvalid" xo-error-tooltip required />\n                        <label for="streetNumber" id="streetNumberLabel">{{ content(\'common.streetNumber\') }}</label>\n                    </div>\n                </div>\n                <div class="inputField confidential line2" floating-label>\n                    <input type="text" name="line2" id="line2" ng-model="address.line2" value="" maxlength="50" autocapitalize="off" autocomplete="off" />\n                    <label for="line2" id="line2Label">{{ content(\'common.streetAddress2\') }}</label>\n                </div>\n                <div class="inputField confidential neighborhood" floating-label>\n                    <input type="text" name="neighborhood" id="neighborhood" ng-model="address.neighborhood" value="" maxlength="50" autocapitalize="off" autocomplete="off" ariaRequired="true" data-error-key="common.valueInvalid" xo-error-tooltip required />\n                    <label for="neighborhood" id="neighborhoodLabel">{{ content(\'common.neighborhood\') }}</label>\n                </div>\n                <div class="inputField confidential clearfix">\n                    <div class="inputField confidential city" floating-label>\n                        <input type="text" name="city" id="city" maxLength="100" ng-model="address.city" value="" autocapitalize="off" aria-required="true" autocomplete="off"  data-error-key="common.valueInvalid" xo-error-tooltip required />\n                        <label for="city" id="cityLabel">{{ content(\'common.onlyCity\') }}</label>\n                    </div>\n                    <div class="dropdown confidential state nullable inputField" floating-label-dropdown>\n                        <select xo-dropdown name="state" ng-options="state.code as state.sname for state in sortedStatesList" ng-model="address.state" id="state" aria-labelledby="stateLabel" aria-required="true" required >\n                            <option value="">{{ content(\'common.otherState\') }}</option>\n                        </select>\n                        <label for="state" id="stateLabel">{{ content(\'common.otherState\') }}</label>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div ng-switch-when="GB">\n            <!-- start: Show all the fields for Add Address if isShowLookupFields is false -->\n            <div ng-if="!isShowLookupFields">\n                <div ng-if="isAddressLookupEnabled">\n                    <div ng-if="isShipping" class="lookupHeading">\n                        <span class="lookupTitle">{{ content(\'addressBook.address\') }}</span>\n                    </div>\n                    <div ng-show="isLookupFailure" class="lookupFailureMsg">\n                        <xo-message message="lookupFailureMessage"></xo-message>\n                    </div>\n                </div>\n                <div class="inputField confidential line1" floating-label>\n                    <input type="text" name="line1" id="line1" ng-model="address.line1" value="" maxlength="50" autocapitalize="off" aria-required="true" autocomplete="off"  data-error-key="common.valueInvalid" xo-error-tooltip required />\n                    <label for="line1" id="line1Label">{{ content(\'common.streetAddress\') }}</label>\n                </div>\n                <div class="inputField confidential line2" floating-label>\n                    <input type="text" name="line2" id="line2" ng-model="address.line2" value="" maxlength="50" autocapitalize="off" autocomplete="off" data-error-key="common.valueInvalid" />\n                    <label for="line2" id="line2Label">{{ content(\'common.streetAddress2\') }}</label>\n                </div>\n                <div class="inputField confidential city" floating-label>\n                    <input type="text" name="city" id="city" maxLength="100" ng-model="address.city" value="" autocapitalize="off" aria-required="true" autocomplete="off"  data-error-key="common.valueInvalid" xo-error-tooltip required />\n                    <label for="city" id="cityLabel">{{ content(\'common.onlyCity\') }}</label>\n                </div>\n                <div class="stateZip clearfix">\n                    <div class="dropdown confidential state inputField" floating-label-dropdown>\n                        <select xo-dropdown name="state" ng-model="address.state" id="state" aria-labelledby="stateLabel"\n                                aria-required="true"\n                                ng-options="c.key as c.value group by c.group for c in retrieveStateNamesInGroup([\'england\', \'northernIreland\', \'scotland\', \'wales\', \'ukOffshoreDependencies\'])">\n                            <option value="">{{ content(\'common.countyOptional\') }}</option>\n                        </select>\n                        <label for="state" id="stateLabel">{{ content(\'common.countyOptional\') }}</label>\n                    </div>\n                    <div class="inputField confidential postalCode" floating-label>\n\n                        <input type="text" name="postalCode" id="postalCode" ng-model="address.postal_code" value=""\n                               autocapitalize="off" aria-required="true" ng-blur="zipCodeBlur()"  ng-keypress="zipCodeKeyPress()" autocomplete="off" data-error-key="validation.validZipCode"\n                               xo-validation=\'{\n                                    "validator": "validZip",\n                                    "options": {\n                                        "country": "GB"\n                                    }\n                                }\'\n                               xo-error-tooltip required />\n                        <label for="postalCode" id="postalCodeLabel">{{ content(\'common.zip\') }}</label>\n                    </div>\n                </div>\n            </div>\n            <!-- end: Show all the fields -->\n            <!-- start: Show only the address lookup fields -->\n            <div ng-if="isShowLookupFields" id="addressLookup" class="addressLookup">\n                <div ng-hide="isLookupSuccess" id="addressLookupFields"> <!-- class="validated" -->\n                    <div class="lookupHeading">\n                        <span class="lookupTitle">{{ content(\'addBillingAddress.lookupTitle\') }}</span>\n                        <a class="editAddress" ng-click="showFullAddress()">{{content(\'addressBook.enterFullAddress\')}}</a>\n                    </div>\n                    <div class="fieldGroup">\n                        <div class="inputField confidential lookupZip">\n                            <input type="text" name="lookupZip" id="lookupZip" ng-model="address.postal_code" value=""\n                                   autocapitalize="off" aria-required="true" autocomplete="off"\n                                   data-error-key="validation.validZipCode"\n                                   xo-validation=\'{\n                                     "validator": "validZip",\n                                     "options": {\n                                       "country": "GB"\n                                     }\n                                   }\'\n                                   ng-disabled="isLookupProcessing" xo-error-tooltip required />\n                            <label for="lookupZip" id="postalCodeLabel">{{ content(\'common.zip\') }}</label>\n                        </div>\n                    </div>\n                    <div class="inputField confidential houseNo" floating-label>\n                        <input type="text" id="houseNo" ng-model="address.house_number"\n                               value="" maxlength="50"\n                               autocapitalize="off" aria-required="false" autocomplete="off"\n                               data-error-key="common.valueInvalid" xo-error-tooltip\n                               ng-disabled="isLookupProcessing" />\n                        <label for="houseNo" id="houseNoLabel">{{ content(\'common.houseBldgNo\')}}\n                        </label>\n                    </div>\n                    <div class="inputField confidential buildingName" floating-label>\n                        <input type="text" id="buildingName" ng-model="address.building_name"\n                               value="" maxlength="50" autocapitalize="off" autocomplete="off"\n                               data-error-key="common.valueInvalid"\n                               ng-disabled="isLookupProcessing" />\n                        <label for="buildingName" id="buildingNameLabel"\n                            {{ content(\'common.houseBldgName\') }}\n                        </label>\n                    </div>\n                    <button track-submit ng-click="findAddress()" id="findAddressButton" class="btn full continue"\n                            ng-class="{processing: isLookupProcessing}">\n                        <div ng-show="isLookupProcessing" class="spinner">\n                            <p class="loader" ></p>\n                        </div>\n                        <div ng-hide="isLookupProcessing" class="text">{{ content(\'addressBook.findAddress\') }}</div>\n                    </button>\n                </div>\n                <div ng-show="isLookupSuccess">\n                    <div class="lookupHeading">\n                        <span class="lookupTitle">{{ content(\'addressBook.address\') }}</span>\n                        <a class="editAddress"\n                           ng-click="showFullAddress()">{{ content(\'common.change\') }}</a>\n                    </div>\n                    <div ng-if="isShowLookupDropDown" id="lookedupDropDown"\n                         class="dropdown confidential clearfix">\n\n                        <select xo-dropdown-multiline ng-model="address.selectedAddress"\n                                ng-change="changeAddressDropDown()"\n                                id="addressDropDown" ng-required="isShowLookupDropDown">\n                            <option value="" selected="selected"> {{ content(\'addressBook.selectYourAddress\',\n                                { count: lookupAddressList.length}) }}</option>\n                            <option ng-repeat="addr in lookupAddressList" value="{{$index}}">\n                                {{ addr.dropDownAddress }}\n                            </option>\n                        </select>\n                    </div>\n                    <div ng-hide="isShowLookupDropDown" class="singleAddress">\n                        {{singleAddress.displayLine1}}<br/>\n                        {{singleAddress.displayLine2}}<br/>\n                        {{singleAddress.displayLine3}}\n                    </div>\n                </div>\n            </div>\n            <!-- end: Show only the address lookup fields -->\n        </div>\n        <!-- GB end -->\n        <!-- IE begin -->\n        <div ng-switch-when="IE">\n            <div ng-if="metadata.addressEntry.layout" ng-repeat="layoutItem in metadata.addressEntry.layout">\n                <div ng-if="layoutItem.$ === \'line1\'">\n                    <div class="inputField confidential line1" floating-label>\n                        <input type="text" name="line1" id="line1" ng-model="address.line1" value="" maxlength="50" autocapitalize="off" aria-required="true" autocomplete="off" data-error-key="common.valueInvalid" xo-error-tooltip ng-required="{{layoutItem.required}}" />\n                        <label for="line1" id="line1Label">{{locale.metadata.addressEntry.strings[country].line1Label}}</label>\n                    </div>\n                </div>\n                <div ng-if="layoutItem.$ === \'line2\'">\n                    <div class="inputField confidential line2" floating-label>\n                        <input type="text" name="line2" id="line2" ng-model="address.line2" value="" maxlength="50" autocapitalize="off" autocomplete="off" data-error-key="common.valueInvalid" />\n                        <label for="line2" id="line2Label">{{locale.metadata.addressEntry.strings[country].line2Label}}</label>\n                    </div>\n                </div>\n                <div ng-if="layoutItem.$ === \'city\'">\n                    <div class="inputField confidential city" floating-label>\n                        <input type="text" name="city" id="city" maxLength="100" ng-model="address.city" value="" autocapitalize="off" aria-required="true" autocomplete="off" data-error-key="common.valueInvalid" xo-error-tooltip ng-required="{{layoutItem.required}}" />\n                        <label for="city" id="cityLabel">{{locale.metadata.addressEntry.strings[country].cityLabel}}</label>\n                    </div>\n                </div>\n                <div ng-if="layoutItem.$ === \'state\'">\n                    <div ng-if="locale.metadata.addressEntry.strings[country].stateList"\n                         class="dropdown confidential state nullable inputField" floating-label-dropdown>\n                        <select name="state" xo-dropdown ng-options="state.$id as state.$id for state in locale.metadata.addressEntry.strings[country].stateList" ng-model="address.state" id="state" aria-labelledby="stateLabel" aria-required="true" ng-required="{{layoutItem.required}}">\n                            <option value="">{{ locale.metadata.addressEntry.strings[country].stateLabel }}</option>\n                        </select>\n                        <label for="state" id="stateLabel">{{ locale.metadata.addressEntry.strings[country].stateLabel }}</label>\n                    </div>\n                    <div ng-if="!locale.metadata.addressEntry.strings[country].stateList" class="inputField confidential state"\n                         floating-label>\n                        <input type="text" name="state" id="state" ng-model="address.state" value="" autocapitalize="off" aria-required="true" autocomplete="off" />\n                        <label for="state" id="stateLabel">{{ locale.metadata.addressEntry.strings[country].stateLabel }}</label>\n                    </div>\n                </div>\n                <div ng-if="layoutItem.$ === \'postcode\'">\n                    <div class="inputField confidential postalCode" floating-label>\n                        <input type="text" name="postalCode" id="postalCode" ng-model="address.postal_code" ng-blur="zipCodeBlur()"  ng-keypress="zipCodeKeyPress()" value="" autocapitalize="off" aria-required="true" autocomplete="off"  data-error-key="validation.validZipCode" maxlength="{{layoutItem.maxLength}}" xo-error-tooltip />\n                        <label for="postalCode" id="postalCodeLabel">{{ locale.metadata.addressEntry.strings[country].postcodeLabel }} </label>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <!-- IE end -->\n\n        <div ng-switch-default>\n            <!-- Griffin metadata DOES exist for this country -->\n            <div ng-if="metadata.addressEntry.layout" ng-repeat="layoutItem in metadata.addressEntry.layout">\n                <div ng-if="layoutItem.$ === \'line1\'">\n                    <div class="inputField confidential line1" floating-label directionality>\n                        <input type="text" name="line1" id="line1" ng-model="address.line1" value="" maxlength="50" autocapitalize="off" aria-required="true" autocomplete="off" data-error-key="common.valueInvalid" xo-error-tooltip ng-required="{{layoutItem.required}}" />\n                        <label for="line1" id="line1Label">{{locale.metadata.addressEntry.strings[country].line1Label}}</label>\n                    </div>\n                </div>\n                <div ng-if="layoutItem.$ === \'line2\'">\n                    <div class="inputField confidential line2" floating-label directionality>\n                        <input type="text" name="line2" id="line2" ng-model="address.line2" value="" maxlength="50" autocapitalize="off" autocomplete="off" data-error-key="common.valueInvalid" />\n                        <label for="line2" id="line2Label">{{locale.metadata.addressEntry.strings[country].line2Label}}</label>\n                    </div>\n                </div>\n                <div ng-if="layoutItem.$ === \'city\'">\n                    <div class="inputField confidential city" floating-label directionality>\n                        <input type="text" name="city" id="city" maxLength="100" ng-model="address.city" value="" autocapitalize="off" aria-required="true" autocomplete="off" data-error-key="common.valueInvalid" xo-error-tooltip ng-required="{{layoutItem.required}}" />\n                        <label for="city" id="cityLabel">{{locale.metadata.addressEntry.strings[country].cityLabel}}</label>\n                    </div>\n                </div>\n                <div ng-if="layoutItem.$ === \'state\'">\n                    <div ng-if="locale.metadata.addressEntry.strings[country].stateList"\n                         class="dropdown confidential state nullable inputField" floating-label-dropdown>\n                        <select name="state" xo-dropdown ng-options="state.$id as state.$elt for state in locale.metadata.addressEntry.strings[country].stateList" ng-model="address.state" id="state" aria-required="true" ng-required="{{layoutItem.required}}">\n                            <option value="">{{ locale.metadata.addressEntry.strings[country].stateLabel }}</option>\n                        </select>\n                        <label for="state" id="stateLabel">{{ locale.metadata.addressEntry.strings[country].stateLabel }}</label>\n                    </div>\n                    <div ng-if="!locale.metadata.addressEntry.strings[country].stateList" class="inputField confidential state"\n                         floating-label directionality>\n                        <input type="text" name="state" id="state" ng-model="address.state" value="" autocapitalize="off" aria-required="true" autocomplete="off" />\n                        <label for="state" id="stateLabel">{{ locale.metadata.addressEntry.strings[country].stateLabel }}</label>\n                    </div>\n                </div>\n                <div ng-if="layoutItem.$ === \'postcode\'">\n                    <xo-zipcode id="zipcode" zip-entry="layoutItem" country="{{country}}"\n                                max-length="layoutItem.maxLength" zip-code="address.postal_code"\n                                done-fn="zipCodeBlur"\n                                key-press-fn="zipCodeKeyPress"\n                                zip-label="{{ locale.metadata.addressEntry.strings[country].postcodeLabel }}"\n                                zip-error-key="validation.validZipCode"\n                                zip-required="layoutItem.required"></xo-zipcode>\n                </div>\n            </div>\n            <!-- Griffin metadata DOES NOT exist for this country -->\n            <div ng-if="!metadata.addressEntry.layout">\n                <div class="inputField confidential line1" floating-label directionality>\n                    <input type="text" name="line1" id="line1" ng-model="address.line1" value="" maxlength="50" autocapitalize="off" aria-required="true" autocomplete="off" data-error-key="common.valueInvalid" xo-error-tooltip required />\n                    <label for="line1" id="line1Label">{{ content(\'common.stAddress\') }}</label>\n                </div>\n\n                <div class="inputField confidential city" floating-label directionality>\n                    <input type="text" name="city" id="city" maxLength="100" ng-model="address.city" value="" autocapitalize="off" aria-required="true" autocomplete="off" data-error-key="common.valueInvalid" xo-error-tooltip required />\n                    <label for="city" id="cityLabel">{{ content(\'common.otherCity\') }}</label>\n                </div>\n\n                <div class="inputField confidential state" floating-label directionality>\n                    <input type="text" name="state" id="state" ng-model="address.state" value="" autocapitalize="off" aria-required="true" autocomplete="off" />\n                    <label for="state" id="stateLabel">{{ content(\'common.optionalState\') }}</label>\n                </div>\n\n                <div class="inputField confidential postalCode" floating-label directionality>\n                    <input type="text" name="postalCode" id="postalCode" ng-model="address.postal_code" value=""  ng-blur="zipCodeBlur()" ng-keypress="zipCodeKeyPress()" autocapitalize="off" aria-required="true" autocomplete="off" data-error-key="validation.validZipCode"/>\n                    <label for="postalCode" id="zipLabel">{{ content(\'common.optionalPostalCode\') }}</label>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div ng-if="isAddPreferred" class="addPreferredShipping sCheckbox checkbox">\n        <input type="checkbox" ng-model="address.preferred_address" name="addPreferred" id="addPreferred" />\n        <label for="addPreferred">{{ content(\'memberReview.makePreferredShipping\') }}</label>\n    </div>\n\n    <div ng-if="renderBillingAddCheckbox" class="addPreferredShipping sCheckbox checkbox">\n        <input type="checkbox"  ng-model="address.isBA" name="isBA" id="addVenmoBA" />\n        <label for="addVenmoBA">{{ content(\'memberReview.useShippingAsBilling\') }}</label>\n    </div>\n</div>\n';
    },
    "../node_modules/noop-loader/index.js!./components/xo-address-components/src/add-address/template.html": "./components/xo-address-components/src/add-address/template.html",
    "./components/xo-ui-components/src/dropdown-multiline/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/jquery/dist/jquery.min.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, $) {
            squid.module("xo-dropdown-multiline.directive", [ "squid" ]).directive("xoDropdownMultiline", function($timeout) {
                return {
                    restrict: "A",
                    require: "?ngModel",
                    link: function link($scope, $select, attrs, ngModel) {
                        var isListVisible = false;
                        var listCreated = false;
                        $select = $($select);
                        var $span = $('<span class="custom-select" aria-hidden="true"><div class="arrow"></div><span class="innerContainer"><span></span></span></span>');
                        var $container = $('<div class="custom-select-container multiline-select-container" tabindex="0" />');
                        var $list;
                        function updateCover() {
                            $timeout(function() {
                                $span.find("span span").html($select.find("[selected]").text().replace(/\\n/gi, "<br>").trim());
                            }, 10);
                        }
                        function createList($options) {
                            if ($options.length < 2) {
                                return;
                            }
                            function getModel() {
                                var modelName;
                                var model;
                                var subParts;
                                if ($select.attr("ng-options")) {
                                    modelName = $select.attr("ng-options").substring($select.attr("ng-options").indexOf("in ") + 3, $select.attr("ng-options").length);
                                } else {
                                    var $option = $($select.find("[ng-repeat]")[0]);
                                    modelName = $option.attr("ng-repeat").substring($option.attr("ng-repeat").indexOf("in ") + 3, $option.attr("ng-repeat").length);
                                }
                                if (modelName.indexOf(".") !== -1) {
                                    subParts = modelName.split(".");
                                    model = $scope;
                                    for (var i = 0; i < subParts.length; i++) {
                                        model = model[subParts[i]];
                                    }
                                } else {
                                    model = $scope[modelName];
                                }
                                return model;
                            }
                            function hideList(event) {
                                $list.hide();
                                $container.append($list);
                                isListVisible = false;
                                $container.removeClass("open");
                            }
                            function positionList() {
                                $list.css("left", $container.offset().left + "px");
                                $list.css("top", $container.offset().top + $container.height() + "px");
                                $list.css("width", $container.width() + "px");
                            }
                            function setFocusOnSelected() {
                                var $selected = $select.find("[selected]");
                                if ($selected.length) {
                                    var $item = $list.find('[data-value="' + $selected.attr("value") + '"]');
                                    $item.focus();
                                } else {
                                    $list.find("li")[0].focus();
                                }
                            }
                            function showList() {
                                $("body").append($list);
                                $container.addClass("open");
                                $list.show();
                                positionList();
                                isListVisible = true;
                                setFocusOnSelected();
                            }
                            function processContainerKeypress(event) {
                                var keyCode = event.keyCode;
                                if (keyCode === 13 || keyCode === 40) {
                                    if (!isListVisible) {
                                        showList();
                                    } else {
                                        hideList();
                                        $container.focus();
                                    }
                                } else if (keyCode === 27) {
                                    if (isListVisible) {
                                        hideList();
                                        $container.focus();
                                    }
                                }
                            }
                            if ($list) {
                                $list.remove();
                            }
                            $list = $('<ul class="multiline-select-list" tabindex="0"></ul>');
                            Array.prototype.forEach.call($options, function(option) {
                                var $option = $(option);
                                var value = $option.attr("value");
                                var text = option.innerHTML.replace(/\\n/gi, "<br>");
                                if (text.indexOf("content(") !== -1) {
                                    text = $scope.content(text.substring(text.indexOf("('") + 2, text.indexOf("')")));
                                }
                                var html = '<li tabindex="0"';
                                if (value !== $option.text()) {
                                    html = html + ' data-value="' + value + '"';
                                }
                                html = html + ">" + text + "</li>";
                                $list.append($(html));
                            });
                            $container.append($list);
                            $list.hide();
                            $($list.find("li")).click(function(event) {
                                var $target = $(event.target);
                                var value = $target.data("value");
                                if (typeof value !== "undefined") {
                                    $select.find("option").removeAttr("selected");
                                    $select.find('option[value="' + value + '"]').attr("selected", "selected");
                                    $select.find("option").removeProp("selected");
                                    $select.find('option[value="' + value + '"]').prop("selected", "selected");
                                } else {
                                    value = $target.html().replace(/\/<br\/>/gi, "\\n");
                                    $select.val(value);
                                }
                                if ($select.attr("ng-model")) {
                                    if ($select.attr("ng-options") || $select.find("[ng-repeat]").length) {
                                        var model = getModel();
                                        ngModel.$setViewValue(model[value]);
                                    } else {
                                        ngModel.$setViewValue(value);
                                    }
                                }
                                updateCover();
                                hideList();
                            });
                            var $innerContainer = $container.find(".innerContainer");
                            $container.click(function(event) {
                                if (isListVisible) {
                                    hideList();
                                    $container.focus();
                                } else {
                                    showList();
                                }
                            });
                            $container.keydown(function(event) {
                                processContainerKeypress(event);
                            });
                            $innerContainer.keydown(function(event) {
                                processContainerKeypress(event);
                            });
                            $list.find("li").keydown(function(event) {
                                var keyCode = event.keyCode;
                                var $target = $(event.target);
                                if (keyCode === 13) {
                                    $target.click();
                                    event.stopPropagation();
                                } else if (keyCode === 27) {
                                    if (isListVisible) {
                                        hideList();
                                        $container.focus();
                                        event.stopPropagation();
                                    }
                                } else if (keyCode === 40) {
                                    if (!$target.is(":last-of-type")) {
                                        $target.next().focus();
                                        event.preventDefault();
                                        event.stopPropagation();
                                    }
                                } else if (keyCode === 38) {
                                    if (!$target.is(":first-of-type")) {
                                        $target.prev().focus();
                                    }
                                    event.preventDefault();
                                    event.stopPropagation();
                                }
                            });
                            $(window).resize(function() {
                                if (isListVisible) {
                                    positionList();
                                }
                            });
                            $(window).bind("hashchange", function() {
                                if (isListVisible) {
                                    hideList();
                                }
                            });
                            $(document).click(function(event) {
                                var $target = $(event.target);
                                if (!($target.is($container) || $.contains($container.get()[0], $target.get()[0])) && isListVisible) {
                                    hideList();
                                }
                            });
                            $container.blur(function(event) {
                                $timeout(function() {
                                    var $newTarget = $(event.explicitOriginalTarget || document.activeElement);
                                    if (!($.contains($container.get()[0], $newTarget.get()[0]) || $.contains($list.get()[0], $newTarget.get()[0]))) {
                                        hideList(event);
                                    }
                                }, 1);
                            });
                            listCreated = true;
                            updateCover();
                        }
                        function render() {
                            var options = $select.find("option");
                            if (!listCreated) {
                                createList(options);
                            }
                        }
                        $select.wrap($container);
                        $container = $select.parent();
                        $select.bind("mouseenter focus", function() {
                            $span.addClass("active");
                        });
                        $select.bind("mouseleave blur", function() {
                            $span.removeClass("active");
                        });
                        $select.after($span);
                        $select.addClass("replaced");
                        $select.attr("tabindex", "-1");
                        if (attrs["default"]) {
                            var defaultOption = document.createElement("option");
                            defaultOption.innerText = attrs["default"];
                            $select.append(defaultOption);
                        }
                        if ($select.attr("ng-options")) {
                            $scope.$watch(attrs.ngModel, function() {
                                render();
                            });
                        } else {
                            $timeout(function() {
                                $scope.$broadcast("pageRendered");
                            }, 0);
                        }
                        $scope.$on("pageRendered", function() {
                            render();
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./components/xo-form-components/src/zipcode/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-form-components/src/zipcode/template.html"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid, template) {
            return angular.module("xo-zipcode.directive", [ "squid", "xo-error-tooltip.directive" ]).directive("xoZipcode", function() {
                return {
                    template: template,
                    scope: {
                        country: "@",
                        zipLabel: "@",
                        postalCodeLabel: "@",
                        zipErrorKey: "@",
                        doneFn: "=",
                        keyPressFn: "=",
                        zipCode: "=",
                        zipEntry: "=",
                        maxLength: "="
                    },
                    controller: function controller($scope, $feature) {
                        var formatRegex;
                        var inputParams = $feature("zipcodeInputParams", undefined, $scope.country);
                        if (inputParams) {
                            $scope.minLength = inputParams.minLength;
                            $scope.maxLength = inputParams.maxLength;
                            if (inputParams.formatPattern) {
                                formatRegex = new RegExp(inputParams.formatPattern, "g");
                            }
                        }
                        function formatZipWithDash(zipcode, index) {
                            if (zipcode.length > index) {
                                zipcode = [ zipcode.slice(0, index), "-", zipcode.slice(index) ].join("");
                            }
                            return zipcode;
                        }
                        $scope.changeZip = function(zipcode) {
                            if (zipcode) {
                                if (formatRegex) {
                                    zipcode = zipcode.replace(formatRegex, "");
                                }
                                if (inputParams && inputParams.formatZip) {
                                    zipcode = formatZipWithDash(zipcode, inputParams.minLength);
                                }
                                $scope.zipCode = zipcode;
                            }
                        };
                        $scope.doneFunction = function() {
                            if ($scope.doneFn) {
                                $scope.doneFn();
                            }
                        };
                        $scope.keyPressHandler = function(event) {
                            if ($scope.keyPressFn) {
                                $scope.keyPressFn(event);
                            }
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-form-components/src/zipcode/template.html": function(module, exports) {
        module.exports = '<div id="zipField" class="inputField confidential postalCode" floating-label directionality content>\n    <input type="text" name="postalCode" id="postalCode" ng-model="zipCode"\n       autocapitalize="off" aria-required="true" autocomplete="off" ng-change="changeZip(zipCode)" xo-validation=\'{"validator": "validZip"}\'\n       minlength="{{minLength}}" maxlength="{{maxLength}}" ng-blur="doneFunction()" ng-keypress="keyPressHandler($event)"\n       data-error-key="{{zipErrorKey}}" xo-error-tooltip ng-required="{{zipRequired}}"/>\n    <label for="postalCode" id="postalCodeLabel" >{{zipLabel}}</label>\n</div>\n\n';
    },
    "./components/xo-address-components/src/address-normalization/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-address-components/src/address-normalization/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-address-normalization.route", [ "squid", "xo-address-normalization.directive" ]).factory("$AddressNormalizationRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("AddressNormalizationRoute", {
                        name: "addressNormalization",
                        titleContent: "addressNormalization.addressmatch",
                        directive: "xo-address-normalization",
                        trackingData: {
                            fptiState: "address_normalization",
                            buzname: {
                                fullpage: {
                                    pagename: "%::address_normalization",
                                    pagename2: "%::address_normalization:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        loginRequired: true,
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-address-components/src/address-normalization", "components/xo-address-components/src/address-normalization/route.js");
    },
    "./components/xo-address-components/src/address-normalization/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function($) {
            __webpack_require__("./components/xo-address-components/src/address-normalization/styles.less");
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-address-components/src/address-normalization/template.html"), __webpack_require__("./components/xo-models/src/address/index.js"), __webpack_require__("./components/xo-tray-height/dist/directive.js"), __webpack_require__("./components/xo-page-components/src/aside-header/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
                squid.module("xo-address-normalization.directive", [ "squid", "xomodel.address", "xo-aside-header.directive", "xomodel.address", "xo-tray-height.directive" ]).directive("xoAddressNormalization", function() {
                    return {
                        template: template,
                        scope: {
                            id: "=",
                            address: "=",
                            doneFn: "=",
                            sidebar: "=",
                            hideBackButton: "="
                        },
                        controller: function controller($scope, $populate, $feature, $util, $AddressNormalizationModel, $timeout) {
                            $util.assert($scope.address, "Original Address cannot be empty");
                            $scope.showNormalization = false;
                            var normalize = $feature("addressNormalization", false, $scope.address.country);
                            if (!normalize) {
                                $scope.doneFn($scope.address, false);
                                return;
                            }
                            var userEnteredAddress;
                            var addrFormat = $feature("FormatAddressForNormalization", $scope.address.country, $scope.address.country);
                            $scope.addressSelected = "normalizedAddress";
                            $scope.transitionName = "address_normalization_normalizedAddress";
                            if (addrFormat === "AddressBR") {
                                userEnteredAddress = angular.fromJson(angular.toJson($scope.address));
                                userEnteredAddress.line1 = $scope.address.line1 + "  " + $scope.address.streetNumber;
                                userEnteredAddress.line2 = $scope.address.neighborhood;
                            }
                            $scope.servAddress = userEnteredAddress ? userEnteredAddress : $scope.address;
                            $scope.servAddress.normalization_status = "UNNORMALIZED_USER_PREFERRED";
                            $scope.addressNormalization = new $AddressNormalizationModel({
                                id: $scope.id,
                                address: $scope.servAddress
                            });
                            function centerLightBox() {
                                var element = $("#lbox");
                                if (!element.length) {
                                    return;
                                }
                                var windowElement = $(window);
                                var lboxContainerElem = $("#lboxContainer");
                                element.css("top", Math.max(0, (windowElement.height() - element.outerHeight()) / 2) + "px");
                                element.css("width", "65%");
                                var computedLeft = (windowElement.width() - element.outerWidth()) / 2;
                                var leftBound = lboxContainerElem.offset().left + lboxContainerElem.width() * .1;
                                var elementLeft = computedLeft < leftBound ? leftBound : computedLeft;
                                if (computedLeft < leftBound) {
                                    element.css("width", lboxContainerElem.width() * .8);
                                }
                                element.css("left", Math.max(0, elementLeft) + "px");
                                return element;
                            }
                            function trinityResponseCallback() {
                                $scope.showNormalization = true;
                                $timeout(function() {
                                    centerLightBox();
                                    $(window).resize(centerLightBox);
                                });
                            }
                            $scope.addressNormalization.save({
                                data: $scope.addressNormalization,
                                contingencies: {
                                    VALIDATION_ERROR: function VALIDATION_ERROR() {
                                        trinityResponseCallback();
                                        $scope.transitionName = "address_normalization_enteredAddress";
                                        return;
                                    }
                                },
                                success: function success(result) {
                                    trinityResponseCallback();
                                    if (result === false) {
                                        $scope.transitionName = "address_normalization_enteredAddress";
                                        return;
                                    }
                                    $scope.normalizedAddress = result;
                                    $scope.normalizedAddress.normalization_status = "NORMALIZED";
                                    if (addrFormat === "AddressBR") {
                                        $scope.normalizedAddress.line1 = $scope.normalizedAddress.streetName + "  " + $scope.normalizedAddress.streetNumber;
                                        $scope.normalizedAddress.line2 = $scope.normalizedAddress.neighborhood;
                                    }
                                    if ($scope.isEqual($scope.normalizedAddress, $scope.servAddress)) {
                                        if ($scope.servAddress.preferred_address) {
                                            $scope.normalizedAddress.preferred_address = true;
                                        }
                                        if (addrFormat === "AddressBR" && $scope.address.line2) {
                                            $scope.normalizedAddress.line1 = $scope.normalizedAddress.line1 + "  " + $scope.address.line2;
                                        }
                                        $scope.callback($scope.normalizedAddress, false);
                                    } else if (addrFormat === "AddressBR" && $scope.address.line2) {
                                        $scope.normalizedAddress.line1 = $scope.normalizedAddress.line1 + "  " + $scope.address.line2;
                                    }
                                },
                                error: trinityResponseCallback
                            });
                            function desensitizedAddress(addr) {
                                for (var key in addr) {
                                    var val = addr[key];
                                    if (addr.hasOwnProperty(key)) {
                                        if (val && val.length) {
                                            addr[key] = val.trim().toLowerCase();
                                        } else {
                                            addr[key] = undefined;
                                        }
                                    }
                                }
                                return addr;
                            }
                            $scope.isEqual = function(address1, address2) {
                                var addressOne = desensitizedAddress(JSON.parse(JSON.stringify(address1)));
                                var addressTwo = desensitizedAddress(JSON.parse(JSON.stringify(address2)));
                                if (!addressOne || !addressTwo) {
                                    return false;
                                }
                                return addressOne.line1 === addressTwo.line1 && addressOne.line2 === addressTwo.line2 && addressOne.city === addressTwo.city && addressOne.state === addressTwo.state && addressOne.postal_code === addressTwo.postal_code && addressOne.country === addressTwo.country;
                            };
                            $scope.isLine2First = function() {
                                return $scope.address.country === "AU";
                            };
                            $scope.onBack = function() {
                                $scope.callback($scope.address, true);
                            };
                            $scope.selection = function(value) {
                                $scope.transitionName = "address_normalization_" + value;
                            };
                            $scope.onContinue = function() {
                                $scope.addressSelected = this.addressNormalizationForm.addressSelected;
                                if ($scope.addressSelected && $scope.addressSelected.$modelValue === "normalizedAddress") {
                                    if ($scope.servAddress.preferred_address) {
                                        $scope.normalizedAddress.preferred_address = true;
                                    }
                                    $scope.callback($scope.normalizedAddress, false);
                                } else {
                                    $scope.servAddress.normalization_status = "UNNORMALIZED_USER_PREFERRED";
                                    if (addrFormat === "AddressBR" && $scope.address.line2) {
                                        $scope.servAddress.line1 = $scope.servAddress.line1 + " " + $scope.address.line2;
                                    }
                                    $scope.callback($scope.servAddress, false);
                                }
                            };
                            $scope.callback = function(address, isBack) {
                                $scope.doneFn(address, isBack);
                            };
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-address-components/src/address-normalization/styles.less": "./css/app.less",
    "../node_modules/noop-loader/index.js!./components/xo-address-components/src/address-normalization/template.html": function(module, exports) {
        module.exports = '<div ng-show="showNormalization" content id="addressNormalization" xo-tray-height>\n    <xo-aside-header heading=\'asideHeader.selectNormalizedAddress\' hidex=\'true\' ng-if="sidebar"></xo-aside-header>\n    <div class="asideContent">\n        <form method="post" class="formSmall asideView container" novalidate="novalidate" name="addressNormalizationForm">\n            <div ng-if="normalizedAddress">\n                <h2 class="gamma">{{ content(\'addressNormalization.title\') }}</h2>\n                <p class="theta">{{ content(\'addressNormalization.intro\') }}</p>\n                <div class="normalizedAdrSection radio">\n                    <p class="theta" data-ng-bind-html="htmlContent(\'addressNormalization.addressmatch\')"></p>\n                    <label class="noBottom narrow addrLabel row-fluid">\n                        <input type="radio" id="defaultAddress" ng-model="addressSelected" name="addressSelected" value="normalizedAddress" ng-click="selection(\'normalizedAddress\')" class="addrRadio span2" checked="true">\n                        <div class="adr span20">\n                            <div class="confidential streets street-address">\n                                <div ng-if="normalizedAddress.line2">{{normalizedAddress.line1}}, {{normalizedAddress.line2}},</div>\n                                <div ng-if="!normalizedAddress.line2">{{normalizedAddress.line1}},</div>\n                            </div>\n                            <div class="confidential">\n                                <span class="locality">{{normalizedAddress.city}}</span>, <span class="state">{{normalizedAddress.state}}</span>\n                                <span class="postal-code adr-break">{{normalizedAddress.postal_code}},&nbsp;{{content(\'countryList.\'+servAddress.country)}}</span>\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                <div class="enteredAddrSection radio subContainer">\n                    <p class="addressNormalizationIntro" data-ng-bind-html="htmlContent(\'addressNormalization.addressenter\')"></p>\n\n                    <label class="noBottom narrow addrLabel row-fluid">\n                        <input type="radio" ng-model="addressSelected" name="addressSelected" value="enteredAddress" ng-click="selection(\'enteredAddress\')" class="addrRadio span2">\n                        <div class="adr span20">\n                            <div class="confidential streets street-address" ng-show="isLine2First()">\n                                <div ng-if="servAddress.line2">{{servAddress.line2}}, </div>{{servAddress.line1}},\n                            </div>\n                            <div class="confidential streets street-address" ng-hide="isLine2First()">\n                                <div ng-if="address.line2">{{servAddress.line1}}, {{address.line2}}, {{servAddress.line2}},</div>\n                                <div ng-if="!address.line2">{{servAddress.line1}}, {{servAddress.line2}},</div>\n                            </div>\n                            <div class="confidential">\n                                <span class="locality">{{servAddress.city}}</span>, <span class="state">{{servAddress.state}}</span>\n                                <span class="postal-code adr-break">{{servAddress.postal_code}},&nbsp;{{content(\'countryList.\'+servAddress.country)}}</span>\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n            <div ng-if="!normalizedAddress">\n                <h2 class="gamma">{{ content(\'addressNormalization.noaddressmatchTitle\') }}</h2>\n                <p class="theta">{{ content(\'addressNormalization.noaddressmatchMsg\') }}</p>\n                <input type="hidden" name="addressdisplay" value="enteredAddress">\n                <div class="enteredAddrSection subContainer">\n                    <p class="theta">{{ content(\'addressNormalization.addressyouenter\') }}</p>\n                    <div class="adr">\n                        <div class="confidential streets street-address" ng-show="isLine2First()">\n                            {{servAddress.line2}} {{servAddress.line1}},\n                        </div>\n                        <div class="confidential streets street-address" ng-hide="isLine2First()">\n                            <div ng-if="address.line2">{{servAddress.line1}}, {{address.line2}}, {{servAddress.line2}}</div>\n                            <div ng-if="!address.line2">{{servAddress.line1}}, {{servAddress.line2}}</div>\n                        </div>\n                        <div class="confidential">\n                            <span class="locality">{{servAddress.city}}</span>, <span class="state">{{servAddress.state}}</span>\n                            <span class="postal-code adr-break">{{servAddress.postal_code}},&nbsp;{{content(\'countryList.\'+servAddress.country)}}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="buttons" ng-if="!hideBackButton">\n                <input id="back" type="submit" value="{{ content(\'common.back\') }}" class="btn firstHalf btn-secondary" ng-click="onBack()" >\n                <input track-submit="{{transitionName}}" id="continue" type="submit" value="{{ content(\'common.continueLabel\') }}" class="btn secondHalf" ng-click="onContinue()">\n            </div>\n            <div class="buttons" ng-if="hideBackButton">\n                <input track-submit="{{transitionName}}" id="fullContinue" type="submit" value="{{ content(\'common.continueLabel\') }}" class="btn" ng-click="onContinue()">\n            </div>\n        </form>\n    </div>\n</div>\n';
    },
    "./components/xo-wallet-components/src/add-card/addCep/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-wallet-components/src/add-card/addCep/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-add-card.addcep.route", [ "squid", "xo-add-card.addcep.directive" ]).factory("$AddCepRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("AddCepRoute", {
                        name: "addCep",
                        directive: "xo-add-cep",
                        titleContent: "addBillingAddress.title",
                        loginRequired: true,
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-wallet-components/src/add-card/addCep", "components/xo-wallet-components/src/add-card/addCep/route.js");
    },
    "./components/xo-wallet-components/src/add-card/addCep/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-card/addCep/template.html"), __webpack_require__("./components/angular-ui-utils/ui-utils.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-models/src/address/index.js"), __webpack_require__("./components/xo-form-components/src/zipcode/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, template) {
            return angular.module("xo-add-card.addcep.directive", [ "squid", "xomodel.address", "ui.validate", "xo-zipcode.directive" ]).directive("xoAddCep", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        sidebar: "=",
                        prefillAddress: "=",
                        doneFn: "="
                    },
                    controller: function controller($scope, $populate, $state, $PrefillAddressModel, $locale) {
                        $scope.country = $locale.country;
                        $scope.onSubmit = function() {
                            $scope.prefillAddress.address = {
                                country: $locale.country,
                                postal_code: $scope.postal_code
                            };
                            $scope.prefillAddress.save({
                                data: $scope.prefillAddress,
                                success: function success(result) {
                                    $scope.prefillAddress.address = result;
                                    $scope.doneFn();
                                }
                            });
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/add-card/addCep/template.html": function(module, exports) {
        module.exports = '<xo-aside-header back-url="^.addCard" heading="asideHeader.addBillingAddress" ng-if="sidebar"></xo-aside-header>\n\n<h1 class="gamma addBillingTitle" ng-if="!sidebar">{{ content(\'addBillingAddress.title\') }}</h1>\n\n<form id="cepForm" name="cepForm" class="asideView addressForm" content novalidate>\n    <div class="trayInner container">\n        <xo-zipcode id="zipcode" country="{{country}}" zip-code="postal_code" zip-label="{{content(\'common.cep\')}}"\n                    zip-error-text="{{content(\'common.valueInvalid\')}}"></xo-zipcode>\n        <div class="buttons">\n            <input track-submit type="submit" id="proceedButton"\n                   value="{{ content(\'common.continueLabel\') }}" class="btn full" validate-submit="onSubmit()" />\n        </div>\n    </div>\n</form>\n\n';
    },
    "./components/xo-member-components/src/select-shipping/add-shipping/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-member-components/src/select-shipping/add-shipping/directive.js"), __webpack_require__("./components/xo-address-components/src/address-normalization/route.js"), __webpack_require__("./components/xo-address-components/src/add-address/directive.js"), __webpack_require__("./components/xo-member-components/src/select-shipping/shipping-address/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-add-shipping.route", [ "squid", "xo-shipping-address.directive", "xo-add-address.directive", "xo-address-normalization.route" ]).factory("$AddShippingRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("AddShippingRoute", {
                        name: "addShipping",
                        directive: "xo-add-shipping",
                        titleContent: "addShipping.addAddress",
                        trackingData: {
                            fptiState: "add_shipping",
                            buzname: {
                                fullpage: {
                                    pagename: "%::fullpage-add-shipping-address",
                                    pagename2: "%::fullpage-add-shipping-address:member:hermes:tray",
                                    version: "member:%:tray"
                                }
                            }
                        },
                        loginRequired: true,
                        children: [ {
                            name: "$AddressNormalizationRoute",
                            attributes: {
                                id: "token",
                                sidebar: "sidebar",
                                address: "address",
                                "done-fn": "uponNormalization"
                            }
                        } ]
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-member-components/src/select-shipping/add-shipping", "components/xo-member-components/src/select-shipping/add-shipping/route.js");
    },
    "./components/xo-member-components/src/select-shipping/add-shipping/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-member-components/src/select-shipping/add-shipping/template.html"), __webpack_require__("./components/xo-member-components/src/select-shipping/shipping-address/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            return squid.module("xo-select-shipping.add-shipping.directive", [ "squid", "xo-shipping-address.directive" ]).directive("xoAddShipping", function() {
                return {
                    template: template,
                    scope: {
                        auth: "=",
                        token: "=",
                        doneFn: "=",
                        sidebar: "=",
                        update: "=",
                        renderBillingAddCheckbox: "=",
                        backUri: "="
                    },
                    controller: function controller($scope) {}
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-member-components/src/select-shipping/add-shipping/template.html": function(module, exports) {
        module.exports = '<xo-shipping-address token="token" done-fn="doneFn" sidebar="sidebar" render-billing-add-checkbox="renderBillingAddCheckbox" back-uri="backUri" done-uri="backUri"></xo-shipping-address>\n';
    },
    "./components/xo-member-components/src/select-shipping/shipping-address/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-member-components/src/select-shipping/shipping-address/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/address/index.js"), __webpack_require__("./components/xo-address-components/src/add-address/directive.js"), __webpack_require__("./components/xo-form-components/src/select-shipping-country/directive.js"), __webpack_require__("./components/xo-tray-height/dist/directive.js"), __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js"), __webpack_require__("./components/xo-ui-components/src/message/directive.js"), __webpack_require__("./components/xo-form-components/src/zipcode/directive.js"), __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            return squid.module("xo-select-shipping.xo-shipping-address.directive", [ "squid", "xomodel.address", "xomodel.checkout", "xo-add-address.directive", "xo-select-shipping-country.directive", "xo-tray-height.directive", "xo-error-tooltip.directive", "xo-dropdown.directive", "xo-message.directive", "xo-zipcode.directive", "xo-accessibility.directive" ]).directive("xoShippingAddress", function() {
                return {
                    template: template,
                    scope: {
                        auth: "=",
                        token: "=",
                        doneFn: "=",
                        sidebar: "=",
                        update: "=",
                        renderBillingAddCheckbox: "=",
                        backUri: "=",
                        doneUri: "="
                    },
                    controller: function controller($scope, $populate, $element, $timeout, $ShippingAddressModel, $CheckoutSessionModel, $logger, $PrefillAddressModel, $CheckoutAppDataModel, $state, $config, $locale, $feature, $renderContent) {
                        if (!$scope.sidebar) {
                            $scope.pageTitle = $renderContent("addShipping.addAddress");
                        }
                        $scope.backUri = $scope.backUri || "checkout.review.sidebar.shipping";
                        $scope.heading = $scope.update ? "addressNormalization.update" : "asideHeader.addShipping";
                        $scope.buttonLabel = function() {
                            if (!$scope.sidebar || $scope.address.country === "BR" && !$scope.prefilled) {
                                return $renderContent("common.continueLabel");
                            } else {
                                return $renderContent("common.save");
                            }
                        };
                        $scope.address = {
                            country: $locale.getCountryCodeISO()
                        };
                        $scope.isShipping = true;
                        $scope.normalize = function() {
                            return $feature("shippingAddressNormalization") && $scope.address.country === $locale.country && !$scope.normalized;
                        };
                        $scope.showshipping = true;
                        $scope.country = $locale.country;
                        $scope.recipient = {
                            first_name: "",
                            last_name: ""
                        };
                        var $el = $($element);
                        function focusFirstError() {
                            $el.find("form").find(".backendError, .ng-invalid").first().focus();
                        }
                        $populate($scope, {
                            checkoutAppData: $CheckoutAppDataModel.instance($scope.token),
                            checkoutSession: $CheckoutSessionModel.instance($scope.token)
                        }).then(function() {
                            var merchantCountry = $scope.checkoutAppData.get("merchant.merchant_country", "US");
                            var contingencyPrefilledAddress;
                            if ($feature("supportBlockNonDomesticShipping", false, merchantCountry)) {
                                $scope.disableChangeShippingCountry = $scope.checkoutAppData.get("flags.block_non_domestic_shipping", false);
                                if ($scope.disableChangeShippingCountry) {
                                    $scope.address.country = merchantCountry;
                                    contingencyPrefilledAddress = $scope.checkoutSession.get("errorData.resolution.data", null);
                                    if (!$scope.sidebar && contingencyPrefilledAddress) {
                                        angular.extend($scope.address, {
                                            line1: contingencyPrefilledAddress.line1,
                                            line2: contingencyPrefilledAddress.line2,
                                            city: contingencyPrefilledAddress.city,
                                            state: contingencyPrefilledAddress.state,
                                            postal_code: contingencyPrefilledAddress.postal_code
                                        });
                                    }
                                    $logger.info("member_block_non_domestic_shipping", {
                                        block_non_domestic_shipping: $scope.disableChangeShippingCountry,
                                        sidebar: $scope.sidebar
                                    });
                                    var countryName = $renderContent("shippingCountry." + merchantCountry);
                                    var infoMessage = $renderContent("largeScreenPayment.blockNonDomesticShippingAlert", {
                                        shippingCountry: countryName
                                    });
                                    $scope.message = {
                                        msgs: [ infoMessage ],
                                        type: "warning"
                                    };
                                }
                            }
                            $scope.prefill = function() {
                                $scope.prefillAddress = new $PrefillAddressModel({
                                    id: $scope.token,
                                    address: {
                                        country: $locale.country,
                                        postal_code: $scope.address.postal_code
                                    }
                                });
                                $scope.prefillAddress.save({
                                    data: $scope.prefillAddress,
                                    success: function success(result) {
                                        if (result) {
                                            $scope.address = result;
                                        }
                                        $scope.prefilled = true;
                                        $scope.address.first_name = $scope.recipient.first_name;
                                        $scope.address.last_name = $scope.recipient.last_name;
                                        $timeout(function() {
                                            var value = $scope.address.state;
                                            var $option = $el.find('[value="' + value + '"]');
                                            $option.prop("selected", "selected");
                                            $option.trigger("change");
                                            value = $option.attr("label");
                                            focusFirstError();
                                        }, 1e3);
                                    }
                                });
                            };
                            if ($scope.update) {
                                if ($scope.checkoutSession.shipping.name) {
                                    var name = $scope.checkoutSession.shipping.name.trim();
                                    var index = name.indexOf(" ");
                                    $scope.recipient.first_name = name.substr(0, index);
                                    $scope.recipient.last_name = name.substr(index + 1);
                                }
                                $scope.address.postal_code = $scope.checkoutSession.get("shipping.postal_code", "");
                                $scope.prefill();
                            }
                            function handleValidation(res) {
                                if (res && res.fields && res.fields.length) {
                                    res.fields.forEach(function(field) {
                                        if (field.field) {
                                            var $field = $($el.find('[ng-model="address.' + field.field + '"]'));
                                            if ($field.length === 0 && field.field === "zip") {
                                                $field = $($el.find('[ng-model="address.postal_code"], [ng-model="zipCode"]'));
                                            }
                                            $field.addClass("backendError");
                                            $field.attr("aria-invalid", true);
                                        }
                                    });
                                    focusFirstError();
                                }
                            }
                            $scope.cancelFn = function() {
                                $state.go("checkout.review.sidebar.shipping");
                            };
                            $scope.onSubmit = function() {
                                if ($scope.address.country === "BR" && $scope.address.country === $locale.country && !$scope.prefilled) {
                                    return $scope.prefill();
                                }
                                if ($scope.normalize()) {
                                    $scope.showshipping = false;
                                    $state.go(".addressNormalization");
                                } else {
                                    $scope.submitAddress();
                                }
                            };
                            $scope.removeValidation = function() {
                                $el.find("form").removeClass("validated");
                            };
                            function prefilledAddressUnchanged(prefilledAddress, addressToSubmit) {
                                function lowercaseEquals(str1, str2) {
                                    return angular.lowercase(str1) === angular.lowercase(str2);
                                }
                                return lowercaseEquals(prefilledAddress.recipient_name, addressToSubmit.recipient_name) && lowercaseEquals(prefilledAddress.line1, addressToSubmit.line1) && lowercaseEquals(prefilledAddress.line2, addressToSubmit.line2) && lowercaseEquals(prefilledAddress.city, addressToSubmit.city) && lowercaseEquals(prefilledAddress.state, addressToSubmit.state) && lowercaseEquals(prefilledAddress.postal_code, addressToSubmit.postal_code) && lowercaseEquals(prefilledAddress.country_code, addressToSubmit.country);
                            }
                            $scope.submitAddress = function() {
                                if ($scope.address.preferred_address) {
                                    $logger.info("addAddrPreferred.selected", {});
                                }
                                var country = $scope.address.country;
                                var recipient_name = $scope.address.first_name + " " + $scope.address.last_name;
                                if ($feature("nameFormat", country, country) === "LastFirst") {
                                    recipient_name = $scope.address.last_name + " " + $scope.address.first_name;
                                }
                                var data = {
                                    recipient_name: recipient_name,
                                    first_name: $scope.address.first_name,
                                    last_name: $scope.address.last_name,
                                    line1: $scope.address.line1,
                                    line2: $scope.address.line2,
                                    city: $scope.address.city,
                                    state: $scope.address.state,
                                    postal_code: $scope.address.postal_code,
                                    country: country,
                                    normalization_status: $scope.address.normalization_status,
                                    preferred_address: $scope.address.preferred_address,
                                    default_address: true
                                };
                                if (contingencyPrefilledAddress && prefilledAddressUnchanged(contingencyPrefilledAddress, data)) {
                                    data.address_id = contingencyPrefilledAddress.id;
                                }
                                data.address_id = data.address_id ? data.address_id : $scope.checkoutSession.get("shipping.id");
                                if ($scope.update && data.address_id) {
                                    updateAddress(data);
                                } else {
                                    addAddress(data);
                                }
                            };
                            function updateAddress(payload) {
                                $scope.checkoutSession.shipping.action("update", {
                                    data: payload,
                                    resultModel: $scope.checkoutSession,
                                    success: function success(result) {
                                        $scope.checkoutSession.message = {
                                            type: "success",
                                            msgKeys: [ "smallToolTip.addressAdded" ]
                                        };
                                        $scope.doneFn();
                                    },
                                    validation: function validation(res) {
                                        handleValidation(res);
                                    }
                                });
                            }
                            function addAddress(payload) {
                                delete payload.address_id;
                                $scope.shippingAddress = $ShippingAddressModel.create($scope.token, payload);
                                $scope.shippingAddress.save({
                                    data: payload,
                                    resultModel: $scope.checkoutSession,
                                    success: function success(result) {
                                        $scope.checkoutSession.message = {
                                            type: "success",
                                            msgKeys: [ "smallToolTip.addressAdded" ]
                                        };
                                        if ($scope.address.isBA) {
                                            $scope.doneFn(payload);
                                        } else {
                                            $scope.doneFn();
                                        }
                                    },
                                    validation: function validation(res) {
                                        handleValidation(res);
                                    }
                                });
                            }
                            $scope.uponNormalization = function(normalizedAddress, isBack) {
                                if (isBack) {
                                    $scope.normalized = false;
                                    $scope.showshipping = true;
                                    $state.go("^");
                                } else {
                                    $scope.address = normalizedAddress;
                                    $scope.normalized = true;
                                    $scope.address.first_name = $scope.recipient.first_name;
                                    $scope.address.last_name = $scope.recipient.last_name;
                                    $scope.submitAddress();
                                }
                            };
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-member-components/src/select-shipping/shipping-address/template.html": function(module, exports) {
        module.exports = '<div ng-class="{\'aside\': sidebar, \'fullpage\': !sidebar}" id="addShipping" modal-box modal-refresh-on="\'metadataChange\'" modal-cancel="cancelFn()">\n    <div ng-if="showshipping">\n    <xo-aside-header ng-if="sidebar" back-url="{{backUri}}" heading="{{heading}}"></xo-aside-header>\n\n    <div class="container" ng-class="{\'asideContent\': sidebar}" xo-tray-height>\n\n        <xo-message ng-if="message" message="message"></xo-message>\n        <h1 class="gamma" ng-if="pageTitle">{{ pageTitle }}</h1>\n\n        <div ng-if="update" content>\n            <p class="theta">{{ content(\'addressNormalization.updateIntro\') }}</p>\n        </div>\n\n            <form id="shippingAddressForm" name="shippingAddressForm" class="asideView addressForm"\n                  content novalidate form-autofocus>\n\n                <div ng-if="!update">\n                    <xo-select-shipping-country shipping-address="address"\n                                                disable-change-shipping-country="disableChangeShippingCountry"\n                                                token="token" ng-click="removeValidation()"></xo-select-shipping-country>\n                </div>\n\n                <div ng-if="prefilled || address.country!==\'BR\'">\n                    <xo-add-address country="address.country" address="address" is-shipping="true"\n                                    token="token" render-billing-add-checkbox="renderBillingAddCheckbox"></xo-add-address>\n                </div>\n\n                <div ng-if="!prefilled && address.country===\'BR\'">\n                    <xo-name-input user="recipient"></xo-name-input>\n                    <xo-zipcode country="{{address.country}}" zip-code="address.postal_code" zip-label="{{content(\'common.cep\')}}"\n                                zip-error-text="{{content(\'common.valueInvalid\')}}"></xo-zipcode>\n                </div>\n                <div class="buttons">\n                    <input track-submit type="submit" id="proceedButton"\n                           type="submit" value="{{buttonLabel()}}" class="btn full"  validate-submit="onSubmit()"/>\n                </div>\n\n            </form>\n        </div>\n\n    </div>\n    <div ui-view></div>\n</div>\n';
    },
    "./components/xo-form-components/src/select-shipping-country/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
        __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js");
        var _template = __webpack_require__("./components/xo-form-components/src/select-shipping-country/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoSelectShippingCountry", {
            tag: "xo-select-shipping-country",
            template: _template2["default"],
            props: {
                shippingAddress: {
                    type: "var",
                    required: true
                },
                disableChangeShippingCountry: {
                    type: "var",
                    required: false
                }
            },
            actions: {
                getList: function getList(address) {
                    var defaultCountryCode = address && address.country || _squid.$locale.country;
                    var countryList = _squid.$locale.metadata.territory;
                    var isDefaultCountry = function isDefaultCountry(country) {
                        return country.code === defaultCountryCode;
                    };
                    var defaultCountry = _squid.$util.find(countryList, isDefaultCountry);
                    var res = countryList.filter(function(country) {
                        return !isDefaultCountry(country);
                    });
                    res.unshift(defaultCountry);
                    return res;
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    this.countryList = this.actions.getList(this.props.shippingAddress);
                    this.$on("metadataChange", function() {
                        _this.countryList = _this.actions.getList(_this.props.shippingAddress);
                    });
                }
            }
        });
        _squid.$Component;
        _squid.$locale;
        _squid.$util;
        module.exports = exports["default"];
    },
    "./components/xo-form-components/src/select-shipping-country/template.html": function(module, exports) {
        module.exports = '<span id="selectShippingCountry" feature="changeShippingCountry">\n    <div class="dropdown confidential country clearfix inputField"\n         ng-class="{\'disabled\': props.disableChangeShippingCountry}" content floating-label-dropdown>\n        <select xo-dropdown name="country" ng-model="props.shippingAddress.country" ng-options="country.code as country.name for country in countryList" id="country" xo-error-tooltip required ng-disabled="props.disableChangeShippingCountry">\n        </select>\n        <label for="country" id="countryLabel">{{ content(\'common.country\') }}</label>\n    </div>\n</span>\n';
    },
    "./components/xo-member-components/src/select-shipping/delete-shipping/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-member-components/src/select-shipping/delete-shipping/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-select-shipping.xo-delete-shipping.route", [ "squid", "xo-select-shipping.xo-delete-shipping.directive" ]).factory("$DeleteShippingRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("DeleteShippingRoute", {
                        name: "deleteShipping",
                        directive: "xo-delete-shipping",
                        titleContent: "asideHeader.deleteShipping",
                        trackingData: {
                            fptiState: "delete_shipping",
                            buzname: {
                                fullpage: {
                                    pagename: "%::delete_shipping",
                                    pagename2: "%::delete_shipping:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        loginRequired: true,
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-member-components/src/select-shipping/delete-shipping", "components/xo-member-components/src/select-shipping/delete-shipping/route.js");
    },
    "./components/xo-member-components/src/select-shipping/delete-shipping/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-member-components/src/select-shipping/delete-shipping/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-address-components/src/address-display/directive.js"), __webpack_require__("./components/xo-page-components/src/aside-header/directive.js"), __webpack_require__("./components/xo-tray-height/dist/directive.js"), __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            squid.module("xo-select-shipping.xo-delete-shipping.directive", [ "squid", "xomodel.checkout", "xo-address-display.directive", "xo-aside-header.directive", "xo-tray-height.directive", "xo-accessibility.directive" ]).directive("xoDeleteShipping", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        sidebar: "="
                    },
                    controller: function controller($scope, $log, $populate, $state, $rootScope, $timeout, $CheckoutShippingAddressesModel) {
                        var contingencyMapping = {
                            RISK_CHECK_FAILED: "deleteShipping.genericError",
                            ADDRESS_ALREADY_REMOVED: "deleteShipping.genericError",
                            ADDRESS_CANNOT_REMOVE_PRIMARY: "deleteShipping.primaryOrBillingAddress",
                            ADDRESS_CANNOT_REMOVE_BILLING: "deleteShipping.primaryOrBillingAddress",
                            ADDRESS_CANNOT_REMOVE_SELECTED: "deleteShipping.selectedAddress",
                            ACCOUNT_NEGATIVE_BALANCE: "deleteShipping.genericError",
                            ADDRESS_CANNOT_REMOVE: "deleteShipping.genericError"
                        };
                        function isPrimaryOrSelected(address) {
                            return address.primary_address || address.default_address;
                        }
                        function removeAddress(address) {
                            $("#deleteShipping .address" + address.idx).addClass("collapse");
                            $timeout(function() {
                                $scope.checkoutShippingAddresses.addresses = $scope.checkoutShippingAddresses.addresses.filter(function(item) {
                                    return item.id !== address.id;
                                });
                                $scope.$broadcast("addressUpdated");
                            }, 600);
                        }
                        $populate($scope, {
                            checkoutShippingAddresses: $CheckoutShippingAddressesModel.instance($scope.token)
                        }).then(function() {
                            $scope.checkoutShippingAddresses.addresses.forEach(function(address, index) {
                                address.showDelete = address.isDeletable = !isPrimaryOrSelected(address);
                                address.idx = index;
                            });
                            $scope.$broadcast("addressUpdated");
                        });
                        $scope.backUrl = "checkout.review.sidebar.shipping";
                        $scope.goBack = function() {
                            $state.go($scope.backUrl);
                        };
                        $scope.onDelete = function(address) {
                            address.showConfirm = true;
                            $scope.checkoutShippingAddresses.addresses.forEach(function(item) {
                                if (item.deleteClicked) {
                                    $("#deleteShipping .address" + item.idx + " .address").removeClass("slide");
                                    $("#deleteShipping .address" + item.idx + " .confirm").removeClass("slidein");
                                    item.showDelete = true;
                                    $timeout(function() {
                                        item.deleteClicked = false;
                                        item.showConfirm = false;
                                        $("#deleteShipping .address" + item.idx + " .delete:not(.confirm)").removeClass("slideOut");
                                    }, 500);
                                }
                            });
                            address.deleteClicked = true;
                            $("#deleteShipping .address" + address.idx + " .delete:not(.confirm)").addClass("slideOut");
                            $timeout(function() {
                                $("#deleteShipping .address" + address.idx + " .confirm").addClass("slidein");
                                $("#deleteShipping .address" + address.idx + " .address").addClass("slide");
                                address.showDelete = false;
                            });
                            $timeout(function() {
                                $("#deleteShipping .address" + address.idx + " .confirmBtn").focus();
                            }, 500);
                        };
                        $scope.showDelete = function(address) {
                            return address.isDeletable && address.showDelete;
                        };
                        $scope.showConfirmDelete = function(address) {
                            return address.isDeletable && address.showConfirm;
                        };
                        $scope.showInfoMsgIcon = function(address) {
                            return isPrimaryOrSelected(address) && !address.contingencyInfoMsgKey;
                        };
                        $scope.showInfoMessage = function(address) {
                            if (address.default_address) {
                                address.contingencyInfoMsgKey = contingencyMapping.ADDRESS_CANNOT_REMOVE_SELECTED;
                            } else if (address.primary_address) {
                                address.contingencyInfoMsgKey = contingencyMapping.ADDRESS_CANNOT_REMOVE_PRIMARY;
                            }
                            $timeout(function() {
                                $("#deleteShipping .address" + address.idx + " .msg-inline").addClass("expand");
                                $("#deleteShipping .deleteBtn").first().focus();
                            });
                        };
                        $scope.onConfirmDelete = function(address) {
                            address.action("delete", {
                                success: function success() {
                                    removeAddress(address);
                                },
                                contingencies: {
                                    DEFAULT: function DEFAULT(name) {
                                        if (name === "ADDRESS_ALREADY_REMOVED") {
                                            removeAddress(address);
                                            return;
                                        }
                                        address.isDeletable = false;
                                        address.contingencyErrorMsgKey = contingencyMapping[name] || contingencyMapping.ADDRESS_CANNOT_REMOVE;
                                        $("#deleteShipping .address" + address.idx + " .address").removeClass("slide");
                                        $("#deleteShipping .address" + address.idx + " .address").addClass("slideFast");
                                        $timeout(function() {
                                            $("#deleteShipping .address" + address.idx + " .msg-inline").addClass("expand");
                                        }, 500);
                                    }
                                }
                            });
                        };
                        $scope.numModalElements = function() {
                            if (!$scope.checkoutShippingAddresses.addresses) {
                                return 0;
                            }
                            return $scope.checkoutShippingAddresses.addresses.reduce(function(sum, address, index) {
                                var item = $scope.showInfoMsgIcon(address) || $scope.showConfirmDelete(address) ? index + 1 : 0;
                                return sum + item;
                            }, 0);
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-member-components/src/select-shipping/delete-shipping/template.html": function(module, exports) {
        module.exports = '<div ng-class="{\'aside\': sidebar, \'fullpage\': !sidebar}" id="deleteShipping" modal-box="numModalElements()" modal-cancel="goBack()">\n    <xo-aside-header heading=\'asideHeader.deleteShipping\' back-url="{{backUrl}}"></xo-aside-header>\n\n    <div class="asideContent showAll" xo-tray-height content>\n        <ul class="items" select-box="numModalElements()" select-allow-tab-escape focus-when focus-refresh-on="\'addressUpdated\'">\n            <li ng-repeat="address in checkoutShippingAddresses.addresses" role="presentation" class="item address{{address.idx}}">\n                <div class="itemInner">\n                    <div class="address" ng-class="{\'notDeletable\': !address.isDeletable}">\n                        <span class="display fullName">{{address.recipient_name}}</span>\n                        <xo-address-display address=address country-code=countryCode show-preferred="true"></xo-address-display>\n                    </div>\n                    <div>\n                        <span class="msgIcon" ng-if="showInfoMsgIcon(address)" ng-click="showInfoMessage(address)" title="More Info"></span>\n                    </div>\n                    <div ng-if="address.isDeletable">\n                        <div class="delete" ng-if="showDelete(address)">\n                            <a track-link="address_delete" href="" ng-click="onDelete(address)" class="deleteBtn">\n                                <span>{{content(\'deleteShipping.delete\')}}</span>\n                            </a>\n                        </div>\n                        <div class="delete confirm" ng-if="showConfirmDelete(address)">\n                            <a track-link="address_delete_confirm" href="" ng-click="onConfirmDelete(address)" class="confirmBtn">\n                                <span>{{content(\'deleteShipping.confirm\')}}</span>\n                            </a>\n                        </div>\n                    </div>\n                    <div class="msg-inline" ng-if="address.contingencyInfoMsgKey">\n                        <div class="msg-inlineInner" tabindex="-1" focus-when="address.contingencyInfoMsgKey">\n                            <span>{{content(address.contingencyInfoMsgKey)}}</span>\n                        </div>\n                    </div>\n                    <div class="msg-inline msg-error" ng-if="address.contingencyErrorMsgKey">\n                        <div class="msg-inlineInner" tabindex="-1" focus-when="address.contingencyErrorMsgKey">\n                            <span class="icon"></span>\n                            <div class="content">{{content(address.contingencyErrorMsgKey)}}</div>\n                        </div>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n</div>\n';
    },
    "./components/xo-address-components/src/address-display/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoAddressDisplayComponent = undefined;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _template = __webpack_require__("./components/xo-address-components/src/address-display/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-address-components/src/address-display/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoAddressDisplayComponent = exports.$xoAddressDisplayComponent = _index.$Component.extend("$xoAddressDisplayComponent", {
            tag: "xo-address-display",
            template: _template2["default"],
            props: {
                address: {
                    type: "var"
                },
                showPreferred: {
                    type: "str",
                    required: false
                },
                countryCode: {
                    type: "var",
                    required: false
                },
                displayFormattedAddr: {
                    type: "var",
                    required: false
                }
            },
            lifecycle: {
                populate: function populate() {
                    var _this = this;
                    var address = this.props.address || {};
                    var countryCode = typeof this.props.countryCode === "undefined" ? address.country || address.country_code : this.props.countryCode;
                    this.isPreferred = this.props.showPreferred && address.preferred_address && (0, 
                    _index.$feature)("preferredShipping", false, countryCode);
                    if (this.props.displayFormattedAddr) {
                        this.formattedAddr = this.actions.formatAddress(address);
                        this.$watchCollection("props.address", function(newVal) {
                            _this.formattedAddr = _this.actions.formatAddress(newVal);
                        });
                    }
                }
            },
            actions: {
                formatAddress: function formatAddress(address) {
                    var COMMA = ", ";
                    var SPACE = " ";
                    function prefix(str, prefixStr) {
                        if (str) {
                            return (prefixStr ? prefixStr : "") + str;
                        }
                        return "";
                    }
                    var displayLine1 = (address.line1 ? address.line1 : "") + (address.line2 ? prefix(address.line2, COMMA) : "");
                    var displayLine2 = (address.city ? prefix(address.city) : "") + (address.state ? prefix(address.state, COMMA) : "") + (address.postal_code ? prefix(address.postal_code, SPACE) : "");
                    var displayLine3 = address.country ? prefix(address.country) : "";
                    return {
                        displayLine1: displayLine1,
                        displayLine2: displayLine2,
                        displayLine3: displayLine3
                    };
                }
            }
        });
        angular.value("$xoAddressDisplayComponent", $xoAddressDisplayComponent);
        _index.$Component;
        _index.$feature;
    },
    "./components/xo-address-components/src/address-display/template.html": function(module, exports) {
        module.exports = '<div class="adr" ng-class=[props.countryCode] content>\n    <div ng-if="props.address.full_address && !props.displayFormattedAddr" class="confidential">\n        <span class="full-address" directionality-text="props.address.full_address">{{props.address.full_address}}</span>\n        <span class="country adr-break">{{content(\'countryList.\'+props.address.country)}}</span>\n    </div>\n\n    <div ng-if="props.displayFormattedAddr" class="shippingAddress">\n        {{formattedAddr.displayLine1}}<br/>\n        {{formattedAddr.displayLine2}}<br/>\n        {{formattedAddr.displayLine3}}\n    </div>\n\n    <div ng-if="isPreferred" class="preferred">\n        <span>\n            {{content(\'shippingAddress.preferred\')}}\n        </span>\n    </div>\n</div>';
    },
    "./components/xo-address-components/src/address-display/styles.less": "./css/app.less",
    "./components/xo-member-components/src/select-shipping/update-shipping/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-member-components/src/select-shipping/update-shipping/directive.js"), __webpack_require__("./components/xo-address-components/src/address-normalization/route.js"), __webpack_require__("./components/xo-address-components/src/add-address/directive.js"), __webpack_require__("./components/xo-member-components/src/select-shipping/shipping-address/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-update-shipping.route", [ "squid", "xo-shipping-address.directive", "xo-add-address.directive", "xo-address-normalization.route" ]).factory("$UpdateShippingRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("UpdateShippingRoute", {
                        name: "updateShipping",
                        directive: "xo-update-shipping",
                        titleContent: "addShipping.addAddress",
                        trackingData: {
                            fptiState: "update_shipping",
                            buzname: {
                                fullpage: {
                                    pagename: "%::update_shipping",
                                    pagename2: "%::update_shipping:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        loginRequired: true,
                        children: [ {
                            name: "$AddressNormalizationRoute",
                            attributes: {
                                id: "token",
                                sidebar: "sidebar",
                                address: "address",
                                "done-fn": "uponNormalization"
                            }
                        } ]
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-member-components/src/select-shipping/update-shipping", "components/xo-member-components/src/select-shipping/update-shipping/route.js");
    },
    "./components/xo-member-components/src/select-shipping/update-shipping/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-member-components/src/select-shipping/update-shipping/template.html"), __webpack_require__("./components/xo-member-components/src/select-shipping/shipping-address/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            return squid.module("xo-select-shipping.update-shipping.directive", [ "squid", "xo-shipping-address.directive" ]).directive("xoUpdateShipping", function() {
                return {
                    template: template,
                    scope: {
                        auth: "=",
                        token: "=",
                        doneFn: "=",
                        sidebar: "="
                    },
                    controller: function controller($scope) {}
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-member-components/src/select-shipping/update-shipping/template.html": function(module, exports) {
        module.exports = '<xo-shipping-address token="token" done-fn="doneFn" sidebar="sidebar" update="true"></xo-shipping-address>';
    },
    "./pages/xo-shipping/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$SidebarShippingRoute = undefined;
        __webpack_require__("./pages/xo-shipping/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $SidebarShippingRoute = exports.$SidebarShippingRoute = _squid.$ComponentRoute.extend("$SidebarShippingRoute", {
            path: "shipping",
            directive: "xo-shipping",
            titleContent: "asideHeader.selectShipping",
            trackingData: {
                fptiState: "select_shipping_address",
                templateName: "selectShipping.dust",
                pageGoal: "Select Shipping",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-select-shipping-address",
                        pagename2: "%::fullpage-select-shipping-address:member:hermes:",
                        version: "member:%:"
                    }
                }
            }
        });
        angular.value("$SidebarShippingRoute", $SidebarShippingRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-shipping/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoShippingComponent = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _template = __webpack_require__("./pages/xo-shipping/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-member-components/src/select-shipping/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoShippingComponent = exports.$xoShippingComponent = _squid.$Component.extend("$xoShippingComponent", {
            tag: "xo-shipping",
            template: _template2["default"],
            scope: {
                backUri: "="
            },
            controller: function controller($scope, $rootScope, $location) {
                $scope.token = $rootScope.token;
                $scope.onComplete = function(result) {
                    _uiRouter.$state.go($scope.backUri || "checkout.review");
                };
            }
        });
        angular.value("$xoShippingComponent", $xoShippingComponent);
        _squid.$Component;
        _uiRouter.$state;
    },
    "./pages/xo-shipping/template.html": function(module, exports) {
        module.exports = '<section class="selectShipping">\n    <xo-select-shipping done-fn="onComplete" token="token" back-uri="backUri"></xo-select-shipping>\n</section>\n';
    },
    "./components/xo-member-components/src/select-shipping/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/xo-member-components/src/select-shipping/select-shipping/directive.js"), __webpack_require__("./components/xo-member-components/src/select-shipping/add-shipping/directive.js"), __webpack_require__("./components/xo-member-components/src/select-shipping/delete-shipping/directive.js"), __webpack_require__("./components/xo-member-components/src/select-shipping/update-shipping/directive.js"), __webpack_require__("./components/xo-member-components/src/select-shipping/shipping-address/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function() {}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), 
        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./components/xo-member-components/src/select-shipping/select-shipping/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-member-components/src/select-shipping/select-shipping/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-address-components/src/address-display/directive.js"), __webpack_require__("./components/xo-page-components/src/aside-header/directive.js"), __webpack_require__("./components/xo-tray-height/dist/directive.js"), __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-select-shipping.directive", [ "squid", "xomodel.checkout", "xo-address-display.directive", "xo-aside-header.directive", "xo-tray-height.directive", "xo-accessibility.directive" ]).directive("xoSelectShipping", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        doneFn: "=",
                        backUri: "="
                    },
                    controller: function controller($scope, $log, $populate, $state, $CheckoutSessionModel, $CheckoutAppDataModel, $CheckoutShippingAddressesModel, $config, $feature, $renderContent, $locale) {
                        $populate($scope, {
                            checkoutAppData: $CheckoutAppDataModel.instance($scope.token),
                            checkoutSession: $CheckoutSessionModel.instance($scope.token),
                            checkoutShippingAddresses: $CheckoutShippingAddressesModel.create($scope.token)
                        }).then(function() {
                            if (!($scope.checkoutSession.get("message.type") === "error")) {
                                $scope.checkoutSession.message = null;
                            }
                            $scope.deleteShipping = function() {
                                if ($scope.backUri === "checkout.shipTo") {
                                    return false;
                                }
                                return $scope.checkoutShippingAddresses.addresses.some(function(address) {
                                    return !(address.primary_address || address.default_address);
                                });
                            };
                        });
                        $scope.onSelect = function(address) {
                            if (!address.disable_for_transaction) {
                                address.action("select", {
                                    resultModel: $scope.checkoutSession,
                                    success: function success(result) {
                                        $scope.checkoutSession.message = {
                                            type: "success",
                                            msgKeys: [ "smallToolTip.addressUpdated" ]
                                        };
                                        $scope.checkoutShippingAddresses.invalidate();
                                        $scope.doneFn(address);
                                    }
                                });
                            }
                        };
                        $scope.locale = $locale;
                        $scope.addLink = function() {
                            if ($scope.backUri === "checkout.shipTo") {
                                return "checkout.shipTo.sidebar.addShipping";
                            }
                            return "checkout.review.sidebar.addShipping";
                        };
                        var merchantCountry = $scope.checkoutAppData.get("merchant.merchant_country", "US");
                        var countryName = $renderContent("countryList." + merchantCountry);
                        var infoMessage = $renderContent("selectShipping.blockNonDomesticShippingInfo", {
                            shippingCountry: countryName
                        });
                        $scope.blkNonDomesticShippingMsg = {
                            msgs: [ infoMessage ],
                            type: "desc"
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-member-components/src/select-shipping/select-shipping/template.html": function(module, exports) {
        module.exports = '<div class="aside" id="selectShipping" content modal-box modal-refresh-on="\'populated\'" modal-cancel="doneFn()">\n    <xo-aside-header ng-if="deleteShipping()" hdrtype=\'tall\' heading=\'asideHeader.selectShipping\'\n                     sub-header-left-link=\'checkout.review.sidebar.addShipping\'\n                     sub-header-left="asideHeader.add"\n                     sub-header-left-icon="true"\n                     sub-header-right-link=\'checkout.review.sidebar.deleteShipping\'\n                     sub-header-right="asideHeader.delete"\n                     sub-header-right-icon="true"></xo-aside-header>\n\n    <xo-aside-header hdrtype=\'tall\' heading=\'asideHeader.selectShipping\'\n                     ng-if="!deleteShipping()"\n                     back-url="{{backUri}}"\n                     sub-header-left-link="{{addLink()}}"\n                     sub-header-left="asideHeader.add"\n                     sub-header-left-icon="true"></xo-aside-header>\n\n    <div class="asideContent showAll" xo-tray-height>\n        <ul class="items" select-box="checkoutShippingAddresses.addresses" select-allow-tab-escape>\n            <li ng-repeat="address in checkoutShippingAddresses.addresses"\n                role="presentation"\n                class="address trayInner trayInnerDefault"\n                ng-class="{selectable: !address.default_address, disabled: address.disable_for_transaction}">\n\n                <xo-message ng-if="address.disable_for_transaction" message="blkNonDomesticShippingMsg"\n                            class="shippingBlk"></xo-message>\n\n                <a track-submit href="" ng-click="onSelect(address)" class="shippingBlk" select-option="address.default_address" focus-when="address.default_address" role="option" ng-attr-aria-selected="{{ address.default_address ? \'true\' : undefined }}">\n                    <span class="display fullName">{{address.recipient_name}}</span>\n                    <xo-address-display address=address country-code=countryCode\n                                        show-preferred="true"></xo-address-display>\n                    <span class="checkIcon" ng-if="address.default_address">\n                        <span class="accessAid" ng-if="locale.lang === \'en\'">Selected</span>\n                    </span>\n                </a>\n            </li>\n        </ul>\n    </div>\n</div>\n';
    },
    "./js/app.js": function(module, exports, __webpack_require__) {
        __webpack_require__("./css/app.less");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _route = __webpack_require__("./pages/xo-checkout/route.js");
        var _route2 = _interopRequireDefault(_route);
        var _middleware = __webpack_require__("./js/lib/middleware.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        _logger.$logger.info("app_bootstrap", {
            hash: window.location.hash
        });
        var xoCheckoutRoute = new _route2["default"]();
        xoCheckoutRoute.bootstrap("checkout.landing", _middleware.$Middleware);
        window.bootstrap = true;
        _logger.$logger;
        _middleware.$Middleware;
    },
    "./pages/xo-sidebar/template.html": function(module, exports) {
        module.exports = '<aside class="sidebar" id="tray" ng-click="onPageClick($event)" modal-box modal-cancel="back()" tabindex="-1">\n\n    <div class="aside" id="{{viewConfig.aside}}">\n        <xo-aside-header ng-if="viewConfig.aside" hdrtype="tall" heading="{{viewConfig.heading}}" sub-head=\'{{viewConfig.subHeading}}\' add-link=\'{{viewConfig.addRoute}}\'></xo-aside-header>\n        <div ui-view></div>\n    </div>\n</aside>\n\n<span class="trayViewMask" ng-click="close()"></span>\n';
    },
    "./pages/xo-sidebar-add-shipping/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$SidebarAddShippingRoute = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./pages/xo-sidebar-add-shipping/directive.js");
        __webpack_require__("./components/xo-member-components/src/select-shipping/add-shipping/route.js");
        var $SidebarAddShippingRoute = exports.$SidebarAddShippingRoute = _squid.$ComponentRoute.extend("$SidebarAddShippingRoute", {
            path: "sidebarAddShipping",
            directive: "xo-sidebar-add-shipping-page",
            titleContent: "addShipping.addAddress",
            trackingData: {
                templateName: "tray/addShippingAddress.dust",
                pageGoal: "Add Shipping",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-add-shipping-address",
                        pagename2: "%::fullpage-add-shipping-address:member:hermes:tray",
                        version: "member:%:tray"
                    }
                }
            },
            children: [ {
                name: "$AddShippingRoute",
                attributes: {
                    token: "token"
                },
                message: "message",
                sidebar: "sidebar",
                "parent-callbacks": "callbacks"
            } ]
        });
        angular.value("$SidebarAddShippingRoute", $SidebarAddShippingRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-sidebar-add-shipping/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoSidebarAddShippingPageComponent = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _template = __webpack_require__("./pages/xo-sidebar-add-shipping/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-page-components/src/aside-header/directive.js");
        __webpack_require__("./components/xo-validation/dist/directive.js");
        __webpack_require__("./components/xo-member-components/src/select-shipping/directive.js");
        __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoSidebarAddShippingPageComponent = exports.$xoSidebarAddShippingPageComponent = _squid.$Component.extend("$xoSidebarAddShippingPageComponent", {
            tag: "xo-sidebar-add-shipping-page",
            template: _template2["default"],
            controller: function controller($scope, $rootScope, $state) {
                $scope.token = $rootScope.token;
                $scope.sidebar = true;
                $scope.onComplete = function() {
                    $state.go("checkout.review");
                };
            }
        });
        angular.value("$xoSidebarAddShippingPageComponent", $xoSidebarAddShippingPageComponent);
        _squid.$Component;
    },
    "./pages/xo-sidebar-add-shipping/template.html": function(module, exports) {
        module.exports = '<div class="aside" id="addShipping">\n\n</div>\n';
    },
    "./components/xo-validation/dist/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular, squid) {
            squid.module("xo-validation.directive", [ "squid" ]).directive("xoValidation", function() {
                return {
                    template: "",
                    restrict: "A",
                    require: "ngModel",
                    link: function link(scope, elem, attr, ngModel) {
                        var validationUtil = {
                            trim: function trim(value) {
                                var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
                                return value.replace(rtrim, "");
                            },
                            valid: function valid(value, regex) {
                                if (this.empty(value)) {
                                    return false;
                                }
                                if (angular.isString(regex)) {
                                    regex = new RegExp(regex);
                                }
                                return regex ? regex.test(value) : true;
                            },
                            empty: function empty(value) {
                                if (!value) {
                                    return true;
                                }
                                return !this.trim(value);
                            },
                            alphabetic: function alphabetic(value) {
                                return this.valid(value, /[A-Za-z]+$/);
                            },
                            numeric: function numeric(value) {
                                var NUMERIC_REGEX = new RegExp("^[0-9]+$");
                                return this.valid(value, NUMERIC_REGEX);
                            },
                            validBankAccount: function validBankAccount(value) {
                                if (!scope.showIBAN) {
                                    return this.numeric(value);
                                }
                                return true;
                            },
                            validRouting: function validRouting(value) {
                                if (!scope.showIBAN) {
                                    return this.valid(value, /^\d{8}$/);
                                }
                                return true;
                            },
                            validIBANCode: function validIBANCode(value) {
                                if (scope.showIBAN) {
                                    value = value && value.replace(/ +/g, "");
                                    return this.valid(value, /^([A-Z]){2}\d{2}[A-Z0-9]{1,30}$/);
                                }
                                return true;
                            },
                            validIBAN: function validIBAN(value) {
                                if (scope.showIBAN) {
                                    value = value && value.replace(/ +/g, "");
                                    return this.valid(value, /^DE\d{20}$/);
                                }
                                return true;
                            },
                            validIBANCountry: function validIBANCountry(value) {
                                value = value && value.replace(/ +/g, "");
                                return !this.valid(value, /^([^D0-9][E]|[D][^E0-9]|[^D0-9][^E0-9])\d{2}[A-Z0-9]{1,30}$/i);
                            },
                            validIBANWithValidCountryCode: function validIBANWithValidCountryCode(value) {
                                value = value && value.replace(/ +/g, "");
                                return this.valid(value, /^(AT|BE|CY|EE|FI|FR|DE|EL|IE|IT|LV|LT|LU|MT|MC|NL|PT|SK|SI|ES)\d{3,32}$/i);
                            },
                            validLast4: function validLast4(value) {
                                var LAST_4 = /^([0-9]{4})?$/;
                                return this.valid(value, LAST_4);
                            },
                            validStreet: function validStreet(value) {
                                return this.valid(value, /^([A-Za-z0-9-. ]*)$/);
                            },
                            validPhone: function validPhone(value) {
                                var regex = scope.pattern;
                                value = value && value.replace(/[^0-9]/gi, "");
                                return this.valid(value, regex);
                            },
                            validDobYear: function validDobYear(value) {
                                return value !== "YYYY";
                            },
                            validDobDay: function validDobDay(value) {
                                return value !== "DD";
                            },
                            validDobMonth: function validDobMonth(value) {
                                return value !== "MM";
                            },
                            validPoBox: function validPoBox(value) {
                                var boxRE = /\b(((general\s+)?post\s+(office|mail)?)|((g\.?)?p[-\.]?\s?[om][\.-]?))\s?(b(ox|\.)?)?(\s+\d+)\b/i;
                                if (boxRE.test(value)) {
                                    return true;
                                }
                                return false;
                            },
                            validAddressSansPoBox: function validAddressSansPoBox(value) {
                                var boxRE = /(p[-.]? ?[om]?[-.]? ?|post ?(office|mail)?)? ?b(.|ox)[^,]*\d+/i;
                                var cassRE = /(drawer|locker|bin|firm caller)\s?#?[0-9]+/i;
                                if (boxRE.test(value) || cassRE.test(value)) {
                                    return false;
                                }
                                return true;
                            },
                            validEmailOrPhone: function validEmailOrPhone(value) {
                                if (!value) {
                                    return false;
                                }
                                return this.validEmail(value) || this.validPhone(value);
                            },
                            validEmail: function validEmail(value) {
                                if (!value) {
                                    return false;
                                }
                                var trimmedValue = this.trim(value);
                                var EMAIL_REGEX = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i;
                                return this.valid(trimmedValue, EMAIL_REGEX) && !this.highAscii(trimmedValue);
                            },
                            highAscii: function highAscii(value) {
                                var trimmedValue = this.trim(value);
                                var HIGH_ASCII_REGEX = /[^\x00-\x7F]/;
                                return this.valid(trimmedValue, HIGH_ASCII_REGEX);
                            },
                            validDate: function validDate(value) {
                                var re = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
                                var dArr = value.split("/");
                                var d = new Date(value);
                                var isValid = false;
                                if (re.test(value)) {
                                    isValid = d.getMonth() + 1 === dArr[0] && d.getDate() === dArr[1] && d.getFullYear() === dArr[2];
                                }
                                return isValid;
                            },
                            validDateWithoutDay: function validDateWithoutDay(value, options) {
                                var state = options.state;
                                value = value.replace(/\s/g, "");
                                if (value === "") {
                                    return true;
                                }
                                var split = value.split("/");
                                var month = split[0];
                                var year = split[1];
                                var currentYear = parseInt(new Date().getFullYear().toString().substr(2, 2), 10);
                                var currentMonth = parseInt(new Date().getMonth(), 10) + 1;
                                var validYear = true;
                                var validMonth = true;
                                if (value.length < 5) {
                                    return false;
                                }
                                if (this.validDobMonth(month)) {
                                    month = parseInt(month, 10);
                                } else {
                                    return false;
                                }
                                year = parseInt(year, 10);
                                if (state === "past") {
                                    validYear = year <= currentYear;
                                    if (!validYear) {
                                        return false;
                                    }
                                    if (year === currentYear) {
                                        validMonth = month <= currentMonth;
                                    }
                                } else if (state === "future") {
                                    validYear = year >= currentYear;
                                    if (!validYear) {
                                        return false;
                                    }
                                    if (year === currentYear) {
                                        validMonth = month >= currentMonth;
                                    }
                                }
                                if (!validYear || !validMonth) {
                                    return false;
                                }
                                return true;
                            },
                            mmddyyyy: function mmddyyyy(day, month, year) {
                                if (year.length < 4) {
                                    year = "20" + year;
                                }
                                return this.twoDigits(month) + "/" + this.twoDigits(day) + "/" + this.twoDigits(year);
                            },
                            yyyymmdd: function yyyymmdd(day, month, year) {
                                if (year.length < 4) {
                                    year = "20" + year;
                                }
                                return year + "-" + this.twoDigits(month) + "-" + this.twoDigits(day);
                            },
                            twoDigits: function twoDigits(value) {
                                return value < 10 ? "0" + value : "" + value;
                            },
                            legalAge: function legalAge(value) {
                                if (this.empty(value)) {
                                    return false;
                                }
                                var dateParts = value.split("-");
                                var birthDate = new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);
                                var yr = 365.25 * 24 * 60 * 60 * 1e3;
                                var validBD = new Date(new Date() - 18 * yr);
                                return validBD >= birthDate;
                            },
                            validZip: function validZip(value, options) {
                                var postalCodeRegex = {
                                    GB: /[A-Z]{1,2}[0-9][0-9A-Z]?\s?[0-9][A-Z]{2}/,
                                    BA: /^\d{5}$/,
                                    CY: /^\d{4}$/,
                                    EE: /^\d{5}$/,
                                    HR: /^\d{5}$/,
                                    LU: /^\d{4}$/,
                                    LV: /^\d{4}$/,
                                    MT: /^\d{3,4}$/,
                                    SI: /^\d{4}$/,
                                    SK: /^[0-9]{3}[\s][0-9]{2}$/,
                                    NZ: /^\d{4}$/,
                                    LT: /^\d{5}$/,
                                    BG: /^\d{4}$/,
                                    CZ: /^\d{5}$/,
                                    GR: /^\d{3}[\s]\d{2}$/,
                                    HU: /^\d{4}$/,
                                    MX: /^\d{5}$/
                                };
                                var country = options && options.country;
                                var regex = scope.zipEntry && scope.zipEntry.validationPattern || postalCodeRegex[country];
                                var isRequired = scope.zipEntry && scope.zipEntry.required;
                                if (!isRequired && this.empty(value)) {
                                    return true;
                                }
                                if (!regex || angular.isString(regex) && regex.indexOf("validationPattern") > -1) {
                                    return !this.empty(value);
                                }
                                value = value && value.toUpperCase();
                                if (angular.isString(regex)) {
                                    if (regex.charAt(0) !== "^") {
                                        regex = "^" + regex;
                                    }
                                    if (regex.charAt(regex.length - 1) !== "$") {
                                        regex += "$";
                                    }
                                }
                                return this.valid(value, regex);
                            },
                            validExpiry: function validExpiry(value, options) {
                                var $monthEl = $('[ng-model="card.expiry_month"]');
                                var $yearEl = $('[ng-model="card.expiry_year"]');
                                var month = $monthEl.val();
                                var year = $yearEl.val();
                                var isValid = false;
                                var monthElName = "card.expiry_month";
                                var yearElName = "card.expiry_year";
                                var cardType = options.cardType;
                                if (month) {
                                    month = $monthEl.find("option")[$monthEl.val() * 1 + 1].label;
                                }
                                if (year) {
                                    year = $yearEl.find("option")[$yearEl.val() * 1 + 1].label;
                                }
                                if (month && year) {
                                    isValid = this.validExpires(month, year);
                                }
                                var formName = $monthEl.closest("form").attr("id");
                                var form = scope[formName] || scope.$parent[formName];
                                var monthFieldName = monthElName;
                                var yearFieldName = yearElName;
                                if (monthFieldName.indexOf(".") !== -1) {
                                    monthFieldName = monthFieldName.split(".")[1];
                                }
                                if (yearFieldName.indexOf(".") !== -1) {
                                    yearFieldName = yearFieldName.split(".")[1];
                                }
                                var cardsDontNeedExpiry = [ "COFIDIS", "COFINOGA", "CETELEM" ];
                                if (cardType && cardsDontNeedExpiry.indexOf(cardType) !== -1) {
                                    isValid = true;
                                }
                                if (form) {
                                    form[monthFieldName].$setValidity("validExpiry", isValid);
                                    form[yearFieldName].$setValidity("validExpiry", isValid);
                                }
                                return isValid;
                            },
                            validExpires: function validExpires(month, year) {
                                var date = new Date();
                                var currentYear = parseInt(date.getFullYear().toString().substr(2, 2), 10);
                                var currentMonth;
                                if (year < currentYear) {
                                    return false;
                                } else if (year > currentYear) {
                                    return this.validDobMonth(month);
                                }
                                currentMonth = date.getMonth() + 1;
                                return this.validDobMonth(month) && month >= currentMonth;
                            },
                            startDate: function startDate(value, options) {
                                var valueOptions = {
                                    cardType: scope.card.type
                                };
                                valueOptions[elem.attr("id")] = value;
                                return this.setStartDateValidity(valueOptions);
                            },
                            setExpiryValidity: function setExpiryValidity(options) {
                                if (!options) {
                                    return true;
                                }
                                var cardType = options.cardType || "", expiryValidity = this.validExpiry(null, {
                                    cardType: cardType
                                });
                                return expiryValidity;
                            },
                            setStartDateValidity: function setStartDateValidity(options) {
                                if (!options) {
                                    return true;
                                }
                                var cardType = options.cardType || "";
                                var startDateValidity = true;
                                var $monthEl = $("#startmonth");
                                var $yearEl = $("#startyear");
                                var month = $monthEl.val();
                                var year = $yearEl.val();
                                if (cardType === "MAESTRO") {
                                    if (!month || !year) {
                                        startDateValidity = false;
                                    }
                                }
                                var formName = $monthEl.closest("form").attr("id"), form = scope[formName] || scope.$parent[formName];
                                if (form) {
                                    form.startmonth.$setValidity("startDate", startDateValidity);
                                    form.startyear.$setValidity("startDate", startDateValidity);
                                }
                                return startDateValidity;
                            },
                            dobField: function dobField(value, options) {
                                var valueOptions = {};
                                var fieldMap = {
                                    dobDayCC: "day",
                                    dobMonthCC: "month",
                                    dobYearCC: "year"
                                };
                                valueOptions.cardType = scope.card.type;
                                valueOptions[fieldMap[elem.attr("id")]] = value;
                                return this.setDOBValidity(valueOptions);
                            },
                            setDOBValidity: function setDOBValidity(options) {
                                if (!options) {
                                    return true;
                                }
                                var dobEnabledCards = [ "COFIDIS", "COFINOGA", "CETELEM" ];
                                var dobValidity = true;
                                var $monthEl = $("#dobMonthCC");
                                var $dayEl = $("#dobDayCC");
                                var $yearEl = $("#dobYearCC");
                                var month = options.month || $monthEl.val();
                                var year = options.year || $yearEl.val();
                                var day = options.day || $dayEl.val();
                                if (month) {
                                    month = $monthEl.find("option")[$monthEl.val() * 1 + 1].label;
                                }
                                if (day) {
                                    day = $dayEl.find("option")[$dayEl.val() * 1 + 1].label;
                                }
                                if (year) {
                                    year = $yearEl.find("option")[$yearEl.val() * 1 + 1].label;
                                }
                                var cardType = options.cardType;
                                if (cardType && dobEnabledCards.indexOf(cardType) !== -1) {
                                    if (!month || !year || !day) {
                                        dobValidity = false;
                                    } else if (!this.legalAge(this.yyyymmdd(day, month, year))) {
                                        dobValidity = false;
                                    } else if (!this.validDate(this.mmddyyyy(day, month, year))) {
                                        dobValidity = false;
                                    }
                                }
                                var formName = $monthEl.closest("form").attr("id");
                                var form = scope[formName] || scope.$parent[formName];
                                if (form) {
                                    form.dobMonthCC.$setValidity("dobField", dobValidity);
                                    form.dobDayCC.$setValidity("dobField", dobValidity);
                                    form.dobYearCC.$setValidity("dobField", dobValidity);
                                }
                                return dobValidity;
                            },
                            validName: function validName(value) {
                                return this.valid(value, /^([a-zA-Z,\xC0-\xFF,\u00C0-\u017F\,\-\s\,\'])*$/);
                            },
                            isChecked: function isChecked(value, options) {
                                var $el = $(options.el);
                                return $el.is(":checked");
                            },
                            validRUPassport: function validRUPassport(value, options) {
                                if (scope.user.countryOfResidence === "RU") {
                                    return this.valid(value, /^\d{10}$/);
                                }
                                return true;
                            }
                        };
                        var customValidator = function customValidator(value) {
                            var ruleJson = angular.fromJson(elem.attr("xo-validation"));
                            var validator = ruleJson.validator;
                            var options = ruleJson.options;
                            ngModel.$setValidity(validator, validationUtil[validator](value, options));
                            return value;
                        };
                        ngModel.$parsers.unshift(customValidator);
                        ngModel.$formatters.unshift(customValidator);
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./pages/xo-sidebar-update-shipping/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$SidebarUpdateShippingRoute = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./pages/xo-sidebar-update-shipping/directive.js");
        __webpack_require__("./components/xo-member-components/src/select-shipping/update-shipping/route.js");
        var $SidebarUpdateShippingRoute = exports.$SidebarUpdateShippingRoute = _squid.$ComponentRoute.extend("$SidebarUpdateShippingRoute", {
            path: "sidebarUpdateShipping",
            directive: "xo-sidebar-Update-shipping-page",
            titleContent: "addShipping.addAddress",
            trackingData: {
                templateName: "tray/addShippingAddress.dust",
                pageGoal: "Update Shipping",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-add-shipping-address",
                        pagename2: "%::fullpage-add-shipping-address:member:hermes:tray",
                        version: "member:%:tray"
                    }
                }
            },
            children: [ {
                name: "$UpdateShippingRoute",
                attributes: {
                    token: "token"
                },
                message: "message",
                sidebar: "sidebar",
                "parent-callbacks": "callbacks"
            } ]
        });
        angular.value("$SidebarUpdateShippingRoute", $SidebarUpdateShippingRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-sidebar-update-shipping/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoSidebarUpdateShippingPageComponent = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _template = __webpack_require__("./pages/xo-sidebar-update-shipping/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-page-components/src/aside-header/directive.js");
        __webpack_require__("./components/xo-validation/dist/directive.js");
        __webpack_require__("./components/xo-member-components/src/select-shipping/directive.js");
        __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoSidebarUpdateShippingPageComponent = exports.$xoSidebarUpdateShippingPageComponent = _squid.$Component.extend("$xoSidebarUpdateShippingPageComponent", {
            tag: "xo-sidebar-update-shipping-page",
            template: _template2["default"],
            controller: function controller($scope, $rootScope, $state) {
                $scope.token = $rootScope.token;
                $scope.sidebar = true;
                $scope.onComplete = function() {
                    $state.go("checkout.review");
                };
            }
        });
        angular.value("$xoSidebarUpdateShippingPageComponent", $xoSidebarUpdateShippingPageComponent);
        _squid.$Component;
    },
    "./pages/xo-sidebar-update-shipping/template.html": function(module, exports) {
        module.exports = '<div class="aside" id="updateShipping">\n\n</div>\n';
    },
    "./pages/xo-sidebar-add-card/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$SidebarAddCardRoute = undefined;
        __webpack_require__("./pages/xo-sidebar-add-card/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/add-card/route.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $SidebarAddCardRoute = exports.$SidebarAddCardRoute = _squid.$ComponentRoute.extend("$SidebarAddCardRoute", {
            path: "sidebarAddCard",
            directive: "xo-sidebar-add-card-page",
            titleContent: "asideHeader.addCard",
            trackingData: {
                templateName: "tray/addCard.dust",
                pageGoal: "Add Card",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-add-cc",
                        pagename2: "%::fullpage-add-cc:member:hermes:tray",
                        version: "member:%:tray"
                    }
                }
            },
            children: [ {
                name: "$AddCardFlowRoute",
                attributes: {
                    token: "token",
                    message: "message",
                    sidebar: "sidebar",
                    "back-uri": "backUri",
                    "parent-callbacks": "callbacks",
                    promotion: "promotion"
                }
            } ]
        });
        angular.value("$SidebarAddCardRoute", $SidebarAddCardRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-sidebar-add-card/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoSidebarAddCardPageComponent = undefined;
        var _template = __webpack_require__("./pages/xo-sidebar-add-card/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-wallet-components/src/add-card/directive.js");
        __webpack_require__("./components/xo-page-components/src/aside-header/directive.js");
        __webpack_require__("./components/xo-validation/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoSidebarAddCardPageComponent = exports.$xoSidebarAddCardPageComponent = _squid.$Component.extend("$xoSidebarAddCardPageComponent", {
            tag: "xo-sidebar-add-card-page",
            template: _template2["default"],
            scope: {
                promotion: "=",
                backUri: "=",
                doneUri: "="
            },
            controller: function controller($scope, $rootScope, $state) {
                $scope.billingaddressupdated = {
                    value: false
                };
                $scope.sidebar = true;
                $scope.token = $rootScope.token;
                $scope.message = {};
                $scope.callbacks = {
                    finish: function finish() {
                        $state.go($scope.doneUri || "checkout.review");
                    }
                };
            }
        });
        angular.value("$xoSidebarAddCardPageComponent", $xoSidebarAddCardPageComponent);
        _squid.$Component;
    },
    "./pages/xo-sidebar-add-card/template.html": function(module, exports) {
        module.exports = '<div class="aside" id="addCard" content>\n\t<ui-view sidebar="sidebar"></ui-view>\n</div>\n';
    },
    "./pages/xo-sidebar-add-bank/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$SidebarAddBankRoute = undefined;
        __webpack_require__("./pages/xo-sidebar-add-bank/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/add-bank/route.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $SidebarAddBankRoute = exports.$SidebarAddBankRoute = _squid.$ComponentRoute.extend("$SidebarAddBankRoute", {
            path: "sidebarAddBank",
            directive: "xo-sidebar-add-bank-page",
            titleContent: "asideHeader.addBank",
            trackingData: {
                templateName: "tray/addBank.dust",
                pageGoal: "Add Bank",
                buzname: {
                    fullpage: {
                        pagename: "%::add-bank",
                        pagename2: "%::add-bank:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: [ {
                name: "$AddBankFlowRoute",
                attributes: {
                    token: "token",
                    sidebar: "sidebar",
                    "parent-callbacks": "callbacks"
                }
            } ]
        });
        angular.value("$SidebarAddBankRoute", $SidebarAddBankRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-sidebar-add-bank/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoSidebarAddBankPageComponent = undefined;
        var _template = __webpack_require__("./pages/xo-sidebar-add-bank/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-wallet-components/src/add-bank/directive.js");
        __webpack_require__("./components/xo-page-components/src/aside-header/directive.js");
        __webpack_require__("./components/xo-validation/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoSidebarAddBankPageComponent = exports.$xoSidebarAddBankPageComponent = _squid.$Component.extend("$xoSidebarAddBankPageComponent", {
            tag: "xo-sidebar-add-bank-page",
            template: _template2["default"],
            controller: function controller($scope, $rootScope, $state) {
                $scope.sidebar = true;
                $scope.token = $rootScope.token;
                $scope.message = {};
                $scope.callbacks = {
                    done: function done() {
                        $state.go("checkout.review");
                    }
                };
            }
        });
        angular.value("$xoSidebarAddBankPageComponent", $xoSidebarAddBankPageComponent);
        _squid.$Component;
    },
    "./pages/xo-sidebar-add-bank/template.html": function(module, exports) {
        module.exports = '<div class="aside" id="addBank" content>\n    <ui-view></ui-view>\n</div>\n';
    },
    "./pages/xo-sidebar-currency-conversion/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$SidebarCurrencyConversionRoute = undefined;
        __webpack_require__("./pages/xo-sidebar-currency-conversion/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $SidebarCurrencyConversionRoute = exports.$SidebarCurrencyConversionRoute = _squid.$ComponentRoute.extend("$SidebarCurrencyConversionRoute", {
            path: "currencyConversion",
            directive: "xo-sidebar-currency-conversion-page",
            titleContent: "asideHeader.currencyConversion",
            trackingData: {
                fptiState: "currency_conversion",
                templateName: "tray/currencyOptions.dust",
                pageGoal: "Currency Conversion",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-currency-options",
                        pagename2: "%::fullpage-currency-options::hermes:",
                        version: ":%:"
                    }
                }
            },
            children: []
        });
        angular.value("$SidebarCurrencyConversionRoute", $SidebarCurrencyConversionRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-sidebar-currency-conversion/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoSidebarCurrencyConversionPageComponent = undefined;
        var _template = __webpack_require__("./pages/xo-sidebar-currency-conversion/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-page-components/src/aside-header/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/currency-conversion/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoSidebarCurrencyConversionPageComponent = exports.$xoSidebarCurrencyConversionPageComponent = _squid.$Component.extend("$xoSidebarCurrencyConversionPageComponent", {
            tag: "xo-sidebar-currency-conversion-page",
            template: _template2["default"],
            controller: function controller($scope, $rootScope, $state) {
                $scope.token = $rootScope.token;
                $scope.onComplete = function() {
                    $state.go("checkout.review");
                };
                $scope.$emit("populated");
            }
        });
        angular.value("$xoSidebarCurrencyConversionPageComponent", $xoSidebarCurrencyConversionPageComponent);
        _squid.$Component;
    },
    "./pages/xo-sidebar-currency-conversion/template.html": function(module, exports) {
        module.exports = '<div class="aside" id="currencyConversion">\n    <xo-aside-header heading=\'asideHeader.currencyConversion\'></xo-aside-header>\n    <div class="currencyConversion asideContent container" xo-tray-height>\n       <xo-currency-conversion token="token" done-fn="onComplete"></xo-currency-conversion>\n    </div>\n</div>\n';
    },
    "./components/xo-wallet-components/src/currency-conversion/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/user/index.js");
        __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js");
        var _template = __webpack_require__("./components/xo-wallet-components/src/currency-conversion/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoCurrencyConversionDirective", {
            tag: "xo-currency-conversion",
            template: _template2["default"],
            props: {
                token: {
                    type: "var"
                },
                doneFn: {
                    type: "var"
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutSession: _index.$CheckoutSessionModel.instance(this.props.token).retrieve()
                    };
                }
            },
            actions: {
                onSubmit: function onSubmit() {
                    var _this = this;
                    function mapConversionType(type) {
                        return type ? "PAYPAL" : "VENDOR";
                    }
                    var selectedConversionType = mapConversionType(this.models.ppconversion);
                    var planConversionType = mapConversionType(this.conversion.paypal);
                    _logger.$logger.info("currency_conversion", {
                        page: "conversionOptions",
                        type: planConversionType,
                        selected: selectedConversionType
                    });
                    if (selectedConversionType === planConversionType) {
                        this.props.doneFn();
                        return;
                    }
                    var payload = {
                        conversionType: selectedConversionType,
                        planId: this.checkoutInputData.funding_option_id || this.models.checkoutSession.plan.id
                    };
                    if (payload.planId) {
                        this.models.checkoutSession.fundingOptions.action("updateConversion", {
                            data: payload,
                            success: function success(result) {
                                _this.models.checkoutSession.reload({
                                    success: function success() {
                                        var conversion = _this.models.checkoutSession.plan.conversion || {};
                                        if (!_this.models.ppconversion) {
                                            if (conversion.paypal) {
                                                _logger.$logger.info("currency_conversion_not_honored", {
                                                    type: _this.models.ppconversion,
                                                    from: conversion.from,
                                                    to: conversion.to,
                                                    changeable: conversion.changeable
                                                });
                                            } else {
                                                _this.models.checkoutSession.plan.conversion = _this.models.checkoutSession.plan.conversion || {
                                                    changeable: true,
                                                    paypal: false
                                                };
                                                if (!_this.models.checkoutSession.plan.conversion.from || !_this.models.checkoutSession.plan.conversion.to) {
                                                    _logger.$logger.info("currency_conversion_rate_missing");
                                                }
                                            }
                                        }
                                        _this.props.doneFn(result);
                                    }
                                });
                            }
                        });
                    }
                }
            },
            lifecycle: {
                populate: function populate() {
                    this.conversion = this.models.checkoutSession.plan.conversion;
                    this.models.ppconversion = this.conversion.paypal;
                    this.checkoutInputData = _index2.$CheckoutInputDataModel.instance(this.props.token);
                    this.paypalConversionTotal = this.conversion.paypal === true ? this.models.checkoutSession.get("plan.sources.0.amount.amount_formatted_currency") : undefined;
                    var fundingOptionId = this.checkoutInputData.funding_option_id;
                    if (fundingOptionId && fundingOptionId !== this.models.checkoutSession.plan.id) {
                        this.models.checkoutSession.fundingOptions.action("getConversion", {
                            data: {
                                planId: fundingOptionId
                            },
                            success: function success(result) {
                                this.conversion = result;
                            }
                        });
                    }
                }
            }
        });
        _squid.$Component;
        _logger.$logger;
        _index.$CheckoutSessionModel;
        _index2.$CheckoutInputDataModel;
        module.exports = exports["default"];
    },
    "./components/xo-wallet-components/src/currency-conversion/template.html": function(module, exports) {
        module.exports = '<form method="post" class="curr_conv asideProceed formSmall" novalidate="novalidate" ng-submit="actions.onSubmit()" content form-autofocus>\n    <ul class="conversionoptions">\n        <li>\n            <div class="radioButton">\n                <input type="radio" ng-model="models.ppconversion" name="ppconversion" id="conversionPayPal" ng-value="true"/>\n                <label for="conversionPayPal">{{content(\'currencyOptions.convertPayPal\')}}</label>\n            </div>\n            <div class="conversion">\n                <div ng-if="conversion.from && conversion.to" class="dccDetails">\n                    <p>\n                        <span><b>{{content(\'currencyOptions.exchangeRate\')}}</b></span>\n                        <span class="conversionRate">{{content(\'paymentMethod.conversionRate\', {currencyFrom: conversion.from, currencyTo: conversion.to})}}</span>\n                    </p>\n                    <p ng-if="content(\'currencyOptions.conversionSecondary\')" class="conversionFeeDisclaimer" ng-bind="content(\'currencyOptions.conversionSecondary\')"></p>\n                </div>\n                <p ng-if="conversion.date" class="conversionDate">{{content(\'currencyOptions.conversionDate\', {date: conversion.date})}}</p>\n                <p ng-if="paypalConversionTotal" class="conversionAmount"><b>{{content(\'currencyOptions.amount\')}}</b> {{paypalConversionTotal}}</p>\n                <p ng-if="content(\'currencyOptions.rateDisclaimerPayPal\')" class="conversionDisclaimer">{{content(\'currencyOptions.rateDisclaimerPayPal\')}}</p>\n            </div>\n        </li>\n        <li>\n            <div class="radioButton">\n                <input type="radio" ng-model="models.ppconversion" name="ppconversion" id="conversionVendor" ng-value="false"/>\n                <label for="conversionVendor">{{content(\'currencyOptions.convertIssuer\')}}</label>\n            </div>\n            <div class="conversion">\n                <p><b>{{content(\'currencyOptions.amount\')}}</b> {{content(\'currencyOptions.issuerFinalAmount\')}}</p>\n                <p ng-if="content(\'currencyOptions.rateDisclaimerIssuer\')" class="conversionDisclaimer">{{content(\'currencyOptions.rateDisclaimerIssuer\')}}</p>\n            </div>\n        </li>\n        <li ng-if="content(\'currencyOptions.rateDisclaimerCommon\')" class="commonDisclaimer">{{content(\'currencyOptions.rateDisclaimerCommon\')}}</li>\n    </ul>\n    <div class="buttons">\n        <input id="proceedButton" type="submit" value="{{content(\'buttons.agree\')}}" class="btn full">\n    </div>\n</form>\n';
    },
    "./pages/xo-sidebar-installment-options/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$SidebarInstallmentOptionsRoute = undefined;
        __webpack_require__("./pages/xo-sidebar-installment-options/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $SidebarInstallmentOptionsRoute = exports.$SidebarInstallmentOptionsRoute = _squid.$ComponentRoute.extend("$SidebarInstallmentOptionsRoute", {
            path: "installmentOptions",
            directive: "xo-sidebar-installment-options-page",
            titleContent: "asideHeader.installmentsPanel",
            trackingData: {
                fptiState: "installment_options",
                templateName: "tray/installmentOptions.dust",
                pageGoal: "Installment Options",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-installment-options",
                        pagename2: "%::fullpage-installment-options::hermes:",
                        version: ":%:"
                    }
                }
            },
            children: []
        });
        angular.value("$SidebarInstallmentOptionsRoute", $SidebarInstallmentOptionsRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-sidebar-installment-options/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoSidebarInstallmentOptionsPageComponent = undefined;
        var _template = __webpack_require__("./pages/xo-sidebar-installment-options/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-page-components/src/aside-header/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/installment-options/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoSidebarInstallmentOptionsPageComponent = exports.$xoSidebarInstallmentOptionsPageComponent = _squid.$Component.extend("$xoSidebarInstallmentOptionsPageComponent", {
            tag: "xo-sidebar-installment-options-page",
            template: _template2["default"],
            controller: function controller($scope, $rootScope, $state) {
                $scope.token = $rootScope.token;
                $scope.onComplete = function() {
                    $state.go("checkout.review");
                };
                $scope.$emit("populated");
            }
        });
        angular.value("$xoSidebarInstallmentOptionsPageComponent", $xoSidebarInstallmentOptionsPageComponent);
        _squid.$Component;
    },
    "./pages/xo-sidebar-installment-options/template.html": function(module, exports) {
        module.exports = '<div class="aside" id="installmentOptions">\n    <xo-aside-header heading=\'asideHeader.installmentsPanel\'></xo-aside-header>\n    <xo-installment-options token="token" done-fn="onComplete"></xo-installment-options>\n</div>\n';
    },
    "./components/xo-wallet-components/src/installment-options/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/installment-options/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/auth/index.js"), __webpack_require__("./components/xo-tray-height/dist/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-installment-options.directive", [ "squid", "xomodel.checkout", "xomodel.auth", "xo-tray-height.directive" ]).directive("xoInstallmentOptions", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        doneFn: "=",
                        cardNumber: "="
                    },
                    controller: function controller($AuthModel, $scope, $populate, $CheckoutSessionModel, $InstallmentOptionsModel, $CheckoutPayeeModel, $CheckoutCartModel, $CheckoutAppDataModel) {
                        $populate($scope, {
                            auth: $AuthModel.instance()
                        }).then(function() {
                            if ($scope.auth.logged_in) {
                                $populate($scope, {
                                    checkoutSession: $CheckoutSessionModel.instance($scope.token)
                                }).then(function() {
                                    $scope.cardInfo = $scope.checkoutSession.plan.sources[0];
                                    $scope.installments = $scope.checkoutSession.installments;
                                });
                            } else {
                                var installmentsModel = $InstallmentOptionsModel.instance($scope.token);
                                installmentsModel.save({
                                    data: {
                                        cc: $scope.cardNumber,
                                        payee: $CheckoutPayeeModel.instance($scope.token),
                                        checkoutCart: $CheckoutCartModel.instance($scope.token),
                                        checkoutAppData: $CheckoutAppDataModel.instance($scope.token)
                                    },
                                    success: function success(result) {
                                        $scope.cardInfo = result.cardInfo;
                                        $scope.installments = result.installment_options;
                                    }
                                });
                            }
                        });
                        $scope.onSelect = function(index) {
                            var selectedInstallmentData = $scope.installments[index];
                            $scope.installmentsModel = $InstallmentOptionsModel.instance($scope.token);
                            var param = {
                                term: selectedInstallmentData.term,
                                payment_value: selectedInstallmentData.monthly_payment.value,
                                payment_currency: selectedInstallmentData.monthly_payment.currency
                            };
                            if (selectedInstallmentData.total_cost) {
                                param.total_cost_value = selectedInstallmentData.total_cost.value;
                                param.total_cost_currency = selectedInstallmentData.total_cost.currency;
                            }
                            if (selectedInstallmentData.discount_amount) {
                                param.discount_value = selectedInstallmentData.discount_amount.value;
                                param.discount_currency = selectedInstallmentData.monthly_payment.currency;
                            }
                            if (selectedInstallmentData.discount_percentage) {
                                param.discount_percentage = selectedInstallmentData.discount_percentage;
                            }
                            return $scope.installmentsModel.action("select", {
                                data: param,
                                success: function success(result) {
                                    if ($scope.auth.logged_in) {
                                        $scope.checkoutSession.selectedInstallmentData = selectedInstallmentData;
                                    }
                                    $scope.doneFn(result);
                                }
                            });
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/installment-options/template.html": function(module, exports) {
        module.exports = '<div content class="aside installmentOptions" ng-class="{true: \'signupflow\'}[!auth.logged_in]" >\n    <div class="cardInfo" ng-if="cardInfo">\n        <span class="ccard {{cardInfo.card_type}}" id="creditCard" role="img" aria-label="{{cardInfo.name}}"></span> {{cardInfo.name}} x-{{cardInfo.last4}}&nbsp;<span class="installmentText" ng-if="installments">{{content(\'installments.upto\')}}&nbsp;{{installments.length}}x</span>\n    </div>\n    <ul class="asideContent items" ng-if="installments">\n        <li class="installment" ng-repeat="installment in installments" ng-click="onSelect($index)" track-submit>\n            <div class="term">\n                <span>{{installment.term}}x {{content(\'installments.of\')}}&nbsp;</span>\n            </div>\n            <div class="display">\n                <span>{{installment.monthly_payment.formatted_value}}</span>\n                <div class="confidential total">\n                    <span>{{content(\'installments.total\')}}: {{installment.total}}</span>\n                    <span class="save" ng-if="installment.discount_amount">\n                        {{content(\'installments.save\')}} {{installment.discount_amount.formatted_value}}\n                    </span>\n                </div>\n            </div>\n\n        </li>\n    </ul>\n</div>';
    },
    "./pages/xo-wallet/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$SidebarWalletRoute = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _route = __webpack_require__("./components/xo-wallet-components/src/confirm-upop/route.js");
        var _route2 = _interopRequireDefault(_route);
        __webpack_require__("./pages/xo-wallet/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $SidebarWalletRoute = exports.$SidebarWalletRoute = _squid.$ComponentRoute.extend("$SidebarWalletRoute", {
            path: "wallet",
            directive: "xo-wallet",
            titleContent: "asideHeader.wallet",
            trackingData: {
                fptiState: "funding_option_selection",
                templateName: "fundingInstruments.dust",
                pageGoal: "Change Instruments",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-wallet-fundingsources",
                        pagename2: "%::fullpage-wallet-fundingsources:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            params: {
                padToggleFeature: null
            },
            children: [ {
                route: _route2["default"],
                attributes: {
                    token: "token",
                    phone: "phone",
                    cardmodel: "cardModel"
                }
            } ]
        });
        angular.value("$SidebarWalletRoute", $SidebarWalletRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-wallet/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _choice = __webpack_require__("./components/xo-models/src/choice/index.js");
        var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/fi/index.js");
        var _index3 = __webpack_require__("./components/xo-models/src/credit/index.js");
        var _index4 = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _index5 = __webpack_require__("./components/xo-models/src/fiMeta/index.js");
        var _index6 = _interopRequireDefault(_index5);
        __webpack_require__("./components/xo-credit-components/src/offer/directive.js");
        __webpack_require__("./components/xo-tray-height/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/popup/directive.js");
        __webpack_require__("./components/xo-ui-components/src/experience/directive.js");
        __webpack_require__("./components/xo-ui-components/src/fi-panel/directive.js");
        __webpack_require__("./components/xo-page-components/src/aside-header/directive.js");
        __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js");
        var _marketingoffer = __webpack_require__("./components/xo-models/src/marketingoffer/index.js");
        var _newMember = __webpack_require__("./components/xo-models/src/newMember/index.js");
        var _template = __webpack_require__("./pages/xo-wallet/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./pages/xo-wallet/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend({
            tag: "xo-wallet",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: true
                },
                promotion: {
                    type: "var",
                    required: false
                },
                installment: {
                    type: "var",
                    required: false
                }
            },
            resolve: {
                models: function models() {
                    _index6["default"].instance(this.props.token).fetch();
                    return {
                        choiceVariant: _choice.$ChoiceEligibility.instance().getVariant(this.props.token)
                    };
                }
            },
            lifecycle: {
                enter: function enter() {
                    var $scope = this;
                    $scope.locale = _squid.$locale;
                    $scope.showDisallowedMessage = false;
                    $scope.toggleDisallowedMessage = function() {
                        $scope.showDisallowedMessage = !$scope.showDisallowedMessage;
                    };
                    $scope.doneFn = function(result) {
                        if ($scope.checkoutSession.plan.paypal_credit && $scope.installment.showCYCO) {
                            _uiRouter.$state.go("checkout.chooseCreditOffer");
                        } else {
                            _uiRouter.$state.go("checkout.review");
                        }
                    };
                    $scope.showCreditPlacement = function(plan) {
                        return plan && !plan.primaryFs.isPinlessDebit && plan.primaryFs.name === "BILL_ME_LATER";
                    };
                    $scope.showDualFi = (0, _squid.$feature)("addBank");
                    $scope.padToggleFeature = _uiRouter.$stateParams.padToggleFeature;
                    $scope.padToggleFeatureSupported = (0, _squid.$feature)("padToggleFeatureSupported");
                    $scope.padToggleWalletSupported = (0, _squid.$feature)("padToggleWalletSupported");
                    $scope.creditParentContext = {};
                    $scope.memberSegment = _marketingoffer.$MemberSegmentModel.instance();
                    var newMemberExperience = function newMemberExperience(variant) {
                        var isNmj = variant && (variant === "one_page" || variant === "multi_page");
                        $scope.creditParentContext.newMember = {
                            variant: variant,
                            creditOffer: $scope.memberSegment && $scope.memberSegment.creditOffer,
                            useCEPDecision: isNmj
                        };
                    };
                    $scope.isPadToggleFeatureApplicable = function() {
                        var applicable = false;
                        if ($scope.padToggleFeatureSupported && $scope.padToggleWalletSupported && $scope.padToggleFeature && $scope.padToggleFeature.pxpTreatmentEnabled && $scope.padToggleFeature.applicable) {
                            applicable = true;
                        }
                        return applicable;
                    };
                    var isCreditInWallet = void 0;
                    var isCoreSACEligible = void 0;
                    var CREDIT_TYPE = {
                        CORE: "CORE",
                        SAC: "SAC",
                        EZP: "EZP"
                    };
                    var getMORSCreditIncentiveCampaign = function getMORSCreditIncentiveCampaign(MORSCampaigns) {
                        var creditIncentiveCampaign = null;
                        Object.keys(MORSCampaigns).forEach(function(key) {
                            if (MORSCampaigns[key] && MORSCampaigns[key].hasOwnProperty("incentiveOfferProgramId")) {
                                creditIncentiveCampaign = MORSCampaigns[key];
                            }
                        });
                        return creditIncentiveCampaign;
                    };
                    var getCreditIncentiveBanner = function getCreditIncentiveBanner(creditIncentiveCampaign) {
                        return {
                            bodyText: creditIncentiveCampaign.OfferText1,
                            bodyText2: creditIncentiveCampaign.OfferText2,
                            ctaText: (0, _squid.$renderContent)("offers.bmlOfferPassiveCta"),
                            termsText: creditIncentiveCampaign.TermsText,
                            termsLink: creditIncentiveCampaign.TermsLink,
                            termsLinkText: creditIncentiveCampaign.TermsLinkText
                        };
                    };
                    var getDefaultBanner = function getDefaultBanner(creditType, amount, termsLink) {
                        if (creditType === CREDIT_TYPE.CORE) {
                            return {
                                bodyText: (0, _squid.$renderContent)("offers.bmlOfferPassiveDetails", {
                                    cartAmount: amount
                                }),
                                ctaText: (0, _squid.$renderContent)("offers.bmlOfferPassiveCta"),
                                termsText: (0, _squid.$renderContent)("offers.subjectToApproval"),
                                termsLink: termsLink,
                                termsLinkText: (0, _squid.$renderContent)("offers.seeTermsText")
                            };
                        }
                        if (creditType === CREDIT_TYPE.SAC) {
                            return {
                                bodyText: (0, _squid.$renderContent)("offers.bmlOfferPassiveSACDetails", {
                                    cartAmount: amount
                                }),
                                ctaText: (0, _squid.$renderContent)("offers.bmlOfferPassiveCta"),
                                termsText: (0, _squid.$renderContent)("offers.subjectToApproval"),
                                termsLink: termsLink,
                                termsLinkText: (0, _squid.$renderContent)("offers.seeTermsText")
                            };
                        }
                        if (creditType === CREDIT_TYPE.EZP) {
                            return {
                                bodyText: (0, _squid.$renderContent)("offers.bmlOfferPassiveDetails", {
                                    cartAmount: amount
                                }),
                                ctaText: (0, _squid.$renderContent)("offers.bmlOfferPassiveCta"),
                                termsText: (0, _squid.$renderContent)("offers.subjectToApproval")
                            };
                        }
                    };
                    (0, _squid.$populate)($scope, {
                        auth: _index4.$AuthModel.instance($scope.token),
                        checkoutSession: _index.$CheckoutSessionModel.instance($scope.token),
                        checkoutCart: _index.$CheckoutCartModel.create($scope.token),
                        checkoutAppData: _index.$CheckoutAppDataModel.instance($scope.token),
                        payee: _index.$CheckoutPayeeModel.instance($scope.token)
                    }).then(function() {
                        _newMember.$NewMemberEligibility.instance().getVariant($scope.token).then(function(variant) {
                            return newMemberExperience(variant);
                        });
                        if ($scope.padToggleFeatureSupported && $scope.padToggleWalletSupported && $scope.padToggleFeature === null) {
                            var padToggleApplicable = $scope.checkoutSession.fundingOptions.isPadToggleApplicable();
                            if (padToggleApplicable) {
                                $scope.padToggleFeature = {
                                    applicable: false,
                                    pxpTreatmentEnabled: false
                                };
                                $scope.padToggleFeature.applicable = padToggleApplicable;
                                (0, _squid.$pxp)("xo_de_hermes_pad_toggle", {
                                    "ctx.COUNTRY": _squid.$locale.country
                                }, "(xo_de_hermes_pad_toggle_)(.*)").then(function(result) {
                                    var treatmentName = result && result.treatment_name || "";
                                    if (treatmentName === "xo_de_hermes_pad_toggle_treatment") {
                                        $scope.padToggleFeature.pxpTreatmentEnabled = true;
                                    }
                                });
                            }
                        }
                        $scope.isCurrentPlanPad = $scope.checkoutSession.plan.isPAD();
                    }).then(function() {
                        var fundingInstruments = _index.$CheckoutSessionModel.instance($scope.token).get("fundingOptions.instruments");
                        isCreditInWallet = _squid.$util.find(fundingInstruments, function(fi) {
                            return fi.name === "BILL_ME_LATER";
                        });
                        isCoreSACEligible = $scope.checkoutSession.bmlOffer === 1 || $scope.checkoutSession.bmlOffer === 2;
                        var getCreditType = function getCreditType(bmlOffer, isInst) {
                            var instModel = _index3.$CreditInstallmentModel.instance($scope.token);
                            if (instModel && instModel.creditType === CREDIT_TYPE.SAC) {
                                return CREDIT_TYPE.SAC;
                            } else if (isInst) {
                                return CREDIT_TYPE.EZP;
                            } else if (bmlOffer === 1) {
                                return CREDIT_TYPE.SAC;
                            } else if (bmlOffer === 2) {
                                return CREDIT_TYPE.CORE;
                            }
                            _logger.$logger.warn("unknown_credit_type");
                        };
                        var mapDefaultToBanner = function mapDefaultToBanner(creditReuseTerms, creditTerms) {
                            $scope.useFallbackBanner = true;
                            _logger.$logger.info("checkout_fpti", {
                                banner_type: "ACQUISITION_wallet"
                            });
                            $scope.banner = getDefaultBanner(getCreditType($scope.installment.bmlOffer, $scope.installment.installmentOptionsPresent), $scope.checkoutCart.get("purchase.amounts.total.amount_formatted"), isCreditInWallet ? creditReuseTerms : creditTerms);
                        };
                        var mapCreditIncentiveToBanner = function mapCreditIncentiveToBanner(creditIncentive) {
                            $scope.useCreditIncentiveBanner = true;
                            _logger.$logger.info("checkout_fpti", {
                                banner_type: "ACQUISITION_wallet"
                            });
                            $scope.banner = getCreditIncentiveBanner(creditIncentive);
                        };
                        if (_squid.$locale.country === "US" && !isCreditInWallet) {
                            $scope.banner = {};
                            var creditIncentive = getMORSCreditIncentiveCampaign($scope.$root.MORS || {});
                            if (creditIncentive) {
                                return mapCreditIncentiveToBanner(creditIncentive);
                            }
                            return mapDefaultToBanner(_squid.$config.urls.creditReuseTerms, _squid.$config.urls.creditTerms);
                        }
                    }).then(function() {
                        $scope.disallowedPreferredInstrument = $scope.checkoutSession.getDisallowedPreferred();
                        $scope.isBillingNoPurchase = $scope.checkoutCart.isBillingNoPurchase();
                        $scope.isBilling = $scope.checkoutCart.isBilling();
                        if ((0, _squid.$feature)("giftCard")) {
                            $scope.showGC = Math.random() < .01 && !$scope.isBillingNoPurchase;
                            if ($scope.showGC) {
                                _logger.$logger.info("wallet_gift_card_redeem_link_shown");
                            } else {
                                _logger.$logger.info("wallet_gift_card_redeem_link_not_shown");
                            }
                        }
                        if ((0, _squid.$feature)("enableManageWallet")) {
                            var instruments = $scope.checkoutSession.get("fundingOptions.instruments");
                            var managebleFIs = _squid.$util.filter(instruments, function(funding) {
                                if (funding && !funding.editDisallowedMsg) {
                                    return funding;
                                }
                            });
                            $scope.showManageLink = managebleFIs && managebleFIs.length > 0;
                        }
                        var creditDataModel = _index3.$CreditDataModel.instance($scope.token);
                        $scope.checkoutSession.message = null;
                        $scope.showAddLink = _squid.$locale.country !== "DE";
                        $scope.showPlcc = $scope.checkoutSession.plccOffer && !$scope.checkoutCart.isBilling();
                        $scope.showBML = function() {
                            return _squid.$locale.country !== "GB" && !isCreditInWallet && isCoreSACEligible && !$scope.installment.showWalletBanner && !creditDataModel.isRedirectFromCape();
                        };
                        $scope.bml = function() {
                            if ($scope.installment.showWalletBanner) {
                                _uiRouter.$state.go("checkout.chooseCreditOffer");
                            } else {
                                _uiRouter.$state.go("checkout.redirectToCape", {}, {
                                    location: false
                                });
                            }
                        };
                        $scope.onRedeemGC = function() {
                            throw new _squid.$FallbackError({
                                reason: "redeem_coupon_feature_not_supported",
                                product: "ux",
                                entryPoint: "giftCard"
                            });
                        };
                        $scope.addPlcc = function() {
                            if ($scope.promotion) {
                                $scope.promotion.type = "plcc";
                            }
                            _uiRouter.$state.go("checkout.review.sidebar.sidebarAddCard.addCardFlow.addCard");
                        };
                        $scope.sacEligible = function(fsName) {
                            if (fsName !== "BILL_ME_LATER") {
                                return false;
                            }
                            if (!$scope.installment.showCYCO && parseFloat($scope.checkoutCart.purchase.amounts.total.amount) >= _index.$CreditOptionsModel.sacEligibleAmount[_squid.$locale.country]) {
                                return true;
                            }
                        };
                        $scope.cardModel = new _index2.$AddCardModel({
                            card: new _index2.$CardModel()
                        });
                        $scope.creditOffer = function() {
                            _uiRouter.$state.go("checkout.chooseCreditOffer");
                        };
                        $scope.showBannerinWallet = function() {
                            if ($scope.installment.showBanner && _squid.$locale.country === "GB") {
                                if ($scope.installment.installmentOptionsPresent) {
                                    $scope.showInstallmentBannerContent = true;
                                    $scope.showBannerContent = false;
                                } else {
                                    $scope.showBannerContent = true;
                                    $scope.showInstallmentBannerContent = false;
                                }
                                return true;
                            }
                            return false;
                        };
                        $scope.userSelectedFI = $scope.checkoutSession.getSelectedStickyInstrument() && $scope.checkoutSession.getSelectedStickyInstrument().instrument_id;
                        $scope.updateStickyFS = function(stickyFI) {
                            if (stickyFI.instrument_id !== $scope.userSelectedFI) {
                                $scope.checkoutSession.action("setStickyFI", {
                                    data: {
                                        instrument_id: stickyFI.instrument_id
                                    },
                                    success: function success(result) {
                                        $scope.checkoutSession.message = {
                                            type: "success",
                                            msgKeys: [ "paymentMethod.paymentMethodUpdated" ]
                                        };
                                        $scope.doneFn(result);
                                    }
                                });
                            } else {
                                _uiRouter.$state.go("checkout.review");
                            }
                        };
                        var masterPlanList = $scope.checkoutSession.getPlanList();
                        var serializedPlans = {};
                        var balanceCodes = {};
                        var primaryList = [];
                        var balanceList = $scope.balanceList = [];
                        var isSelectFiVariant = $scope.isSelectFiVariant = _squid.$config.choiceExperiment && _squid.$config.choiceExperiment.selectFi && $scope.models && $scope.models.choiceVariant && _squid.$config.choiceExperiment.selectFi.indexOf($scope.models.choiceVariant) !== -1;
                        var getSerializedPrimary = function getSerializedPrimary(primary) {
                            var serial = primary.id + primary.amount.currency_code.toLowerCase();
                            if (primary.subtype) {
                                serial += primary.subtype;
                            }
                            return serial;
                        };
                        var getSerializedPlanId = function getSerializedPlanId(plan, balances) {
                            var pid = getSerializedPrimary(plan.primaryFs);
                            if (!balances) {
                                return pid;
                            }
                            balances.sort();
                            return pid + balances.join();
                        };
                        if (masterPlanList) {
                            var initiallyActiveBalances = [];
                            var showBalanceCurrencies = $scope.checkoutSession.isMultipleBalancePlan();
                            if (isSelectFiVariant) {
                                if (!showBalanceCurrencies) {
                                    var knownCurrency = masterPlanList[0].primaryFs.amount.currency_code;
                                    showBalanceCurrencies = masterPlanList.some(function(plan) {
                                        return plan.primaryFs.amount.currency_code !== knownCurrency || plan.secondaryFIs && (plan.secondaryFIs.length > 1 || plan.secondaryFIs[0].amount.currency_code !== knownCurrency);
                                    });
                                }
                                var primaryFsIds = {};
                                masterPlanList.forEach(function(plan) {
                                    var balances = plan.secondaryFIs || [];
                                    var balCurCodes = [];
                                    if ($scope.checkoutSession.plan.id === plan.planId) {
                                        initiallyActiveBalances = balances;
                                    }
                                    balances.forEach(function(balance) {
                                        var code = balance.amount.currency_code;
                                        balCurCodes.push(code);
                                        if (!balanceCodes.hasOwnProperty(code)) {
                                            var balInfoAndState = {
                                                code: code,
                                                checked: false
                                            };
                                            if (showBalanceCurrencies) {
                                                balInfoAndState.amount = balance.amount.amount_formatted_currency;
                                            } else {
                                                balInfoAndState.amount = balance.amount.amount_formatted;
                                            }
                                            balanceCodes[code] = balInfoAndState;
                                            balanceList.push(balInfoAndState);
                                        }
                                    });
                                    if (plan.primaryFs.type === "BALANCE") {
                                        plan.currencies = [ plan.primaryFs.amount.currency_code ].concat(balCurCodes).join(", ");
                                    }
                                    serializedPlans[getSerializedPlanId(plan, balCurCodes)] = plan;
                                    var serialPrimary = getSerializedPrimary(plan.primaryFs);
                                    if (!primaryFsIds.hasOwnProperty(serialPrimary)) {
                                        primaryFsIds[serialPrimary] = 1;
                                        primaryList.push(plan);
                                    }
                                });
                                balanceList.sort(function(balA, balB) {
                                    return balA.code < balB.code ? -1 : 1;
                                });
                                initiallyActiveBalances.forEach(function(balance) {
                                    balanceCodes[balance.amount.currency_code].checked = true;
                                });
                            } else {
                                primaryList = masterPlanList;
                            }
                            $scope.isMultipleBalance = showBalanceCurrencies;
                            $scope.primaryList = primaryList;
                        }
                        $scope.updateFS = function(index) {
                            var unusableBalances = 0;
                            var requiredBalances = 0;
                            var fundingsource = void 0;
                            var updateMessaging = function updateMessaging(planWasChanged) {
                                if ($scope.checkoutSession.plan.sources[0].type === "BALANCE") {
                                    unusableBalances = requiredBalances = 0;
                                }
                                if (unusableBalances) {
                                    $scope.checkoutSession.message = {
                                        type: "info",
                                        msgKeys: [ unusableBalances === 1 ? "memberReview.ryi_noBal" : "memberReview.ryi_noBal_plural" ]
                                    };
                                } else if (requiredBalances) {
                                    $scope.checkoutSession.message = {
                                        type: "info",
                                        msgKeys: [ requiredBalances === 1 ? "memberReview.ryi_yesBal" : "memberReview.ryi_yesBal_plural" ]
                                    };
                                } else if (planWasChanged) {
                                    $scope.checkoutSession.message = {
                                        type: "success",
                                        msgKeys: [ "paymentMethod.paymentMethodUpdated" ]
                                    };
                                }
                            };
                            if (isSelectFiVariant) {
                                var checkedBalances = [];
                                _squid.$util.forEach(balanceCodes, function(balInfoAndState, code) {
                                    if (balInfoAndState.checked) {
                                        checkedBalances.push(code);
                                    }
                                });
                                var plan = primaryList[index];
                                var pid = void 0;
                                var pidForLogger = void 0;
                                fundingsource = serializedPlans[getSerializedPlanId(plan, checkedBalances)];
                                if (!fundingsource) {
                                    pid = getSerializedPrimary(plan.primaryFs);
                                    pidForLogger = plan.primaryFs.id || plan.primaryFs.type;
                                    checkedBalances.some(function(code) {
                                        fundingsource = serializedPlans[pid + code];
                                        return fundingsource;
                                    });
                                    if (fundingsource) {
                                        unusableBalances = 2;
                                        _logger.$logger.info("checkout_fpti", {
                                            primary: pidForLogger,
                                            denied: checkedBalances.join()
                                        });
                                    }
                                }
                                if (!fundingsource) {
                                    fundingsource = serializedPlans[pid];
                                    if (fundingsource) {
                                        unusableBalances = checkedBalances.length;
                                        _logger.$logger.info("checkout_fpti", {
                                            primary: pidForLogger,
                                            denied: checkedBalances.join()
                                        });
                                    }
                                }
                                if (!fundingsource) {
                                    var serializedPlanKeys = Object.keys(serializedPlans);
                                    fundingsource = serializedPlans[serializedPlanKeys[_squid.$util.findIndex(serializedPlanKeys, function(serial) {
                                        return serial.indexOf(pid) === 0;
                                    })]];
                                    requiredBalances = balanceList.length;
                                    _logger.$logger.info("checkout_fpti", {
                                        primary: pidForLogger,
                                        forced: balanceList.map(function(balance) {
                                            return balance.code;
                                        }).join()
                                    });
                                }
                            } else {
                                fundingsource = index;
                            }
                            $scope.checkoutSession.message = "";
                            if (fundingsource.infoMsg) {
                                $scope.disallowedIndex = index;
                                return;
                            }
                            if (fundingsource.planId === $scope.checkoutSession.plan.id) {
                                updateMessaging();
                                $scope.doneFn();
                                return;
                            }
                            $scope.checkoutSession.fundingOptions.action("select", {
                                data: {
                                    planId: fundingsource.planId
                                },
                                success: function success(result) {
                                    $scope.checkoutSession.populate(result);
                                    if (result) {
                                        $scope.checkoutSession.installments = result.installments;
                                    }
                                    if ($scope.checkoutSession.plan.paypal_credit && $scope.installment.showCYCO) {
                                        _uiRouter.$state.go("checkout.chooseCreditOffer");
                                    } else {
                                        if (!fundingsource.selected) {
                                            updateMessaging(true);
                                            if ($scope.checkoutSession.selectedInstallmentData && !$scope.checkoutSession.selectedInstallmentData.preventChange) {
                                                $scope.checkoutSession.selectedInstallmentData = undefined;
                                            }
                                        }
                                        $scope.doneFn(result);
                                    }
                                },
                                contingencies: {
                                    NEED_AUTHENTICATED_CARD: function NEED_AUTHENTICATED_CARD(name, result) {
                                        if (result && result.resolution) {
                                            var card = result.resolution.data;
                                            if (card.fundingId && card.fi && card.fi.type) {
                                                $scope.cardModel.id = card.fundingId;
                                                $scope.cardModel.card = new _index2.$CardModel({
                                                    number: "xxxx-xxxx-xxxx-" + card.fi.number,
                                                    type: card.fi.type.toUpperCase(),
                                                    productType: card.fi.productType
                                                });
                                            }
                                        }
                                        _uiRouter.$state.go(".confirmUpop");
                                    }
                                }
                            });
                        };
                        $scope.shouldShowFSTile = function(fundingsource) {
                            var showFS = true;
                            if ($scope.isPadToggleFeatureApplicable()) {
                                if (!$scope.isCurrentPlanPad && fundingsource.primaryFs && fundingsource.primaryFs.subtype === "PAD") {
                                    showFS = false;
                                } else if ($scope.isCurrentPlanPad && fundingsource.primaryFs && fundingsource.primaryFs.subtype === "PAD" && fundingsource.planId !== $scope.checkoutSession.plan.id) {
                                    showFS = false;
                                } else if ($scope.isCurrentPlanPad && fundingsource.primaryFs && fundingsource.primaryFs.subtype === "IACH" && fundingsource.primaryFs.id === $scope.checkoutSession.plan.sources[0].instrument_id && !fundingsource.secondaryFIs) {
                                    showFS = false;
                                }
                            }
                            return showFS;
                        };
                    });
                },
                populate: function populate() {
                    var preferredFiVariants = _squid.$config.choiceExperiment && _squid.$config.choiceExperiment.preferredCheckbox || [];
                    this.preferredFiVariant = preferredFiVariants.indexOf(this.models.choiceVariant) > -1;
                }
            }
        });
        _uiRouter.$state;
        _uiRouter.$stateParams;
        _squid.$Component;
        _squid.$populate;
        _squid.$FallbackError;
        _squid.$feature;
        _squid.$locale;
        _squid.$pxp;
        _squid.$util;
        _squid.$config;
        _squid.$renderContent;
        _logger.$logger;
        _choice.$ChoiceEligibility;
        _index.$CheckoutSessionModel;
        _index.$CheckoutCartModel;
        _index.$CheckoutAppDataModel;
        _index.$CreditOptionsModel;
        _index.$CheckoutPayeeModel;
        _index2.$AddCardModel;
        _index2.$CardModel;
        _index3.$CreditDataModel;
        _index3.$CreditInstallmentModel;
        _index4.$AuthModel;
        _marketingoffer.$MemberSegmentModel;
        _newMember.$NewMemberEligibility;
        module.exports = exports["default"];
    },
    "./pages/xo-wallet/template.html": function(module, exports) {
        module.exports = '<xo-aside-header ng-if="showManageLink" hdrtype=\'tall\' heading=\'asideHeader.fundingInstruments\'\n                 sub-header-left-link=\'checkout.review.sidebar.sidebarAddCard.addCardFlow.addCard\'\n                 sub-header-left="asideHeader.add"\n                 sub-header-left-icon="true"\n                 sub-header-right-link=\'checkout.review.sidebar.sidebarManageWallet\'\n                 sub-header-right="asideHeader.manage"\n                 sub-header-right-icon="true"\n                 show-dual-fi="showDualFi"></xo-aside-header>\n<xo-aside-header hdrtype=\'tall\' heading=\'asideHeader.fundingInstruments\'\n                 ng-if="!showManageLink"\n                 sub-header-left-link=\'checkout.review.sidebar.sidebarAddCard.addCardFlow.addCard\'\n                 sub-header-left="asideHeader.add"\n                 sub-header-left-icon="true"\n                 show-dual-fi="showDualFi"></xo-aside-header>\n<div class="asideContent fundingCards" id="selectFunding" content xo-tray-height>\n    <div class="split_bal_option" ng-if="balanceList.length">\n        <div\n            class="sCheckbox checkbox"\n            ng-repeat="balance in balanceList">\n            <input\n                id="bal_{{balance.code}}"\n                type="checkbox"\n                ng-model="balance.checked"\n                value="{{balance.code}}">\n            <label\n                class="choice-split-balance" for="bal_{{balance.code}}"\n                bind-html-compile="htmlContent(\'memberReview.useBalanceLabel\', { amt: balance.amount })">\n            </label>\n        </div>\n    </div>\n    <div class="allCards">\n        <ul\n            ng-class="{varSelectFi: isSelectFiVariant}"\n            class="allPlanList clearfix"\n            select-box="checkoutSession.fundingOptions.plans"\n            select-allow-tab-escape>\n            <!--Disallowed Preferred Instrument-->\n            <li ng-if="disallowedPreferredInstrument && !isBillingNoPurchase" class="fundingsource">\n                <a href="#" prevent-default class="source" role="button">\n                    <div class="disallowedContainer">\n                        <experience flag=\'!cardart\'>\n                            <span class="fsIcon pinlessIcon icon icon-card-half-solid" aria-hidden="true" ng-if="disallowedPreferredInstrument.isPinlessDebit"></span>\n                            <span class="fsIcon" ng-class="[disallowedPreferredInstrument.type, disallowedPreferredInstrument.name]" ng-if="!plan.primaryFs.isPinlessDebit"></span>\n                            <p class="fsdetails">\n                                <span ng-if="disallowedPreferredInstrument.isPinlessDebit">{{content(\'fsMappings.PINLESSDEBIT\')}}</span>\n                                <span ng-if="!disallowedPreferredInstrument.isPinlessDebit">{{content(\'fsMappings.\'+disallowedPreferredInstrument.name) || disallowedPreferredInstrument.name}}</span>\n                                <span class="lastdigits" ng-if="disallowedPreferredInstrument.lastDigits">x-{{disallowedPreferredInstrument.lastDigits}}\n                                    <span class="subtype" ng-if="locale.country === \'DE\' && disallowedPreferredInstrument.subtype === \'MEFT\'">{{content(\'fundingInstruments.meft\')}}</span>\n                                    <span class="subtype" ng-if="locale.country === \'DE\' && disallowedPreferredInstrument.subtype === \'IACH\'">{{content(\'fundingInstruments.iach\')}}</span>\n                                    <span class="subtype" ng-if="disallowedPreferredInstrument.subtype === \'ECHECK\'">{{content(\'fundingInstruments.eCheck\')}}</span>\n                                </span>\n                            </p>\n                            <span class="infoIcon" ng-click="toggleDisallowedMessage()"></span>\n\n                        </experience>\n                        <experience flag=\'cardart\'>\n                            <xo-fi-panel fi="disallowedPreferredInstrument"> </xo-fi-panel>\n                            <span class="infoIcon" ng-click="toggleDisallowedMessage()"></span>\n                        </experience>\n                    </div>\n                    <div ng-class="{showMsg: showDisallowedMessage}">\n                        <p class="infoMsg">\n                            {{content(\'wallet.\'+disallowedPreferredInstrument.declineReason)}}\n                        </p>\n                    </div>\n                </a>\n            </li>\n\n            <experience flag=\'cardart\'>\n                <!--List of Plans : selectFi variant-->\n                <li role="presentation" class="fundingsource" ng-repeat="plan in primaryList" ng-if="isSelectFiVariant && !isBillingNoPurchase && shouldShowFSTile(plan)">\n                    <a track-submit href="#" prevent-default class="source" ng-click="updateFS($index)" role="button" ng-class="{showMsg: ($index == disallowedIndex), noInfoMsg: !plan.infoMsg}" select-option="plan.selected" focus-when="plan.selected" ng-attr-aria-selected="{{ plan.selected ? \'true\' : undefined }}">\n\n                        <span class="checkIcon" ng-if="plan.selected">\n                            <span class="accessAid" ng-if="locale.lang === \'en\'">Selected</span>\n                        </span>\n\n                        <div class="instrumentContainer">\n                            <xo-fi-panel fi="plan.primaryFs" plan="plan"\n                                show-all-currency-codes="isSelectFiVariant && plan.primaryFs.type === \'BALANCE\' && isMultipleBalance"\n                                ignore-pad="plan.primaryFs.subtype === \'PAD\' && plan.selected && isPadToggleFeatureApplicable()"\n                            >\n                                <div ng-if="!isBilling && plan.primaryFs.isPreferred && !plan.secondaryFIs && preferredFiVariant">\n                                    <span class="preferredLabel">{{ content(\'memberReview.preferred\') }}</span>\n                                </div>\n                                <p class="fsdetails" ng-class="[plan.primaryFs.type]">\n                                    <span ng-if="showCreditPlacement(plan)">\n                                        <xo-offer token="token" promotion="promotion"\n                                            bmlaction="bmlaction" installment="installment"\n                                            selectedmethod="selectedmethod" reusetext="true"\n                                            parent-context="creditParentContext">\n                                        </xo-offer>\n                                    </span>\n                                </p>\n                            </xo-fi-panel>\n                        </div>\n                    </a>\n                </li>\n\n                <!--List of Plans : control-->\n                <li role="presentation" class="fundingsource" ng-repeat="plan in primaryList" ng-if="!isSelectFiVariant && !isBillingNoPurchase && shouldShowFSTile(plan)">\n                    <a track-submit href="#" prevent-default class="source" ng-click="updateFS(plan, $index)" role="button" ng-class="{showMsg: ($index == disallowedIndex), noInfoMsg: !plan.infoMsg}" select-option="plan.selected" focus-when="plan.selected" ng-attr-aria-selected="{{ plan.selected ? \'true\' : undefined }}">\n\n                        <span class="checkIcon" ng-if="plan.selected">\n                            <span class="accessAid" ng-if="locale.lang === \'en\'">Selected</span>\n                        </span>\n                        <div class="instrumentContainer" ng-if="plan.secondaryFIs && plan.secondaryFIs.length">\n                            <xo-fi-panel fi="plan.secondaryFIs[0]"\n                                show-amount="plan.secondaryFIs.length === 1"\n                            ></xo-fi-panel>\n                        </div>\n                        <div class="instrumentContainer">\n                            <xo-fi-panel fi="plan.primaryFs"\n                                show-amount="plan.secondaryFIs && plan.secondaryFIs.length === 1 && plan.primaryFs.amount && plan.primaryFs.type !== \'INCENTIVE\'"\n                                show-currency-code="plan.primaryFs.name === \'BALANCE\' && isMultipleBalance"\n                                ignore-pad="plan.primaryFs.subtype === \'PAD\' && plan.selected && isPadToggleFeatureApplicable()"\n\n                            >\n                                <div ng-if="!isBilling && plan.primaryFs.isPreferred && !plan.secondaryFIs && preferredFiVariant">\n                                    <span class="preferredLabel">{{ content(\'memberReview.preferred\') }}</span>\n                                </div>\n                                <p class="fsdetails" ng-class="[plan.primaryFs.type]">\n                                    <span ng-if="showCreditPlacement(plan)">\n                                        <xo-offer token="token" promotion="promotion"\n                                            bmlaction="bmlaction" installment="installment"\n                                            selectedmethod="selectedmethod" reusetext="true"\n                                            parent-context="creditParentContext">\n                                        </xo-offer>\n                                    </span>\n                                </p>\n                            </xo-fi-panel>\n                        </div>\n                    </a>\n                </li>\n            </experience>\n            <experience flag=\'!cardart\'>\n                <!--List of Plans : selectFi variant-->\n                <li role="presentation" class="fundingsource" ng-repeat="plan in primaryList" ng-if="isSelectFiVariant && !isBillingNoPurchase && shouldShowFSTile(plan)">\n                    <a track-submit href="#" prevent-default class="source" ng-click="updateFS($index)" role="button" ng-class="{showMsg: ($index == disallowedIndex), noInfoMsg: !plan.infoMsg}" select-option="plan.selected" focus-when="plan.selected" ng-attr-aria-selected="{{ plan.selected ? \'true\' : undefined }}">\n\n                        <span class="checkIcon" ng-if="plan.selected">\n                            <span class="accessAid" ng-if="locale.lang === \'en\'">Selected</span>\n                        </span>\n                        <div class="instrumentContainer" ng-class="{singleInstrumentContainer: !plan.secondaryFIs}" ng-if="plan.primaryFs.subtype === \'PAD\' && plan.selected && isPadToggleFeatureApplicable()">\n                            <span class="fsIcon pinlessIcon icon icon-card-half-solid" aria-hidden="true" ng-if="plan.primaryFs.isPinlessDebit"></span>\n                            <span class="fsIcon" ng-class="[plan.primaryFs.type, plan.primaryFs.name]" ng-if="!plan.primaryFs.isPinlessDebit"></span>\n                            <p class="fsdetails" ng-class="[plan.primaryFs.type]">\n                                <span>\n                                    <span class="fsName">{{content(\'fsMappings.\'+plan.primaryFs.name) || (plan.primaryFs.name)}} &rlm;</span>\n                                    <div class="lastdigits" ng-if="plan.primaryFs.lastDigits">x-{{plan.primaryFs.lastDigits}}\n                                        <span class="subtype" ng-if="locale.country === \'DE\'">{{content(\'fundingInstruments.iach\')}}</span>\n                                    </div>\n                                </span>\n                            </p>\n                        </div>\n                        <div class="instrumentContainer" ng-class="{singleInstrumentContainer: !plan.secondaryFIs}" ng-if="!(plan.primaryFs.subtype === \'PAD\' && plan.selected && isPadToggleFeatureApplicable())">\n                            <span class="fsIcon pinlessIcon icon icon-card-half-solid" aria-hidden="true" ng-if="plan.primaryFs.isPinlessDebit"></span>\n                            <span class="fsIcon" ng-class="[plan.primaryFs.type, plan.primaryFs.name]" ng-if="!plan.primaryFs.isPinlessDebit"></span>\n                            <p class="fsdetails" ng-class="[plan.primaryFs.type]">\n                                <span ng-switch="plan.primaryFs.subtype">\n                                    <span class="fundingContainerPAD" ng-switch-when="PAD">\n                                        <span class="subtype">{{content(\'fundingInstruments.pad\')}}</span><br>\n                                        <span class="name">{{content(\'fsMappings.\'+plan.primaryFs.name) || plan.primaryFs.name}}</span>\n                                        <span class="lastdigits" ng-if="plan.primaryFs.lastDigits">x-{{plan.primaryFs.lastDigits}}</span>\n                                        <span ng-if="!isBilling && plan.primaryFs.isPreferred && preferredFiVariant && plan.primaryFs.subtype !== \'PAD\'">\n                                            <br>\n                                            <span class="preferredLabel">{{ content(\'memberReview.preferred\') }}</span>\n                                        </span>\n                                    </span>\n                                    <span ng-switch-default>\n                                        <span class="fsName" ng-if="plan.primaryFs.isPinlessDebit">{{content(\'fsMappings.PINLESSDEBIT\')}}</span>\n                                        <span class="fsName" ng-if="!plan.primaryFs.isPinlessDebit">{{content(\'fsMappings.\'+plan.primaryFs.name) || (plan.primaryFs.name)}} &rlm;</span>\n                                        <span ng-if="!isSelectFiVariant && plan.primaryFs.name === \'BALANCE\' && isMultipleBalance">({{plan.primaryFs.amount.currency_code}})</span>\n                                        <span ng-if="isSelectFiVariant && plan.primaryFs.name === \'BALANCE\' && isMultipleBalance">({{plan.currencies}})</span>\n                                        <div class="lastdigits" ng-if="plan.primaryFs.subtype !== \'PAD\'">\n                                            <span ng-if="plan.primaryFs.lastDigits">x-{{plan.primaryFs.lastDigits}}</span>\n                                            <span class="subtype" ng-if="locale.country === \'DE\' && plan.primaryFs.subtype === \'MEFT\'">{{content(\'fundingInstruments.meft\')}}</span>\n                                            <span class="subtype" ng-if="locale.country === \'DE\' && plan.primaryFs.subtype === \'IACH\'">{{content(\'fundingInstruments.iach\')}}</span>\n                                            <span class="subtype" ng-if="plan.primaryFs.subtype === \'ECHECK\'">{{content(\'fundingInstruments.eCheck\')}}</span>\n                                            <span ng-if="!isPreferLabelColor && !isBilling && plan.primaryFs.isPreferred && preferredFiVariant && plan.primaryFs.subtype !== \'PAD\'" class="preferredLabel">\n                                                ({{ content(\'memberReview.preferred\') }})\n                                            </span>\n                                            <span ng-if="isPreferLabelColor && !isBilling && plan.primaryFs.isPreferred && preferredFiVariant && plan.primaryFs.subtype !== \'PAD\'">\n                                                <br>\n                                                <span class="preferredLabel pxpColor">{{ content(\'memberReview.preferred\') }}</span>\n                                            </span>\n                                        </div>\n                                    </span>\n                                </span>\n                                <span ng-if="!plan.primaryFs.isPinlessDebit && plan.primaryFs.name === \'BILL_ME_LATER\'">\n                                    <xo-reuse-offer token="token" promotion="promotion"\n                                        bmlaction="bmlaction" installment="installment"\n                                        selectedmethod="selectedmethod">\n                                    </xo-reuse-offer>\n                                </span>\n                            </p>\n                        </div>\n                    </a>\n                </li>\n\n                <!--List of Plans : control-->\n                <li role="presentation" class="fundingsource" ng-repeat="plan in primaryList" ng-if="!isSelectFiVariant && !isBillingNoPurchase && shouldShowFSTile(plan)">\n                    <a track-submit href="#" prevent-default class="source" ng-click="updateFS(plan, $index)" role="button" ng-class="{showMsg: ($index == disallowedIndex), noInfoMsg: !plan.infoMsg}" select-option="plan.selected" focus-when="plan.selected" ng-attr-aria-selected="{{ plan.selected ? \'true\' : undefined }}">\n\n                        <span class="checkIcon" ng-if="plan.selected">\n                            <span class="accessAid" ng-if="locale.lang === \'en\'">Selected</span>\n                        </span>\n                        <div class="instrumentContainer" ng-if="plan.secondaryFIs && plan.secondaryFIs.length">\n                            <p class="fsdetails" ng-class="[plan.secondaryFIs[0].type]">\n                                <span class="fsIcon" ng-class="[plan.secondaryFIs[0].type, plan.secondaryFIs[0].name]"></span>\n                                <span class="fsName">{{content(\'fsMappings.\'+ plan.secondaryFIs[0].name) || plan.secondaryFIs[0].name}}</span>\n                                <span class="colon" ng-if="plan.secondaryFIs.length === 1">: </span>\n                                <span class="amount" ng-if="plan.secondaryFIs.length === 1 && plan.secondaryFIs[0].amount">{{plan.secondaryFIs[0].amount.amount_formatted}}</span>\n                            </p>\n                        </div>\n                        <div class="instrumentContainer" ng-class="{singleInstrumentContainer: !plan.secondaryFIs}" ng-if="plan.primaryFs.subtype === \'PAD\' && plan.selected && isPadToggleFeatureApplicable()">\n                            <span class="fsIcon pinlessIcon icon icon-card-half-solid" aria-hidden="true" ng-if="plan.primaryFs.isPinlessDebit"></span>\n                            <span class="fsIcon" ng-class="[plan.primaryFs.type, plan.primaryFs.name]" ng-if="!plan.primaryFs.isPinlessDebit"></span>\n                            <p class="fsdetails" ng-class="[plan.primaryFs.type]">\n                                <span>\n                                    <span class="fsName">{{content(\'fsMappings.\'+plan.primaryFs.name) || (plan.primaryFs.name)}} &rlm;</span>\n                                    <span class="lastdigits" ng-if="plan.primaryFs.lastDigits">x-{{plan.primaryFs.lastDigits}}\n                                        <span class="subtype" ng-if="locale.country === \'DE\'">{{content(\'fundingInstruments.iach\')}}</span>\n                                    </span>\n                                </span>\n                            </p>\n                        </div>\n                        <div class="instrumentContainer" ng-class="{singleInstrumentContainer: !plan.secondaryFIs}" ng-if="!(plan.primaryFs.subtype === \'PAD\' && plan.selected && isPadToggleFeatureApplicable())">\n                            <span class="fsIcon pinlessIcon icon icon-card-half-solid" aria-hidden="true" ng-if="plan.primaryFs.isPinlessDebit"></span>\n                            <span class="fsIcon" ng-class="[plan.primaryFs.type, plan.primaryFs.name]" ng-if="!plan.primaryFs.isPinlessDebit"></span>\n                            <p class="fsdetails" ng-class="[plan.primaryFs.type]">\n                                <span ng-switch="plan.primaryFs.subtype">\n                                    <span class="fundingContainerPAD" ng-switch-when="PAD">\n                                        <span class="subtype">{{content(\'fundingInstruments.pad\')}}</span><br>\n                                        <span class="name">{{content(\'fsMappings.\'+plan.primaryFs.name) || plan.primaryFs.name}}</span>\n                                        <span class="lastdigits" ng-if="plan.primaryFs.lastDigits">x-{{plan.primaryFs.lastDigits}}</span>\n                                    </span>\n                                    <span ng-switch-default>\n                                        <span class="fsName" ng-if="plan.primaryFs.isPinlessDebit">{{content(\'fsMappings.PINLESSDEBIT\')}}</span>\n                                        <span class="fsName" ng-if="!plan.primaryFs.isPinlessDebit">{{content(\'fsMappings.\'+plan.primaryFs.name) || (plan.primaryFs.name)}} &rlm;</span>\n                                        <span ng-if="plan.primaryFs.name === \'BALANCE\' && isMultipleBalance">({{plan.primaryFs.amount.currency_code}})</span>\n                                        <span class="lastdigits" ng-if="plan.primaryFs.lastDigits">x-{{plan.primaryFs.lastDigits}}\n                                            <span class="subtype" ng-if="locale.country === \'DE\' && plan.primaryFs.subtype === \'MEFT\'">{{content(\'fundingInstruments.meft\')}}</span>\n                                            <span class="subtype" ng-if="locale.country === \'DE\' && plan.primaryFs.subtype === \'IACH\'">{{content(\'fundingInstruments.iach\')}}</span>\n                                            <span class="subtype" ng-if="plan.primaryFs.subtype === \'ECHECK\'">{{content(\'fundingInstruments.eCheck\')}}</span>\n                                        </span>\n                                        <span class="colon" ng-if="plan.secondaryFIs.length === 1 && plan.primaryFs.type !== \'INCENTIVE\'">: </span>\n                                    </span>\n                                </span>\n                                <span class="amount" ng-if="plan.secondaryFIs && plan.secondaryFIs.length === 1 && plan.primaryFs.amount && plan.primaryFs.type !== \'INCENTIVE\'">{{plan.primaryFs.amount.amount_formatted}}</span>\n                                <span ng-if="!isPreferLabelColor && !isBilling && plan.primaryFs.isPreferred && !plan.secondaryFIs && preferredFiVariant" class="preferredLabel">\n                                    <br>\n                                    ({{ content(\'memberReview.preferred\') }})\n                                </span>\n                                <span ng-if="isPreferLabelColor && !isBilling && plan.primaryFs.isPreferred && !plan.secondaryFIs && preferredFiVariant">\n                                    <br>\n                                    <span class="preferredLabel pxpColor">{{ content(\'memberReview.preferred\') }}</span>\n                                </span>\n                                <span ng-if="showCreditPlacement(plan)">\n                                    <xo-offer token="token" promotion="promotion"\n                                        bmlaction="bmlaction" installment="installment"\n                                        selectedmethod="selectedmethod" reusetext="true"\n                                        parent-context="creditParentContext">\n                                    </xo-offer>\n                                </span>\n                            </p>\n                        </div>\n                    </a>\n                </li>\n            </experience>\n\n\n            <li role="presentation" class="fundingsource fs-item" ng-repeat="stickyFI in checkoutSession.futurePaymentInstruments" ng-if="isBillingNoPurchase">\n                <a class="source" href="#" ng-click="updateStickyFS(stickyFI)" select-option role="button"\n                    ng-attr-aria-selected="{{ (stickyFI.instrument_id===userSelectedFI) ? \'true\' : undefined }}"\n                    focus-when="stickyFI.instrument_id===userSelectedFI">\n                    <div class="instrumentContainer singleInstrumentContainer">\n                        <experience flag="!cardart">\n                            <span class="fsIcon" ng-class="[stickyFI.type, stickyFI.name, stickyFI.card_type]"></span>\n                            <p class="fsdetails">\n                                <span ng-switch="fundingsource.subtype">\n                                    <span ng-switch-default>\n                                        <span class="name">{{content(\'fsMappings.\'+ stickyFI.name) || stickyFI.name}}</span>\n                                        <div class="lastdigits" ng-if="stickyFI.last4">x-{{stickyFI.last4}}</div>\n                                    </span>\n                                </span>\n                            </p>\n                        </experience>\n                        <experience flag="cardart">\n                            <xo-fi-panel fi="stickyFI"></xo-fi-panel>\n                        </experience>\n                    </div>\n                    <span class="checkIcon" ng-if="stickyFI.instrument_id===userSelectedFI">\n                        <span class="accessAid" ng-if="locale.lang === \'en\'">Selected</span>\n                    </span>\n                </a>\n            </li>\n\n            <li role="presentation" ng-if="banner.bodyText && (installment.showWalletBanner || showBML())"\n                class="plusLink creditBanner">\n                <form class="bmlAsideOffer">\n                    <div class="fundingContainerBml">\n                        <div id="bmlAcqOfferPassive" class="payWithOption">\n                            <span class="plusicon" ng-click="bml()" role="button"></span>\n                            <div class="payWithOptionBody">\n                                <div class="payWithOptionIcon" ng-click="bml()" role="button">\n                                    <span class="fsIcon BILL_ME_LATER" ng-if="useFallbackBanner || useCreditIncentiveBanner"></span>\n                                    <img src="{{banner.logo}}" ng-if="!useFallbackBanner" />\n                                </div>\n                                <div class="payWithOptionContent">\n                                    <div><a link-button ng-click="bml()" class="name proceed" ng-bind-html="banner.ctaText" link-button></a></div>\n                                    <div>\n                                        <span class="payWithOptionDetails" ng-class="{\'strongBmlOfferTitle\': useCreditIncentiveBanner}" ng-bind-html="banner.bodyText"></span> <span class="payWithOptionDetails" ng-if="useCreditIncentiveBanner" ng-bind-html="banner.bodyText2"></span>\n                                    </div>\n                                    <div>\n                                        <span class="payWithOptionTerms" ng-bind-html="banner.termsText"></span>\n                                        <a href="{{banner.termsLink}}" class="popup payWithOptionTermsLink" target=\'_blank\'\n                                           ng-bind-html="banner.termsLinkText"></a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </li>\n\n            <li role="presentation" ng-if="showBannerinWallet()"\n                class="trayInner trayInnerDefault editable offerTile" ng-click="creditOffer()">\n                <form class="bmlAsideOffer">\n                    <div class="fundingContainerBml">\n                        <div>\n                            <div class="creditOffer" ng-if="showInstallmentBannerContent" ng-click="creditOffer()"\n                                 class="proceed"\n                               select-option>{{content(\'offers.bmlWalletTitleInstallments\')}}</div>\n                            <div class="creditOffer" ng-if="showBannerContent" ng-click="creditOffer()"\n                                class="proceed"\n                                select-option>{{content(\'offers.bmlWalletTitle\')}}</div>\n                            <div class="cycoApplyLink">\n                                <a track-click="wallet_acquisition_offer_banner" link-button ng-click="creditOffer()" class="proceed apply_uk_credit">{{content(\'offers.bmlOfferBtn\')}}\n                                    <span class="frontArrow goTray"></span>\n                                </a>\n                            </div>\n                        </div>\n                        <div class="fundingContainerBmlOffer disclaimer clearfix"\n                                  bind-html-compile="htmlContent(\'applyForBml.subjectApproval\')">\n                        </div>\n                    </div>\n                </form>\n            </li>\n\n\n            <!-- Gift Card link offer -->\n            <!-- changes for the coupon remdeem -->\n            <li role="presentation" ng-if="showGC" class="fundingsource redeemGC" ng-click="onRedeemGC()">\n                <p class="addOption">\n                    <span>\n                        <a ng-click="onRedeemGC()" class="proceed" select-option> {{ content(\'memberReview.redeemGiftLink\') }} {{ content(\'memberReview.giftCardDec\') }}</a>\n                    </span>\n                </p>\n            </li>\n\n            <li role="presentation" ng-if="showPlcc" class="trayInner trayInnerDefault editable offerTile"\n                ng-click="addPlcc()">\n                <form class="bmlAsideOffer">\n                    <div class="fundingContainerPlcc">\n                        <div class="plccOfferHeader">\n                            <img class="plccIcon" ng-src="{{promotion.logoUrl}}"/>\n                            <p class="headerText"> {{ content(\'memberReview.plccCardOfferHeader\',{merchantName:promotion.name}) }}</p>\n                            <p class="plccOfferDesc">{{ content(\'memberReview.plccCardOfferDesc\',{merchantName:promotion.name})}}</p>\n                        </div>\n\n                    </div>\n                    <input type="hidden" name="_csrf" value="{data._csrf}"/>\n                </form>\n            </li>\n        </ul>\n    </div>\n\n    <ui-view></ui-view>\n\n</div>\n';
    },
    "./pages/xo-wallet/styles.less": "./css/app.less",
    "./pages/xo-sidebar-manage-wallet/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-sidebar-manage-wallet/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Route.extend("$SidebarManageWalletRoute", {
            path: "sidebarManageWallet",
            directive: _directive2["default"],
            trackingData: {
                fptiState: "manage_wallet",
                templateName: "tray/manageWallet",
                pageGoal: "Manage Instruments",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-manage-wallet",
                        pagename2: "%::fullpage-manage-wallet:member:hermes:tray",
                        version: "member:%:tray"
                    }
                }
            },
            loginRequired: true,
            children: []
        });
        _squid.$Route;
        module.exports = exports["default"];
    },
    "./pages/xo-sidebar-manage-wallet/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _choice = __webpack_require__("./components/xo-models/src/choice/index.js");
        var _index = __webpack_require__("./components/xo-models/src/fi/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/checkout/index.js");
        __webpack_require__("./components/xo-models/src/fiMeta/index.js");
        __webpack_require__("./components/xo-tray-height/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/popup/directive.js");
        __webpack_require__("./components/xo-ui-components/src/experience/directive.js");
        __webpack_require__("./components/xo-ui-components/src/fi-panel/directive.js");
        __webpack_require__("./components/xo-page-components/src/aside-header/directive.js");
        __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js");
        __webpack_require__("./components/xo-ui-components/src/cardicon/directive.js");
        var _template = __webpack_require__("./pages/xo-sidebar-manage-wallet/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./pages/xo-sidebar-manage-wallet/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$SidebarManageWalletDirective", {
            tag: "xo-manage-wallet",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: true
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutSession: _index2.$CheckoutSessionModel.instance(this.props.token).retrieve()
                    };
                }
            },
            actions: {
                showInfoMsg: function showInfoMsg($index) {
                    this.disallowedIndex = $index;
                },
                confirm: function confirm($index) {
                    this.selectedIndex = $index;
                    this.deleteCard = true;
                },
                deleteFS: function deleteFS(fundingsource) {
                    var _this = this;
                    this.deleteCardModel = new _index.$DeleteCardModel({
                        id: fundingsource.id
                    });
                    this.deleteCardModel.save({
                        data: this.deleteCardModel,
                        contingencies: {
                            DELETE_CARD_CONTINGENCY: function DELETE_CARD_CONTINGENCY() {
                                _this.handleSingleContingency("creditcard.errorDeleteCard");
                                return;
                            }
                        },
                        error: function error() {
                            _this.handleSingleContingency("creditcard.errorDeleteCard");
                            return;
                        },
                        success: function success() {
                            _this.models.checkoutSession.fundingOptions.action("notifyChange", {
                                resultModel: _this.models.checkoutSession,
                                data: {
                                    planId: fundingsource.id,
                                    operation: "REMOVED"
                                },
                                success: function success() {
                                    _logger.$logger.info("manage_wallet: deleted FI - 1", fundingsource.id);
                                    _this.selectedIndex = -1;
                                    _this.disallowedIndex = -1;
                                },
                                contingencies: {
                                    NOTIFY_FUNDING_CHANGE_CONTINGENCY: function NOTIFY_FUNDING_CHANGE_CONTINGENCY() {
                                        _this.removeFIFromCheckoutSession(fundingsource);
                                        return;
                                    }
                                },
                                error: function error() {
                                    _this.removeFIFromCheckoutSession(fundingsource);
                                    return;
                                }
                            });
                        }
                    });
                }
            },
            lifecycle: {
                populate: function populate() {
                    var _this2 = this;
                    this.models.checkoutSession.reload().then(function() {
                        return _choice.$ChoiceEligibility.instance().getVariant(_this2.props.token);
                    }).then(function(variant) {
                        var multipleFiVariants = _squid.$config.choiceExperiment && _squid.$config.choiceExperiment.multipleFi || [];
                        if (multipleFiVariants.indexOf(variant) !== -1) {
                            _this2.showMultipleFI = true;
                        }
                    });
                    if (this.models.checkoutSession) {
                        this.message = this.models.checkoutSession.message;
                        this.isSystemError = this.message && this.message.type === "error";
                        this.models.checkoutSession.message = null;
                    }
                },
                enter: function enter() {
                    this.locale = _squid.$locale;
                    this.doneFn = function(result) {
                        _uiRouter.$state.go("checkout.review");
                    };
                    this.handleSingleContingency = function(errorKey) {
                        var messages = [];
                        messages.push(_squid.$locale.content.get(errorKey));
                        this.message = {
                            msgs: messages,
                            type: "error"
                        };
                        this.isSystemError = true;
                        this.selectedIndex = -1;
                        this.disallowedIndex = -1;
                    };
                    this.removeFIFromCheckoutSession = function(fundingsource) {
                        this.models.checkoutSession.fundingOptions.instruments = this.models.checkoutSession.fundingOptions.instruments.filter(function(item) {
                            return item.id !== fundingsource.id;
                        });
                    };
                }
            }
        });
        _uiRouter.$state;
        _squid.$Component;
        _squid.$locale;
        _squid.$config;
        _logger.$logger;
        _choice.$ChoiceEligibility;
        _index.$DeleteCardModel;
        _index2.$CheckoutSessionModel;
        module.exports = exports["default"];
    },
    "./pages/xo-sidebar-manage-wallet/template.html": function(module, exports) {
        module.exports = '<xo-aside-header ng-if="!showMultipleFI" heading=\'asideHeader.manageWallet\'\n                 back-url=\'checkout.review.sidebar.wallet\'></xo-aside-header>\n<xo-aside-header ng-if="showMultipleFI"  heading=\'asideHeader.manageWallet\'></xo-aside-header>\n\n<div class="asideContent fundingCards" id="manageFunding" content xo-tray-height>\n    <xo-message message="message"></xo-message>\n    <div class="allCards">\n        <ul class="allFundingInstrumentsList clearfix" select-box="models.checkoutSession.fundingOptions.instruments" select-allow-tab-escape>\n            <li role="presentation" class="fundingsource item" ng-repeat="fundingsource in models.checkoutSession.fundingOptions.instruments" ng-if="!isBillingNoPurchase">\n                <div class="source" ng-class="{showMsg: ($index == disallowedIndex), noInfoMsg: !fundingsource.editDisallowedMsg}">\n                    <experience flag="cardart">\n                        <div class="fsPanelRow" ng-class="{\'rowMask\':fundingsource.editDisallowedMsg, slide: ($index == selectedIndex && deleteCard)}">\n                            <span class="fsIcon pinlessIcon icon icon-card-half-solid" aria-hidden="true" ng-if="fundingsource.isPinlessDebit"></span>\n                            <xo-fi-panel fi="fundingsource">\n                                <div class="manageLinks" ng-class="{slideOut: ($index == selectedIndex && deleteCard)}" ng-if="!fundingsource.editDisallowedMsg && !isSystemError ">\n                                    <span ng-if="$index !== selectedIndex">\n                                        <a track-submit="update_card" ui-sref=\'checkout.review.sidebar.sidebarUpdateCard.addCardFlow.addCard({planId: fundingsource.id})\' class="updateButton">\n                                            <span>{{content(\'wallet.update\')}}</span>\n                                        </a>\n                                        <span class="vertical"></span>\n                                        <a href="" link-button class="deleteButton" ng-click="actions.confirm($index)">{{content(\'wallet.delete\')}}</a>\n                                    </span>\n                                    <span ng-if="$index === selectedIndex">\n                                        <span class="updateButton">\n                                            <span>{{content(\'wallet.update\')}}</span>\n                                        </span>\n                                        <span class="vertical"></span>\n                                        <span class="deleteButton">{{content(\'wallet.delete\')}}</span>\n                                    </span>\n                                </div>\n                            </xo-fi-panel>\n                            <a ng-if="fundingsource.editDisallowedMsg && (disallowedIndex !== $index)" ui-sref="checkout.review.sidebar.sidebarManageWallet" ng-click="actions.showInfoMsg($index)" class="infoIcon" ></a>\n                            <p ng-if="fundingsource.editDisallowedMsg" class="infoMsg" ng-class="{showMsg: ($index == disallowedIndex)}">\n                                {{content(\'wallet.\'+fundingsource.editDisallowedMsg)}}\n                            </p>\n                        </div>\n                        <div ng-class="{slideIn: ($index == selectedIndex && deleteCard)}" class="confirm" ng-if="!fundingsource.editDisallowedMsg && !isSystemError">\n                            <a ng-if="$index !== selectedIndex" class="confirmButton">{{content(\'common.confirm\')}}</a>\n                            <a ng-if="$index === selectedIndex" href="" link-button track-submit="delete_card" class="confirmButton" ng-click="actions.deleteFS(fundingsource)">{{content(\'common.confirm\')}}</a>\n                        </div>\n                    </experience>\n                    <experience flag="!cardart">\n                        <div ng-class="{\'rowMask\':fundingsource.editDisallowedMsg, slide: ($index == selectedIndex && deleteCard)}">\n                            <span class="fsIcon pinlessIcon icon icon-card-half-solid" aria-hidden="true" ng-if="fundingsource.isPinlessDebit"></span>\n                            <xo-fi-icon class-name="fsIcon" fi="fundingsource" ng-if="!fundingsource.isPinlessDebit">\n                                <img class="plccInstIcon" ng-src="{{fundingsource.productUrl}}" ng-show="fundingsource.type === \'PLCC\'">\n                            </xo-fi-icon>\n                            <p class="fsdetails">\n                                <span ng-switch="fundingsource.subtype">\n                                    <span class="fundingContainerPAD" ng-switch-when="PAD">\n                                        <span class="subtype">{{content(\'fundingInstruments.pad\')}}</span>\n                                        <span class="name">{{content(\'fsMappings.\'+fundingsource.name) || fundingsource.name}}</span>\n                                        <span class="lastdigits" ng-if="fundingsource.lastDigits">x-{{fundingsource.lastDigits}}</span>\n                                    </span>\n                                    <span ng-switch-default>\n                                        <span class="name" ng-if="fundingsource.isPinlessDebit">{{content(\'fsMappings.PINLESSDEBIT\')}}</span>\n                                        <span class="name" ng-if="!fundingsource.isPinlessDebit">{{content(\'fsMappings.\'+fundingsource.name) || fundingsource.name}}</span>\n                                        <span class="lastdigits" ng-if="fundingsource.lastDigits">x-{{fundingsource.lastDigits}}</span>\n                                    </span>\n                                </span>\n                            </p>\n                        </div>\n\n                        <a ng-if="fundingsource.editDisallowedMsg && (disallowedIndex !== $index)" ui-sref="checkout.review.sidebar.sidebarManageWallet" ng-click="actions.showInfoMsg($index)" class="infoIcon" ></a>\n                        <p ng-if="fundingsource.editDisallowedMsg" class="infoMsg" ng-class="{showMsg: ($index == disallowedIndex)}">\n                            {{content(\'wallet.\'+fundingsource.editDisallowedMsg)}}\n                        </p>\n\n                        <div class="manageLinks" ng-class="{slideOut: ($index == selectedIndex && deleteCard)}" ng-if="!fundingsource.editDisallowedMsg &&  ($index !== selectedIndex) && !isSystemError ">\n                            <a track-submit="update_card" ui-sref=\'checkout.review.sidebar.sidebarUpdateCard.addCardFlow.addCard({planId: fundingsource.id})\' class="updateButton">\n                                <span>{{content(\'wallet.update\')}}</span>\n                            </a>\n                            <span class="vertical"></span>\n                            <a href="" link-button class="deleteButton" ng-click="actions.confirm($index)">{{content(\'wallet.delete\')}}</a>\n                        </div>\n                        <div ng-class="{slideIn: ($index == selectedIndex && deleteCard)}" class="confirm" ng-if="!fundingsource.editDisallowedMsg && !isSystemError">\n                            <a ng-if="$index !== selectedIndex" class="confirmButton">{{content(\'common.confirm\')}}</a>\n                            <a ng-if="$index === selectedIndex" href="" link-button track-submit="delete_card" class="confirmButton" ng-click="actions.deleteFS(fundingsource)">{{content(\'common.confirm\')}}</a>\n                        </div>\n                    </experience>\n                </div>\n            </li>\n        </ul>\n    </div>\n</div>\n';
    },
    "./pages/xo-sidebar-manage-wallet/styles.less": "./css/app.less",
    "./pages/xo-sidebar-update-card/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        __webpack_require__("./pages/xo-sidebar-update-card/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/add-bank/route.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        exports["default"] = _squid.$Route.extend("$SidebarUpdateCardRoute", {
            params: {
                planId: null
            },
            path: "sidebarUpdateCard",
            directive: "xo-sidebar-update-card",
            titleContent: "asideHeader.updateCard",
            trackingData: {
                templateName: "tray/updateCard.dust",
                pageGoal: "update Card",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-update-cc",
                        pagename2: "%::fullpage-update-cc:member:hermes:tray",
                        version: "member:%:tray"
                    }
                }
            },
            children: [ {
                name: "$AddCardFlowRoute",
                attributes: {
                    token: "token",
                    message: "message",
                    sidebar: "sidebar",
                    "parent-callbacks": "callbacks",
                    logout: "logout",
                    fundingid: "fundingid",
                    "back-uri": "backUri"
                }
            } ]
        });
        _squid.$Route;
        module.exports = exports["default"];
    },
    "./pages/xo-sidebar-update-card/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoSidebarUpdateCardComponent = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _template = __webpack_require__("./pages/xo-sidebar-update-card/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoSidebarUpdateCardComponent = exports.$xoSidebarUpdateCardComponent = _squid.$Component.extend("$xoSidebarUpdateCardComponent", {
            tag: "xo-sidebar-update-card",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: true
                },
                backUri: {
                    type: "var",
                    required: false
                },
                doneUri: {
                    type: "var",
                    required: false
                }
            },
            lifecycle: {
                enter: function enter() {
                    this.fundingid = _uiRouter.$stateParams.planId;
                    this.sidebar = true;
                    this.backUri = this.props.backUri;
                    var doneUri = this.props.doneUri;
                    this.callbacks = {
                        finish: function finish() {
                            _uiRouter.$state.go(doneUri || "checkout.review.sidebar.sidebarManageWallet");
                        }
                    };
                }
            }
        });
        angular.value("$xoSidebarUpdateCardComponent", $xoSidebarUpdateCardComponent);
        _squid.$Component;
        _uiRouter.$state;
        _uiRouter.$stateParams;
    },
    "./pages/xo-sidebar-update-card/template.html": function(module, exports) {
        module.exports = '<div class="aside addCard" id="addCard" content>\n    <ui-view sidebar="sidebar"></ui-view>\n</div>\n';
    },
    "./pages/xo-sidepage/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-sidepage/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        var _route = __webpack_require__("./components/xo-wallet-components/src/topup/topup-amount/route.js");
        var _route2 = _interopRequireDefault(_route);
        var _route3 = __webpack_require__("./components/xo-wallet-components/src/topup/topup-funding/route.js");
        var _route4 = _interopRequireDefault(_route3);
        var _route5 = __webpack_require__("./components/xo-wallet-components/src/topup/update-pin/route.js");
        var _route6 = _interopRequireDefault(_route5);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$SidepageRoute", {
            path: "sidepage",
            directive: _directive2["default"],
            children: [ {
                route: _route4["default"],
                props: function props() {
                    return {
                        token: this.token,
                        success: this.actions.done
                    };
                }
            }, {
                route: _route2["default"],
                props: function props() {
                    return {
                        token: this.token,
                        success: this.actions.done
                    };
                }
            }, {
                route: _route6["default"],
                props: function props() {
                    return {
                        token: this.token,
                        success: this.actions.done
                    };
                }
            } ]
        });
        _index.$Route;
        module.exports = exports["default"];
    },
    "./pages/xo-sidepage/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _template = __webpack_require__("./pages/xo-sidepage/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoSidepage", {
            tag: "xo-sidepage",
            template: _template2["default"],
            props: {
                token: {
                    required: true,
                    type: "var"
                }
            },
            actions: {
                done: function done() {
                    (0, _jquery2["default"])("body").removeClass("sidePageOpen");
                    (0, _angular.$timeout)(function() {
                        return _uiRouter.$state.go("checkout.review");
                    }, 300);
                }
            },
            lifecycle: {
                populate: function populate() {
                    (0, _jquery2["default"])("body").addClass("sidePageOpen");
                },
                exit: function exit() {
                    this.actions.done();
                }
            }
        });
        _angular.$timeout;
        _squid.$Component;
        _uiRouter.$state;
        module.exports = exports["default"];
    },
    "./pages/xo-sidepage/template.html": function(module, exports) {
        module.exports = '<div class="sidepage" modal-box tabindex="-1">\n    <div ui-view></div>\n</div>\n';
    },
    "./components/xo-wallet-components/src/topup/topup-amount/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./components/xo-wallet-components/src/topup/topup-amount/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$xoTopupAmountRoute", {
            path: "topupAmount",
            directive: _directive2["default"],
            children: []
        });
        _index.$Route;
        module.exports = exports["default"];
    },
    "./components/xo-wallet-components/src/topup/topup-amount/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _fi = __webpack_require__("./components/xo-models/src/fi/index.js");
        var _template = __webpack_require__("./components/xo-wallet-components/src/topup/topup-amount/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-wallet-components/src/topup/topup-amount/styles.less");
        var _app = __webpack_require__("./components/xo-models/src/app/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoTopupAmountDirective", {
            tag: "xo-topup-amount",
            template: _template2["default"],
            props: {
                token: {
                    type: "var"
                },
                success: {
                    type: "var"
                }
            },
            resolve: {
                models: function models() {
                    return {
                        walletPreferences: _fi.$WalletPreferences.instance(this.props.token).retrieve(),
                        tokenizedWalletInfoModel: _app.$TokenizedWalletInfoModel.instance(this.props.token).retrieve()
                    };
                }
            },
            actions: {
                selectAmount: function selectAmount(amount) {
                    this.models.walletPreferences.topup.amount = amount;
                    this.success();
                }
            },
            lifecycle: {
                enter: function enter() {
                    this.topupAmounts = _squid.$config.topup.topupAmounts;
                    this.locale = _squid.$locale;
                },
                populate: function populate() {
                    if (this.models.walletPreferences.topup.amount && this.topupAmounts.indexOf(this.models.walletPreferences.topup.amount) === -1) {
                        this.topupAmounts.push(this.models.walletPreferences.topup.amount);
                        this.topupAmounts.sort(function(a, b) {
                            return parseInt(a, 10) - parseInt(b, 10);
                        });
                    }
                }
            }
        });
        _squid.$Component;
        _squid.$config;
        _squid.$locale;
        _fi.$WalletPreferences;
        _app.$TokenizedWalletInfoModel;
        module.exports = exports["default"];
    },
    "./components/xo-wallet-components/src/topup/topup-amount/template.html": function(module, exports) {
        module.exports = '<section id="topupAmountList" class="aside" modal-box content>\n    <xo-aside-header heading=\'asideHeader.topupAmount\'\n                     hidex="true"\n                     header-left="common.back"\n                     header-left-link="success"\n                     header-left-icon="true"></xo-aside-header>\n    <div class="content">\n        <div tabindex="-1" focus-when="true">{{ content("topup.commonTopupAmountDesc", { type: this.models.tokenizedWalletInfoModel.brandName() } ) }}</div>\n        <ul>\n            <li ng-repeat="amount in topupAmounts">\n                <a class="listItem" ng-click="actions.selectAmount(amount)" focusable>\n                    <format-currency class="formatCurrency amount" code="models.walletPreferences.topup.currency"\n                                     amount="amount"\n                                     currency-style="Currency"></format-currency>\n                    <span class="checkIcon" ng-if="amount === models.walletPreferences.topup.amount">\n                        <span class="accessAid" ng-if="locale.lang === \'en\'">Selected</span>\n                    </span>\n                </a>\n            </li>\n        </ul>\n    </div>\n</section>\n\n';
    },
    "./components/xo-wallet-components/src/topup/topup-amount/styles.less": "./css/app.less",
    "./components/xo-wallet-components/src/topup/topup-funding/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./components/xo-wallet-components/src/topup/topup-funding/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        __webpack_require__("./pages/xo-sidepage-add-card/route.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$xoTopupFundingRoute", {
            path: "topupFunding",
            directive: _directive2["default"],
            children: [ {
                name: "$SidepageAddCardRoute",
                attributes: {
                    token: "token",
                    callbacks: "addCardCallbacks"
                }
            } ]
        });
        _index.$Route;
        module.exports = exports["default"];
    },
    "./components/xo-wallet-components/src/topup/topup-funding/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
            var _fi = __webpack_require__("./components/xo-models/src/fi/index.js");
            var _template = __webpack_require__("./components/xo-wallet-components/src/topup/topup-funding/template.html");
            var _template2 = _interopRequireDefault(_template);
            __webpack_require__("./components/xo-wallet-components/src/topup/topup-funding/styles.less");
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            exports["default"] = _squid.$Component.extend("$xoTopupFundingDirective", {
                tag: "xo-topup-funding",
                template: _template2["default"],
                props: {
                    token: {
                        type: "var"
                    },
                    success: {
                        type: "var"
                    }
                },
                resolve: {
                    models: function models() {
                        return {
                            checkoutSession: _checkout.$CheckoutSessionModel.instance(this.props.token).retrieve(),
                            walletPreferences: _fi.$WalletPreferences.instance(this.props.token).retrieve()
                        };
                    }
                },
                actions: {
                    selectFundingSource: function selectFundingSource(id) {
                        if (this.models.walletPreferences.topup.fundingSource.instrument_id !== id) {
                            this.models.walletPreferences.topup.fundingSource = _squid.$util.find(this.models.checkoutSession.topupFundingSources, function(fs) {
                                return fs.instrument_id === id;
                            });
                            this.models.checkoutSession.action("setTopupFI", {
                                data: {
                                    instrument_id: id
                                },
                                silent: true
                            });
                        }
                        this.props.success();
                    },
                    addCard: function addCard() {
                        _uiRouter.$state.go(".sidepageAddCard.addCardFlow.addCard");
                    }
                },
                lifecycle: {
                    enter: function enter() {
                        var _this = this;
                        this.locale = _squid.$locale;
                        this.addCardCallbacks = {
                            finish: function finish() {
                                if (_this.models.checkoutSession.selectedTopupFundingSource) {
                                    _this.models.walletPreferences.topup.fundingSource = _this.models.checkoutSession.selectedTopupFundingSource;
                                }
                                $("#sidepageAddCard").removeClass("sidepageAddCardOpen");
                                (0, _angular.$timeout)(function() {
                                    return _uiRouter.$state.go("checkout.review");
                                }, 300);
                            },
                            cancel: function cancel() {
                                $("#sidepageAddCard").removeClass("sidepageAddCardOpen");
                                (0, _angular.$timeout)(function() {
                                    return _uiRouter.$state.go("^.^.^");
                                }, 300);
                            }
                        };
                        this.instrumentIconId = function(name) {
                            return _fi.$WalletInstrumentNameMapping.instance().getInstrumentNameNormalized(name);
                        };
                    },
                    populate: function populate() {
                        $("#topupFundingList").css("height", function() {
                            return window.innerHeight || document.documentElement && document.documentElement.clientHeight;
                        });
                    }
                }
            });
            _angular.$timeout;
            _uiRouter.$state;
            _squid.$Component;
            _squid.$locale;
            _squid.$util;
            _checkout.$CheckoutSessionModel;
            _fi.$WalletPreferences;
            _fi.$WalletInstrumentNameMapping;
            module.exports = exports["default"];
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-wallet-components/src/topup/topup-funding/template.html": function(module, exports) {
        module.exports = '<section id="topupFundingList" class="aside" modal-box content>\n    <xo-aside-header heading=\'asideHeader.topupFunding\'\n                     hidex="true"\n                     header-left-link="success"\n                     header-left="common.back"\n                     header-left-icon="true"\n                     header-right="fundingInstruments.addDebitCard="\n                     header-right-link="\'checkout.review.sidepage.topupFunding.sidepageAddCard.addCardFlow.addCard\'"\n                     header-right-icon="true"></xo-aside-header>\n    <div class="content">\n        <div tabindex="-1" focus-when="true">{{content("topup.topupFundingDesc")}}</div>\n        <ul>\n            <li ng-repeat="fundingSource in models.checkoutSession.topupFundingSources" focusable>\n                <a class="listItem noLink" ng-click="actions.selectFundingSource(fundingSource.instrument_id)">\n                    <span class="walletIcons" ng-class="[fundingSource.type,\n                                                        instrumentIconId(fundingSource.name),\n                                                        fundingSource.card_type]"></span>\n                    <div class="fsItem">\n                        <div>{{fundingSource.name}}</div>\n                        <div>x-{{fundingSource.last4 }}</div>\n                        <span class="checkIcon" ng-if="fundingSource.instrument_id === models.walletPreferences.topup.fundingSource.instrument_id">\n                        <span class="accessAid" ng-if="locale.lang === \'en\' && fundingSource.instrument_id === models.walletPreferences.topup.fundingSource.instrument_id">Selected</span>\n                    </span>\n                    </div>\n                </a>\n            </li>\n            <li>\n                <a href="#" prevent-default link-button ng-click="actions.addCard()" class="submit listItem addccLink">\n                    <span class="icon"></span>\n                    <span class="description">{{content(\'fundingInstruments.addDebitCard\')}}</span>\n                </a>\n            </li>\n        </ul>\n    </div>\n</section>\n<div ui-view></div>\n';
    },
    "./components/xo-wallet-components/src/topup/topup-funding/styles.less": "./css/app.less",
    "./pages/xo-sidepage-add-card/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$SidepageAddCardRoute = undefined;
        __webpack_require__("./pages/xo-sidepage-add-card/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/add-card/route.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $SidepageAddCardRoute = exports.$SidepageAddCardRoute = _squid.$ComponentRoute.extend("$SidepageAddCardRoute", {
            path: "sidepageAddCard",
            directive: "xo-sidepage-add-card-page",
            titleContent: "asideHeader.addCard",
            trackingData: {
                templateName: "tray/addCard.dust",
                pageGoal: "Add Card",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-add-cc",
                        pagename2: "%::fullpage-add-cc:member:hermes:tray",
                        version: "member:%:tray"
                    }
                }
            },
            children: [ {
                name: "$AddCardFlowRoute",
                attributes: {
                    token: "token",
                    message: "message",
                    sidebar: "sidebar",
                    "parent-callbacks": "callbacks",
                    promotion: "promotion",
                    "show-cancel": true
                }
            } ]
        });
        angular.value("$SidepageAddCardRoute", $SidepageAddCardRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-sidepage-add-card/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoSidepageAddCardPageComponent = undefined;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _template = __webpack_require__("./pages/xo-sidepage-add-card/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-wallet-components/src/add-card/directive.js");
        __webpack_require__("./components/xo-page-components/src/aside-header/directive.js");
        __webpack_require__("./components/xo-validation/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoSidepageAddCardPageComponent = exports.$xoSidepageAddCardPageComponent = _squid.$Component.extend("$xoSidepageAddCardPageComponent", {
            tag: "xo-sidepage-add-card-page",
            template: _template2["default"],
            scope: {
                token: "=",
                callbacks: "="
            },
            lifecycle: {
                enter: function enter() {
                    var interval = (0, _angular.$interval)(function() {
                        var el = (0, _jquery2["default"])("#sidepageAddCard");
                        if (el) {
                            _angular.$interval.cancel(interval);
                            el.addClass("sidepageAddCardOpen");
                        }
                    }, 100);
                }
            },
            controller: function controller($scope, $rootScope, $stateParams) {
                $scope.billingaddressupdated = {
                    value: false
                };
                $scope.isUpdateDebitCard = function() {
                    return $stateParams.message === "EXPIRED_DEBIT_CARD";
                };
                $scope.token = $rootScope.token;
                $scope.message = {};
            }
        });
        angular.value("$xoSidepageAddCardPageComponent", $xoSidepageAddCardPageComponent);
        _angular.$interval;
        _squid.$Component;
    },
    "./pages/xo-sidepage-add-card/template.html": function(module, exports) {
        module.exports = '<div class="aside" id="sidepageAddCard" modal-box content>\n    <xo-aside-header heading="{{isUpdateDebitCard() ? \'asideHeader.updateDebitCard\' : \'asideHeader.addDebitCard\'}}"\n                     hidex="true"></xo-aside-header>\n    <div class="content">\n\t    <ui-view></ui-view>\n    </div>\n</div>\n';
    },
    "./components/xo-wallet-components/src/topup/update-pin/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./components/xo-wallet-components/src/topup/update-pin/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$xoUpdatePinRoute", {
            path: "updatePin",
            directive: _directive2["default"],
            children: []
        });
        _index.$Route;
        module.exports = exports["default"];
    },
    "./components/xo-wallet-components/src/topup/update-pin/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        __webpack_require__("./components/xo-ui-components/src/mobile-pin/directive.js");
        var _index = __webpack_require__("./components/xo-models/src/app/index.js");
        var _template = __webpack_require__("./components/xo-wallet-components/src/topup/update-pin/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-wallet-components/src/topup/update-pin/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoUpdatePinDirective", {
            tag: "xo-update-pin",
            template: _template2["default"],
            props: {
                token: {
                    type: "var"
                },
                success: {
                    type: "var"
                }
            },
            lifecycle: {
                enter: function enter() {
                    _logger.$logger.info("tokenized_wallet", {
                        from: "PINSETUP",
                        to: "PREPARE_PINSETUP"
                    });
                }
            },
            controller: function controller($scope) {
                var currentPin = "";
                $scope.madeAttempt = false;
                $scope.pinError = "";
                $scope.pinChanged = false;
                function done(pinValue) {
                    _index.$TokenizedWalletPinModel.instance(_angular.$rootScope.token).retrieve().then(function(WalletPinModel) {
                        WalletPinModel.userPin = pinValue;
                        _logger.$logger.info("tokenized_wallet", {
                            from: "PINSETUP",
                            to: "PROCESS_PINSETUP"
                        });
                        (0, _angular.$timeout)(function() {
                            return _uiRouter.$state.go("checkout.review");
                        }, 1500);
                    });
                }
                $scope.pinComplete = function(result) {
                    var value = result && result.value;
                    if (result && result.error === "pin_too_simple") {
                        $scope.pinError = "toEasy";
                        $scope.madeAttempt = false;
                        currentPin = "";
                        $scope.$broadcast("resetPin");
                        return;
                    }
                    $scope.pinChanged = $scope.madeAttempt && currentPin === value;
                    $scope.pinError = $scope.madeAttempt && !$scope.pinChanged ? "missMatch" : "";
                    currentPin = $scope.madeAttempt ? "" : value;
                    $scope.madeAttempt = !$scope.madeAttempt;
                    if (!$scope.pinChanged) {
                        $scope.$broadcast("resetPin");
                    } else {
                        done(value);
                    }
                };
            }
        });
        _angular.$timeout;
        _uiRouter.$state;
        _squid.$Component;
        _logger.$logger;
        _index.$TokenizedWalletPinModel;
        _angular.$rootScope;
        module.exports = exports["default"];
    },
    "./components/xo-ui-components/src/mobile-pin/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        __webpack_require__("./components/xo-ui-components/src/mobile-pin/styles.less");
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-ui-components/src/mobile-pin/template.html") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-mobile-pin.directive", [ "squid" ]).directive("xoMobilePin", function() {
                return {
                    scope: {
                        pinvalue: "=",
                        done: "="
                    },
                    template: template,
                    controller: function controller($scope, $element, $util) {
                        $scope.pinvalue = {};
                        var delay = 200;
                        $scope.doingReset = false;
                        $scope.fields = [ "field1", "field2", "field3", "field4" ];
                        function reset() {
                            $scope.fields.forEach(function(fieldName) {
                                $scope.pinvalue[fieldName] = "";
                                var currentElement = document.getElementById(fieldName);
                                angular.element(currentElement)[0].type = "number";
                            });
                            var ele = document.getElementById($scope.fields[0]);
                            angular.element(ele)[0].focus();
                            $scope.doingReset = false;
                        }
                        reset();
                        function isPinValid(value) {
                            var onlyNumbers = /^\d{4}$/i;
                            var consecutiveDigits = /^0123|1234|2345|3456|4567|5678|6789$/i;
                            var commonPattern = /^0246|1357|2468|3579$/i;
                            var repeatingDigits = /^([0-9])\1*$/i;
                            return onlyNumbers.test(value) && !consecutiveDigits.test(value) && !commonPattern.test(value) && !repeatingDigits.test(value);
                        }
                        function getPin() {
                            var result = {
                                value: "",
                                error: ""
                            };
                            $scope.fields.forEach(function(fieldName) {
                                result.value = result.value + String($scope.pinvalue[fieldName]);
                            });
                            result.error = isPinValid(result.value) ? "" : "pin_too_simple";
                            return result;
                        }
                        function isKeyValid(val) {
                            return /^\d{1}/.test(val);
                        }
                        function isDone() {
                            var values = Object.keys($scope.pinvalue).map(function(key) {
                                return $scope.pinvalue[key];
                            });
                            return $util.every(values, function(val) {
                                return isKeyValid(val);
                            });
                        }
                        function moveCursor(currID, direction, clearCurrent) {
                            var currentIndex = $scope.fields.indexOf(currID);
                            var currEle = angular.element(document.getElementById(currID))[0];
                            if (clearCurrent) {
                                currEle.value = "";
                                $scope.pinvalue[currID] = "";
                            }
                            var nextIndex = void 0;
                            if (direction === "left") {
                                nextIndex = currentIndex > 0 ? currentIndex - 1 : 0;
                            }
                            if (direction === "right") {
                                nextIndex = currentIndex < $scope.fields.length - 1 ? currentIndex + 1 : $scope.fields.length - 1;
                            }
                            var nextID = $scope.fields[nextIndex];
                            if (nextID !== currID) {
                                var nextEle = angular.element(document.getElementById(nextID))[0];
                                nextEle.type = "number";
                                nextEle.focus();
                            }
                        }
                        $scope.$on("resetPin", function() {
                            $scope.doingReset = true;
                            (0, _angular.$timeout)(function() {
                                return reset();
                            }, delay);
                        });
                        $scope.pressedKey = function(eventObj) {
                            var currID = eventObj && eventObj.currentTarget.id;
                            if (eventObj && eventObj.key === "Backspace") {
                                moveCursor(currID, "left", true);
                            }
                        };
                        $scope.releaseKey = function(eventObj) {
                            var currID = eventObj && eventObj.currentTarget.id;
                            if (eventObj && eventObj.key === "Backspace") {
                                return;
                            }
                            var currEle = angular.element(document.getElementById(currID))[0];
                            var currentValue = $scope.pinvalue[currID];
                            if (isDone()) {
                                currEle.blur();
                                var pin = getPin();
                                $scope.done(pin);
                            }
                            if (isKeyValid(currentValue)) {
                                moveCursor(currID, "right", false);
                            }
                        };
                        $scope.onFocus = function(eventObj) {
                            var currID = eventObj && eventObj.currentTarget.id;
                            var currEle = angular.element(document.getElementById(currID))[0];
                            $scope.pinvalue[currID] = "";
                            currEle.value = "";
                            currEle.type = "number";
                        };
                        $scope.onBlur = function(eventObj) {
                            var currID = eventObj && eventObj.currentTarget.id;
                            var currentValue = eventObj && eventObj.currentTarget.value;
                            var currEle = angular.element(document.getElementById(currID))[0];
                            if (!$scope.doingReset && currentValue) {
                                (0, _angular.$timeout)(function() {
                                    currEle.type = "password";
                                }, delay);
                            }
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        _angular.$timeout;
    },
    "./components/xo-ui-components/src/mobile-pin/styles.less": "./css/app.less",
    "../node_modules/noop-loader/index.js!./components/xo-ui-components/src/mobile-pin/template.html": function(module, exports) {
        module.exports = '<div class="pinbox">\n    <input type="number" pattern="[0-9]" maxlength=1 id="field1" autofocus="autofocus"\n            class="numpin" ng-class="{empty:pinvalue.field1===\'\'}"\n            ng-keyup="releaseKey($event)" ng-keydown="pressedKey($event)"\n            ng-model="pinvalue.field1"\n            ng-blur="onBlur($event)" ng-focus="onFocus($event)" />\n    <input type="number" pattern="[0-9]" maxlength=1 id="field2"\n            class="numpin" ng-class="{empty:pinvalue.field2===\'\'}"\n            ng-keyup="releaseKey($event)" ng-keydown="pressedKey($event)"\n            ng-model="pinvalue.field2"\n            ng-blur="onBlur($event)" ng-focus="onFocus($event)" />\n    <input type="number" pattern="[0-9]" maxlength=1 id="field3"\n            class="numpin" ng-class="{empty:pinvalue.field3==\'\'}"\n            ng-keyup="releaseKey($event)" ng-keydown="pressedKey($event)"\n            ng-model="pinvalue.field3"\n            ng-blur="onBlur($event)" ng-focus="onFocus($event)" />\n    <input type="number" pattern="[0-9]" maxlength=1 id="field4"\n            class="numpin" ng-class="{empty:pinvalue.field4===\'\'}"\n            ng-keyup="releaseKey($event)" ng-keydown="pressedKey($event)"\n            ng-model="pinvalue.field4"\n            ng-blur="onBlur($event)" ng-focus="onFocus($event)" />\n</div>\n';
    },
    "./components/xo-wallet-components/src/topup/update-pin/template.html": function(module, exports) {
        module.exports = '<section id="updatePin" class="aside" modal-box content>\n    <xo-aside-header heading=\'asideHeader.inStorePin\'\n                    hidex="true"\n                    header-left="common.back"\n                    header-left-link="success"\n                    header-left-icon="true"></xo-aside-header>\n    <div class="pinError" ng-if="pinError">\n        <div class="errorIcon"></div>\n        <div class="errorText">\n            <span ng-if="pinError===\'missMatch\'">{{content(\'review.pinMissMatch\')}}</span>\n            <span ng-if="pinError===\'toEasy\'">{{content(\'review.pinEasy\')}}</span>\n        </div>\n    </div>\n    <div class="content">\n        <div class="pinUpdate" ng-if="!pinChanged">\n            <xo-mobile-pin done="pinComplete"></xo-mobile-pin>\n            <div class="subtext" ng-if="!pinMissMatch && !madeAttempt">{{content(\'review.pinFirstEntry\')}}</div>\n            <div class="subtext" ng-if="!pinMissMatch && madeAttempt">{{content(\'review.pinSecondEntry\')}}</div>\n            <div class="subtext" ng-if="pinMissMatch">{{content(\'review.pinBadEntry\')}}</div>\n            <div class="secondarySubtext">{{content(\'review.pinSubText\')}}</div>\n        </div>\n        <div class="pinSuccess" ng-if="pinChanged">\n            <div class="successGif"></div>\n            <div class="successText">{{content(\'review.pinChanged\')}}</div>\n        </div>\n    </div>\n</section>\n';
    },
    "./components/xo-wallet-components/src/topup/update-pin/styles.less": "./css/app.less",
    "./pages/xo-review/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoReviewPageComponent = undefined;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        __webpack_require__("./js/lib/index.js");
        __webpack_require__("./components/xo-models/src/checkout/index.js");
        __webpack_require__("./components/xo-title/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/message/directive.js");
        __webpack_require__("./components/xo-ui-components/src/banner/directive.js");
        __webpack_require__("./components/xo-ui-components/src/user-assist-banner/directive.js");
        __webpack_require__("./components/xo-form-components/src/select-shipping-method/directive.js");
        __webpack_require__("./components/xo-member-components/src/review-address/directive.js");
        __webpack_require__("./components/xo-member-components/src/review-paywith/directive.js");
        __webpack_require__("./components/xo-third-party-components/src/review-paywith-venmo/directive.js");
        __webpack_require__("./components/xo-third-party-components/src/review-paywith-baidu/directive.js");
        __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
        __webpack_require__("./components/xo-page-components/src/messenger-plugin/directive.js");
        __webpack_require__("./components/xo-address-components/src/address-display/directive.js");
        __webpack_require__("./components/xo-credit-components/src/offer/directive.js");
        __webpack_require__("./components/xo-credit-components/src/offer/xo-credit-example-uk/directive.js");
        __webpack_require__("./components/xo-credit-components/src/xo-offer-top-banner/directive.js");
        __webpack_require__("./components/xo-return-to-merchant/dist/util.js");
        __webpack_require__("./components/xo-models/src/app/index.js");
        __webpack_require__("./components/xo-models/src/user/index.js");
        __webpack_require__("./components/xo-models/src/bml/index.js");
        __webpack_require__("./components/xo-models/src/fi/index.js");
        __webpack_require__("./components/xo-models/src/fi/lib/fiMessages.js");
        __webpack_require__("./components/xo-models/src/fi/lib/fiApis.js");
        __webpack_require__("./components/xo-models/src/auth/lib/xoAPayUtils.js");
        __webpack_require__("./components/xo-device-info/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        __webpack_require__("./components/xo-credit-components/src/bml-display/xo-bml-popup/directive.js");
        __webpack_require__("./components/xo-page-components/src/done/directive.js");
        __webpack_require__("./components/xo-page-components/src/cart/lib/pxp.js");
        __webpack_require__("./components/xo-wallet-components/src/3ds/directive.js");
        __webpack_require__("./components/xo-models/src/profilemanagement/index.js");
        var _index = __webpack_require__("./components/xo-models/src/choice/index.js");
        __webpack_require__("./components/xo-models/src/inventory/index.js");
        __webpack_require__("./components/xo-models/src/shoppingcart/index.js");
        __webpack_require__("./components/xo-page-components/src/marketingOffers/directive.js");
        var _integration = __webpack_require__("./js/lib/integration.js");
        __webpack_require__("./components/xo-member-components/src/review-topup/directive.js");
        var _template = __webpack_require__("./pages/xo-review/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _fi = __webpack_require__("./components/xo-models/src/fi/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/fiMeta/index.js");
        var _index3 = _interopRequireDefault(_index2);
        __webpack_require__("./components/xo-styles/dist/lib/toggle.less");
        var _ul = __webpack_require__("./components/xo-login-components/src/unified-login/ul.js");
        var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
        __webpack_require__("./components/xo-login-components/src/onetouch-interstitial/kmliUpsell.js");
        var _newMember = __webpack_require__("./components/xo-models/src/newMember/index.js");
        __webpack_require__("./components/xo-page-components/src/notYou/directive.js");
        var _app = __webpack_require__("./components/xo-models/src/app/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoReviewPageComponent = exports.$xoReviewPageComponent = _squid.$Component.extend("$xoReviewPageComponent", {
            tag: "xo-review-page",
            template: _template2["default"],
            scope: {
                redirectiframe: "=",
                redirectLightbox: "="
            },
            actions: {
                updatePreferredFi: function updatePreferredFi(logger) {
                    if (this.makeFiPreferred && this.makeFiPreferred.selected) {
                        var PreferredFi = new _fi.$PreferredFi({
                            preferred: [ this.makeFiPreferred.fiId ]
                        });
                        logger.info("checkout_fpti", {
                            pref_fi_set: "1"
                        });
                        return PreferredFi.save({
                            transientError: true,
                            contingencies: {
                                DEFAULT: function DEFAULT() {}
                            }
                        });
                    }
                    logger.info("checkout_fpti", {
                        pref_fi_set: "0"
                    });
                    return _angular.$q.when();
                },
                logSessionCurrencyConversion: function logSessionCurrencyConversion(checkoutSession) {
                    var payload = {};
                    if (checkoutSession.get("plan.conversion")) {
                        payload.type = checkoutSession.get("plan.conversion.paypal") ? "PAYPAL" : "VENDOR";
                        payload.is_conversion_shown = checkoutSession.get("plan.conversion.changeable") ? 1 : 0;
                    } else {
                        payload.type = "NONE";
                        payload.is_conversion_shown = 0;
                    }
                    _logger.$logger.info("currency_conversion", payload);
                }
            },
            lifecycle: {
                reenter: function reenter() {
                    var msgKeys = this.checkoutSession.get("message.msgKeys", []);
                    if (msgKeys.indexOf("confirmUpop.confirmUpopOrChooseAltMethod") === -1) {
                        this.showUnconfirmedUpopMsg = !!this.checkoutSession.unconfirmed_upop;
                    }
                    if (this.setupMultipleFi) {
                        this.setupMultipleFi();
                    }
                    if (this.makeFiPreferred && this.makeFiPreferred.fiId !== this.checkoutSession.fundingOptions.plans[0].primaryFs.id) {
                        _logger.$logger.info("checkout_fpti", {
                            pref_fi_option_shown: "1"
                        });
                        this.makeFiPreferred.selected = false;
                    }
                    this.topupError = false;
                    this.actions.logSessionCurrencyConversion(this.checkoutSession);
                },
                populate: function populate() {
                    if (this.checkoutCart.isWalletTokenization()) {
                        (0, _jquery2["default"])("#outerWrapper").addClass("tokenization topup");
                        (0, _jquery2["default"])(".review .reviewTopup").css("min-height", function() {
                            var height = window.innerHeight || document.documentElement && document.documentElement.clientHeight;
                            return height && height - 110;
                        });
                    }
                },
                exit: function exit() {
                    if (this.checkoutCart.isWalletTokenization()) {
                        (0, _jquery2["default"])(".tokenization").removeClass("topup");
                    }
                }
            },
            controller: function controller($scope, $state, $rootScope, $FallbackError, $populate, $DeviceInfo, $KmliUpsell, $CheckoutAppDataModel, $CheckoutCartModel, $CheckoutSessionModel, $ShippingRuleSummaryModel, $feature, $AuthModel, $pxp, $config, $meta, $experiment, $miniBrowser, $locale, $pxpFactors, $window, $util, $featureCountries, $BMLModel, $ApplyForBMLModel, $CheckoutPayeeModel, $pxpCartAmt, $timeout, $unresolved, $BuyerEligibilityModel, $renderContent, $fiMessages, $fiApis, $element, $MerchantPreferenceModel, $AddCardModel, $CardModel, $CreditInstallmentModel, $InventoryModel, $CreditDataModel, $ShoppingCartModel, $WalletPreferences, $xoAPayUtils, $TokenizedWalletPinModel, $MemberSegmentModel, $AuthConsentModel) {
                $scope.isThirdPartyWalletExperience = function() {
                    var experience = _thirdPartyInfo.thirdPartyExperience.getExperience($rootScope.token);
                    return experience === "BAIDU_EXPERIENCE" || experience === "VENMO_EXPERIENCE";
                };
                $scope.determineThirdPartyWalletExperience = function() {
                    return _thirdPartyInfo.thirdPartyExperience.getExperience($rootScope.token);
                };
                $scope.creditParentContext = {
                    populated: false,
                    newMember: {}
                };
                $scope.memberSegment = $MemberSegmentModel.instance();
                $scope.showCreditPlacement = function() {
                    $scope.creditParentContext.newMember.creditOffer = $scope.memberSegment && $scope.memberSegment.creditOffer;
                    return !$scope.nmj3page && !$scope.isThirdPartyWalletExperience() && $scope.creditParentContext.populated && !$rootScope.showFiSelectPage;
                };
                var applyNewMemberVariant = function applyNewMemberVariant() {
                    _newMember.$NewMemberEligibility.instance().getVariant($scope.token).then(function(variant) {
                        var nmj1page = variant === "one_page";
                        var nmj3page = $scope.nmj3page = variant === "multi_page";
                        var isNmj = $scope.isNmj = nmj1page || nmj3page;
                        var isPayNow = $scope.useraction === "commit";
                        if (nmj1page) {
                            $scope.assistBannerHeader = $locale.content.get("memberReview.assistHeader_1page");
                            $scope.assistBannerBody = $locale.content.get(isPayNow ? "memberReview.assistBody_paynow_1page" : "memberReview.assistBody_continue_1page");
                        } else if (nmj3page) {
                            $scope.assistBannerHeader = $locale.content.get("memberReview.assistHeader_3page");
                            $scope.assistBannerBody = $locale.content.get(isPayNow ? "memberReview.assistBody_paynow_3page" : "memberReview.assistBody_continue_3page");
                        }
                        $scope.creditParentContext.newMember.variant = variant;
                        $scope.creditParentContext.newMember.useCEPDecision = isNmj;
                        $scope.creditParentContext.populated = true;
                        _logger.$logger.info("member_ryi_variant_" + (variant || "unknown"), {
                            isNmj: isNmj,
                            variant: variant
                        });
                    });
                };
                var triggerPersonalizedBanner = function triggerPersonalizedBanner() {
                    $scope.personalizedBanner.trigger();
                };
                if ($scope.isThirdPartyWalletExperience()) {
                    _logger.$logger.info("buyer_info", {
                        fpti_buyer_type: $scope.determineThirdPartyWalletExperience() === "VENMO_EXPERIENCE" ? "Guestuser_venmo" : "nonloginmember_benteley"
                    });
                } else {
                    _logger.$logger.info("buyer_info", {
                        fpti_buyer_type: "Existinguser"
                    });
                }
                var pxpExitMsg = 0;
                var pxpMerchNameLimit = 20;
                var pxpMerchName = void 0;
                var showButtonPxp = false;
                var allowFixedButton = $DeviceInfo.isMobile() || $miniBrowser.isMiniBrowser();
                $scope.token = $rootScope.token;
                $scope.backUri = "checkout.review";
                $scope.installmentNotSelected = false;
                $scope.installment = {
                    showBanner: false,
                    showCYCO: false,
                    showCreditExample: false
                };
                $scope.instantUpdateFeature = {
                    shippingRegionSupported: true
                };
                $scope.padToggleFeature = {
                    applicable: false,
                    checkboxEnabled: false,
                    showCheckbox: false,
                    defaultPlan: false,
                    pxpTreatmentEnabled: false,
                    pxpControlEnabled: false,
                    fptiLogged: false
                };
                $scope.padToggleFeatureSupported = $feature("padToggleFeatureSupported");
                $scope.payButtonText = function() {
                    return "";
                };
                $scope.isGCcountry = ($config.giftCardSupportedCountries || "").indexOf($locale.country) > -1;
                $scope.showPaypalPolicies = $featureCountries("showPaypalPolicies").indexOf($locale.country) > -1;
                $scope.makeAddrPreferred = {
                    shown: false,
                    selected: false
                };
                $scope.showPolicyAgreement = $feature("showPolicyAgreement");
                $scope.isMessengerBAIntegration = _integration.$integration.getConfig("IS_MESSENGER_BA_INTEGRATION");
                $scope.personalizedBanner = {
                    show: false,
                    trigger: function trigger() {
                        var isOneTouchBanner = $scope.auth.rememberedOT() && $feature("oneTouchPersonalization"), newMember = $scope.isNmj;
                        $scope.personalizedBanner.show = !$scope.nmj3page && (newMember || isOneTouchBanner);
                    }
                };
                $scope.optin_toggle = {
                    isEnabled: false,
                    value: false,
                    showExpandedTerms: true,
                    setValue: function setValue(val) {
                        this.value = val;
                        _logger.$logger.debug("ryi_optin_toggle_setValue", {
                            value: this.value,
                            showExpandedTerms: this.showExpandedTerms
                        });
                    }
                };
                _logger.$logger.debug("kmliUpsell review: init");
                $KmliUpsell.init($scope.token, false, true);
                function optInUser() {
                    _logger.$logger.info("ryi_optin", {
                        from: "OT_Toggle",
                        to: "prepare_optin"
                    });
                    $scope.optin_toggle.setValue(true);
                    var optinSource = "checkoutToggle";
                    var silentSpinner = true;
                    _ul.$ul.optInToOneTouch($scope.token, $locale.country, $locale.lang, silentSpinner, {
                        stateName: "OT_Toggle",
                        transInfix: "process_optin"
                    }, optinSource).then(function(res) {
                        _logger.$logger.debug("ryi_optin_toggle_process_optin");
                    })["catch"](function(err) {
                        _logger.$logger.debug("ryi_optin_toggle_process_optin_Error", {
                            int_error_description: err.message
                        });
                    });
                }
                function optOutUser() {
                    _logger.$logger.info("ryi_optin", {
                        from: "OT_Toggle",
                        to: "prepare_optout"
                    });
                    $scope.auth.action("optout", {
                        silent: true
                    }).then(function(res) {
                        _logger.$logger.info("ryi_optin", {
                            from: "OT_Toggle",
                            to: "process_optout"
                        });
                        $scope.$applyAsync(function() {
                            var bannerElement = $element.find(".oneTouchBanner");
                            bannerElement.addClass("leave_animation");
                            _logger.$logger.debug("ryi_optin bannerElement animate");
                            $timeout(function() {
                                $scope.optin_toggle.setValue(false);
                                $scope.optin_toggle.isEnabled = false;
                            }, 1400);
                        });
                    })["catch"](function(err) {
                        _logger.$logger.info("ryi_optin", {
                            from: "OT_Toggle",
                            to: "process_optout",
                            error_source: "identityauthorizationserv",
                            int_error_code: "optout_failure",
                            int_error_description: err.message
                        });
                    });
                }
                $scope.onTouchToggle = function(value) {
                    _logger.$logger.debug("optin_toggle_change_attempt", {
                        ryi_optin: $scope.optin_toggle,
                        remembered: $scope.auth.remembered,
                        value: value
                    });
                    if ($scope.optin_toggle.isEnabled) {
                        if (value) {
                            optInUser();
                        } else {
                            optOutUser();
                        }
                    }
                };
                $scope.tagFamilyComputer = function() {
                    var buyer_id = $scope.auth.buyer_id;
                    var logPayload = {
                        localStorageEnabled: false,
                        isMobile: $DeviceInfo.isMobile()
                    };
                    if ($util.localStorageEnabled()) {
                        var family_device_key = "family_device_test";
                        var public_device_key = "public_device_test";
                        logPayload.localStorageEnabled = true;
                        var objStr = localStorage.getItem(family_device_key);
                        var publicDeviceTest = localStorage.getItem(public_device_key);
                        if (publicDeviceTest === "true") {
                            localStorage.removeItem(family_device_key);
                            logPayload.isPublicDevice = true;
                        } else {
                            var buyerList = objStr ? JSON.parse(objStr) : [];
                            if (buyerList.indexOf(buyer_id) === -1) {
                                buyerList.push(buyer_id);
                            }
                            logPayload.isFamilyDevice = Boolean(buyerList.length > 1 && buyerList.length < 6);
                            logPayload.isPublicDevice = Boolean(buyerList.length > 20);
                            logPayload.userCount = buyerList.length;
                            objStr = JSON.stringify(buyerList);
                            localStorage.setItem(family_device_key, objStr);
                            localStorage.setItem(public_device_key, logPayload.isPublicDevice.toString());
                        }
                    }
                    var eligibility_reason = "localStorage:" + logPayload.localStorageEnabled + "_isPublicDevice:" + logPayload.isPublicDevice + "_isFamilyDevice:" + logPayload.isFamilyDevice + "_userCount:" + logPayload.userCount;
                    _logger.$logger.debug("family_device_test", logPayload);
                    _logger.$logger.info("checkout_fpti", {
                        from: "family_device_test",
                        to: "process_elg_chk",
                        eligibility_reason: eligibility_reason
                    });
                };
                function setInformalName() {
                    if ($scope.auth) {
                        $scope.formattedNameInformal = (0, _squid.formatNameInformal)({
                            first_name: $scope.auth.first_name,
                            last_name: $scope.auth.last_name
                        }) || $scope.auth.email;
                    }
                }
                function updateAddressAsPreferred() {
                    if ($scope.makeAddrPreferred.shown) {
                        _logger.$logger.info("makeAddrPreferred.shown", {});
                    }
                    if ($scope.makeAddrPreferred.selected) {
                        _logger.$logger.info("makeAddrPreferred.selected", {});
                        return $scope.checkoutSession.shipping.action("setPreferred", {
                            transientError: true
                        });
                    }
                    return _angular.$q.when();
                }
                function setStickyInstrument() {
                    if (!$config.features.DEFAULT.enableStickyFunding || $scope.isThirdPartyWalletExperience()) {
                        return _angular.$q.when();
                    }
                    var stickyInstrument = $scope.checkoutSession.selectedFuturePaymentInstrument ? undefined : $scope.checkoutSession.getSelectedStickyInstrument();
                    if (stickyInstrument) {
                        return $scope.checkoutSession.action("setStickyFI", {
                            data: {
                                instrument_id: stickyInstrument.instrument_id
                            }
                        });
                    }
                    return _angular.$q.when();
                }
                function linkAuthConsent() {
                    if ($scope.checkoutCart.isBilling() && $scope.checkoutCart.billing) {
                        var billingConsentCode = $scope.checkoutCart.billing.consent_code;
                        var FB_CONSENT_CODE = "facebookp2p";
                        var authConsentModel = $AuthConsentModel.instance();
                        if (billingConsentCode === FB_CONSENT_CODE) {
                            authConsentModel.action("link", {
                                data: {
                                    ba_token: $meta.baToken
                                },
                                success: function success() {
                                    _logger.$logger.info("link_authconsent_success", {});
                                }
                            });
                        }
                    }
                }
                function setWalletTopupPreferences() {
                    if ($scope.checkoutCart.isWalletTokenization()) {
                        $scope.walletPreferences = $WalletPreferences.instance($scope.token);
                        return $scope.walletPreferences.save();
                    }
                }
                function isValidPinSetup() {
                    if ($scope.walletPinModel && $scope.walletPinModel.isSetupEligible()) {
                        if (!$scope.walletPinModel.userPin) {
                            return false;
                        }
                    }
                    return true;
                }
                function prepareTokenizedWallet() {
                    if ($scope.checkoutCart.isWalletTokenization()) {
                        return $populate($scope, {
                            walletPreferences: $WalletPreferences.instance($scope.token),
                            walletPinModel: $TokenizedWalletPinModel.instance($scope.token)
                        }).then(function(result) {
                            var instrument_id = $scope.walletPreferences.topup.fundingSource.instrument_id;
                            var defaultFI = $util.find($scope.checkoutSession.topupFundingSources, function(fs) {
                                return fs.instrument_id === instrument_id;
                            }) || {};
                            var pinStatus = "default_pin_unavailable";
                            if ($scope.walletPinModel.isPinIdPresent()) {
                                pinStatus = "already_exist";
                            } else if ($scope.walletPinModel.getPinOrigin() !== "UNSET") {
                                pinStatus = "pin_error";
                            } else if ($scope.walletPinModel.getSuggestedPin()) {
                                pinStatus = "default_pin_available";
                            }
                            _logger.$logger.info("tokenized_wallet", {
                                from: "TopUp_REVIEW",
                                to: "prepare_review",
                                context_id: $scope.token,
                                context_type: "EC-Token",
                                billing_token: $meta.baToken,
                                default_topup_fi: defaultFI.type,
                                pin: pinStatus
                            });
                        });
                    }
                    return _angular.$q.when();
                }
                function setTokenizedWalletPin() {
                    if ($scope.walletPinModel) {
                        var pinModel = {
                            data: {
                                pin: $scope.walletPinModel.userPin
                            },
                            contingencies: {
                                DEFAULT: function DEFAULT(name, err) {
                                    _logger.$logger.info("tokenized_wallet", {
                                        from: "TopUp_REVIEW",
                                        to: "process_review",
                                        context_id: $scope.token,
                                        context_type: "BA-Token",
                                        billing_token: $meta.baToken,
                                        int_error_code: "pin_setup_contingencies",
                                        int_error_description: err,
                                        error_source: "issuancemanagementserv"
                                    });
                                    throw err;
                                }
                            }
                        };
                        if ($scope.walletPinModel.isSetupEligible()) {
                            if ($scope.walletPinModel.isPinIdPresent()) {
                                pinModel.data.pinId = $scope.walletPinModel.getPinId();
                            }
                            return $scope.walletPinModel.save(pinModel);
                        }
                    }
                    return _angular.$q.when();
                }
                function show3DSLightbox() {
                    $scope.resolve_3ds_data = {
                        cc_id: $scope.checkoutSession.get("resolve_3ds.ccId"),
                        flow_id: "HERMES",
                        merchant_id: $scope.payee.get("merchant.id"),
                        merchant_country_code: $scope.checkoutAppData.get("merchant.merchant_country"),
                        transaction_amount_currency: $scope.checkoutCart.get("purchase.amounts.total.currency_code"),
                        transaction_amount_value: $scope.checkoutCart.get("purchase.amounts.total.amount")
                    };
                    $scope.launch3DSResolver = true;
                }
                function showGenericError(code) {
                    return function() {
                        inventoryOperation("failed");
                        var encoded = code ? window.btoa(code) : code;
                        return $state.go("checkout.genericError", {
                            code: encoded
                        });
                    };
                }
                function getMerchantPreferences() {
                    return $populate($scope, {
                        pref: $MerchantPreferenceModel.instance($scope.payee.merchant.id)
                    });
                }
                function setProcessorDeclineMessage() {
                    var processorDeclinedMsg = $fiMessages.processorDeclinedMsg($scope.checkoutSession, true);
                    if (processorDeclinedMsg) {
                        $scope.checkoutSession.message = {
                            type: processorDeclinedMsg.type,
                            msgs: [ processorDeclinedMsg.msg ]
                        };
                    }
                }
                function makePayment() {
                    var wpsParams = $util.decodeAndParse($meta.xclickParams);
                    return $scope.checkoutSession.action("createPayment", {
                        data: {
                            payer_id: $scope.checkoutSession.payer.id,
                            intent: $scope.checkoutCart.payment_action,
                            wa_type: wpsParams && wpsParams.wa_type,
                            correlation_id: $meta.correlationId,
                            merchant_id: $scope.payee.get("merchant.id"),
                            custom: $scope.checkoutCart.get("purchase.custom"),
                            invoice: $scope.checkoutCart.get("purchase.invoice")
                        },
                        success: function success(result) {
                            $rootScope.paymentComplete = true;
                            _logger.$logger.info("wps_cart_to_txn_mapping", {
                                cart_id: $scope.token,
                                txn_id: result.transactionDetails && result.transactionDetails.id,
                                txn_receipt_id: result.transactionDetails && result.transactionDetails.receipt_id
                            });
                            return "success";
                        },
                        contingencies: {
                            TRANSACTION_REFUSED: showGenericError("TRANSACTION_REFUSED"),
                            PAYEE_BLOCKED_TRANSACTION: showGenericError("PAYMENT_DENIED"),
                            DUPLICATE_TRANSACTION: showGenericError("PAYMENT_ALREADY_DONE"),
                            CC_PROCESSOR_DECLINED: function CC_PROCESSOR_DECLINED() {
                                inventoryOperation("failed");
                                return $scope.checkoutSession.action("create", {
                                    success: function success(result) {
                                        setProcessorDeclineMessage();
                                        return $state.go("checkout.review");
                                    },
                                    contingencies: {
                                        DEFAULT: function DEFAULT(name, err) {
                                            throw err;
                                        }
                                    }
                                });
                            },
                            DEFAULT: function DEFAULT(name, err) {
                                inventoryOperation("failed");
                                throw err;
                            }
                        }
                    });
                }
                function inventoryOperation(paymentStatus) {
                    var cartHasInventory = $scope.checkoutCart.get("cartHasInventory");
                    if (cartHasInventory) {
                        var inventoryModel = $InventoryModel.instance($rootScope.token);
                        var inventoryItems = inventoryModel.getInventoryItems();
                        paymentStatus = paymentStatus ? paymentStatus : "success";
                        var inventoryPatchInput = {
                            inventoryItems: inventoryItems,
                            cartItems: $scope.checkoutCart.get("purchaseUnits")[0].item_list.items,
                            merchantId: $scope.payee.get("merchant.id", ""),
                            paymentStatus: paymentStatus
                        };
                        return inventoryModel.action("patchInventory", {
                            data: inventoryPatchInput,
                            success: function success(patchResponse) {
                                if (patchResponse.showSoldoutPage) {
                                    return {
                                        soldoutpage: true,
                                        items: patchResponse.soldoutItems,
                                        soldOutUrl: patchResponse.soldoutUrl
                                    };
                                } else if (patchResponse.patchCart) {
                                    var purchase_unit = $scope.checkoutCart.get("purchaseUnits")[0];
                                    purchase_unit.item_list.items = patchResponse.cartItems;
                                    var patchCartPayload = {
                                        id: $scope.token,
                                        patchEntities: [ {
                                            field: "inventoryItems",
                                            value: purchase_unit.item_list.items
                                        } ]
                                    };
                                    return $scope.checkoutCart.action("patchCartData", {
                                        data: patchCartPayload
                                    });
                                }
                                return;
                            }
                        });
                    } else {
                        return _angular.$q.when();
                    }
                }
                function markCartCheckedout() {
                    var shoppingCartModel = $ShoppingCartModel.instance($rootScope.token);
                    return shoppingCartModel.action("cartCheckedOut", {
                        data: {
                            payee_email: $scope.checkoutAppData.get("merchant.merchant_email")
                        },
                        success: function success(result) {
                            _logger.$logger.info("cart checked out successfully");
                        }
                    });
                }
                function isPadToggleFeatureApplicable() {
                    var padToggle = false;
                    if ($scope.padToggleFeatureSupported && $scope.padToggleFeature.pxpTreatmentEnabled && $scope.padToggleFeature.applicable) {
                        padToggle = true;
                    }
                    return padToggle;
                }
                function getPadToggleStatus() {
                    var toggleStatus = "NA";
                    if (isPadToggleFeatureApplicable()) {
                        if ($scope.checkoutSession.plan.isPAD() && $scope.padToggleFeature.checkboxEnabled) {
                            toggleStatus = "ON";
                        } else {
                            toggleStatus = "OFF";
                        }
                    }
                    return toggleStatus;
                }
                function authorize() {
                    if ($scope.checkoutSession.resolve_3ds) {
                        return show3DSLightbox();
                    }
                    function isXoonUpopRedirect() {
                        if (!($scope.checkoutSession && $scope.checkoutSession.get("errorData.resolution.data.fi.type"))) {
                            return false;
                        }
                        return $util.param("redirectToHermesOnUpopCancel") === "xoon" && $scope.checkoutSession.errorData.resolution.name === "PAYER_TO_AUTHENTICATE_CARD" && !$scope.checkoutSession.errorData.resolution.data.alternate_options && $scope.checkoutSession.errorData.resolution.data.fi.type.toUpperCase() === "CUP";
                    }
                    if ($scope.checkoutSession.unconfirmed_upop || isXoonUpopRedirect()) {
                        var card = void 0;
                        if ($scope.checkoutSession.unconfirmed_upop) {
                            card = $scope.checkoutSession.unconfirmed_upop;
                        } else {
                            card = $scope.checkoutSession.errorData.resolution.data;
                        }
                        $scope.cardModel = new $AddCardModel({});
                        $scope.cardModel.id = card.fundingId;
                        $scope.cardModel.card = new $CardModel({
                            number: "xxxx-xxxx-xxxx-" + card.fi.number,
                            type: card.fi.type.toUpperCase(),
                            productType: card.fi.productType
                        });
                        $state.go(".confirmUpop");
                        return;
                    }
                    if ($scope.checkoutCart.isWalletTokenization()) {
                        $xoAPayUtils.setAPayCookie($scope.token);
                    }
                    if (pxpExitMsg && pxpExitMsg !== 4) {
                        var merchantName = pxpMerchName;
                        var applyMerchantNameLimit = pxpExitMsg !== 6;
                        var badMerchantName = !merchantName || applyMerchantNameLimit && merchantName.length > pxpMerchNameLimit;
                        var outroMsg = void 0;
                        if (pxpExitMsg === 1 || pxpExitMsg === 5 || pxpExitMsg === 6) {
                            outroMsg = badMerchantName ? "We’re sending you back to the merchant to complete this purchase." : 'We’re sending you back to <strong style="white-space:nowrap">' + merchantName + "</strong> to complete this purchase.";
                        } else {
                            outroMsg = badMerchantName ? "Next, complete your purchase with the merchant." : 'Next, complete your purchase with <strong style="white-space:nowrap">' + merchantName + "</strong>.";
                        }
                        var reviewRoute = $state.current;
                        var cancelOutroOverride = $rootScope.$on("startLoad", function() {
                            if ($state.current === reviewRoute) {
                                $timeout(function() {
                                    (0, _jquery2["default"])("#spinner-message").css({
                                        width: "130%",
                                        marginLeft: "-15%"
                                    }).html(outroMsg);
                                }, 1);
                            } else {
                                cancelOutroOverride();
                            }
                        });
                    }
                    function testOutros(fn) {
                        if (pxpExitMsg && pxpExitMsg !== 4) {
                            var tmpSpinnerDelayFix = $rootScope.$on("allLoaded", function() {
                                tmpSpinnerDelayFix();
                                $rootScope.$emit("startLoad");
                            });
                            var applyDesktopVariation = pxpExitMsg === 6 && !$DeviceInfo.isMobile();
                            if (applyDesktopVariation || pxpExitMsg === 3) {
                                _logger.$logger.info("exit_msg_delay_variation", {
                                    pxpExitMsg: pxpExitMsg,
                                    applyDesktopVariation: applyDesktopVariation
                                });
                                $timeout(fn, 4e3);
                            } else {
                                $timeout(fn, 2500);
                            }
                        } else {
                            fn();
                        }
                    }
                    var cardBackup = $scope.checkoutSession.cardBackup.getPlan();
                    _logger.$logger.info("checkout_fpti", {
                        from: "processor_decline_retry",
                        to: "processor_decline_retry_eligible",
                        is_bkp_funding_chosen: cardBackup && cardBackup.planId ? 1 : 0
                    });
                    return $scope.checkoutSession.action("authorize", {
                        data: {
                            alternateFundingOptionId: cardBackup && cardBackup.planId
                        },
                        success: function success() {
                            return testOutros(function() {
                                if ($scope.checkoutSession.get("plan.paypal_credit")) {
                                    _logger.$logger.info("checkout_fpti", {
                                        ppc_reuse_status: "success"
                                    });
                                }
                                var padToggleStatus = getPadToggleStatus();
                                if (padToggleStatus === "ON") {
                                    _logger.$logger.info("checkout_fpti", {
                                        pad_toggle_status: "padToggleOnSuccess"
                                    });
                                } else if (padToggleStatus === "OFF") {
                                    _logger.$logger.info("checkout_fpti", {
                                        pad_toggle_status: "padToggleOffSuccess"
                                    });
                                }
                                if ($scope.checkoutCart.isWalletTokenization()) {
                                    _logger.$logger.info("tokenized_wallet", {
                                        from: "TopUp_REVIEW",
                                        to: "process_review",
                                        topup_amt: $scope.walletPreferences.topup.amount,
                                        chosen_topup_fi: $scope.walletPreferences.topup.fundingSource.type,
                                        currency_code: $scope.walletPreferences.topup.currency,
                                        context_id: $scope.token,
                                        context_type: "BA-Token",
                                        billing_token: $meta.baToken
                                    });
                                }
                                if ($scope.cancelUpdateListener) {
                                    $scope.cancelUpdateListener();
                                }
                                var isSepa = $scope.checkoutSession.get("sepa_mandate.bankId");
                                if (window.xchild && !isSepa) {
                                    return $state.go("checkout.end");
                                }
                                if ($scope.checkoutAppData.is_wps_subscription_flow()) {
                                    return $state.go("checkout.end");
                                }
                                if (_integration.$integration.getConfig("DONE_PAGE")) {
                                    return inventoryOperation().then(function(result) {
                                        if (result && result.soldoutpage) {
                                            return $state.go("checkout.soldout", {
                                                items: encodeURIComponent(result.items),
                                                soldOutUrl: encodeURIComponent(result.soldOutUrl)
                                            });
                                        }
                                        return _angular.$q.all([ makePayment(), getMerchantPreferences() ]).then(function() {
                                            if ($rootScope.paymentComplete) {
                                                if ($config.enableShoppingCartWPS && $scope.checkoutAppData.flags.is_shopping_cart_flow) {
                                                    markCartCheckedout();
                                                }
                                                return $state.go("checkout.done");
                                            }
                                        });
                                    });
                                } else {
                                    if (isSepa) {
                                        return $state.go("checkout.sepapage");
                                    }
                                    return $state.go("checkout.end");
                                }
                            });
                        }
                    });
                }
                function setShowShippingMethodProperty() {
                    return $populate($scope, {
                        shippingRulesSummary: $ShippingRuleSummaryModel.instance($rootScope.token).retrieve({
                            params: {
                                merchant_id: $scope.payee.get("merchant.id"),
                                currency_code: $scope.checkoutCart.get("purchase.amounts.total.currency_code")
                            }
                        })
                    }).then(function() {
                        if ($scope.shippingRulesSummary.isSnTEnabled) {
                            _logger.$logger.info("shipping_rules_summary_snt_enabled");
                        } else {
                            _logger.$logger.info("shipping_rules_summary_snt_disabled");
                        }
                        $scope.showShippingMethod = $scope.shippingRulesSummary.isSnTEnabled || $scope.isInstantUpdateAPIFlow;
                        return;
                    });
                }
                function show3DSDeclineMsg(declineAfter3DSAccept) {
                    var numberOfPlans = $scope.checkoutSession.getPlanList() ? $scope.checkoutSession.getPlanList().length : 0;
                    _logger.$logger.info("3DS_decline_plan_count", {
                        plans: numberOfPlans
                    });
                    var key = "threeDS.memberDecline";
                    if (declineAfter3DSAccept) {
                        key = "threeDS.memberDeclineAfter3DSAccept";
                    }
                    var card = $scope.checkoutSession.resolve_3ds;
                    if (card) {
                        var msg = $renderContent(key, {
                            cardType: card.type,
                            last4: card.number
                        });
                        $scope.checkoutSession.message = {
                            msgs: [ msg ],
                            type: "warning"
                        };
                    }
                }
                function clear3DSContingency() {
                    var resolve_3ds = $scope.checkoutSession.resolve_3ds || {};
                    return $scope.checkoutSession.action("clear3DSContingency", {
                        data: {
                            ccId: resolve_3ds.ccId
                        },
                        success: function success(response) {
                            if ($scope.setupMultipleFi) {
                                $scope.setupMultipleFi();
                            }
                            if (!$scope.checkoutSession.resolve_3ds) {
                                var url = $scope.checkoutAppData.get("urls.return_url") || "";
                                var isHTTPUrl = Boolean(url.indexOf("http") === 0 || url.indexOf("www") === 0);
                                var isAppRedirect = Boolean($DeviceInfo.isDevice() && !isHTTPUrl);
                                delete $scope.checkoutSession.message;
                                if (isAppRedirect) {
                                    return;
                                }
                                return authorize();
                            } else {
                                show3DSDeclineMsg(true);
                            }
                        }
                    });
                }
                $scope.onComplete3DSHandler = function(status) {
                    $scope.launch3DSResolver = false;
                    if (status === "success") {
                        return clear3DSContingency();
                    } else if (status === "decline") {
                        show3DSDeclineMsg();
                    }
                };
                $scope.upopCallbacks = {
                    onConfirmUpopSuccess: function onConfirmUpopSuccess() {
                        $state.go("checkout.review");
                        $scope.checkoutSession.action("clearContingency", {
                            data: {
                                contingency: "UNCONFIRMED_UPOP",
                                ccId: $scope.checkoutSession.get("unconfirmed_upop.fundingId") || $scope.checkoutSession.get("errorData.resolution.data.fundingId")
                            },
                            success: function success() {
                                if (!$scope.checkoutSession.unconfirmed_upop) {
                                    return authorize();
                                } else {
                                    $scope.checkoutSession.message = {
                                        type: "warning",
                                        msgKeys: [ "confirmUpop.confirmUpopOrChooseAltMethod" ]
                                    };
                                }
                            }
                        });
                    },
                    onConfirmUpopCancel: function onConfirmUpopCancel() {
                        $state.go("checkout.review");
                        $scope.showUnconfirmedUpopMsg = false;
                        $scope.checkoutSession.message = {
                            type: "warning",
                            msgKeys: [ "confirmUpop.confirmUpopOrChooseAltMethod" ]
                        };
                    }
                };
                $scope.errorHandlerHelper = {};
                $scope.errorHandlerHelper.addPageError = function(contentKey, dynamicValuesInContent) {
                    var messages = [];
                    var msg;
                    if (dynamicValuesInContent) {
                        msg = $renderContent(contentKey, dynamicValuesInContent);
                    } else {
                        msg = $locale.content.get(contentKey);
                    }
                    messages.push(msg);
                    $scope.checkoutSession.message = {
                        msgs: messages,
                        type: "error"
                    };
                };
                $scope.errorHandlerHelper.clearPageErrors = function() {
                    $scope.checkoutSession.message = "";
                };
                $scope.returnFromCape = function(isCapeReturnKey) {
                    return $scope.creditDataModel.action("readCreditKey", {
                        data: {
                            capeKey: isCapeReturnKey
                        },
                        success: function success(res) {
                            if (res.financial_instrument_id) {
                                var financial_instrument_id = res.financial_instrument_id.indexOf("BC") !== 0 ? "BC" + res.financial_instrument_id : res.financial_instrument_id;
                                return $scope.checkoutSession.fundingOptions.action("update", {
                                    resultModel: $scope.checkoutSession,
                                    data: {
                                        planId: financial_instrument_id
                                    },
                                    success: function success(result) {
                                        $scope.checkoutSession.message = {
                                            type: "success",
                                            msgKeys: [ "offers.bmlInWalletSuccessMsg" ]
                                        };
                                        if ($scope.setupMultipleFi) {
                                            $scope.setupMultipleFi();
                                        }
                                    }
                                });
                            } else if (!$scope.checkoutSession.get("plan.sources") && $scope.checkoutSession.isCreditPromoted) {
                                $state.go("checkout.pageAddCard.addCardFlow.addCard");
                            } else if ($scope.creditDataModel.isCapeInternalServiceError()) {
                                return _angular.$q.when();
                            } else {
                                return _angular.$q.when();
                            }
                        },
                        contingencies: {
                            DEFAULT: function DEFAULT(name, err) {
                                _logger.$logger.info("read_cape_key_failure");
                                return _angular.$q.when();
                            }
                        }
                    });
                };
                var updateFS = function updateFS() {
                    var defaultPlan = $scope.checkoutSession.get("plan.sources") && $scope.checkoutSession.get("plan.sources")[0];
                    var selectedMethodPlanId = $scope.selectedmethod && $scope.selectedmethod.planId;
                    if ($scope.selectedmethod && selectedMethodPlanId !== (defaultPlan && defaultPlan.id)) {
                        if (selectedMethodPlanId === "applyForPPCRadio") {
                            return _angular.$q.when();
                        }
                        return $scope.checkoutSession.fundingOptions.action("select", {
                            data: {
                                planId: selectedMethodPlanId
                            },
                            success: function success(result) {
                                $scope.checkoutSession.populate(result);
                            },
                            contingencies: {
                                NEED_AUTHENTICATED_CARD: function NEED_AUTHENTICATED_CARD(name, result) {
                                    if (result && result.resolution) {
                                        var card = result.resolution.data;
                                        if (card.fundingId && card.fi && card.fi.type) {
                                            $scope.cardModel = new $AddCardModel();
                                            $scope.cardModel.id = card.fundingId;
                                            $scope.cardModel.card = new $CardModel({
                                                number: "xxxx-xxxx-xxxx-" + card.fi.number,
                                                type: card.fi.type.toUpperCase(),
                                                productType: card.fi.productType
                                            });
                                        }
                                    }
                                    if ($scope.cancelUpdateListener) {
                                        $scope.cancelUpdateListener();
                                    }
                                    var upopResult = _angular.$q.defer();
                                    $scope.upopCallbacks.isOnUpdate = true;
                                    $scope.upopCallbacks.onUpdateSuccess = function() {
                                        $scope.checkoutSession.fundingOptions.action("update", {
                                            resultModel: $scope.checkoutSession,
                                            silent: true,
                                            data: {
                                                planId: $scope.cardModel.id
                                            },
                                            success: function success() {
                                                if ($scope.checkoutSession.cvvData) {
                                                    $scope.checkoutSession.set("cvvData.security_code", $scope.cardModel.get("card.security_code"));
                                                }
                                                $scope.upopCallbacks.isOnUpdate = false;
                                                $scope.setupMultipleFi();
                                                $state.go("checkout.review");
                                                upopResult.resolve();
                                            }
                                        });
                                    };
                                    $scope.upopCallbacks.onUpdateCancel = function() {
                                        $scope.upopCallbacks.isOnUpdate = false;
                                        $scope.setupMultipleFi();
                                        upopResult.reject();
                                        $scope.upopCallbacks.onConfirmUpopCancel();
                                    };
                                    $state.go(".confirmUpop");
                                    return upopResult.promise;
                                }
                            }
                        });
                    } else {
                        return _angular.$q.when();
                    }
                };
                var populateScope = function populateScope() {
                    _index3["default"].instance($scope.token).fetch();
                    return $populate($scope, {
                        auth: $AuthModel.instance(),
                        checkoutAppData: $CheckoutAppDataModel.instance($scope.token),
                        checkoutCart: $CheckoutCartModel.instance($scope.token),
                        checkoutSession: $CheckoutSessionModel.instance($scope.token),
                        payee: $CheckoutPayeeModel.instance($scope.token),
                        buyerEligibility: $BuyerEligibilityModel.instance($scope.token),
                        tokenizedWalletInfoModel: _app.$TokenizedWalletInfoModel.instance($rootScope.token).retrieve()
                    });
                };
                var applyChoiceExperimentVariant = function applyChoiceExperimentVariant() {
                    if ($scope.nmj3page) {
                        return;
                    }
                    $scope.tagFamilyComputer();
                    return _index.$ChoiceEligibility.instance().getVariant($scope.token).then(function(variant) {
                        $scope.choiceVariant = variant;
                        var checkboxVariants = $config.choiceExperiment && $config.choiceExperiment.preferredCheckbox || [];
                        var multipleFiVariants = $config.choiceExperiment && $config.choiceExperiment.multipleFi || [];
                        var selectFiVariants = $config.choiceExperiment && $config.choiceExperiment.selectFi || [];
                        if (checkboxVariants.indexOf(variant) !== -1 && !$scope.checkoutCart.isBilling()) {
                            $scope.makeFiPreferred = {
                                selected: false
                            };
                        }
                        if (multipleFiVariants.indexOf(variant) !== -1) {
                            var planList = $scope.checkoutSession.get("plan.sources");
                            var defaultPlanId = planList && planList[0] && planList[0].id;
                            $scope.setupMultipleFi = function() {
                                $scope.selectedmethod = {
                                    index: 0,
                                    planId: defaultPlanId
                                };
                                if ($scope.cancelUpdateListener) {
                                    $scope.cancelUpdateListener();
                                }
                                var stateChangeListener = $rootScope.$on("$stateChangeStart", function(event, toState, toParams) {
                                    $scope.cancelUpdateListener();
                                    if (defaultPlanId === $scope.selectedmethod && $scope.selectedmethod.planId) {
                                        return;
                                    }
                                    event.preventDefault();
                                    updateFS().then(function() {
                                        return $state.go(toState, toParams);
                                    });
                                });
                                var fundingOptionsListener = $scope.$watch("checkoutSession.fundingOptions", function(newVal, oldVal) {
                                    if (!newVal) {
                                        return;
                                    }
                                    $scope.selectedmethod.planId = newVal.get("plans." + $scope.selectedmethod.index + ".planId");
                                });
                                $scope.cancelUpdateListener = function() {
                                    stateChangeListener();
                                    fundingOptionsListener();
                                };
                                $scope.$on("$destroy", $scope.cancelUpdateListener);
                            };
                            $scope.setupMultipleFi();
                        }
                        if (selectFiVariants.indexOf(variant) !== -1) {
                            $scope.selectFiVariant = true;
                        }
                    })["catch"](function(err) {
                        _logger.$logger.error("choice_eligibility_error", err);
                    });
                };
                var applyMerchantName = function applyMerchantName() {
                    pxpMerchName = $scope.checkoutAppData.merchant.brand_name || $scope.checkoutAppData.merchant.merchant_name;
                    if ($locale.country === "US" && $scope.useraction !== "commit" && !$scope.checkoutCart.isBilling() && !_integration.$integration.getConfig("DONE_PAGE")) {
                        var forceApiCall = false;
                        var silent = true;
                        return $pxp("xo_hermes_exit_msg", {
                            "ctx.COUNTRY": $locale.country
                        }, "xo_hermes_exit_msg_option\\d", forceApiCall, silent).then(function(result) {
                            if (result) {
                                pxpExitMsg = +result.treatment_name.slice(-1);
                            }
                        });
                    }
                };
                var logSessionDetails = function logSessionDetails() {
                    $scope.actions.logSessionCurrencyConversion($scope.checkoutSession);
                };
                var applyKmliUpsellEligibility = function applyKmliUpsellEligibility() {
                    if ($util.param("redirectToHermesOnUpopCancel") === "xoon") {
                        var fiModel = $scope.checkoutSession.get("plan.sources");
                        if (fiModel && fiModel.length && fiModel[0].card_type === "CHINA_UNION_PAY") {
                            $scope.checkoutSession.message = {
                                msgKeys: [ "confirmUpop.confirmUpopToPay" ],
                                type: "warning"
                            };
                        }
                    }
                    $KmliUpsell.eligible().then(function(eligibility) {
                        eligibility.interstitial = eligibility.interstitial ? eligibility.interstitial : {};
                        $scope.optin_toggle.isEnabled = eligibility.banner;
                        $scope.optin_toggle.value = $scope.auth.rememberedOT() || $scope.auth.isKmliSet || $scope.auth.loggedIn() && $scope.auth.refreshToken();
                        delete $scope.auth.isKmliSet;
                        $scope.optin_toggle.showExpandedTerms = false;
                        var cookiePayload = {};
                        if (eligibility.interstitial.eligible) {
                            cookiePayload.ot_inter_shown = eligibility.interstitial.pxpVersion;
                        }
                        if (Object.keys(cookiePayload).length > 0) {
                            $scope.auth.action("updateAuthExperience", {
                                silent: true,
                                data: cookiePayload
                            }).then(function(res) {
                                _logger.$logger.debug("optin_toggle_cookie_drop_success", res);
                            })["catch"](function(err) {
                                _logger.$logger.debug("optin_toggle_cookie_drop_err", err);
                            });
                        }
                        _logger.$logger.info("optin_toggle_init", $scope.optin_toggle);
                    });
                    $scope.personalizedBanner.trigger();
                    $scope.showRemittanceDisclosure = $DeviceInfo.isMobile() && $scope.checkoutSession.showRemittanceDisclosure ? true : false;
                };
                var applyPadToggleTreatment = function applyPadToggleTreatment() {
                    if ($scope.padToggleFeatureSupported) {
                        return $pxp("xo_de_hermes_pad_toggle", {
                            "ctx.COUNTRY": $locale.country
                        }, "(xo_de_hermes_pad_toggle_)(.*)").then(function(result) {
                            var treatmentName = result && result.treatment_name || "";
                            if (treatmentName === "xo_de_hermes_pad_toggle_treatment") {
                                _logger.$logger.info("pad_toggle_treatment_applicable");
                                $scope.padToggleFeature.pxpTreatmentEnabled = true;
                            } else if (treatmentName === "xo_de_hermes_pad_toggle_control") {
                                _logger.$logger.info("pad_toggle_control_applicable");
                                $scope.padToggleFeature.pxpControlEnabled = true;
                            } else {
                                _logger.$logger.info("pad_toggle_treatment_and_control_not_applicable");
                            }
                        });
                    }
                };
                var applyCreditOptions = function applyCreditOptions() {
                    $scope.creditDataModel = $CreditDataModel.instance($scope.token);
                    var isChangeInstallments = $scope.creditDataModel.isChangeStatus();
                    var isCapeReturnKey = $scope.creditDataModel.getCapeKey();
                    var isCapeReturn = isCapeReturnKey && $util.param("success");
                    if (isChangeInstallments && $scope.creditDataModel && !$scope.creditDataModel.payInFull) {
                        $state.go("checkout.chooseCreditOffer");
                    }
                    if (isCapeReturn) {
                        $scope.returnFromCape(isCapeReturnKey);
                    }
                    if ($feature("creditInstallmentOffers") && ($scope.checkoutSession.get("plan.paypal_credit") || isCapeReturnKey)) {
                        $scope.creditOptions = $CreditInstallmentModel.instance($scope.token);
                        $scope.creditOptions.retrieve();
                    }
                    $scope.cartCurrency = $scope.checkoutCart.get("purchase.amounts.total.currency_code");
                    $scope.showInstallmentOption = function() {
                        if ($feature("creditInstallmentOffers") && $scope.checkoutSession.get("plan.paypal_credit") && $scope.creditOptions && $scope.creditOptions.creditType) {
                            if ($scope.creditOptions.creditType === "INST") {
                                $scope.installmentInfo = {
                                    monthlyPaymentAmt: (0, _squid.formatCurrency)($scope.creditOptions.monthlyPayment, $scope.cartCurrency),
                                    totalInterestAmt: (0, _squid.formatCurrency)($scope.creditOptions.totalInterest, $scope.cartCurrency),
                                    totalPaymentAmt: (0, _squid.formatCurrency)($scope.creditOptions.totalPayment, $scope.cartCurrency)
                                };
                            }
                            return true;
                        } else {
                            return false;
                        }
                    };
                    $scope.showCYCO = function() {
                        $state.go("checkout.chooseCreditOffer");
                    };
                    if (!$scope.buyerEligibility.eligible) {
                        throw new $FallbackError({
                            reason: "buyer_ineligible",
                            product: "ux"
                        });
                    }
                    if ($window.location.search.search("atoSuccess") !== -1) {
                        _logger.$logger.debug("PLANNING_ATO_SUCCESS");
                        var atoMsg = $locale.content.get("memberReview.stepupAuthSuccess");
                        if (atoMsg) {
                            $scope.checkoutSession.message = {
                                msgs: [ atoMsg ],
                                type: "success"
                            };
                        }
                    }
                    $scope.$on("localeChange", setInformalName);
                    setInformalName();
                    $scope.showNotYou = $scope.auth && $scope.auth.showNotYou();
                    if ($util.param("redirectToHermesOn3DSDecline")) {
                        show3DSDeclineMsg();
                    }
                    $scope.showAuthMsg = [ "authorize", "order" ].indexOf($scope.checkoutCart.get("payment_action")) > -1 && !$scope.checkoutSession.get("plan.paypal_credit");
                    $scope.showUnconfirmedUpopMsg = !!$scope.checkoutSession.unconfirmed_upop;
                    $scope.useraction = $scope.checkoutAppData.useraction() && $scope.checkoutAppData.useraction().toLowerCase();
                    var noLineItemDetails = $scope.useraction !== "commit" && $scope.checkoutCart.get("purchase.items.length", 0) === 0;
                    var fundingInstruments = $scope.checkoutSession.get("fundingOptions.instruments");
                    var isCreditInWallet = $util.find(fundingInstruments, function(fi) {
                        return fi.name === "BILL_ME_LATER";
                    });
                    var isPPCEligible = $scope.checkoutSession.creditOffer || $scope.checkoutSession.bmlOffer;
                    var isPayPalCredit = $scope.checkoutAppData.is_second_button_txn || _squid.$Class.get(window, "xprops.fundingSource") === "credit";
                    _logger.$logger.debug("bmlOffer " + $scope.checkoutSession.bmlOffer + ", " + isCreditInWallet + ", " + isPayPalCredit);
                    if ($scope.checkoutSession.bmlOffer) {
                        if (!$rootScope.bml) {
                            $rootScope.bml = new $BMLModel();
                        }
                        $rootScope.bmlApply = new $ApplyForBMLModel();
                    } else if (isPayPalCredit && !isPPCEligible && !isCreditInWallet && !$scope.creditDataModel.payInFull && !isCapeReturn) {
                        $scope.checkoutSession.message = {
                            type: "info",
                            msgKeys: [ "offers.bmlIneligibleHeader", "offers.bmlIneligibleContent" ]
                        };
                        _logger.$logger.info("checkout_fpti", {
                            from: "Login",
                            to: "Review",
                            error_type: "second_btn_ineligible"
                        });
                    }
                    $scope.showSoftDescriptor = !$scope.checkoutAppData.flags.hide_soft_descriptor && $scope.checkoutCart.get("purchaseUnits.length", 0) <= 1;
                    return $pxpCartAmt($scope.checkoutAppData.get("merchant.merchant_country"), $scope.payee.get("merchant.id", ""), noLineItemDetails, $scope.checkoutCart.isPurchase()).then(function(showAmount) {
                        $scope.showAmt = showAmount;
                    });
                };
                var applyNegativeBalanceStatus = function applyNegativeBalanceStatus() {
                    var checkoutSession = $scope.checkoutSession, negBals = checkoutSession.negBals, nbrMsgContentKey, tokenHash;
                    if (negBals) {
                        nbrMsgContentKey = "memberReview.nbrMsg";
                        tokenHash = {
                            neg_bal: (0, _squid.formatCurrency)(negBals[0].amount, negBals[0].currency_code, false),
                            merchantName: $scope.checkoutAppData.get("merchant.brand_name")
                        };
                        if (negBals.length > 1) {
                            nbrMsgContentKey += "Plural";
                            tokenHash.neg_bal2 = (0, _squid.formatCurrency)(negBals[1].amount, negBals[1].currency_code, false);
                        }
                        checkoutSession.message = {
                            type: "warning",
                            msgs: [ $renderContent(nbrMsgContentKey, tokenHash) ]
                        };
                    }
                };
                var applyFixedButton = function applyFixedButton() {
                    if (allowFixedButton) {
                        return $pxp("xo_hermes_fixed_button", {}, "xo_hermes_fixed_button_test_group").then(function(result) {
                            showButtonPxp = result && result.treatment_name === "xo_hermes_fixed_button_test_group";
                        });
                    }
                };
                var applyBrPxp = function applyBrPxp() {
                    if (!$miniBrowser.isMiniBrowser() && $locale.country === "BR") {
                        var brPxp = $config.pxpExperiments.BR.xo_br_hermesnode_ryi_design;
                        $pxpFactors(brPxp.pgName, brPxp.params, brPxp.pattern).then(function(result) {
                            $scope.ryiDesignExp = result;
                        });
                    }
                };
                var applyShowShippingMethod = function applyShowShippingMethod() {
                    $scope.isInstantUpdateAPIFlow = $scope.checkoutCart && $scope.checkoutCart.get("instantUpdateIntegration");
                    $scope.showShippingMethod = $scope.isInstantUpdateAPIFlow ? true : false;
                    if (_integration.$integration.getConfig("SHOW_SHIPPING_METHOD")) {
                        return setShowShippingMethodProperty();
                    }
                };
                var applyPayButtonOption = function applyPayButtonOption() {
                    $scope.cancel = $scope.checkoutAppData.urls.cancel_url;
                    var isBilling = $scope.checkoutCart.isBilling();
                    $scope.merchantMsg = $scope.checkoutCart.getBillingDescription();
                    var merchant = $scope.checkoutAppData.merchant;
                    $scope.merchantName = merchant.brand_name || merchant.merchant_name || merchant.merchant_email;
                    $scope.buttonLabelIsPay = $scope.useraction === "commit" || _integration.$integration.getConfig("SHOW_PAY_NOW_LABEL_ON_REVIEW");
                    _logger.$logger.info("checkout_fpti", {
                        ryp_button_text: $scope.buttonLabelIsPay ? "paynnow_y" : "paynnow_n"
                    });
                    $scope.showShippingAddress = Boolean(!$scope.checkoutAppData.flags.hide_shipping_address && $scope.checkoutAppData.flags.shipping_address_required && $scope.checkoutSession.shipping);
                    $scope.payButtonText = function() {
                        if ($scope.selectedmethod && $scope.selectedmethod.planId === "applyForPPCRadio") {
                            return $locale.content.get("applyForBml.bmlApplyHeadline");
                        }
                        if (isBilling) {
                            if ($scope.buttonLabelIsPay) {
                                return $locale.content.get("memberReview.agreeAndPayLabel");
                            } else {
                                return $locale.content.get("memberReview.agreeAndContinueLabel");
                            }
                        } else if (getPadToggleStatus() === "ON") {
                            return $locale.content.get("memberReview.padLabel");
                        } else if ($scope.buttonLabelIsPay) {
                            if ($scope.checkoutSession.unconfirmed_upop) {
                                return $locale.content.get("memberReview.pay");
                            } else {
                                $scope.payButton = "paynnow_y";
                                return $locale.content.get("memberReview.payLabel");
                            }
                        } else {
                            $scope.payButton = "paynnow_n";
                            if (pxpExitMsg === 1) {
                                var merchantName = pxpMerchName;
                                if (!merchantName || merchantName.length > pxpMerchNameLimit) {
                                    merchantName = "the Merchant";
                                }
                                return "Continue to " + merchantName;
                            } else if (pxpExitMsg === 4) {
                                return "Continue to Pay";
                            } else {
                                return $locale.content.get("memberReview.continueLabel");
                            }
                        }
                    };
                    $scope.onRedeemGC = function() {
                        throw new $FallbackError({
                            reason: "redeem_coupon_feature_not_supported",
                            product: "ux"
                        });
                    };
                    setProcessorDeclineMessage();
                    var isButtonBelowScreen = function isButtonBelowScreen() {
                        var $button = $element.find("#button")[0];
                        var $windowElement = (0, _jquery2["default"])(window)[0];
                        if (!$button) {
                            return;
                        }
                        var windowTop = $windowElement.scrollY;
                        var windowBottom = windowTop + $windowElement.screen.height;
                        var buttonTop = windowTop + $button.getBoundingClientRect().top;
                        var buttonBottom = buttonTop + $button.offsetHeight;
                        return !(buttonBottom <= windowBottom && buttonTop >= windowTop);
                    };
                    $scope.showFixedButton = function() {
                        return allowFixedButton && showButtonPxp && isButtonBelowScreen();
                    };
                    $timeout(function() {
                        if (!allowFixedButton) {
                            return false;
                        }
                        if ($scope.showFixedButton()) {
                            _logger.$logger.info("button_below_screen", {
                                fpti_fixed_button_pxp: "test"
                            });
                        } else if (isButtonBelowScreen() && !showButtonPxp) {
                            _logger.$logger.info("button_below_screen", {
                                fpti_fixed_button_pxp: "control"
                            });
                        }
                    }, 500);
                    if (allowFixedButton && showButtonPxp) {
                        (0, _jquery2["default"])(window).bind("scroll", function() {
                            $scope.$apply();
                        });
                    }
                    $scope.$on("$destroy", function() {
                        (0, _jquery2["default"])(window).unbind("scroll");
                    });
                    $scope.promotion = {
                        type: null,
                        name: ""
                    };
                    var plccOffer = $scope.checkoutSession.plccOffer;
                    if (plccOffer) {
                        $scope.promotion.logoUrl = plccOffer.product_logo;
                        $scope.promotion.name = plccOffer.product_name;
                    }
                    $scope.onFBBANotNow = function() {
                        var _$scope$checkoutSessi = $scope.checkoutSession.payer;
                        _$scope$checkoutSessi = _$scope$checkoutSessi === undefined ? {} : _$scope$checkoutSessi;
                        var payerId = _$scope$checkoutSessi.id;
                        var isUnchecked = $util.sessionStorageEnabled() && window.sessionStorage.getItem("checkboxPluginState") === "unchecked";
                        _logger.$logger.info("checkout_fpti", {
                            buyer_country: $locale.country,
                            buyer_id: payerId,
                            context_id: $scope.token,
                            design: "fbmessenger",
                            from: "BILLING_AGREEMENT",
                            to: "process_billing_agreement",
                            eligibility_reason: isUnchecked ? "checkbox_plugin_unchecked" : "checkbox_plugin_checked",
                            click_source: "not_now"
                        });
                        window.xchild.close();
                    };
                    $scope.onPay = function(result) {
                        var payEventName = "member_ryi_onPayVariant_control";
                        if ($scope.isNmj) {
                            if ($scope.nmj3page) {
                                payEventName = "member_ryi_onPayVariant_multi_page";
                            } else {
                                payEventName = "member_ryi_onPayVariant_one_page";
                            }
                        }
                        _logger.$logger.info(payEventName);
                        if (!isValidPinSetup()) {
                            $scope.topupError = true;
                            _logger.$logger.debug("pin_missing");
                            $state.go("checkout.pinSetup");
                            return;
                        }
                        if ($scope.checkoutSession.installments && $scope.checkoutSession.installments.length > 1 && !$scope.checkoutSession.selectedInstallmentData) {
                            $scope.installmentNotSelected = true;
                            return;
                        }
                        if ($scope.isInstantUpdateAPIFlow && !$scope.instantUpdateFeature.shippingRegionSupported) {
                            return;
                        }
                        if ($feature("creditInstallmentOffers") && $scope.checkoutSession.get("plan.paypal_credit") && $scope.installment.showCYCO && $scope.creditOptions && !$scope.creditOptions.creditType) {
                            return $state.go("checkout.chooseCreditOffer");
                        }
                        if ($scope.selectedmethod && $scope.selectedmethod.planId === "applyForPPCRadio") {
                            if ($feature("creditInstallmentOffers") && $scope.installment && $scope.installment.installmentOptionsPresent) {
                                return $state.go("checkout.chooseCreditOffer");
                            } else {
                                return $state.go("checkout.redirectToCape", {}, {
                                    location: false
                                });
                            }
                        }
                        if ($scope.checkoutAppData.get("flags.allow_change_shipping", false) && $feature("shippingAddressNormalization") && $scope.checkoutSession.get("shipping.normalization_status") === "UNKNOWN") {
                            return $state.go("checkout.review.sidebar.updateShipping");
                        }
                        var padToggleStatus = getPadToggleStatus();
                        if (padToggleStatus === "ON") {
                            _logger.$logger.info("checkout_fpti", {
                                pad_toggle_status: "padToggleOnSubmit"
                            });
                        } else if (padToggleStatus === "OFF") {
                            _logger.$logger.info("checkout_fpti", {
                                pad_toggle_status: "padToggleOffSubmit"
                            });
                        }
                        var preAuthorizeError = void 0;
                        return updateFS().then(function() {
                            return setTokenizedWalletPin();
                        }).then(function() {
                            return $fiApis.patchCvv($scope.checkoutSession);
                        }).then(function() {
                            return _angular.$q.all([ setWalletTopupPreferences(), setStickyInstrument(), linkAuthConsent(), updateAddressAsPreferred(), $scope.actions.updatePreferredFi(_logger.$logger) ])["catch"](function(err) {
                                if ($scope.checkoutCart.isWalletTokenization()) {
                                    if (err.message === "WALLET_PREFERENCE_SET_ERROR") {
                                        preAuthorizeError = err;
                                    }
                                }
                                _logger.$logger.error("onPay() error", err);
                            })["finally"](function() {
                                if (preAuthorizeError) {
                                    var code = "ANDROID_PAY_SET_WALLET_PREFERENCE_ERROR";
                                    code = window.btoa(code);
                                    $state.go("checkout.genericError", {
                                        code: code
                                    });
                                } else {
                                    return authorize();
                                }
                            });
                        }, function(err) {
                            if ($scope.checkoutCart.isWalletTokenization()) {
                                if (err.message === "ISSUANCE_PIN_SERVICE_ERROR") {
                                    var code = "ANDROID_PAY_SET_PIN_ERROR";
                                    code = window.btoa(code);
                                    $state.go("checkout.genericError", {
                                        code: code
                                    });
                                    return;
                                }
                            }
                            _logger.$logger.error("onPay() patchCvv error", err);
                        });
                    };
                    $scope.bmlPopupOpen = false;
                    $scope.showBmlPopup = function() {
                        $scope.bmlPopupOpen = true;
                    };
                    $scope.hideBmlPopup = function() {
                        $scope.bmlPopupOpen = false;
                    };
                };
                _angular.$q.all([ populateScope(), applyNewMemberVariant(), applyBrPxp(), applyFixedButton() ]).then(function() {
                    applyCreditOptions();
                    triggerPersonalizedBanner();
                    applyMerchantName();
                }).then(function() {
                    return _angular.$q.all([ applyPayButtonOption(), applyChoiceExperimentVariant(), logSessionDetails(), prepareTokenizedWallet(), applyNegativeBalanceStatus(), applyKmliUpsellEligibility(), applyPadToggleTreatment(), applyShowShippingMethod() ]);
                });
                (0, _jquery2["default"])(".paypalHeaderWrapper").removeClass("paypalCredit");
                (0, _jquery2["default"])(".paypalHeaderWrapper").removeClass("paypalCreditTnc");
                $scope.onComplete = function(params) {
                    if (params) {
                        _logger.$logger.debug("ryi_optin_isKmliSet_" + params.isKmliSet);
                        if (params.isKmliSet) {
                            $scope.optin_toggle.setValue(true);
                        }
                    }
                    $state.go("checkout.review");
                };
                $scope.propValueObj = {};
                if ($feature("propValue")) {
                    $scope.propValueObj.propHeader = "memberReview.propHead";
                    $scope.propValueObj.propVal = "memberReview.propVal";
                    $scope.propValueObj.propImage = "https://www.paypalobjects.com/images/checkout/hermes/scr_vp_fprd_shield_bags.png";
                } else {
                    $scope.propValueObj.propHeader = "login.propHeadAlt";
                    $scope.propValueObj.propVal = "login.propValAlt";
                    $scope.propValueObj.propImage = "https://www.paypalobjects.com/images/checkout/hermes/scr_vp_fprd_wallet_card_v3.png";
                }
            }
        });
        angular.value("$xoReviewPageComponent", $xoReviewPageComponent);
        _angular.$q;
        _squid.formatCurrency;
        _squid.$Component;
        _squid.formatNameInformal;
        _squid.$Class;
        _index.$ChoiceEligibility;
        _integration.$integration;
        _fi.$PreferredFi;
        _logger.$logger;
        _ul.$ul;
        _thirdPartyInfo.thirdPartyExperience;
        _newMember.$NewMemberEligibility;
        _app.$TokenizedWalletInfoModel;
    },
    "./components/xo-form-components/src/select-shipping-method/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _index = __webpack_require__("./components/xo-models/src/shippingMethod/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/checkout/index.js");
        __webpack_require__("./components/xo-ui-components/src/modal/directive.js");
        __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _template = __webpack_require__("./components/xo-form-components/src/select-shipping-method/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-page-components/src/cart/lib/ui.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var callbackShippingOptions = void 0, fallbackShippingOptions = void 0, callbackInsuranceOffered = void 0;
        var defaultFallbackOptionIndex = void 0;
        exports["default"] = _squid.$Component.extend("$xoSelectShippingMethod", {
            tag: "xo-select-shipping-method",
            template: _template2["default"],
            props: {
                token: {
                    type: "var"
                },
                showShippingAddress: {
                    type: "var"
                },
                errorHandlerHelper: {
                    type: "var"
                },
                instantUpdateFeature: {
                    type: "var"
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutSession: _index2.$CheckoutSessionModel.instance(this.props.token).retrieve(),
                        checkoutCart: _index2.$CheckoutCartModel.instance(this.props.token).retrieve(),
                        checkoutPayee: _index2.$CheckoutPayeeModel.instance(this.props.token).retrieve(),
                        checkoutShippingAddresses: _index2.$CheckoutShippingAddressesModel.instance(this.props.token).retrieve(),
                        checkoutAppData: _index2.$CheckoutAppDataModel.instance(this.props.token).retrieve()
                    };
                }
            },
            actions: {
                closeModal: function closeModal() {
                    this.showModal = false;
                },
                openModal: function openModal() {
                    this.showModal = true;
                },
                continueHandler: function continueHandler() {
                    if (this.selectedMethod.current.index !== this.selectedMethod.previous.index || this.selectedMethod.current.insuranceSelected !== this.selectedMethod.previous.insuranceSelected) {
                        var selectedMethodCharges = void 0, taxAmtApplied = void 0, insurance = void 0;
                        selectedMethodCharges = this.response.charges[this.selectedMethod.current.index];
                        taxAmtApplied = this.getTax(selectedMethodCharges);
                        insurance = this.getInsurance(selectedMethodCharges);
                        this.shippingAmtApplied = this.safeConvert(selectedMethodCharges.shipping_charge.shipping_amount.value);
                        if (this.isInstantUpdateFlow) {
                            this.selectedMethod.showInsuranceAmount = this.selectedMethod.current.insuranceSelected;
                            this.insuranceApplied = insurance;
                            this.updateSelectedExternalCallbackOption(this.response.shipping_options_source, this.selectedMethod.previous.index, this.selectedMethod.current.index);
                            this.selectedMethod.previous.insuranceSelected = this.selectedMethod.current.insuranceSelected;
                        }
                        this.updateShippingTaxCharge(this.shippingAmtApplied, taxAmtApplied, selectedMethodCharges.shipping_charge.shipping_method_type, insurance);
                        this.selectedShippingMethod = selectedMethodCharges.shipping_charge.shipping_method;
                        this.selectedMethod.previous.index = this.selectedMethod.current.index;
                    }
                    this.actions.closeModal();
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    this.selectedMethod = {
                        current: {
                            index: 0,
                            insuranceSelected: false
                        },
                        previous: {
                            index: 0,
                            insuranceSelected: false
                        },
                        insuranceAvailable: false,
                        showInsuranceAmount: false
                    };
                    this.showModal = false;
                    this.shippingInfoDisplay = "noHighlight";
                    this.addressChanged = false;
                    var timer = void 0;
                    this.previousCosts = {};
                    this.formatAmount = function(amount) {
                        if (amount && amount.value) {
                            var amountToBeFormatted = (parseInt(amount.value.toString(), 10) / 100).toFixed(2);
                            if (amountToBeFormatted) {
                                return (0, _squid.formatCurrency)(amountToBeFormatted, _this.currencyCode);
                            }
                        }
                    };
                    this.uncheckInsuranceCheckbox = function() {
                        _this.selectedMethod.current.insuranceSelected = false;
                    };
                    this.showInsurance = function(selectedIndex) {
                        return Number(_this.selectedMethod.current.index) === selectedIndex;
                    };
                    this.isInsuranceOfferedInCharge = function(charge) {
                        return charge.shipping_charge.offer_insurance_option;
                    };
                    var responseHasShippingCharges = function responseHasShippingCharges() {
                        if (_this.response.charges.length === 0) {
                            return false;
                        }
                        return !!_this.response.charges[0].shipping_charge;
                    };
                    var responseHasTaxCharges = function responseHasTaxCharges() {
                        if (_this.response.charges.length === 0) {
                            return false;
                        }
                        return !!_this.response.charges[0].tax;
                    };
                    this.safeConvert = function(value) {
                        value = Number(value);
                        if (isNaN(value)) {
                            throw new Error(value + " cannot be divided");
                        }
                        return value / 100;
                    };
                    this.updateSelectedExternalCallbackOption = function(optionsSource, prevIndex, index) {
                        if (optionsSource === "CALLBACK" && callbackShippingOptions) {
                            if (!isNaN(prevIndex)) {
                                callbackShippingOptions[prevIndex].is_selected = false;
                            }
                            callbackShippingOptions[index].is_selected = true;
                        } else if (optionsSource === "FALLBACK" && fallbackShippingOptions) {
                            if (!isNaN(prevIndex)) {
                                fallbackShippingOptions[prevIndex].is_selected = false;
                            }
                            fallbackShippingOptions[index].is_selected = true;
                        }
                    };
                    var highlight = function highlight(duration) {
                        _this.shippingInfoDisplay = "highlight";
                        if (timer) {
                            _angular.$timeout.cancel(timer);
                        }
                        timer = (0, _angular.$timeout)(function() {
                            _this.shippingInfoDisplay = "noHighlight";
                        }, duration);
                    };
                    this.getTax = function(charge) {
                        var tax = void 0;
                        if (!_this.isInstantUpdateFlow && (_this.isBuyNow || _this.isCartUpload) && _this.cartAmounts.taxAmt >= 0) {
                            tax = _this.cartAmounts.taxAmt;
                        } else {
                            charge = charge || responseHasTaxCharges() && _this.response.charges[0];
                            if (charge && charge.tax && charge.tax.total_tax) {
                                tax = _this.safeConvert(charge.tax.total_tax.value);
                            }
                        }
                        return tax;
                    };
                    this.getInsurance = function(charge) {
                        if (charge && charge.shipping_charge && charge.shipping_charge.insurance_amount) {
                            if (charge.shipping_charge.offer_insurance_option && !_this.selectedMethod.current.insuranceSelected) {
                                return;
                            }
                            return _this.safeConvert(charge.shipping_charge.insurance_amount.value);
                        }
                    };
                    var updatePreviousCosts = function updatePreviousCosts() {
                        _this.previousCosts = {};
                        if (_this.models.checkoutCart.purchase.amounts.shipping) {
                            _this.previousCosts.shippingAmount = _this.models.checkoutCart.purchase.amounts.shipping.amount;
                        }
                        if (_this.models.checkoutCart.purchase.amounts.tax) {
                            _this.previousCosts.taxAmount = _this.models.checkoutCart.purchase.amounts.tax.amount;
                        }
                    };
                    var hasShippingCostChanged = function hasShippingCostChanged(newShipping) {
                        if (newShipping !== undefined) {
                            return newShipping.amount !== _this.previousCosts.shippingAmount;
                        }
                        return newShipping !== _this.previousCosts.shippingAmount;
                    };
                    var hasTaxCostChanged = function hasTaxCostChanged(newTax) {
                        if (newTax !== undefined) {
                            return newTax.amount !== _this.previousCosts.taxAmount;
                        }
                        return newTax !== _this.previousCosts.taxAmount;
                    };
                    var setToolTipMessage = function setToolTipMessage() {
                        _this.models.checkoutSession.message.msgKeys = hasShippingCostChanged(_this.models.checkoutCart.purchase.amounts.shipping) || hasTaxCostChanged(_this.models.checkoutCart.purchase.amounts.tax) ? [ "smallToolTip.addressShippingChargesUpdated" ] : [ "smallToolTip.onlyAddressUpdated" ];
                    };
                    var addExternalCallBackOptionsToPatchRequest = function addExternalCallBackOptionsToPatchRequest(patchEntities) {
                        var externalCallbackOptions = _this.models.checkoutCart.purchaseUnits[0].external_callback_options;
                        if (_this.response.shipping_options_source === "CALLBACK") {
                            externalCallbackOptions.callback_shipping_options = callbackShippingOptions;
                            externalCallbackOptions.callback_insurance_option_offered = callbackInsuranceOffered;
                        } else if (_this.response.shipping_options_source === "FALLBACK") {
                            externalCallbackOptions.fallback_shipping_options = fallbackShippingOptions;
                        }
                        patchEntities.push({
                            field: "externalCallbackOptions",
                            value: externalCallbackOptions
                        });
                    };
                    var populatePatchShippingDetails = function populatePatchShippingDetails(patchEntities, shipMethod) {
                        if (_this.isInstantUpdateFlow) {
                            addExternalCallBackOptionsToPatchRequest(patchEntities);
                        } else {
                            patchEntities.push({
                                field: "shippingMethod",
                                value: shipMethod ? _this.shippingMethods.getShippingMethodId(shipMethod) : ""
                            });
                        }
                    };
                    var populatePatchAmountDetails = function populatePatchAmountDetails(patchableAmountEntities, constantAmountEntities, decimalDigits, amounts) {
                        var newTotal = _this.cartAmounts.total;
                        Object.keys(patchableAmountEntities).forEach(function(key) {
                            var detail = patchableAmountEntities[key];
                            if (!isNaN(detail.value)) {
                                detail.value = Number(detail.value);
                                amounts.details[key] = detail.value.toFixed(decimalDigits);
                            } else {
                                detail.value = 0;
                            }
                            newTotal += detail.valueInCart ? detail.value - detail.valueInCart : detail.value;
                        });
                        amounts.total = newTotal.toFixed(decimalDigits);
                        Object.keys(constantAmountEntities).forEach(function(key) {
                            var detail = constantAmountEntities[key];
                            if (detail.valueInCart !== undefined) {
                                amounts.details[key] = detail.valueInCart.toFixed(decimalDigits);
                            }
                        });
                    };
                    var getPatchReqData = function getPatchReqData(shippingAmt, taxAmt, shipMethod, insuranceAmt) {
                        var currencyDigits = _squid.$locale.metadata && _squid.$locale.metadata.currency && _squid.$locale.metadata.currency.digits;
                        var decimalDigits = currencyDigits && currencyDigits[_this.currencyCode];
                        if (isNaN(decimalDigits)) {
                            decimalDigits = 2;
                        }
                        var patchEntities = [];
                        var amounts = {
                            currency: _this.currencyCode,
                            details: {
                                subtotal: _this.cartAmounts.subTotal.toFixed(decimalDigits)
                            }
                        };
                        var patchableAmountEntities = {
                            shipping: {
                                value: shippingAmt,
                                valueInCart: _this.cartAmounts.shippingAmt
                            },
                            tax: {
                                value: taxAmt,
                                valueInCart: _this.cartAmounts.taxAmt
                            },
                            insurance: {
                                value: insuranceAmt,
                                valueInCart: _this.cartAmounts.insuranceAmt
                            }
                        };
                        var constantAmountEntities = {
                            handling_fee: {
                                valueInCart: _this.cartAmounts.handlingAmt
                            },
                            shipping_discount: {
                                valueInCart: _this.cartAmounts.shippingDiscountAmt
                            },
                            discount: {
                                valueInCart: _this.cartAmounts.discountAmt
                            }
                        };
                        populatePatchAmountDetails(patchableAmountEntities, constantAmountEntities, decimalDigits, amounts);
                        patchEntities.push({
                            field: "purchaseAmount",
                            value: amounts
                        });
                        populatePatchShippingDetails(patchEntities, shipMethod);
                        return {
                            id: _this.token,
                            patchEntities: patchEntities
                        };
                    };
                    this.updateShippingTaxCharge = function(shippingAmt, taxAmt, shipMethod, insurance) {
                        _this.models.checkoutCart.action("patchCartData", {
                            data: getPatchReqData(shippingAmt, taxAmt, shipMethod, insurance),
                            success: function success(result) {
                                _this.models.checkoutSession.invalidate();
                                (0, _squid.$populate)(_this, {
                                    checkoutSession: _index2.$CheckoutSessionModel.instance(_this.token)
                                }).then(function() {
                                    highlight(4e3);
                                    if (_this.addressChanged) {
                                        setToolTipMessage();
                                        _this.addressChanged = false;
                                    }
                                    updatePreviousCosts();
                                });
                            }
                        });
                    };
                    var populateCallbackShippingOptions = function populateCallbackShippingOptions() {
                        var charges = _this.response && _this.response.charges;
                        if (charges) {
                            callbackShippingOptions = charges.map(function(charge, index) {
                                var shippingCharge = charge.shipping_charge;
                                var taxCharge = charge.tax;
                                var option = {};
                                if (shippingCharge) {
                                    option = {
                                        method: shippingCharge.shipping_method,
                                        amount: {
                                            value: _this.safeConvert(shippingCharge.shipping_amount.value),
                                            currency: shippingCharge.shipping_amount.currency_code
                                        },
                                        is_default: shippingCharge.default_method,
                                        is_selected: false
                                    };
                                    if (shippingCharge.insurance_amount) {
                                        option.insurance = {
                                            value: _this.safeConvert(shippingCharge.insurance_amount.value),
                                            currency: shippingCharge.insurance_amount.currency_code
                                        };
                                        callbackInsuranceOffered = shippingCharge.offer_insurance_option;
                                    }
                                    if (taxCharge) {
                                        option.tax = {
                                            value: _this.safeConvert(taxCharge.total_tax.value),
                                            currency: taxCharge.total_tax.currency_code
                                        };
                                    }
                                }
                                return option;
                            });
                        }
                    };
                    var setDefaultShippingMethod = function setDefaultShippingMethod() {
                        _this.showShippingOptions = true;
                        var chargesElement = void 0, methodType = void 0, taxAmtApplied = void 0, insurance = void 0;
                        for (var i = 0; i < _this.response.charges.length; i++) {
                            chargesElement = _this.response.charges[i];
                            if (chargesElement.shipping_charge.default_method) {
                                _this.selectedMethod.current.index = i;
                                _this.selectedMethod.previous.index = i;
                                insurance = _this.getInsurance(chargesElement);
                                if (_this.isInstantUpdateFlow) {
                                    _this.updateSelectedExternalCallbackOption(_this.response.shipping_options_source, _this.selectedMethod.previous.index, _this.selectedMethod.current.index);
                                }
                                _this.selectedShippingMethod = chargesElement.shipping_charge.shipping_method;
                                methodType = chargesElement.shipping_charge.shipping_method_type;
                                _this.shippingAmtApplied = _this.safeConvert(chargesElement.shipping_charge.shipping_amount.value);
                                taxAmtApplied = _this.getTax(chargesElement);
                                insurance = _this.getInsurance(chargesElement);
                                break;
                            }
                        }
                        _this.updateShippingTaxCharge(_this.shippingAmtApplied, taxAmtApplied, methodType, insurance);
                    };
                    var isPatchCartRequired = function isPatchCartRequired(applicableShippingAmt, applicableTaxAmt) {
                        return applicableShippingAmt !== _this.previousCosts.shippingAmount || applicableTaxAmt !== _this.previousCosts.taxAmount;
                    };
                    var updateShippingTaxChargeWithDefaultOption = function updateShippingTaxChargeWithDefaultOption() {
                        var defaultOption = void 0, shippingAmt = void 0, taxAmt = void 0, insuranceAmt = void 0, methodType = void 0;
                        if (_this.response.shipping_options_source === "FALLBACK" && !isNaN(defaultFallbackOptionIndex)) {
                            defaultOption = fallbackShippingOptions[defaultFallbackOptionIndex];
                        }
                        if (defaultOption) {
                            shippingAmt = defaultOption.amount && defaultOption.amount.value;
                            taxAmt = defaultOption.tax && defaultOption.tax.value;
                            insuranceAmt = defaultOption.insurance && defaultOption.insurance.value;
                            methodType = defaultOption.shipping_method_type || "DEFAULT";
                        }
                        _this.updateShippingTaxCharge(shippingAmt, taxAmt, methodType, insuranceAmt);
                    };
                    var enableUserToChooseInsuranceOptionsIfAvailable = function enableUserToChooseInsuranceOptionsIfAvailable() {
                        var charges = _this.response && _this.response.charges;
                        if (!charges) {
                            return;
                        }
                        for (var i = 0; i < charges.length; i++) {
                            if (_this.isInsuranceOfferedInCharge(charges[i])) {
                                _this.selectedMethod.insuranceAvailable = true;
                                _this.selectedMethod.showInsuranceAmount = false;
                                break;
                            }
                        }
                    };
                    var processShippingAndTaxResponse = function processShippingAndTaxResponse() {
                        var applicableShippingAmt = void 0, applicableTaxAmt = void 0;
                        if (_this.isInstantUpdateFlow) {
                            if (!_this.response.shipping_region_supported) {
                                _this.errorHandlerHelper.addPageError("shippingMethod.shippingRegionUnsupported", {
                                    merchant: _this.merchant
                                });
                                _this.instantUpdateFeature.shippingRegionSupported = false;
                            }
                            if (_this.response.shipping_options_source === "CALLBACK") {
                                populateCallbackShippingOptions();
                            }
                            enableUserToChooseInsuranceOptionsIfAvailable();
                            if (_this.showShippingAddress) {
                                if (responseHasShippingCharges()) {
                                    setDefaultShippingMethod();
                                }
                            } else {
                                _this.showShippingOptions = false;
                                updateShippingTaxChargeWithDefaultOption();
                            }
                            return;
                        }
                        if (_this.showShippingAddress) {
                            if (responseHasShippingCharges()) {
                                if (_this.response.show_shipping_options) {
                                    setDefaultShippingMethod();
                                    return;
                                } else {
                                    applicableShippingAmt = _this.safeConvert(_this.response.charges[0].shipping_charge.shipping_amount.value);
                                }
                            }
                        } else if (_this.response.profile_override_allowed) {
                            if (_this.cartAmounts.shippingAmt !== undefined) {
                                applicableShippingAmt = _this.cartAmounts.shippingAmt;
                            }
                        }
                        applicableTaxAmt = _this.getTax();
                        if (isPatchCartRequired(applicableShippingAmt, applicableTaxAmt)) {
                            _this.updateShippingTaxCharge(applicableShippingAmt, applicableTaxAmt);
                        }
                    };
                    var clearFallbackOptionsSelectionFlags = function clearFallbackOptionsSelectionFlags() {
                        for (var i = 0; i < fallbackShippingOptions.length; i++) {
                            fallbackShippingOptions[i].is_selected = false;
                        }
                    };
                    this.getShippingMethods = function() {
                        _this.showShippingOptions = false;
                        _this.selectedShippingMethod = "";
                        _this.shippingAmtApplied = 0;
                        _this.insuranceAmountOffered = 0;
                        _this.response = {};
                        var shippingAddress = _this.models.checkoutSession.shipping ? _this.models.checkoutSession.getShippingAddressMinimalDetails() : _this.models.checkoutShippingAddresses.getPrimaryShippingAddress();
                        var sntRequest = {
                            address: shippingAddress,
                            cart_weight: _this.cartWeight,
                            cart_handling: {
                                value: _this.cartAmounts.handlingAmt,
                                currency_code: _this.currencyCode
                            },
                            discount: _this.cartDiscount,
                            item_list: _this.models.checkoutCart.purchase.items,
                            tax_on_shipping_required: _this.showShippingAddress,
                            merchant_id: _this.models.checkoutPayee.merchant.id,
                            locale: _squid.$locale.content.lang + "_" + _squid.$locale.chosenCountry,
                            currency_code: _this.currencyCode
                        };
                        if (_this.isInstantUpdateFlow) {
                            _this.selectedMethod = {
                                current: {
                                    index: 0,
                                    insuranceSelected: false
                                },
                                previous: {
                                    index: 0,
                                    insuranceSelected: false
                                },
                                insuranceAvailable: false,
                                showInsuranceAmount: false
                            };
                            callbackShippingOptions = [];
                            callbackInsuranceOffered = false;
                            clearFallbackOptionsSelectionFlags();
                            _this.instantUpdateFeature.shippingRegionSupported = true;
                            _this.errorHandlerHelper.clearPageErrors();
                            if (_this.models.checkoutCart.purchaseUnits && _this.models.checkoutCart.purchaseUnits[0]) {
                                sntRequest.external_callback_options = _this.models.checkoutCart.purchaseUnits[0].external_callback_options;
                            }
                        }
                        _this.shippingMethods = new _index.$ShippingMethodModel(sntRequest);
                        _logger.$logger.info("calculate_shipping_charges_call");
                        _this.shippingMethods.save({
                            data: _this.shippingMethods,
                            success: function success(result) {
                                _this.response = result;
                                processShippingAndTaxResponse();
                            }
                        });
                    };
                },
                populate: function populate() {
                    var _this2 = this;
                    var set = function set(key, value) {
                        if (value) {
                            _this2.cartAmounts[key] = Number(value.amount);
                        }
                    };
                    function hasAddressChanged(newValue, oldValue, isInstantUpdateFlow) {
                        var countryZipStateCityChanged = newValue.country !== oldValue.country || newValue.state !== oldValue.state || newValue.city !== oldValue.city || newValue.postal_code !== oldValue.postal_code;
                        if (!countryZipStateCityChanged && isInstantUpdateFlow) {
                            var anyAddressFieldChanged = newValue.line1 !== oldValue.line1 || newValue.line2 !== oldValue.line2;
                            return anyAddressFieldChanged;
                        }
                        return countryZipStateCityChanged;
                    }
                    this.currencyCode = this.models.checkoutCart.purchase.amounts.total.currency_code;
                    var appDataFlags = this.models.checkoutAppData && this.models.checkoutAppData.flags;
                    var merchant = this.models.checkoutAppData && this.models.checkoutAppData.merchant;
                    this.merchant = merchant.brand_name || merchant.merchant_name || merchant.merchant_email;
                    this.isBuyNow = appDataFlags && appDataFlags.is_buy_now_flow;
                    this.isCartUpload = appDataFlags && appDataFlags.is_cart_upload_flow;
                    this.isInstantUpdateFlow = this.models.checkoutCart && this.models.checkoutCart.instantUpdateIntegration;
                    if (this.isInstantUpdateFlow) {
                        fallbackShippingOptions = this.models.checkoutCart.purchaseUnits[0].external_callback_options.fallback_shipping_options;
                        if (fallbackShippingOptions) {
                            defaultFallbackOptionIndex = _squid.$util.findIndex(fallbackShippingOptions, function(option) {
                                return option.is_default;
                            });
                        }
                    }
                    this.cartAmounts = {};
                    set("shippingAmt", this.models.checkoutCart.purchase.amounts.shipping);
                    set("taxAmt", this.models.checkoutCart.purchase.amounts.tax);
                    set("subTotal", this.models.checkoutCart.purchase.amounts.subtotal);
                    set("total", this.models.checkoutCart.purchase.amounts.total);
                    set("handlingAmt", this.models.checkoutCart.purchase.amounts.handling_fee);
                    set("insuranceAmt", this.models.checkoutCart.purchase.amounts.insurance);
                    set("shippingDiscountAmt", this.models.checkoutCart.purchase.amounts.shipping_discount);
                    set("discountAmt", this.models.checkoutCart.purchase.amounts.discount);
                    this.previousCosts = {
                        shippingAmount: this.models.checkoutCart.purchase.amounts.shipping ? Number(this.models.checkoutCart.purchase.amounts.shipping.amount) : undefined,
                        taxAmount: this.models.checkoutCart.purchase.amounts.tax ? Number(this.models.checkoutCart.purchase.amounts.tax.amount) : undefined
                    };
                    if (this.models.checkoutCart.cartWeight) {
                        this.cartWeight = {};
                        if (this.models.checkoutCart.cartWeight.value) {
                            this.cartWeight.value = Number(this.models.checkoutCart.cartWeight.value).toFixed(2);
                        }
                        this.cartWeight.unit = this.models.checkoutCart.cartWeight.unit;
                    }
                    if (this.models.checkoutCart.purchase.amounts.discount) {
                        this.cartDiscount = {
                            value: Number(this.models.checkoutCart.purchase.amounts.discount.amount).toFixed(2),
                            currency_code: this.currencyCode
                        };
                    }
                    if (this.showShippingAddress) {
                        this.$watch("this.models.checkoutSession.shipping", function(newValue, oldValue) {
                            if (hasAddressChanged(newValue, oldValue, _this2.isInstantUpdateFlow)) {
                                _this2.addressChanged = true;
                                _this2.getShippingMethods();
                            }
                        });
                    }
                    this.getShippingMethods();
                }
            }
        });
        _angular.$timeout;
        _squid.$Component;
        _squid.$locale;
        _squid.$populate;
        _squid.$util;
        _squid.formatCurrency;
        _index.$ShippingMethodModel;
        _index2.$CheckoutSessionModel;
        _index2.$CheckoutPayeeModel;
        _index2.$CheckoutCartModel;
        _index2.$CheckoutShippingAddressesModel;
        _index2.$CheckoutAppDataModel;
        _logger.$logger;
        module.exports = exports["default"];
    },
    "./components/xo-ui-components/src/modal/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js");
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _template = __webpack_require__("./components/xo-ui-components/src/modal/template.html");
            var _template2 = _interopRequireDefault(_template);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            (0, _squid.$registerDirective)("xoModal", function() {
                return {
                    template: _template2["default"],
                    restrict: "E",
                    replace: true,
                    transclude: true,
                    scope: {
                        show: "=?",
                        showCloseButton: "=?",
                        enableCloseOnEscape: "=?",
                        onClose: "=?",
                        overrideDefaultContainer: "@?"
                    },
                    controller: function controller($scope) {
                        var escapeKeyHandler = function escapeKeyHandler($event) {
                            if ($event.keyCode === 27) {
                                $scope.hideModal();
                            }
                        };
                        if ($scope.enableCloseOnEscape) {
                            $(document).bind("keyup", escapeKeyHandler);
                        }
                        $scope.hideModal = function($event) {
                            if ($event) {
                                $event.preventDefault();
                            }
                            $scope.show = false;
                            $(document).unbind("keyup", escapeKeyHandler);
                            if ($scope.onClose) {
                                $scope.onClose();
                            }
                        };
                    }
                };
            });
            _squid.$registerDirective;
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-ui-components/src/modal/template.html": function(module, exports) {
        module.exports = '<div class="modal-wrapper" ng-show=\'show\' content>\n\t<div class="modal-overlay" ng-click="hideModal()"></div>\n\t<div class="modal-dialog" modal-box modal-cancel="hideModal()">\n\t\t<div class="modal-content" ng-class="{\'modal-default\': !overrideDefaultContainer}" tabindex="-1" focus-when="show">\n\t\t\t<div ng-transclude>\n\t\t\t</div>\n\t\t\t<a link-button ng-if="showCloseButton" ng-click="hideModal($event)" class="close"><span class="accessAid">{{ content(\'common.back\') }}</span></a>\n\t\t</div>\n\t</div>\n</div>\n';
    },
    "./components/xo-form-components/src/select-shipping-method/template.html": function(module, exports) {
        module.exports = '<span id="selectShippingMethod" content>\n    <div id="selectShippingMethodContainer" ng-if="showShippingOptions">\n        <div id="storePickUpDetails" ng-if="models.checkoutCart.isShippingMethodStorePickUp()">\n            <hr class="lightHR">\n            <div class="shipTo">{{ content(\'shippingMethod.shipTo\') }}</div>\n            <div class="storeLocation" >{{ content(\'shippingMethod.storeLocation\') }}</div>\n            <p class="storeLocationInfo">{{ content(\'shippingMethod.storeLocationInfo\') }}</p>\n        </div>\n        <div id="shippingInformation">\n            <div id="methodCharges" ng-class="shippingInfoDisplay">\n                <span class="shippingText">{{ content(\'shippingMethod.shipping\') }}:</span>\n            <span>\n                <a id="shippingMethodCharge" class=changeShippingMethod link-button aria-label="{{ content(\'shippingMethod.selectMethod\')}}"\n                    ng-click="actions.openModal()" focus-when="!showModal" focused-once-before>\n                    <span class="selectedShippingMethod">{{selectedShippingMethod | decodeEntities}} - </span>\n                    <format-currency class="formatCurrency" code="currencyCode" amount="shippingAmtApplied"></format-currency>\n                </a>\n            </span>\n            </div>\n            <div id="insuranceInfo" ng-if="selectedMethod.insuranceAvailable" ng-class="shippingInfoDisplay">\n                <span class="insuranceText">{{ content(\'shippingMethod.shippingInsurance\') }}:</span>\n            <span>\n                <a id="insuranceNoneApplied" ng-if="!selectedMethod.showInsuranceAmount" class=changeInsurance href="#" aria-label="{{ content(\'shippingMethod.insuranceNoneSelected\') }}" ng-click="actions.openModal()">\n                    <span class="noInsuranceOption"> {{ content(\'shippingMethod.insuranceNoneSelected\')}}</span>\n                </a>\n                <a id="insuranceAmtOffered" ng-if="selectedMethod.showInsuranceAmount" class=changeInsurance href="#" aria-label="{{ content(\'shippingMethod.shippingInsurance\') }}" ng-click="actions.openModal()">\n                    <format-currency class="formatCurrency" code="currencyCode" amount="insuranceApplied"></format-currency>\n                </a>\n            </span>\n            </div>\n        </div>\n        <xo-modal show=showModal show-close-button="true" on-close="actions.closeModal">\n            <div class="shippingMethodsContainer">\n                <div>\n                    <div class="shippingOptions">\n                        <span class="shippingHeader" id="shippingHeader1">{{ content(\'shippingMethod.selectMethod\') }}</span>\n                        <span class="gamma" id="shippingHeader2">{{ content(\'shippingMethod.merchantOptions\') }}</span>\n                        <br>\n                        <div>\n                            <div ng-repeat="charge in response.charges">\n                                <div class="row-fluid radioButton">\n                                    <input type="radio" name="shippingMethodRadioButton" id="{{$index}}" value="{{$index}}" ng-model="selectedMethod.current.index" ng-change="isInstantUpdateFlow && uncheckInsuranceCheckbox()"/>\n                                    <label class="noBottom" for="{{$index}}">\n                                            <span class="methodContents">\n                                        <span>\n                                            <span>\n                                                <span class="methodName">\n                                                    {{charge.shipping_charge.shipping_method | decodeEntities}} -\n                                                </span>\n                                                <span class="shippingCharge">\n                                                    <format-currency class="formatCurrency" code="currencyCode" amount="charge.shipping_charge.shipping_amount.value / 100"></format-currency>\n                                                </span>\n                                            </span>\n                                            <span class="deliveryTime">\n                                                {{charge.shipping_charge.delivery_time}}\n                                            </span>\n                                            <span class="description animate-show" ng-if="shippingMethods.isStorePickUp(charge.shipping_charge.shipping_method_type)" ng-show="selectedMethod.current.index == $index">\n                                                {{ content(\'shippingMethod.storeLocationInfo\') }}\n                                            </span>\n                                        </span>\n                                        <span ng-if="charge.shipping_charge.offer_insurance_option" ng-show="showInsurance($index)" class="insuranceOfferedInOption checkbox">\n                                            <input ng-model="selectedMethod.current.insuranceSelected" type="checkbox" id="insurance" value="false">\n                                            <label for="insurance" ng-bind-html="htmlContent(\'shippingMethod.addShippingInsurance\', { amount: formatAmount(charge.shipping_charge.insurance_amount) })"></label>\n                                        </span>\n                                    </span>\n                                    </label>\n                                </div>\n                                <hr class="hr" ng-if="!$last">\n                            </div>\n                        </div>\n                        <input id="confirmShippingMethod" type="button" class="confirmation btn" value="{{ content(\'shippingMethod.continue\') }}" ng-click="actions.continueHandler()">\n                    </div>\n                </div>\n            </div>\n            <div class="logo"></div>\n        </xo-modal>\n    </div>\n</span>\n';
    },
    "./components/xo-page-components/src/cart/lib/ui.js": function(module, exports, __webpack_require__) {
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _decode_entities = __webpack_require__("./components/xo-page-components/src/cart/lib/decode_entities.js");
        var _decode_entities2 = _interopRequireDefault(_decode_entities);
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        _angular.$filterProvider.register("decodeEntities", _decode_entities2["default"]);
        function getVisibleWidth(elem) {
            var elemRect = elem.getBoundingClientRect();
            return elemRect.right - elemRect.left;
        }
        function getNaturalWidth(elem) {
            var old = {
                overflow: elem.style.overflow,
                width: elem.style.width,
                display: elem.style.display
            };
            var result;
            elem.style.overflow = "visible";
            elem.style.width = "auto";
            elem.style.display = "inline-block";
            result = getVisibleWidth(elem);
            elem.style.overflow = old.overflow;
            elem.style.width = old.width;
            elem.style.display = old.display;
            return result;
        }
        var getStyle = _angular.$window.getComputedStyle ? function(elem, style) {
            return _angular.$window.getComputedStyle(elem)[style];
        } : function(elem, style) {
            return elem.currentStyle[style];
        };
        function hasEllipsis(elem) {
            var overflowHidden = getStyle(elem, "overflow") === "hidden";
            var textOverflowEllipsis = getStyle(elem, "text-overflow") === "ellipsis";
            var whiteSpaceNowrap = getStyle(elem, "white-space") === "nowrap";
            if (overflowHidden && textOverflowEllipsis && whiteSpaceNowrap) {
                return getVisibleWidth(elem) < getNaturalWidth(elem);
            }
            return false;
        }
        (0, _angular.$registerDirective)("onEllipsis", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    function invokeSubscriber() {
                        (0, _angular.$parse)(attrs.onEllipsis)(scope);
                        scope.$apply();
                    }
                    (0, _angular.$timeout)(function() {
                        if (hasEllipsis(element[0])) {
                            invokeSubscriber();
                        }
                    });
                }
            };
        });
        (0, _angular.$registerDirective)("dynamicMaxheight", function() {
            return {
                restrict: "A",
                link: function link(scope, element, attrs) {
                    function resizeContainer() {
                        var $element = (0, _jquery2["default"])(element);
                        var parentHeight = parseFloat(getStyle($element.parent()[0], "max-height"));
                        var siblings = $element.siblings().filter(function() {
                            var pos = getStyle((0, _jquery2["default"])(this)[0], "position");
                            return pos !== "fixed" && pos !== "absolute";
                        }).map(function getOuterHeights() {
                            return (0, _jquery2["default"])(this).outerHeight();
                        });
                        var siblingsHeight = 0;
                        var i;
                        for (i = 0; i < siblings.length; i += 1) {
                            siblingsHeight += siblings[i];
                        }
                        var spaceAvailable = parentHeight - siblingsHeight;
                        if (!isNaN(spaceAvailable)) {
                            $element.css("max-height", spaceAvailable + "px");
                        }
                    }
                    if (attrs.dynamicMaxheight) {
                        scope.$on((0, _angular.$parse)(attrs.dynamicMaxheight)(scope), resizeContainer);
                    }
                    (0, _angular.$timeout)(resizeContainer);
                }
            };
        });
        _angular.$registerDirective;
        _angular.$filterProvider;
        _angular.$parse;
        _angular.$timeout;
        _angular.$window;
    },
    "./components/xo-page-components/src/cart/lib/decode_entities.js": function(module, exports) {
        exports.__esModule = true;
        exports.decodeEntities = decodeEntities;
        exports["default"] = decodeEntitiesAngularFilter;
        function decodeEntities(element, input) {
            input = input.replace(/<(\/?)(html|script|body|meta|style|img|iframe|svg|link)/gi, "&lt;$1$2");
            element.innerHTML = input;
            return element.textContent || element.innerText;
        }
        function decodeEntitiesAngularFilter() {
            var ENTITY_ELEM = "__xpc_entitydecoder__";
            if (!window[ENTITY_ELEM]) {
                window[ENTITY_ELEM] = document.createElement("p");
            }
            var converter = window[ENTITY_ELEM];
            return decodeEntities.bind(null, converter);
        }
    },
    "./components/xo-member-components/src/review-address/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/auth/index.js");
        __webpack_require__("./components/xo-address-components/src/address-display/directive.js");
        __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js");
        var _template = __webpack_require__("./components/xo-member-components/src/review-address/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend({
            tag: "xo-review-address",
            template: _template2["default"],
            props: {
                token: {
                    type: "var"
                },
                makeAddrPreferred: {
                    type: "var",
                    required: false
                },
                countryCode: {
                    type: "str",
                    required: false
                },
                storePickUpSelected: {
                    type: "var"
                },
                nmjExperience: {
                    type: "var",
                    required: false
                },
                hideShipToHeader: {
                    type: "var",
                    required: false
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutAppData: _index.$CheckoutAppDataModel.instance(this.props.token).retrieve(),
                        checkoutSession: _index.$CheckoutSessionModel.instance(this.props.token).retrieve(),
                        auth: _index2.$AuthModel.instance().retrieve()
                    };
                }
            },
            actions: {
                gotoShipping: function gotoShipping() {
                    if (this.models.checkoutAppData.flags.allow_change_shipping) {
                        if (this.props.nmjExperience && this.props.nmjExperience.multiPage) {
                            _uiRouter.$state.go("checkout.shipTo.sidebar.shipping");
                        } else {
                            _uiRouter.$state.go("checkout.review.sidebar.shipping");
                        }
                    } else {
                        this.cannotChangeShippingInfoMessages = true;
                    }
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    var updateMakePreferredFlag = function updateMakePreferredFlag(flag) {
                        if (_this.makeAddrPreferred) {
                            _this.makeAddrPreferred.shown = flag;
                        }
                        return flag;
                    };
                    this.isMakePreferred = function() {
                        if (_this.models.auth.remembered) {
                            return updateMakePreferredFlag(false);
                        }
                        if (_this.isPreferredShippingEnabled && !_this.models.checkoutSession.get("shipping.preferred_address") && !_this.models.checkoutSession.get("shipping.s2s_address")) {
                            return updateMakePreferredFlag(true);
                        }
                        return updateMakePreferredFlag(false);
                    };
                },
                populate: function populate() {
                    var shipping = this.models.checkoutSession && this.models.checkoutSession.shipping || {};
                    this.isPreferredShippingEnabled = (0, _squid.$feature)("preferredShipping", false, shipping.country);
                }
            }
        });
        _uiRouter.$state;
        _squid.$Component;
        _squid.$feature;
        _index.$CheckoutAppDataModel;
        _index.$CheckoutSessionModel;
        _index2.$AuthModel;
        module.exports = exports["default"];
    },
    "./components/xo-member-components/src/review-address/template.html": function(module, exports) {
        module.exports = '<div id="shippingForm" class="shipping asideView" content>\n    <div class="trayInner trayInnerDefault">\n        <div id="shippingAddress">\n            <div ng-class="{editable:models.checkoutAppData.flags.allow_change_shipping}" focusable="!cannotChangeShippingInfoMessages" class="focusable" select-button ng-click="actions.gotoShipping()">\n                <h4 ng-show="!(storePickUpSelected || hideShipToHeader)" class="noBottom gamma">{{ content(\'shippingAddress.shipTo\') }}</h4>\n                <div ng-show="storePickUpSelected">\n                    <h4 class="noBottom gamma">{{ content(\'shippingAddress.yourAddress\') }}</h4>\n                    <span class="merchantReq">{{ content(\'shippingAddress.merchantReq\') }}</span>\n                </div>\n                <div class="addressDisplay">\n                    <div ng-if=\'!(nmjExperience && nmjExperience.multiPage)\'>\n                        <span class="given-name">{{models.checkoutSession.shipping.name}}</span>\n                        <span class="family-name"></span>\n                        <xo-address-display address=models.checkoutSession.shipping country-code=countryCode></xo-address-display>\n                    </div>\n                    <div ng-if=\'nmjExperience && nmjExperience.multiPage\'>\n                        <span class="name">{{models.checkoutSession.shipping.name}}</span>\n                        <xo-address-display class="bold-address" address=models.checkoutSession.shipping country-code=countryCode></xo-address-display>\n                    </div>\n                </div>\n            </div>\n            <a ng-show=\'!nmjExperience\' class="edits changeShipping ng-class:{disabled:cannotChangeShippingInfoMessages}" select-button focusable="!cannotChangeShippingInfoMessages" ng-click="actions.gotoShipping()" aria-label="{{ content(\'shippingAddress.label\') }}" focus-when-state="checkout.review.sidebar.shipping" transitions-to="checkout.review">\n                {{ content(\'common.change\') }}\n                <span class="frontArrow goTray ng-scope ng-class:{disabled:cannotChangeShippingInfoMessages}"></span>\n            </a>\n        </div>\n    </div>\n    <div id="infoMessages" class="msgPage msg-info shipNotification" ng-if="cannotChangeShippingInfoMessages">\n        <span class="icon"></span>\n        <ul>\n            <li ng-if="models.checkoutAppData.useraction() === \'commit\'" focus-when="cannotChangeShippingInfoMessages" tabindex="-1">\n                {{ content(\'memberReview.cannotChangeShippingMsgUserActionCommit\', {merchantName: models.checkoutAppData.merchant.brand_name, merchantName2: models.checkoutAppData.merchant.brand_name}) }}\n            </li>\n            <li ng-if="models.checkoutAppData.useraction() !== \'commit\'" focus-when="cannotChangeShippingInfoMessages" tabindex="-1">\n                {{ content(\'memberReview.cannotChangeShippingMsg\', {merchantName: models.checkoutAppData.merchant.brand_name, merchantName2: models.checkoutAppData.merchant.brand_name}) }}\n            </li>\n        </ul>\n    </div>\n</div>\n\n<div class="reviewPreferredShipping sCheckbox checkbox" ng-if="isMakePreferred()">\n    <input type="checkbox" ng-model="makeAddrPreferred.selected" name="makePreferred" id="makePreferred" />\n    <label for="makePreferred">{{ content(\'memberReview.makePreferredShipping\') }}</label>\n</div>\n\n<div ng-if="nmjExperience" class="multipleShipping addShipping">\n    <a track-link="change_shipping" ng-click="actions.gotoShipping()" class="addAddressLink" id="addAddressLink" role="button">\n        <span class="plusicon"></span>\n        <p class="addOption">\n            <span class="name">{{content(\'addShipping.switchAddress\')}}</span>\n        </p>\n    </a>\n</div>\n';
    },
    "./components/xo-third-party-components/src/review-paywith-venmo/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _venmoModels = __webpack_require__("./components/xo-third-party-components/src/venmo-models/index.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _pxp = __webpack_require__("./components/xo-page-components/src/cart/lib/pxp.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/xo-third-party-components/src/review-paywith-venmo/styles.less");
        var _template = __webpack_require__("./components/xo-third-party-components/src/review-paywith-venmo/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoCheckoutComponent", {
            tag: "xo-review-paywith-venmo",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    optional: false
                }
            },
            resolve: {
                models: function models() {
                    return {
                        venmo: _venmoModels.$VenmoOnboardModel.instance(this.token).retrieve(),
                        checkoutSession: _checkout.$CheckoutSessionModel.instance(this.token).retrieve(),
                        checkoutAppData: _checkout.$CheckoutAppDataModel.instance(this.token).retrieve(),
                        checkoutCart: _checkout.$CheckoutCartModel.instance(this.token).retrieve(),
                        payee: _checkout.$CheckoutPayeeModel.instance(this.token).retrieve()
                    };
                }
            },
            lifecycle: {
                populate: function populate() {
                    var _this = this;
                    var models = this.models;
                    this.intentNotSale = models.checkoutCart.get("payment_action") !== "sale";
                    function getAmount() {
                        return models.checkoutSession.get("plan.sources.0.amount");
                    }
                    var mapperFS = {
                        BALANCE: function BALANCE(fs) {
                            return {
                                type: fs.funding_mode,
                                amount: getAmount()
                            };
                        },
                        PAYMENT_CARD: function PAYMENT_CARD(fs) {
                            return {
                                type: fs.funding_mode,
                                card_type: fs.payment_card.type,
                                sub_type: "INSTANT_TRANSFER",
                                name: fs.payment_card.type,
                                last4: fs.payment_card.number,
                                amount: getAmount()
                            };
                        },
                        BANK_ACCOUNT: function BANK_ACCOUNT(fs) {
                            return {
                                type: fs.funding_mode,
                                sub_type: "INSTANT_TRANSFER",
                                name: fs.bank_account.bank_name,
                                last4: fs.bank_account.account_number,
                                amount: getAmount()
                            };
                        }
                    };
                    function determineShowAmt() {
                        var userAction = models.checkoutAppData.useraction();
                        var noLineItemDetails = !(userAction && userAction.toLowerCase() === "commit") && models.checkoutCart.get("purchase.items.length") === 0;
                        return (0, _pxp.$pxpCartAmt)(models.checkoutAppData.get("merchant.merchant_country"), models.payee.get("merchant.id"), noLineItemDetails, models.checkoutCart.isPurchase()).then(function(showAmount) {
                            return models.checkoutCart.get("payment_action") !== "authorize" && showAmount;
                        });
                    }
                    function getPlanList() {
                        var defaultFS = models.venmo.get("funding_sources.default_option");
                        if (defaultFS && defaultFS.funding_mode && mapperFS[defaultFS.funding_mode]) {
                            return [ mapperFS[defaultFS.funding_mode](defaultFS) ];
                        } else {
                            return models.checkoutSession.get("plan.sources");
                        }
                    }
                    function getBackup() {
                        var backup = models.venmo.get("funding_sources.alternate_option");
                        if (backup && backup.funding_mode && mapperFS[backup.funding_mode]) {
                            return mapperFS[backup.funding_mode](backup);
                        }
                    }
                    this.venmoUser = "@" + models.venmo.get("username");
                    determineShowAmt().then(function(shouldShowAmt) {
                        _this.showAmt = shouldShowAmt;
                    });
                    this.defaultFs = getPlanList();
                    this.backupFs = getBackup();
                }
            }
        });
        _venmoModels.$VenmoOnboardModel;
        _checkout.$CheckoutSessionModel;
        _checkout.$CheckoutAppDataModel;
        _checkout.$CheckoutCartModel;
        _checkout.$CheckoutPayeeModel;
        _pxp.$pxpCartAmt;
        _squid.$Component;
        module.exports = exports["default"];
    },
    "./components/xo-third-party-components/src/venmo-models/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$VenmoOnboardModel = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $VenmoOnboardModel = exports.$VenmoOnboardModel = _squid.$Model.extend("$VenmoOnboardModel", {
            api: new _squid.$Api({
                uri: "/api/venmo/onboard"
            })
        });
        angular.value("$VenmoOnboardModel", $VenmoOnboardModel);
        _squid.$Model;
        _squid.$Api;
    },
    "./components/xo-third-party-components/src/review-paywith-venmo/styles.less": "./css/app.less",
    "./components/xo-third-party-components/src/review-paywith-venmo/template.html": function(module, exports) {
        module.exports = '<div class="paywith asideView pwVenmo" content>\n    <div class="trayInner trayInnerDefault" >\n        <div id="paymentMethod">\n\n            <h4 class="noBottom paymentsHeader zeta">\n                <span>\n                    {{ content(\'paymentMethod.payWith\') }}\n                </span>\n            </h4>\n            <ul class="charges">\n                <li ng-repeat="fs in defaultFs" class="clearfix fs">\n                    <div ng-class="[\'method\', \'BALANCE\']">\n                        <span class="fsIcons" ng-if="!fs.is_pinless_debit"></span>\n                        <span class="pinlessGlyphIcon icon icon-card-half-solid" aria-hidden="true" ng-if="fs.is_pinless_debit"></span>\n                         <span class="name" ng-if="fs.type === \'BALANCE\'">\n                             {{ content(\'paymentMethod.venmoBalance\') }}\n                         </span>\n                        <span class="name" ng-if="fs.type !== \'BALANCE\'">\n                            <span class="fsname" ng-if="!fs.is_pinless_debit">\n                                {{fs.name}}\n                            </span>\n                            <span class="fslastdigits" ng-if="!fs.is_pinless_debit">\n                                {{fs.last4 ? \'x-\' + fs.last4 : \'\'}}\n                            </span>\n                        </span>\n                    </div>\n                    <span ng-if="showAmt" class="methodAmount">\n                        <span class="amountFormatted"><format-currency code="fs.amount.currency_code" amount="fs.amount.amount"></format-currency></span>\n                    </span>\n                    <span class="venmoUsername">\n                        {{venmoUser}}\n                    </span>\n                </li>\n            </ul>\n\n            <div ng-if="backupFs" class="backup">\n                <p><span ng-if="intentNotSale">{{content(\'paymentMethod.venmoMerchantDisclosure\')}} </span>{{content(\'paymentMethod.venmoBackupFS\', {name: backupFs.name, last4: backupFs.last4}) }}</p>\n            </div>\n\n            <div ng-if="!backupFs" class="backup">\n                <p><span ng-if="intentNotSale">{{content(\'paymentMethod.venmoMerchantDisclosure\')}} </span>{{content(\'paymentMethod.venmoBalanceInfo\')}}</p>\n            </div>\n\n            <div class="lineBreak"></div>\n\n            <div class="venmoReceipt">\n                <p>{{content(\'paymentMethod.venmoReceipt\')}}</p>\n            </div>\n\n            <div class="learnMore">\n                <p bind-html-compile="htmlContent(\'paymentMethod.venmoLearnMore\')"></p>\n            </div>\n        </div>\n    </div>\n</div>\n';
    },
    "./components/xo-third-party-components/src/review-paywith-baidu/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/xo-third-party-components/src/review-paywith-baidu/styles.less");
        var _template = __webpack_require__("./components/xo-third-party-components/src/review-paywith-baidu/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoReviewPayWithBaiduComponent", {
            tag: "xo-review-paywith-baidu",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    optional: false
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutSession: _checkout.$CheckoutSessionModel.instance(this.token).retrieve()
                    };
                }
            },
            actions: {},
            lifecycle: {
                populate: function populate() {
                    var models = this.models;
                    this.showAmt = true;
                    this.defaultFs = models.checkoutSession.get("plan.sources");
                }
            }
        });
        _checkout.$CheckoutSessionModel;
        _squid.$Component;
        module.exports = exports["default"];
    },
    "./components/xo-third-party-components/src/review-paywith-baidu/styles.less": "./css/app.less",
    "./components/xo-third-party-components/src/review-paywith-baidu/template.html": function(module, exports) {
        module.exports = '<div class="paywith asideView pwBaidu" content>\n    <div class="trayInner trayInnerDefault" >\n        <div id="paymentMethod">\n\n            <h4 class="noBottom paymentsHeader zeta">\n                <span>\n                    {{ content(\'paymentMethod.payWith\') }}\n                </span>\n            </h4>\n            <div class="charges">\n                <div ng-repeat="fs in defaultFs" class="clearfix fs">\n                    <div ng-class="[\'method\', \'EXTERNAL_WALLET\']">\n                        <span class="fsIcons" ng-if="!fs.is_pinless_debit"></span>\n                        <span class="pinlessGlyphIcon icon icon-card-half-solid" aria-hidden="true" ng-if="fs.is_pinless_debit"></span>\n                         <span class="name" ng-if="fs.type === \'EXTERNAL_WALLET\'">\n                             {{ content(\'paymentMethod.baiduWallet\') }}\n                         </span>\n                    </div>\n                    <span ng-if="showAmt" class="methodAmount">\n                        <span class="amountFormatted"><format-currency code="fs.amount.currency_code" amount="fs.amount.amount"></format-currency></span>\n                    </span>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n';
    },
    "./components/xo-page-components/src/messenger-plugin/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uuid = __webpack_require__("./components/node-uuid/uuid.js");
        var _uuid2 = _interopRequireDefault(_uuid);
        var _index = __webpack_require__("./components/xo-device-info/dist/index.js");
        var _template = __webpack_require__("./components/xo-page-components/src/messenger-plugin/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _index2 = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index3 = __webpack_require__("./components/xo-models/src/app/index.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _fbMessenger = __webpack_require__("./components/xo-page-components/src/constants/fbMessenger.js");
        var _fbMessenger2 = _interopRequireDefault(_fbMessenger);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoMessengerPluginDirective", {
            tag: "xo-messenger-plugin",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: true
                },
                pluginType: {
                    type: "str",
                    required: false
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutSession: _index2.$CheckoutSessionModel.instance(this.props.token).retrieve(),
                        messengerIntegration: _index3.$MessengerIntegrationDataModel.instance().retrieve()
                    };
                }
            },
            lifecycle: {
                populate: function populate() {
                    var _this = this;
                    var isMobile = _index.$DeviceInfo.isMobile() || _index.$DeviceInfo.isTablet();
                    var lang = _squid.$locale.lang, country = _squid.$locale.country;
                    var _props = this.props, pluginType = _props.pluginType, token = _props.token;
                    var _models = this.models, _models$checkoutSessi = _models.checkoutSession, checkoutSession = _models$checkoutSessi === undefined ? {} : _models$checkoutSessi, _models$messengerInte = _models.messengerIntegration, messengerIntegration = _models$messengerInte === undefined ? {} : _models$messengerInte;
                    var fbBAShownFlag = _squid.$util.localStorageEnabled() && window.localStorage.getItem(_fbMessenger2["default"].FB_BA_SHOWN_FLAG);
                    var _ref = window.xprops || {}, _ref$experience = _ref.experience;
                    _ref$experience = _ref$experience === undefined ? {} : _ref$experience;
                    var override_fbpp_repeat = _ref$experience.override_fbpp_repeat;
                    var overrideRepeatUserFlag = _squid.$util.param(_fbMessenger2["default"].OVERRIDE_FBPP_REPEAT_FLAG) || override_fbpp_repeat;
                    var isChatEnabled = messengerIntegration.isChatEnabled, emailHash = messengerIntegration.emailHash, nameHash = messengerIntegration.nameHash, dataRefJWT = messengerIntegration.dataRefJWT;
                    var _checkoutSession$paye = checkoutSession.payer;
                    _checkoutSession$paye = _checkoutSession$paye === undefined ? {} : _checkoutSession$paye;
                    var payerId = _checkoutSession$paye.id, _checkoutSession$tran = checkoutSession.transactionDetails, transactionDetails = _checkoutSession$tran === undefined ? {} : _checkoutSession$tran;
                    var txnId = transactionDetails.receipt_id || transactionDetails.id || "";
                    _logger.$logger.info("Messenger_plugin_props", {
                        pluginType: pluginType,
                        isMobile: isMobile
                    });
                    _logger.$logger.info("Messenger_plugin_data", messengerIntegration);
                    if (!overrideRepeatUserFlag && (isChatEnabled || fbBAShownFlag === "true" && pluginType === "STM")) {
                        _logger.$logger.info("UNP_chat_prefernce_is_already_enabled");
                        _logger.$logger.info("checkout_fpti", {
                            buyer_country: country,
                            buyer_id: payerId,
                            design: "fbmessenger",
                            from: "XO_REVIEW",
                            to: "process_XO_success",
                            eligibility_reason: "chat_pref_enabled"
                        });
                        (0, _jquery2["default"])(".fb-send-to-messenger").hide();
                        (0, _jquery2["default"])("#stm-upsell-content").hide();
                        return;
                    }
                    this.identityMatchVal = JSON.stringify({
                        email_hash: emailHash,
                        name_hash: nameHash
                    });
                    this.dataRefVal = dataRefJWT + "_txnID_" + txnId + "_plugin_" + pluginType + "_token_" + token + "_locale_" + lang + "_" + country;
                    this.originVal = window.location.origin;
                    this.pageIdVal = _squid.$config.deploy.isLive() ? _fbMessenger2["default"].FB_PROD_PAGE_ID[country] : _fbMessenger2["default"].FB_TEST_PAGE_ID;
                    if (pluginType === "CHECKBOX") {
                        this.uuidVal = _uuid2["default"].v1();
                        if (_squid.$util.sessionStorageEnabled()) {
                            window.sessionStorage.setItem("checkboxUUIDVal", this.uuidVal);
                        }
                    }
                    _squid.$dom.loadScript("facebook-jssdk", "https://www.paypalobjects.com/fbjs/" + lang + "_" + country + "/sdk.js").then(function() {
                        if (window.FB) {
                            _this.fbAsyncInit();
                        }
                    });
                    this.cbSTMPlugin = function(evt) {
                        if (pluginType === "STM") {
                            if (evt.event === "rendered") {
                                _logger.$logger.info("STM_plugin_rendered");
                                _logger.$logger.info("checkout_fpti", {
                                    buyer_country: country,
                                    buyer_id: payerId,
                                    design: "fbmessenger",
                                    from: "XO_REVIEW",
                                    to: "process_rendering_plugin",
                                    eligibility_reason: "plugin_rendered"
                                });
                            }
                            if (evt.event === "identity_match" && evt.result === "match") {
                                _logger.$logger.info("FBPP_ID_match");
                                _logger.$logger.info("checkout_fpti", {
                                    buyer_country: country,
                                    buyer_id: payerId,
                                    design: "fbmessenger",
                                    from: "XO_REVIEW",
                                    to: "process_identity_matching",
                                    eligibility_reason: "identity_matched"
                                });
                                _this.dataRefVal = evt.ref;
                                _jquery2["default"].ajax({
                                    url: isMobile ? _fbMessenger2["default"].FB_USER_API_MOBILE_URL : _fbMessenger2["default"].FB_USER_API_URL,
                                    xhrFields: {
                                        withCredentials: true
                                    }
                                }).always(function() {
                                    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref2$responseText = _ref2.responseText, responseText = _ref2$responseText === undefined ? "" : _ref2$responseText;
                                    var json = responseText.substring(responseText.indexOf("{"));
                                    var data = JSON.parse(json);
                                    _logger.$logger.info("callFBToGetBAToken_call", data);
                                    messengerIntegration.action("callFBToGetBAToken", {
                                        data: {
                                            userIdentifier: data.user_identifier
                                        },
                                        success: function success() {
                                            var getBAResponse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                                            var isSuccessful = getBAResponse.success, batoken = getBAResponse.batoken;
                                            if (isSuccessful) {
                                                _logger.$logger.info("BAToken_from_FB", {
                                                    batoken: batoken
                                                });
                                                var fbBAToken = batoken;
                                                var xoJSData = void 0;
                                                if (_squid.$config.deploy.isLocal()) {
                                                    xoJSData = {
                                                        "data-env": "local",
                                                        "data-stage": "msmaster",
                                                        "data-no-bridge": ""
                                                    };
                                                    fbBAToken = "BA-5UD039368V581733E";
                                                } else if (_squid.$config.deploy.isStage() || _squid.$config.deploy.isSandbox()) {
                                                    xoJSData = {
                                                        "data-env": "sandbox",
                                                        "data-no-bridge": ""
                                                    };
                                                } else {
                                                    xoJSData = {
                                                        "data-env": "production",
                                                        "data-no-bridge": ""
                                                    };
                                                }
                                                var launchBAFlow = function launchBAFlow() {
                                                    _logger.$logger.info("Launch_BA_flow_with_token", {
                                                        fbBAToken: fbBAToken
                                                    });
                                                    _logger.$logger.info("checkout_fpti", {
                                                        buyer_country: country,
                                                        buyer_id: payerId,
                                                        design: "fbmessenger",
                                                        from: "XO_REVIEW",
                                                        to: "prepare_billing_agreement",
                                                        eligibility_reason: "identity_matched",
                                                        click_source: "pay_now",
                                                        ba_token: fbBAToken
                                                    });
                                                    window.paypal.Checkout.contexts.iframe = true;
                                                    if (_squid.$util.localStorageEnabled()) {
                                                        window.localStorage.setItem(_fbMessenger2["default"].FB_BA_SHOWN_FLAG, "true");
                                                    }
                                                    window.paypal.Checkout.render({
                                                        experience: {
                                                            messenger: true,
                                                            override_fbpp_repeat: overrideRepeatUserFlag
                                                        },
                                                        payment: function payment() {
                                                            return fbBAToken;
                                                        },
                                                        onAuthorize: function onAuthorize() {
                                                            var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, baToken = _ref3.billingToken;
                                                            _logger.$logger.info("User_accepted_FB_BA");
                                                            var isUnchecked = _squid.$util.sessionStorageEnabled() && window.sessionStorage.getItem("checkboxPluginState") === "unchecked";
                                                            var eligibility_reason = isUnchecked ? "checkbox_plugin_unchecked" : "checkbox_plugin_checked";
                                                            if (isUnchecked) {
                                                                _logger.$logger.info("user_not_accepted_messenger_notifications");
                                                                (0, _jquery2["default"])(".fb-send-to-messenger").hide();
                                                                (0, _jquery2["default"])("#stm-upsell-content").hide();
                                                                (0, _jquery2["default"])("#ba-integration-content").show();
                                                            } else {
                                                                _logger.$logger.info("user_accepted_checkbox_messenger_notifications");
                                                                (0, _jquery2["default"])(".fb-send-to-messenger").hide();
                                                                (0, _jquery2["default"])("#stm-upsell-content").hide();
                                                                (0, _jquery2["default"])("#messenger-ba-integration-content").show();
                                                            }
                                                            _logger.$logger.info("checkout_fpti", {
                                                                buyer_country: country,
                                                                buyer_id: payerId,
                                                                design: "fbmessenger",
                                                                from: "BILLING_AGREEMENT",
                                                                to: "process_billing_agreement",
                                                                eligibility_reason: eligibility_reason,
                                                                click_source: "agree_continue",
                                                                ba_token: fbBAToken
                                                            });
                                                            _this.confirmCheckboxPluginOptIn();
                                                            messengerIntegration.action("notifyFBOntBAAuthorize", {
                                                                data: {
                                                                    baToken: baToken
                                                                },
                                                                success: function success() {
                                                                    var authorizeResponse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                                                                    if (authorizeResponse.success) {
                                                                        _logger.$logger.info("notifyFBOntBAAuthorize_call_success!");
                                                                    } else {
                                                                        _logger.$logger.info("notifyFBOntBAAuthorize_call_failure!");
                                                                        _logger.$logger.info("checkout_fpti", {
                                                                            buyer_country: country,
                                                                            buyer_id: payerId,
                                                                            design: "fbmessenger",
                                                                            int_error_code: "500",
                                                                            int_error_description: JSON.stringify(authorizeResponse),
                                                                            error_type: "failure",
                                                                            error_source: "notifyFBOntBAAuthorize"
                                                                        });
                                                                    }
                                                                }
                                                            });
                                                            _logger.$logger.info("checkout_fpti", {
                                                                buyer_country: country,
                                                                buyer_id: payerId,
                                                                design: "fbmessenger",
                                                                from: "BILLING_AGREEMENT",
                                                                to: "prepare_billing_agreement_success",
                                                                eligibility_reason: eligibility_reason,
                                                                click_source: "return_to_merchant",
                                                                ba_token: fbBAToken
                                                            });
                                                        }
                                                    });
                                                };
                                                if (window.paypal) {
                                                    _logger.$logger.info("xo_JS_is_already_present");
                                                    launchBAFlow();
                                                } else {
                                                    _squid.$dom.loadScript("xo-js", "https://www.paypalobjects.com/api/paypal.checkout.v4.js", 0, xoJSData).then(function() {
                                                        _logger.$logger.info("xo_JS_got_loaded");
                                                        launchBAFlow();
                                                    });
                                                }
                                            } else {
                                                _logger.$logger.info("callFBToGetBAToken_call_failure!");
                                                _logger.$logger.info("checkout_fpti", {
                                                    buyer_country: country,
                                                    buyer_id: payerId,
                                                    design: "fbmessenger",
                                                    int_error_code: "500",
                                                    int_error_description: JSON.stringify(getBAResponse),
                                                    error_type: "failure",
                                                    error_source: "callFBToGetBAToken"
                                                });
                                            }
                                        }
                                    });
                                });
                            } else if (evt.event === "identity_match" && evt.result === "no_match") {
                                _logger.$logger.info("No_FBPP_ID_match");
                                _logger.$logger.info("checkout_fpti", {
                                    buyer_country: country,
                                    buyer_id: payerId,
                                    design: "fbmessenger",
                                    from: "XO_REVIEW",
                                    to: "process_XO_success",
                                    eligibility_reason: "identity_not_matched",
                                    click_source: "pay_now"
                                });
                            } else if (evt.event === "identity_match" && evt.result === "no_logged_in_user") {
                                _logger.$logger.info("No_loggedin_FBPP_ID_match");
                                _logger.$logger.info("checkout_fpti", {
                                    buyer_country: country,
                                    buyer_id: payerId,
                                    design: "fbmessenger",
                                    from: "XO_REVIEW",
                                    to: "process_XO_success",
                                    eligibility_reason: "logged_out",
                                    click_source: "pay_now"
                                });
                            } else if (evt.event === "identity_match" && evt.result === "failure") {
                                _logger.$logger.info("Fail_FBPP_ID_match");
                                _logger.$logger.info("checkout_fpti", {
                                    buyer_country: country,
                                    buyer_id: payerId,
                                    design: "fbmessenger",
                                    int_error_code: "500",
                                    int_error_description: JSON.stringify(evt),
                                    error_type: "failure",
                                    error_source: "identity_match"
                                });
                            } else if (evt.event === "clicked") {
                                _logger.$logger.info("user_accepted_STM_messenger_notifications");
                            }
                        }
                    };
                    this.fbAsyncInit = function() {
                        _logger.$logger.info("Initializing_FB_scripts");
                        window.FB.init({
                            appId: _fbMessenger2["default"].FB_PROD_APP_ID,
                            xfbml: true,
                            version: "v2.6"
                        });
                        window.FB.Event.subscribe("send_to_messenger", _this.cbSTMPlugin);
                        window.FB.Event.subscribe("messenger_checkbox", function(evt) {
                            _logger.$logger.info("messenger_checkbox_event", evt);
                            if (evt.event === "checkbox") {
                                if (_squid.$util.sessionStorageEnabled()) {
                                    window.sessionStorage.setItem("checkboxPluginState", evt.state);
                                }
                                _logger.$logger.info("checkbox_plugin_state_" + evt.state);
                            }
                        });
                    };
                    this.confirmCheckboxPluginOptIn = function() {
                        _logger.$logger.info("MessengerCheckboxPluginUserConfirmation_event_to_fb", {
                            uuidVal: _squid.$util.sessionStorageEnabled() && window.sessionStorage.getItem("checkboxUUIDVal") || "",
                            pageIdVal: _this.pageIdVal,
                            dataRefVal: _this.dataRefVal
                        });
                        window.FB.AppEvents.logEvent("MessengerCheckboxUserConfirmation", null, {
                            page_id: _this.pageIdVal,
                            app_id: _fbMessenger2["default"].FB_PROD_APP_ID,
                            ref: _this.dataRefVal,
                            user_ref: _squid.$util.sessionStorageEnabled() && window.sessionStorage.getItem("checkboxUUIDVal") || ""
                        });
                    };
                },
                exit: function exit() {
                    _logger.$logger.info("Messenger_plugin_EXIT_event");
                }
            }
        });
        _logger.$logger;
        _squid.$Component;
        _squid.$dom;
        _squid.$util;
        _squid.$config;
        _squid.$locale;
        _index.$DeviceInfo;
        _index2.$CheckoutSessionModel;
        _index3.$MessengerIntegrationDataModel;
        module.exports = exports["default"];
    },
    "./components/xo-page-components/src/messenger-plugin/template.html": function(module, exports) {
        module.exports = '<messenger-plugin content>\n\t<div id="messenger-plugin" ng-value="props.pluginType">\n\n\t\t<div class="fb-send-to-messenger" origin="{{originVal}}" identity_match="{{identityMatchVal}}" messenger_app_id=1084613224964631\n\t\t\tpage_id={{pageIdVal}} data-ref="{{dataRefVal}}" color="blue" size="xlarge" ng-if="(props.pluginType == \'STM\')">\n\t\t</div>\n\n\t\t<div class="fb-messenger-checkbox" origin="{{originVal}}" page_id={{pageIdVal}} messenger_app_id=1084613224964631\n\t\t\tpixel_id=329481497393670 user_ref="{{uuidVal}}" prechecked="true" allow_login="true" size="xlarge"\n\t\t\tng-if="(props.pluginType == \'CHECKBOX\')">\n\t\t</div>\n        \n\t</div>\n</messenger-plugin>';
    },
    "./components/xo-page-components/src/constants/fbMessenger.js": function(module, exports) {
        module.exports = {
            OVERRIDE_FBPP_REPEAT_FLAG: "override_fbpp_repeat",
            OVERRIDE_FBPP_MOBILE_FLAG: "override_fbpp_mobile",
            FB_BA_SHOWN_FLAG: "is_xo_wps_fb_messenger_plugin_match_withba_shown",
            MOBILE_CHANNEL: "MOBILE",
            WEB_CHANNEL: "WEB",
            FB_USER_API_MOBILE_URL: "https://m.facebook.com/paypal/user_identifier",
            FB_USER_API_URL: "https://www.facebook.com/paypal/user_identifier",
            FB_PROD_APP_ID: "1084613224964631",
            FB_PROD_PAGE_ID: {
                US: "55982004572",
                AU: "171522459698178",
                CA: "164660263560926",
                GB: "167465479930420"
            },
            FB_TEST_PAGE_ID: "676472402496128",
            PXP_MESSENGER_EXPT: "xo_wps_fb_messenger_plugin",
            PXP_SHOW_MESSENGER_PLUGIN_TREATMENT: "xo_wps_fb_messenger_plugin_1_treatment",
            PXP_MESSENGER_HK: "xo_wps_fb_messenger_plugin_HK",
            PXP_MESSENGER_PLUGIN_TREATMENT_HK: "xo_wps_fb_messenger_plugin_HK_treatment",
            PXP_MESSENGER_JP: "xo_wps_fb_messenger_plugin_JP",
            PXP_MESSENGER_PLUGIN_TREATMENT_JP: "xo_wps_fb_messenger_plugin_JP_treatment",
            PXP_MESSENGER_SG: "xo_wps_fb_messenger_plugin_SG",
            PXP_MESSENGER_PLUGIN_TREATMENT_SG: "xo_wps_fb_messenger_plugin_SG_treatment",
            PXP_MESSENGER_PH: "xo_wps_fb_messenger_plugin_PH",
            PXP_MESSENGER_PLUGIN_TREATMENT_PH: "xo_wps_fb_messenger_plugin_PH_treatment"
        };
    },
    "./components/xo-credit-components/src/xo-offer-top-banner/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _template = __webpack_require__("./components/xo-credit-components/src/xo-offer-top-banner/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoOfferTopBanner", {
            tag: "xo-offer-top-banner",
            template: _template2["default"],
            controller: function controller($scope, $rootScope) {
                $scope.isTopBannerVisible = false;
                $scope.offerTopBanner = {};
                var unbind = $rootScope.$on("setOfferTopBanner", function(event, data) {
                    $scope.offerTopBanner = data;
                    $scope.isTopBannerVisible = true;
                });
                $scope.$on("$destroy", unbind);
            }
        });
        _squid.$Component;
        module.exports = exports["default"];
    },
    "./components/xo-credit-components/src/xo-offer-top-banner/template.html": function(module, exports) {
        module.exports = '<div\n  ng-if="isTopBannerVisible"\n  class="\n    xo-offer-top-banner-container\n    xo-offer-top-banner-treatment-{{offerTopBanner.creditBannerTreatment}}\n  "\n>\n  <div class="banner-container">\n    <img\n      src="https://www.paypalobjects.com/webstatic/credit/img/PPClogo_banner.png"\n      width="52"\n    />\n    <div class="body-text">\n      <span ng-bind-html="offerTopBanner.banner.bodyText"></span>\n    </div>\n    <div>\n      <a\n        href="#"\n        class="apply-btn"\n        ng-click="offerTopBanner.bml()"\n        ng-bind-html="offerTopBanner.banner.ctaText"\n      >\n      </a>\n    </div>\n    <div class="terms-container">\n      <span ng-bind-html="offerTopBanner.banner.termsText"></span>\n      <a\n        href="{{offerTopBanner.banner.termsLink}}"\n        class="popup bmlTermsLink"\n        target="_blank"\n        xo-popup\n        track-link="acquisition_offer_banner_MORS_terms_link"\n        ng-bind-html="offerTopBanner.banner.termsLinkText"\n      >\n      </a>\n    </div>\n  </div>\n</div>\n';
    },
    "./components/xo-models/src/bml/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xomodel.bml", [ "squid" ]).factory("$ApplyForBMLModel", function($Model, $Api) {
                    return $Model.extend("ApplyForBMLModel", {
                        api: new $Api({
                            uri: "/api/checkout/:id/cart",
                            cache: true
                        }),
                        personalInformation: {
                            day: "",
                            month: "",
                            year: "",
                            natId: "",
                            phone: {
                                telephone: "",
                                phoneType: ""
                            }
                        },
                        billingAdrress: {
                            phoneType: "",
                            phoneNumber: ""
                        }
                    });
                }).factory("$BMLModel", function($Model, $Api) {
                    return $Model.extend("BMLModel", {
                        api: new $Api({
                            uri: "/api/bml",
                            cache: false
                        }),
                        applicationStatus: function applicationStatus() {
                            return this.application_status;
                        },
                        applicationId: function applicationId() {
                            return this.application_id;
                        }
                    });
                }).factory("$BMLApplicationModel", function($Model, $Api) {
                    return $Model.extend("BMLApplicationModel", {
                        api: new $Api({
                            uri: "/api/bml/:application_id",
                            cache: false
                        })
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/bml", "components/xo-models/src/bml/index.js");
    },
    "./components/xo-credit-components/src/bml-display/xo-bml-popup/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-credit-components/src/bml-display/xo-bml-popup/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/bml/index.js"), __webpack_require__("./components/xo-beaver/dist/logger.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid, template) {
            return angular.module("xo-bml-popup.directive", [ "squid", "xomodel.checkout", "xomodel.bml", "beaver" ]).directive("xoBmlPopup", function() {
                return {
                    template: template,
                    controller: function controller($scope, $populate, $rootScope, $CheckoutSessionModel, $BMLModel, $logger) {
                        $populate($scope, {
                            checkoutSession: $CheckoutSessionModel.instance($rootScope.token)
                        }).then(function() {
                            if ($scope.checkoutSession.showDeclinePopup) {
                                if (!$rootScope.bml) {
                                    $rootScope.bml = new $BMLModel();
                                }
                                if (!$scope.bml) {
                                    $scope.bml = $rootScope.bml;
                                }
                                $scope.bml.preferenceCheck = false;
                                $scope.bml.showModal = true;
                                $scope.bml.showModalBackdrop = true;
                                if ($scope.bml.applicationStatus() || $scope.bml.contingency) {
                                    $scope.bml.showModalBackdrop = true;
                                }
                            }
                        });
                        $scope.bmlSetPreferrence = function() {
                            if ($scope.bml.preferenceCheck) {
                                $scope.bml.action("preference", {
                                    data: {
                                        financial_instrument_id: $scope.bml.financial_instrument_id
                                    },
                                    success: function success() {
                                        $logger.info("COMPLETEBMLAPPLY_PREFERRED");
                                        $scope.checkoutSession.message = {
                                            type: "success",
                                            msgKeys: [ "memberReview.bmlPreferredConfirmation" ]
                                        };
                                    }
                                });
                            } else {
                                $scope.checkoutSession.message = {
                                    type: "success",
                                    msgKeys: [ "paymentMethod.paymentMethodUpdated" ]
                                };
                            }
                            $scope.bml.showModal = false;
                        };
                        $scope.bmlClickContinue = function($event) {
                            $event.preventDefault();
                            $scope.bml.showModalBackdrop = false;
                            $scope.bml.showModal = false;
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-credit-components/src/bml-display/xo-bml-popup/template.html": function(module, exports) {
        module.exports = '<section class="xoBmlPopup" content>\n    <!-- BML Decision -->\n    <div ng-if="bml.application_status !== undefined || bml.contingency">\n        <div ng-show="bml.showModal" id="bmlModal" style="display:block;" class="modal bmlModal" aria-labelledby="modal-title" role="alertdialog" tabindex="-1">\n\n            <div ng-show="bml.showModalBackdrop" class="modal-backdrop"></div>\n\n            <div class="modal-wrap">\n\n                <div ng-switch="bml.application_status == \'APPROVED\' || bml.application_status == \'PENDING_COMPLETION_STATUS\'">\n                    <div ng-switch-when="true">\n                        <span class="bmlLogoVert"></span>\n                        <h2 id="modal-title" class="alpha noHead">{{ content(\'memberReview.bmlSuccessHeader\') }}</h2>\n\n                        <div ng-if="bml.nape == \'napePositive\'">\n                            <p>{{ content(\'memberReview.bmlNapeLinkSuccess\')}}</p>\n                        </div>\n                        <div ng-if="bml.nape !== \'napePositive\' && bml.credit_line.value == 0">\n                            <p>{{ content(\'memberReview.bmlApprovalMessage\') }}</p>\n                        </div>\n                        <div ng-if="bml.nape !== \'napePositive\' && bml.credit_line.value > 0">\n                            <p ng-bind-html="htmlContent(\'memberReview.bmlSuccessMessage\', {creditLine: bml.credit_line.value})"></p>\n                            <p>{{ content(\'memberReview.bmlSuccessMessageSend\', {email: bml.user_info.email_address}) }}</p>\n                        </div>\n\n                        <form method="post" name="confirm" ng-submit="bmlSetPreferrence()">\n                            <div class="checkbox">\n                                <input type="checkbox" ng-model="bml.preferenceCheck" name="bmlPreferred" id="bmlPreferredCheckbox" class="chkbx">\n                                <label for="bmlPreferredCheckbox" class="chkbxLabel">{{ content(\'memberReview.bmlSetPreferred\')}}</label>\n                            </div>\n                            <input class="btn btn-submit full" type="submit" value="{{ content(\'memberReview.bmlContinue\')}}">\n                        </form>\n\n                    </div>\n                    <div ng-switch-default>\n                        <div ng-switch="bml.application_status">\n                            <!-- bmlMaxAttempts -->\n                            <div ng-switch-when="SOFT_DECLINED">\n                                <h2 id="modal-title" class="alpha noHead">{{ content(\'memberReview.bmlSorry\')}}</h2>\n                                <p>{{ content(\'bmlDeclined.hardDeclineMsg\')}}</p>\n                            </div>\n                            <!-- bmlDeclineLinkedToDiffMember -->\n                            <div ng-switch-when="FUNDING_INSTRUMENT_ASSOCIATED_WITH_DIFFERENT_MEMBER">\n                                <h2 id="modal-title" class="alpha noHead">{{ content(\'bmlDeclined.bmlAcctLinkedHeader\')}}</h2>\n                                <p>{{ content(\'bmlDeclined.bmlAcctLinkedMsg\')}}</p>\n                            </div>\n                            <!-- creditDeclineHard -->\n                            <div ng-switch-when="DECLINED">\n                                <h2 id="modal-title" class="alpha noHead">{{ content(\'bmlDeclined.hardDeclineHeader\')}}</h2>\n                                <p>{{ content(\'bmlDeclined.hardDeclineMsg\')}}</p>\n                            </div>\n                            <!-- ??? creditPaymentNotAllowed -->\n                            <div ng-switch-when="CREDIT_PAYMENT_NOT_ALLOWED">\n                                <h2 id="modal-title" class="alpha noHead">{{ content(\'bmlDeclined.creditNotAllowedHeader\')}}</h2>\n                                <p>{{ content(\'bmlDeclined.creditNotAllowedMsg\')}}</p>\n                            </div>\n                            <!-- ??? creditEligibilityDeclined -->\n                            <div ng-switch-when="CREDIT_ELIGIBILITY_DECLINE">\n                                <h2 id="modal-title" class="alpha noHead">{{ content(\'bmlDeclined.creditEligibilityDeniedHeader\')}}</h2>\n                                <p>{{ content(\'bmlDeclined.creditEligibilityDeniedMsg\')}}</p>\n                            </div>\n                            <!-- ??? declineOtherCreditInstrumentExists -->\n                            <div ng-switch-when="FP_DECLINED_DUE_TO_CREDIT_IN_WALLET_RULE">\n                                <h2 id="modal-title" class="alpha noHead">{{ content(\'bmlDeclined.declineOtherCreditInstrumentExistsHeader\')}}</h2>\n                                <p>{{ content(\'bmlDeclined.declineOtherCreditInstrumentExistsLine1\')}}</p>\n                                <p>{{ content(\'bmlDeclined.declineOtherCreditInstrumentExistsLine2" merchantName="{bmlResult.merchantFullName}\')}}</p>\n                            </div>\n                            <!-- systemError, bmlGenericError, invalidError -->\n                            <div ng-switch-default> <!-- ng-switch-when="UNKNOWN_DECISION" -->\n                                <h2 id="modal-title" class="alpha noHead">{{ content(\'bmlDeclined.systemErrorHeader\')}}</h2>\n                                <p>{{ content(\'bmlDeclined.systemErrorMsg\')}}</p>\n                            </div>\n                        </div>\n\n                        <!--\n                         && bml.application_status == \'APPROVED\' || bml.application_status == \'PENDING_COMPLETION_STATUS\'\n                        -->\n                        <div ng-if="bml.application_status !== undefined || bml.contingency" >\n                            <div ng-if="locale.countryCode === \'DE\'">\n                                <p class="cancelUrl">\n                                    <a href="{{cancel}}" role="button" class="btn full">{{ content(\'common.returnToCart\') }}</a>\n                                </p>\n                            </div>\n                            <div ng-if="locale.countryCode !== \'DE\'">\n                                <input class="btn btn-submit full buttonGroup button-spacing" type="button" id="continueBml" value="{{ content(\'common.payWithPayPal\') }}" ng-click="bmlClickContinue($event)" />\n                                <a href="{{cancel}}" role="button" class="btn btn-secondary full buttonGroup" id="cancelLink">\n                                    {{ merchant ? content(\'common.bmlCancelButtonLabel\', { merchantName: merchant }) : content(\'common.cancelAndReturnToMerchant\') }}\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <!-- BML Decision -->\n</section>\n';
    },
    "./components/xo-page-components/src/done/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        var _fbMessenger = __webpack_require__("./components/xo-page-components/src/constants/fbMessenger.js");
        var _fbMessenger2 = _interopRequireDefault(_fbMessenger);
        var _index = __webpack_require__("./components/xo-page-components/src/utils/index.js");
        var _index2 = _interopRequireDefault(_index);
        var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var AUTORETURN_TIMEOUT = 5e3;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-page-components/src/done/template.html"), __webpack_require__("./components/xo-beaver/dist/logger.js"), __webpack_require__("./components/xo-return-to-merchant/dist/util.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, ng, squid, template) {
            return angular.module("xo-done.directive", [ "squid", "beaver", "xo-error-tooltip.directive", "xo-return-to-merchant" ]).directive("xoDone", function() {
                return {
                    template: template,
                    controller: function controller($rootScope, $scope, $populate, $logger, $promise, $CheckoutAppDataModel, $CheckoutSessionModel, $MerchantPreferenceModel, $CheckoutPayeeModel, $CheckoutCartModel, $locale, $ReturnToMerchant, $DeviceInfo, $state, $window, $stateParams, $pxp, $timeout) {
                        $scope.isGuestSignup = $rootScope.mode && $rootScope.mode === "signup";
                        $scope.locale = $locale;
                        function addPageMessage(code) {
                            var CONTENT_KEY_MAPPING = {
                                NO_UPGRADE: "accountUpgradeFailed"
                            };
                            if (code && CONTENT_KEY_MAPPING[code]) {
                                $scope.errorMessage = {
                                    msgs: [ $locale.content.get("done." + CONTENT_KEY_MAPPING[code]) ],
                                    type: "warning"
                                };
                            }
                        }
                        function isThirdPartyFlow() {
                            return _thirdPartyInfo.thirdPartyExperience.isThirdPartyExperience($rootScope.token);
                        }
                        $populate($scope, {
                            checkoutAppData: $CheckoutAppDataModel.instance($scope.token),
                            checkoutSession: $CheckoutSessionModel.instance($scope.token),
                            checkoutCart: $CheckoutCartModel.instance($scope.token),
                            payee: $CheckoutPayeeModel.instance($scope.token)
                        }).then(function() {
                            return $populate($scope, {
                                merchantPreferenceModel: $MerchantPreferenceModel.instance($scope.payee.merchant.id)
                            }).then(function() {
                                $scope.isAutoReturn = $scope.merchantPreferenceModel.autoReturn();
                                $logger.info("wps_autoreturn_" + ($scope.isAutoReturn ? "enabled" : "disabled"), {
                                    return_url: $scope.checkoutAppData.urls.return_url || "not_available",
                                    autoreturn_url: $scope.merchantPreferenceModel.returnUrl() || "not_available"
                                });
                                $scope.autoReturnContentKey = $DeviceInfo.isMobile() || $DeviceInfo.isTablet() ? "done.autoReturnStatement" : "done.autoReturnStatementWeb";
                                $scope.guestSignupKey = $scope.isGuestSignup ? "done.paymentGuest" : "done.payment";
                                if ($stateParams.code) {
                                    addPageMessage($stateParams.code);
                                }
                                var amount = $scope.checkoutSession.transactionDetails.amount.total;
                                var code = $scope.checkoutSession.transactionDetails.amount.currency;
                                $scope.formattedAmount = squid.formatCurrency(amount, code);
                                var itemList = $scope.checkoutSession.itemsList;
                                itemList.forEach(function(item) {
                                    item.quantity = squid.formatQuantity(item.quantity);
                                });
                            });
                        }).then(function() {
                            var pxpContext = _index2["default"].getMessengerPXPContext();
                            $logger.info("pxp_xo_wps_fb_messenger_plugin ", pxpContext);
                            if (!$scope.isAutoReturn && !isThirdPartyFlow()) {
                                $promise.all([ $pxp(_fbMessenger2["default"].PXP_MESSENGER_EXPT, pxpContext, _fbMessenger2["default"].PXP_SHOW_MESSENGER_PLUGIN_TREATMENT), $pxp(_fbMessenger2["default"].PXP_MESSENGER_HK, pxpContext, _fbMessenger2["default"].PXP_MESSENGER_PLUGIN_TREATMENT_HK), $pxp(_fbMessenger2["default"].PXP_MESSENGER_JP, pxpContext, _fbMessenger2["default"].PXP_MESSENGER_PLUGIN_TREATMENT_JP), $pxp(_fbMessenger2["default"].PXP_MESSENGER_SG, pxpContext, _fbMessenger2["default"].PXP_MESSENGER_PLUGIN_TREATMENT_SG), $pxp(_fbMessenger2["default"].PXP_MESSENGER_PH, pxpContext, _fbMessenger2["default"].PXP_MESSENGER_PLUGIN_TREATMENT_PH) ]).then(function() {
                                    var results = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                                    var _squid$$locale = squid.$locale;
                                    _squid$$locale = _squid$$locale === undefined ? {} : _squid$$locale;
                                    var country = _squid$$locale.country;
                                    var _$scope$checkoutSessi = $scope.checkoutSession.payer;
                                    _$scope$checkoutSessi = _$scope$checkoutSessi === undefined ? {} : _$scope$checkoutSessi;
                                    var payerId = _$scope$checkoutSessi.id;
                                    $logger.info("Messenger_done_page_PXP_RESULT", results);
                                    var _results$ = results[0];
                                    _results$ = _results$ === undefined ? {} : _results$;
                                    var treatment_name = _results$.treatment_name, _results$2 = results[1];
                                    _results$2 = _results$2 === undefined ? {} : _results$2;
                                    var hk_treatment_name = _results$2.treatment_name, _results$3 = results[2];
                                    _results$3 = _results$3 === undefined ? {} : _results$3;
                                    var jp_treatment_name = _results$3.treatment_name, _results$4 = results[3];
                                    _results$4 = _results$4 === undefined ? {} : _results$4;
                                    var sg_treatment_name = _results$4.treatment_name, _results$5 = results[4];
                                    _results$5 = _results$5 === undefined ? {} : _results$5;
                                    var ph_treatment_name = _results$5.treatment_name;
                                    if (treatment_name === _fbMessenger2["default"].PXP_SHOW_MESSENGER_PLUGIN_TREATMENT || hk_treatment_name === _fbMessenger2["default"].PXP_MESSENGER_PLUGIN_TREATMENT_HK || jp_treatment_name === _fbMessenger2["default"].PXP_MESSENGER_PLUGIN_TREATMENT_JP || sg_treatment_name === _fbMessenger2["default"].PXP_MESSENGER_PLUGIN_TREATMENT_SG || ph_treatment_name === _fbMessenger2["default"].PXP_MESSENGER_PLUGIN_TREATMENT_PH) {
                                        $logger.info("messenger_done_page_test_traffic");
                                        $logger.info("checkout_fpti", {
                                            buyer_country: country,
                                            buyer_id: payerId,
                                            design: "fbmessenger",
                                            from: "XO_SUCCESS",
                                            eligibility_reason: "messenger_treatment"
                                        });
                                        $scope.pxpMessengerIntegrationEnabled = true;
                                    } else {
                                        $logger.info("messenger_done_page_control_traffic");
                                        $logger.info("checkout_fpti", {
                                            buyer_country: country,
                                            buyer_id: payerId,
                                            design: "fbmessenger",
                                            from: "XO_SUCCESS",
                                            eligibility_reason: "messenger_control"
                                        });
                                        $scope.pxpMessengerIntegrationEnabled = false;
                                    }
                                });
                            }
                            $("#outerWrapper").addClass("xo-done");
                            $scope.expansion = false;
                            $scope.toggle = function() {
                                if ($scope.expansion === false) {
                                    $scope.maxHeight = document.getElementsByClassName("details-expand")[0].scrollHeight + "px";
                                    $scope.expansion = true;
                                } else {
                                    $scope.expansion = false;
                                }
                                return $scope.expansion;
                            };
                            $scope.autoReturnStatementClick = function(event) {
                                event.preventDefault();
                                if (event.target && event.target.nodeName === "A") {
                                    $logger.info("autoreturn_statement_clicked");
                                    $scope.returnToMerchant();
                                }
                            };
                            if ($scope.isAutoReturn) {
                                $logger.info("autoreturn_to_merchant");
                                $timeout($scope.returnToMerchant, AUTORETURN_TIMEOUT);
                            }
                        });
                        $scope.$on("localeChange", function() {
                            if ($stateParams.code) {
                                addPageMessage($stateParams.code);
                            }
                        });
                        $scope.returnToMerchant = function() {
                            $logger.info("return_to_merchant_clicked");
                            return $state.go("checkout.end");
                        };
                        $rootScope.$on("$stateChangeSuccess", function(event, newState, newParams, oldState) {
                            if (oldState.name === "checkout.done") {
                                $("#outerWrapper").removeClass("xo-done");
                            }
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        _thirdPartyInfo.thirdPartyExperience;
    },
    "./components/xo-page-components/src/utils/index.js": function(module, exports, __webpack_require__) {
        var _fbMessenger = __webpack_require__("./components/xo-page-components/src/constants/fbMessenger.js");
        var _fbMessenger2 = _interopRequireDefault(_fbMessenger);
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _index = __webpack_require__("./components/xo-device-info/dist/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        module.exports = {
            addValidParam: function addValidParam(obj, key, val) {
                if (!obj) {
                    return;
                }
                if (typeof key === "string" && key && val !== undefined && val !== null) {
                    obj[key] = val;
                }
            },
            getMessengerPXPContext: function getMessengerPXPContext() {
                var isMobile = _index.$DeviceInfo.isMobile() || _index.$DeviceInfo.isTablet();
                var overrideMobileUserFlag = _squid.$util.param(_fbMessenger2["default"].OVERRIDE_FBPP_MOBILE_FLAG);
                var channelVal = isMobile ? _fbMessenger2["default"].MOBILE_CHANNEL : _fbMessenger2["default"].WEB_CHANNEL;
                var pxpContext = {
                    "ctx.COUNTRY": _squid.$locale.country,
                    "ctx.CHANNEL": overrideMobileUserFlag ? _fbMessenger2["default"].WEB_CHANNEL : channelVal,
                    "ctx.LANGUAGE": _squid.$locale.lang + "_" + _squid.$locale.country
                };
                return pxpContext;
            }
        };
        _squid.$util;
        _squid.$locale;
        _index.$DeviceInfo;
    },
    "../node_modules/noop-loader/index.js!./components/xo-page-components/src/done/template.html": function(module, exports) {
        module.exports = '<div class="xo-done-content" content>\n    <div ng-click="toggle()"class="splash-receipt" tabindex="-1">\n        <div class="receipt basics">\n            <div class="done" id="circle"></div>\n            <div id="paid-text" bind-html-compile="htmlContent(guestSignupKey, {amt: formattedAmount})"/>\n            <div id="merchant-text">{{content(\'done.payment_target\', {merchantName: (checkoutAppData.merchant.brand_name || checkoutAppData.merchant.merchant_email)})}}</div>\n            <a id="details-text" link-button href="#" aria-expanded="{{expansion}}">{{content(\'paymentMethod.msbDetails\')}}</a>\n        </div>\n        <div class="details-expand" ng-class="{ expansion : expansion}" ng-style="expansion && {\'max-height\': maxHeight}"\n            tabindex="-1" focus-when="expansion">\n            <div class="grouping" ng-repeat="item in checkoutSession.itemsList">\n                <div class="row">\n                    <span class="ltrOverride" directionality><span ng-if="item.quantity">{{item.quantity}} x </span>{{item.name}}</span>\n                    <span class=\'amount\'>\n                        <format-currency code="checkoutSession.transactionDetails.amount.currency" amount="item.price">\n                        </format-currency>\n                    </span>\n                </div>\n                <div ng-if="item.sku" class="item-number-container">\n                    <span>\n                        <strong>{{ content(\'header.itemNumber\') }}</strong> <span class="item-number">{{ item.sku }}</span>\n                    </span>\n                </div>\n                <div ng-if="item.item_option_selections" class="item-selections">\n                    <span class="item-selection" ng-repeat="selection in item.item_option_selections track by $index">\n                        <strong class="item-selection-name">{{ selection.name }}:</strong>\n                        <span class="item-selection-value">{{ selection.select }}</span>\n                    </span>\n                </div>\n            </div>\n            <div class="grouping">\n                <div ng-if="checkoutSession.transactionDetails.amount.subtotal" class="row">\n                    <span>{{content(\'header.subTotal\')}}</span>\n                     <span class=\'amount\'>\n                        <format-currency code="checkoutSession.transactionDetails.amount.currency"\n                                         amount="checkoutSession.transactionDetails.amount.subtotal">\n                        </format-currency>\n                    </span>\n                </div>\n                <div ng-if="checkoutSession.transactionDetails.amount.tax" class="row">\n                    <span>{{content(\'header.tax\')}}</span>\n                    <span class=\'amount\'>\n                        <format-currency code="checkoutSession.transactionDetails.amount.currency"\n                                         amount="checkoutSession.transactionDetails.amount.tax">\n                        </format-currency>\n                    </span>\n                </div>\n                <div ng-if="checkoutSession.transactionDetails.amount.shipping" class="row">\n                    <span>{{content(\'header.shipping\')}}</span>\n                    <span class=\'amount\'>\n                        <format-currency code="checkoutSession.transactionDetails.amount.currency"\n                                         amount="checkoutSession.transactionDetails.amount.shipping">\n                        </format-currency>\n                    </span>\n                </div>\n                <div ng-if="checkoutSession.transactionDetails.amount.insurance" class="row">\n                    <span>{{content(\'header.insurance\')}}</span>\n                    <span class=\'amount\'>\n                        <format-currency code="checkoutSession.transactionDetails.amount.currency"\n                                         amount="checkoutSession.transactionDetails.amount.insurance">\n                        </format-currency>\n                    </span>\n                </div>\n                <div ng-if="checkoutSession.transactionDetails.amount.handling_fee" class="row">\n                    <span>{{content(\'header.handling\')}}</span>\n                    <span class=\'amount\'>\n                        <format-currency code="checkoutSession.transactionDetails.amount.currency"\n                                         amount="checkoutSession.transactionDetails.amount.handling_fee">\n                        </format-currency>\n                    </span>\n                </div>\n                <div ng-if="checkoutSession.transactionDetails.amount.discount" class="row">\n                    <span>{{content(\'header.discount\')}}</span>\n                    <span class=\'amount\'>\n                        <format-currency code="checkoutSession.transactionDetails.amount.currency"\n                                         amount="checkoutSession.transactionDetails.amount.discount">\n                        </format-currency>\n                    </span>\n                </div>\n            </div>\n            <div class="row totalAmount">\n                <b>\n                    <span>{{content(\'base.totalLabel\')}}</span>\n                <span class=\'amount\'>\n                        <format-currency code="checkoutSession.transactionDetails.amount.currency"\n                                         amount="checkoutSession.transactionDetails.amount.total">\n                        </format-currency>\n                    </span>\n                </b>\n            </div>\n        </div>\n        <div id="details-button">\n            <span ng-hide="!expansion" class="arrow collapse"></span>\n            <span ng-hide="expansion" class="arrow expand"></span>\n        </div>\n    </div>\n    <div class="essentials" ng-if="checkoutSession.transactionDetails.reason_code === \'REGULATORY_REVIEW\'">\n        <div class="alert" role="alert">\n            {{content(\'done.temporarily_pending\')}}\n        </div>\n    </div>\n    <div class="essentials" ng-if="!isAutoReturn">\n        <xo-message message="errorMessage"></xo-message>\n\n        <div id="messenger-ba-integration" ng-if="pxpMessengerIntegrationEnabled">\n          <div id="messenger-ba-integration-content" style="display:none">\n            <div class="text">{{ content(\'messenger.integration\') }}</div>\n          </div>\n          <div id="ba-integration-content" style="display:none">\n            <div class="receipt title">{{ content(\'messenger.linkedTitle\') }}</div>\n            <div class="text">{{ content(\'messenger.linkedSubtitle\') }}</div>\n          </div>\n          <div id="stm-upsell-content" class="text">{{ content(\'messenger.upsell\') }}</div>\n          <xo-messenger-plugin plugin-type="STM" token="token"></xo-messenger-plugin>\n        </div>\n\n        <h2 ng-if="checkoutSession.plan.sources.length > 0" class="receipt title">{{content(\'done.paidWith\')}}</h2>\n        <div ng-repeat="item in checkoutSession.plan.sources">\n            <div class="row clearfix">\n                <span class="money-source">{{content(\'fsMappings.\'+item.type) || item.name}} <span ng-if="item.last4">x-</span>{{item.last4}}</span>\n                <span class=\'amount\'>\n                        <format-currency code="item.amount.currency_code"\n                                         amount="item.amount.amount">\n                        </format-currency>\n                </span>\n            </div>\n        </div>\n        <div ng-if="checkoutSession.transactionDetails.soft_descriptor" class="secondary receipt statement">{{content(\'done.transactionInformation\', {merchantName: checkoutSession.transactionDetails.soft_descriptor})}}\n        </div>\n        <h2 ng-if="checkoutSession.shipping" class="receipt title">{{content(\'done.shippedTo\')}}</h2>\n        <div class="text" ng-if="!checkoutCart.isShippingMethodStorePickUp()">\n            <div ng-if="checkoutSession.shipping.name">{{checkoutSession.shipping.name}}</div>\n            <div><span directionality-text="checkoutSession.shipping.full_address">{{checkoutSession.shipping.full_address}}</span></div>\n            <div><span>{{content(\'countryList.\'+checkoutSession.shipping.country)}}</span></div>\n        </div>\n        <div class="text" ng-if="checkoutCart.isShippingMethodStorePickUp()">\n            <div class="storeLocation" >{{ content(\'shippingMethod.storeLocation\') }}</div>\n            <p class="storeLocationInfo">{{ content(\'shippingMethod.storeLocationInfo\') }}</p>\n        </div>\n        <h2 class="receipt title">{{content(\'done.purchaseDetails\')}}</h2>\n        <div id="receiptNumber"> {{content(\'done.receiptNumber\')}} {{checkoutSession.transactionDetails.receipt_id}}</div>\n        <div class="text">\n            <div>{{content(\'done.confirmation\')}}</div>\n            <div id="buyerEmail">{{checkoutSession.payer.email}}</div>\n        </div>\n        <h2 text-align="left" class="receipt title">{{content(\'done.merchantDetails\')}}</h2>\n        <div class="text" id="merchantInfoSection">\n            <div><span directionality-text="checkoutAppData.merchant.brand_name">{{checkoutAppData.merchant.brand_name}}</span></div>\n            <div ng-if="checkoutAppData.merchant.phone">{{checkoutAppData.merchant.phone}}</div>\n            <div id="merchantEmail" ng-if="checkoutAppData.merchant.merchant_email">{{checkoutAppData.merchant.merchant_email}}</div>\n        </div>\n        <div ng-if="checkoutAppData.urls.return_url" id="button" class="buttons reviewButton">\n            <input track-submit type="submit" value="{{content(\'common.returnToDefaultMerchant\')}}" id="merchantReturnBtn"\n                   class="btn btn-secondary full submit receipt ng-binding ng-scope" ng-click="returnToMerchant()" />\n        </div>\n    </div>\n    <div class="essentials autoReturnSection" ng-if="isAutoReturn">\n        <div>{{content(\'done.paymentCompleted\')}}</div>\n        <div ng-click="autoReturnStatementClick($event)" bind-html-compile="htmlContent(autoReturnContentKey, {merchantName: checkoutAppData.merchant.brand_name, autoReturnUrl: checkoutAppData.urls.return_url})"/>\n    </div>\n</div>\n';
    },
    "./components/xo-wallet-components/src/3ds/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/3ds/template.html") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular, template) {
            return angular.module("xo-3ds.directive", [ "squid" ]).directive("xo3ds", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        data: "=",
                        onComplete3dsHandler: "="
                    },
                    controller: function controller($scope, $rootScope, $timeout, $window, $Resolve3DS, $CheckoutAppDataModel, $config, $locale, $logger) {
                        var resolve3DS = $Resolve3DS.instance($scope.token);
                        $scope.termUrl = window.location.origin + $config.urls.baseUrl + "/process3DS";
                        $scope.data = $scope.data || {};
                        function handleInitFailure(message) {
                            $CheckoutAppDataModel.instance($rootScope.token).action("updatePaymentExperience", {
                                data: {
                                    payment_experience: "HERMESNODE",
                                    "3d_secure_authentication_supported": false
                                },
                                silent: true,
                                transientError: true
                            }).then(function() {
                                $logger.info("checkout_fpti", {
                                    from: "3DS_CHALLENGE",
                                    to: "process_3ds_challenge",
                                    int_error_description: message,
                                    error_type: "soft_decline",
                                    error_source: "fiLifecycle"
                                });
                                $scope.onComplete3dsHandler("success");
                            });
                        }
                        function init3DSApi() {
                            $rootScope.$emit("loadingMessage", $locale.content.get("threeDS.processing"));
                            return resolve3DS.action("init3DS", {
                                data: {
                                    cc_id: $scope.data.cc_id,
                                    flow_id: $scope.data.flow_id,
                                    merchant_id: $scope.data.merchant_id,
                                    merchant_country: $scope.data.merchant_country_code,
                                    currency: $scope.data.transaction_amount_currency,
                                    transaction_amount: $scope.data.transaction_amount_value
                                },
                                success: function success(response) {
                                    if (response.status === "SUCCESS" && response.acsUrl) {
                                        $logger.info("checkout_fpti", {
                                            from: "3DS_CHALLENGE",
                                            to: "prepare_3ds_challenge"
                                        });
                                        $scope.acsUrl = response.acsUrl;
                                        $scope.acsMethod = response.acsMethod || "POST";
                                        $scope.acsPaReq = response.acsPaReq;
                                        var lightbox;
                                        var form = $("<form/>", {
                                            action: $scope.acsUrl,
                                            method: $scope.acsMethod,
                                            id: "iFrameForm",
                                            target: "threeDSFrame"
                                        });
                                        form.append($("<input/>", {
                                            type: "hidden",
                                            name: "TermUrl",
                                            value: $scope.termUrl
                                        }));
                                        form.append($("<input/>", {
                                            type: "hidden",
                                            name: "PaReq",
                                            value: $scope.acsPaReq
                                        }));
                                        $("#lightBoxAcsWrapper").append(form);
                                        $("#iFrameForm").submit();
                                        lightbox = angular.element(document.getElementById("light-box"));
                                        lightbox.addClass("open");
                                    } else {
                                        $logger.info("checkout_fpti", {
                                            from: "3DS_CHALLENGE",
                                            to: "process_3ds_challenge",
                                            int_error_description: "acsUrl_not_presented_on_init",
                                            error_type: "soft_decline",
                                            error_source: "fiLifecycle"
                                        });
                                        $scope.onComplete3dsHandler("success");
                                    }
                                },
                                error: function error() {
                                    handleInitFailure("unknown_error_on_init3DS");
                                },
                                validation: function validation() {
                                    handleInitFailure("validation_error_on_init3DS");
                                },
                                contingencies: {
                                    DEFAULT: function DEFAULT() {
                                        handleInitFailure("contingency_presented_on_init3DS");
                                    }
                                }
                            });
                        }
                        function complete3DSApi(paRes) {
                            return resolve3DS.action("complete3DS", {
                                data: {
                                    third_party_response: paRes,
                                    cc_id: $scope.data.cc_id,
                                    flow_id: $scope.data.flow_id
                                },
                                success: function success(response) {
                                    var status;
                                    if (response.status === "SUCCESS") {
                                        status = "success";
                                        $logger.info("checkout_fpti", {
                                            from: "3DS_CHALLENGE",
                                            to: "process_3ds_challenge"
                                        });
                                    } else {
                                        status = "decline";
                                        $logger.info("checkout_fpti", {
                                            from: "3DS_CHALLENGE",
                                            to: "process_3ds_challenge",
                                            int_error_description: "complete3DS_decline",
                                            error_type: "soft_decline",
                                            error_source: "fiLifecycle"
                                        });
                                    }
                                    $scope.onComplete3dsHandler(status);
                                }
                            });
                        }
                        $scope.close3DSFrame = function() {
                            $logger.info("checkout_fpti", {
                                from: "3DS_CHALLENGE",
                                to: "process_user_close"
                            });
                            var lightbox = angular.element(document.getElementById("light-box"));
                            lightbox.removeClass("open");
                            $timeout(function() {
                                var lightboxMask = angular.element(document.getElementById("mask"));
                                lightboxMask.remove();
                                $scope.onComplete3dsHandler("close");
                            }, 200);
                        };
                        init3DSApi();
                        $scope.complete3DS = function(paRes) {
                            complete3DSApi(paRes);
                        };
                        $window.complete3DSFrame = function(paRes) {
                            $scope.complete3DS(paRes);
                        };
                        $("html").on("keyup", function(ev) {
                            if (ev.which === 27) {
                                $scope.close3DSFrame();
                            }
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/3ds/template.html": function(module, exports) {
        module.exports = '<div content id="light-box-3ds" class="light-box-3ds">\n    <div content id="light-box" class="light-box" ng-class="{mobile: isDevice}">\n        <div id="mask" class="light-box mask"></div>\n        <div class="light-box wrapper">\n\n            <div class="light-box-container">\n                <div class="aside" id="lightBoxAcsWrapper">\n                    <a class="close" ng-click="close3DSFrame()" href="#">&nbsp;</a>\n                    <p class="light-box-header">\n                        {{ content(\'threeDS.iFrameTitle\') }}\n                    </p>\n                    <iframe name="threeDSFrame" src="" class="light-box-iframe"></iframe>\n                </div>\n\n                <div class="logo"></div>\n            </div>\n\n        </div>\n    </div>\n</div>\n';
    },
    "./components/xo-models/src/profilemanagement/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xomodel.profilemanagement", [ "squid" ]).factory("$MerchantPreferenceModel", function($Model, $Api, $config, $util) {
                    return $Model.extend("MerchantPreferenceModel", {
                        init: function init() {
                            this._super.init.apply(this);
                            this.setProperties({
                                rm: $util.param("rm"),
                                return_url: $util.param("return"),
                                auto_return: {
                                    enabled: false
                                },
                                pdt: {
                                    enabled: false
                                }
                            });
                        },
                        api: new $Api({
                            baseURI: $config.urls.baseUrl,
                            uri: "/api/profilemanagement/:id/getMerchantPreferences"
                        }),
                        autoReturn: function autoReturn() {
                            return this.auto_return.enabled;
                        },
                        pdtEnabled: function pdtEnabled() {
                            return this.pdt && this.pdt.enabled;
                        },
                        returnUrl: function returnUrl() {
                            return this.return_url || this.auto_return.url;
                        },
                        returnMethod: function returnMethod() {
                            var rm = this.rm;
                            if (rm === "2") {
                                return this.pdtEnabled() ? "GET" : "POST";
                            } else {
                                return "GET";
                            }
                        },
                        returnMethodSupported: function returnMethodSupported() {
                            return this.returnMethod() === "GET";
                        },
                        postPaymentData: function postPaymentData() {
                            return this.rm === "2" && !this.pdtEnabled() && this.returnUrl();
                        },
                        charSet: function charSet() {
                            return this.charset;
                        }
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/profilemanagement", "components/xo-models/src/profilemanagement/index.js");
    },
    "./components/xo-models/src/shoppingcart/index.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xomodel.shoppingcart", [ "squid" ]).factory("$ShoppingCartModel", function($Model, $Api) {
                    return $Model.extend("$ShoppingCartModel", {
                        api: new $Api({
                            uri: "/api/shoppingcart/:id",
                            postAttempts: 2,
                            cache: false
                        })
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-models/src/shoppingcart", "components/xo-models/src/shoppingcart/index.js");
    },
    "./components/xo-member-components/src/review-topup/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _fi = __webpack_require__("./components/xo-models/src/fi/index.js");
        __webpack_require__("./components/xo-member-components/src/review-topup/styles.less");
        var _template = __webpack_require__("./components/xo-member-components/src/review-topup/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("xoReviewTopup", {
            tag: "xo-review-topup",
            template: _template2["default"],
            props: {
                token: {
                    type: "var"
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutSession: _checkout.$CheckoutSessionModel.instance(this.props.token).retrieve(),
                        walletPreferences: _fi.$WalletPreferences.instance(this.props.token).retrieve()
                    };
                }
            },
            actions: {
                gotoTopupFunding: function gotoTopupFunding() {
                    _uiRouter.$state.go("checkout.review.sidepage.topupFunding");
                },
                gotoTopupAmount: function gotoTopupAmount() {
                    _uiRouter.$state.go("checkout.review.sidepage.topupAmount");
                }
            },
            lifecycle: {
                enter: function enter() {
                    this.formatCurrency = _squid.formatCurrency;
                    this.instrumentIconId = function(name) {
                        return _fi.$WalletInstrumentNameMapping.instance().getInstrumentNameNormalized(name);
                    };
                },
                populate: function populate() {
                    if (this.models.checkoutSession.selectedTopupFundingSource) {
                        this.models.walletPreferences.topup.fundingSource = this.models.checkoutSession.selectedTopupFundingSource;
                    }
                    var topupFundingSource = this.models.walletPreferences.topup.fundingSource;
                    if (!topupFundingSource || !topupFundingSource.instrument_id) {
                        this.models.walletPreferences.topup.fundingSource = this.models.checkoutSession.topupFundingSources && this.models.checkoutSession.topupFundingSources[0];
                    } else if (!topupFundingSource.name) {
                        this.models.walletPreferences.topup.fundingSource = _squid.$util.find(this.models.checkoutSession.topupFundingSources, function(fs) {
                            return fs.instrument_id === topupFundingSource.instrument_id;
                        });
                    } else {}
                    if (!this.models.walletPreferences.topup.amount) {
                        this.models.walletPreferences.topup.amount = _squid.$config.topup.topupAmounts[0];
                        this.models.walletPreferences.topup.currency = _squid.$config.topup.currency;
                    } else if (!this.models.walletPreferences.topup.currency) {
                        this.models.walletPreferences.topup.currency = _squid.$config.topup.currency;
                    }
                }
            }
        });
        _squid.$Component;
        _squid.$config;
        _squid.formatCurrency;
        _squid.$util;
        _uiRouter.$state;
        _checkout.$CheckoutSessionModel;
        _fi.$WalletPreferences;
        _fi.$WalletInstrumentNameMapping;
        module.exports = exports["default"];
    },
    "./components/xo-member-components/src/review-topup/styles.less": "./css/app.less",
    "./components/xo-member-components/src/review-topup/template.html": function(module, exports) {
        module.exports = '<section id="reviewTopup" content>\n    <div class="topupAmountContainer listItem" ng-if="models.walletPreferences.topup.amount && models.walletPreferences.topup.currency" ng-click="actions.gotoTopupAmount()">\n        <span class="label">{{content(\'review.topupAmountLabel\')}}</span>\n        <format-currency class="listItemValue" code="models.walletPreferences.topup.currency"\n                         amount="models.walletPreferences.topup.amount"\n                         currency-style="Currency"></format-currency>\n        <a ui-sref="checkout.review.sidepage.topupAmount" class="edits changePayment" select-button focus-when-state="checkout.review.sidepage.topupAmount" transitions-to="checkout.review">\n            <span class="frontArrow goTray"></span>\n        </a>\n    </div>\n    <div class="clearfix topupFundingContainer listItem" ng-click="actions.gotoTopupFunding()">\n        <div>\n            <span class="label">{{content(\'review.topupFundingLabel\')}}</span>\n            <div class="listItemValue">\n                <span class="walletIcons" ng-class="[models.walletPreferences.topup.fundingSource.type,\n                                                    instrumentIconId(models.walletPreferences.topup.fundingSource.name),\n                                                    models.walletPreferences.topup.fundingSource.card_type]"></span>\n                <span class="fsname">{{models.walletPreferences.topup.fundingSource.name}}</span>\n                <span class="fsLast4">&nbsp;x-{{models.walletPreferences.topup.fundingSource.last4}}</span>\n                <a ui-sref="checkout.review.sidepage.topupFunding" class="edits changePayment" select-button focus-when-state="checkout.review.sidepage.topupFunding" transitions-to="checkout.review">\n                    <span class="frontArrow goTray"></span>\n                </a>\n            </div>\n        </div>\n        <div class="listItemDisclaimer">\n            <span class="disclaimer">{{content(\'review.topupFundingSourceInfo\')}}</span>\n        </div>\n    </div>\n</section>\n';
    },
    "./pages/xo-review/template.html": function(module, exports) {
        module.exports = '<section class="review" content ng-click="onPageClick($event)" id="memberReview" tabindex=-1 role="presentation">\n    <xo-title title-txt="{{content(\'memberReview.memberReviewTitle\')}}" class="accessAid"></xo-title>\n    <div ng-if="!checkoutCart.isWalletTokenization()" class="row-fluid justMember" ng-class="{ bmlPopupOpen: bmlPopupOpen }">\n        <div class="span14 trayInner reviewSections" ng-show="!bmlPopupOpen">\n\n            <div class="userBanner">\n                <xo-banner ng-if="personalizedBanner.show && !isMessengerBAIntegration" is-nmj="isNmj">\n                    <p class="userEmail" id="reviewUserInfo">\n                        <span ng-if="isNmj">{{ content(\'memberReview.hiUser_welcome\', {userName: formattedNameInformal}) }}</span>\n                        <span ng-if="!isNmj && !optin_toggle.isEnabled">{{ content(\'memberReview.loggedInWithOneTouch\', {userName: formattedNameInformal, lastName: auth.last_name, firstName: auth.first_name}) }}</span>\n                        <span ng-if="!isNmj && optin_toggle.isEnabled">{{ content(\'memberReview.hiUser\', {userName: formattedNameInformal}) }}</span>\n                        <span ng-if="showNotYou">\n                            <xo-not-you></xo-not-you>\n                        </span>\n                    </p>\n                </xo-banner>\n                <xo-message message="checkoutSession.message"></xo-message>\n                <div ng-if="!isNmj && !personalizedBanner.show && !isMessengerBAIntegration">\n                    <p class="userEmail" id="reviewUserInfo">\n                        {{ content(\'memberReview.hiUser\', {userName: formattedNameInformal}) }}\n                        <span ng-if="showNotYou">\n                            <xo-not-you></xo-not-you>\n                        </span>\n                    </p>\n                </div>\n            </div>\n            <div ng-if="optin_toggle.isEnabled" class="oneTouchBanner">\n                <div ng-if="!isNmj" class="highlight_bar"></div>\n                <div class="oneTouchTerms">\n                    <p class="enable_auto_login bold" ng-if="!optin_toggle.value">{{ content(\'memberReview.autoLoginOff\') }}</p>\n                    <p class="enable_auto_login" ng-if="optin_toggle.value">{{ content(\'memberReview.autoLoginOn\') }}</p>\n\n                    <div ng-show="optin_toggle.showExpandedTerms" class="oneTouchTermsText">\n                        <p class="expanded" ng-bind-html="htmlContent(\'memberReview.expandedTermsOT\')"></p>\n                        <p class="securityInfo">\n                            {{ content(\'memberReview.securityInfoOT\') }} <a ng-click="optin_toggle.showExpandedTerms = !optin_toggle.showExpandedTerms">{{ content(\'common.hide\') }}</a>\n                        </p>\n                    </div>\n                    <div ng-show="!optin_toggle.showExpandedTerms">\n                        <p class="securityInfo">\n                            <span ng-show="!optin_toggle.value">{{ content(\'memberReview.sharedDevicesOT\') }}</span>\n                            <a ng-click="optin_toggle.showExpandedTerms = !optin_toggle.showExpandedTerms">Details</a>\n                        </p>\n                    </div>\n                </div>\n                <div id="banner-switch">\n                    <input id="optin_toggel" class="cmn-toggle cmn-toggle-round" type="checkbox" ng-model="optin_toggle.value" ng-change="onTouchToggle(optin_toggle.value)">\n                    <label for="optin_toggel"></label>\n                </div>\n            </div>\n\n\n            <form name="confirm" class="proceed" novalidate="novalidate" id="ryiForm">\n                <!-- {@if cond="\'{data.updated}\' === \'bmlSuccess\'" } -->\n                <div class="reviews" ng-if="isNmj">\n                    <xo-assist-banner\n                        header="assistBannerHeader"\n                        body="assistBannerBody"\n                        hide-highlight="checkoutSession.message">\n                    </xo-assist-banner>\n                </div>\n\n                <xo-offer-top-banner ng-if="!isThirdPartyWalletExperience()"></xo-offer-top-banner>\n\n                <div class="reviews" ng-if="merchantMsg">\n                    <h4 ng-if="!isMessengerBAIntegration" class="noBottom gamma" id="merchantMsgHeader">\n                        {{ content(\'memberReview.merchantMsgHeader\', { merchantName: merchantName }) }}\n                    </h4>\n                    <!--content-->\n                    <h1 ng-if="isMessengerBAIntegration" class="messengerBAHeader" id="merchantMsgHeader">\n                        {{ content(\'messenger.baHeader\') }}\n                    </h1>\n                    <div class="merchantMsg" id="merchantMsg">\n                        <span class="given-name">\n                            {{ merchantMsg }}\n                        </span>\n                    </div>\n                </div>\n\n                <div class="reviews" ng-if="isNmj">\n                    <xo-review-paywith ng-if="!isThirdPartyWalletExperience()" token="token" pay-button-text="payButtonText()" show-auth-msg="showAuthMsg"\n                                       installment-not-selected="installmentNotSelected"\n                                       show-bml-popup="showBmlPopup" installment="installment"\n                                       pad-toggle-feature="padToggleFeature"\n                                       make-fi-preferred="makeFiPreferred"\n                                       selectedmethod="selectedmethod"\n                                       select-fi-variant="selectFiVariant"\n                                       nmj-experience="isNmj"\n                                       credit-parent-context="creditParentContext">\n                    </xo-review-paywith>\n                    <xo-review-paywith-venmo ng-if="determineThirdPartyWalletExperience() === \'VENMO_EXPERIENCE\'" token="token"></xo-review-paywith-venmo>\n                    <xo-review-paywith-baidu ng-if="determineThirdPartyWalletExperience() === \'BAIDU_EXPERIENCE\'" token="token"></xo-review-paywith-baidu>\n                </div>\n\n                <div class="reviews" ng-if="showInstallmentOption()">\n                    <div id="installmentPlanInfo">\n                        <h4 class="noBottom gamma" id="installmentInfoHeader">\n                            {{content(\'chooseCreditOption.reviewPaymentPlan\')}}\n                        </h4>\n                        <div class="merchantMsg installmentInfo" ng-if="creditOptions.creditType === \'INST\'">\n                            <p class="selectedCreditDesc" ng-bind-html="htmlContent(\'chooseCreditOption.selectedOfferText1\',{term:creditOptions.term, monthlyPayment: installmentInfo.monthlyPaymentAmt})"> </p>\n                            <p class="selectedCreditDesc" ng-bind-html="htmlContent(\'chooseCreditOption.selectedOfferText2\',{apr:creditOptions.apr, interest: installmentInfo.totalInterestAmt, totalPayment: installmentInfo.totalPaymentAmt})"> </p>\n                        </div>\n\n                        <div class="merchantMsg installmentInfo" ng-if="creditOptions.creditType === \'SAC\' || creditOptions.creditType === \'NI\'">\n                            <p class="selectedCreditDesc" ng-bind-html="htmlContent(\'fundingInstruments.bmlDetails\')"> </p>\n                        </div>\n                        <a class="edits creditEdit" ng-click="showCYCO()">\n                            {{ content(\'common.change\') }}\n                            <span class="frontArrow goTray ng-scope"></span>\n                        </a>\n                    </div>\n                </div>\n\n                <div class="reviews" ng-if="showShippingAddress">\n                    <xo-review-address token="token" make-addr-preferred="makeAddrPreferred" store-pick-up-selected="checkoutCart.isShippingMethodStorePickUp()" nmj-experience="isNmj"></xo-review-address>\n                </div>\n\n                <xo-select-shipping-method ng-if="showShippingMethod" token="token" show-shipping-address="showShippingAddress" error-handler-helper="errorHandlerHelper" instant-update-feature="instantUpdateFeature"></xo-select-shipping-method>\n\n                <div class="reviews" ng-if="!isNmj">\n                    <xo-review-paywith ng-if="!isThirdPartyWalletExperience()" token="token" pay-button-text="payButtonText()" show-auth-msg="showAuthMsg"\n                                       installment-not-selected="installmentNotSelected"\n                                       show-bml-popup="showBmlPopup" installment="installment"\n                                       pad-toggle-feature="padToggleFeature"\n                                       make-fi-preferred="makeFiPreferred"\n                                       selectedmethod="selectedmethod"\n                                       select-fi-variant="selectFiVariant"\n                                       nmj-experience="isNmj"\n                                       credit-parent-context="creditParentContext">\n                    </xo-review-paywith>\n                    <xo-review-paywith-venmo ng-if="determineThirdPartyWalletExperience() === \'VENMO_EXPERIENCE\'" token="token"></xo-review-paywith-venmo>\n                    <xo-review-paywith-baidu ng-if="determineThirdPartyWalletExperience() === \'BAIDU_EXPERIENCE\'" token="token"></xo-review-paywith-baidu>\n                </div>\n\n                <div class="offers" ng-if="showCreditPlacement()" ng-class="{ \'reviews hideOffersSeparator hideSeparator\': isNmj }">\n                    <xo-offer token="token" promotion="promotion" bmlaction="bmlaction" installment="installment"\n                        selectedmethod="selectedmethod" parent-context="creditParentContext">\n                    </xo-offer>\n                </div>\n\n                <div ng-if="showRemittanceDisclosure" class="rtrWrap">\n                    {{ content(\'memberReview.rtrMsg\', { merchantName: checkoutAppData.merchant.brand_name }) }}\n                </div>\n\n                <!--inc/bmlLearnMore-->\n                <div>\n                    <div class="buttons bmlSeeTermsBtn hide">\n                        <button class="btn full hide" name="authUserBtn">{{content(\'authUserLearnMore.ok\')}}</button>\n                    </div>\n                </div>\n\n                <!--Action button -->\n                <p ng-if="!isThirdPartyWalletExperience() && showPaypalPolicies" class="paypalPoliciesLink disclaimer" data-ng-bind-html="content(\'memberReview.viewPaypalPolicies\')">\n                </p>\n\n                <p class="unconfirmedUpopMsg" ng-if="showUnconfirmedUpopMsg">\n                    {{ content(\'confirmUpop.confirmUpopToPay\')}}\n                </p>\n\n                <div ng-if="checkoutSession.isAuthRequired">\n                    <input type="hidden" name="email" ng-value="auth.email" />\n                    <div class="inputField password confidential">\n                        <!-- take care of error class-->\n                        <label for="oneclickpassword">{{ content(\'memberReview.enterPassword\')}}</label>\n                        <input id="oneclickpassword" name="password" type="password" autocapitalize="off" autocomplete="off" aria-required="true" ng-maxlength="22" />\n                    </div>\n                </div>\n\n                <p ng-if="!isThirdPartyWalletExperience() && showPolicyAgreement" class="disclaimer" id="policyAgreement" data-ng-bind-html="content(\'memberReview.policyAgreement\', {country: locale.country, lang: locale.lang})">\n                </p>\n\n                <div id="fixedButton" class="frame" ng-if="showFixedButton()">\n                    <hr class="frameborder">\n                    <div class="buttons fixed">\n                        <input track-submit type="submit" value="{{payButtonText()}}" id="confirmButtonTop" class="btn full confirmButton continueButton" validate-submit="onPay()" />\n                    </div>\n                </div>\n\n                <div id="messengerPlugin" class="messengerBAPlugin" ng-if="isMessengerBAIntegration">\n                    <!--content-->\n                    <h4 class="noBottom paymentsHeader zeta">{{ content(\'messenger.pluginHeader\') }}</h4>\n                    <div>\n                        <xo-messenger-plugin token="token" plugin-type="CHECKBOX"></xo-messenger-plugin>\n                        <p class="messengerLegalTxt">{{ content(\'messenger.legal\') }}</p>\n                    </div>\n                </div>\n\n                <div id="button" class="buttons reviewButton">\n                    <input track-submit type="submit" value="{{payButtonText()}}" id="confirmButtonTop" class="btn full confirmButton continueButton" validate-submit="onPay()" />\n                </div>\n\n                <!--content-->\n                <div class="messengerBANotnow" ng-if="isMessengerBAIntegration">\n                    <a href="" ng-click="onFBBANotNow()">{{ content(\'messenger.button_notNow\') }}</a>\n                </div>\n\n\n                <!-- checkoutSession.isRT need to review this -->\n                <p class="reviewLaterContainer disclaimer" ng-if="!buttonLabelIsPay">\n                    {{ content(\'common.reviewLater\')}}\n                </p>\n\n                <div id="disclaimerWithBmlCta" class="disclaimer reviewMsg" ng-if="!isThirdPartyWalletExperience() && showSoftDescriptor && checkoutSession.plan.soft_descriptor"\n                     ng-bind-html="content(\'memberReview.disclaimer\', {merchantName: checkoutSession.plan.soft_descriptor})"></div>\n\n                <div class="disclaimer reviewMsg" ng-if="checkoutSession.displayBankChargeDisclaimer">{{ content(\'memberReview.bankChargeDisclaimer\')}}</div>\n\n                <div class="billingAddressConsent reviewMsg" ng-if="checkoutAppData.flags.billing_address_consent_required">\n                    <p class="disclaimer">{{ content(\'memberReview.billingRequired\') }}\n                        <p>\n                </div>\n\n                <div class="disclaimer reviewMsg" ng-if="!isThirdPartyWalletExperience() && (checkoutSession.plan.isAuthSignupEnabled || showAuthMsg)">\n                    <span class="authMsgContent">{{ content(\'memberReview.authUser\') }}</span> <a ui-sref="checkout.authorizationmessage" class="authUserLink" aria-describedby="authMsgHelp">{{ content(\'memberReview.learnMore\') }}</a>\n                    <span id="authMsgHelp" class="accessAid">{{content(\'authUserLearnMore.authUserTitle\')}}</span>\n                </div>\n\n                <xo-credit-example-uk ng-if="showCreditPlacement() && installment.showCreditExample"/>\n            </form>\n\n        </div>\n\n        <xo-bml-popup ng-if="!isThirdPartyWalletExperience()"></xo-bml-popup>\n\n        <div ng-show="bmlPopupOpen" class="bmlPopup span14">\n            <p>\n                {{ content(\'fundingInstruments.bmlLearnMoreDesc\') }}\n            </p>\n\n            <input type="button" class="btn full primary" value="{{ content(\'fundingInstruments.ok\') }}" ng-click="hideBmlPopup()" />\n        </div>\n\n        <div class="span10" ng-if="!isThirdPartyWalletExperience()">\n\n            <xo-marketing-offers placement-code="\'202003\'"\n                                 token="token"\n                                 page-name="\'HERMES_RYI_PAGE\'"\n                                 title-txt-property="propValueObj.propHeader"\n                                 subtitle-property="propValueObj.propVal"\n                                 background-image= "propValueObj.propImage"\n                                 ng-if="!ryiDesignExp && !isMessengerBAIntegration"\n            >\n            </xo-marketing-offers>\n\n            <xo-marketing-offers token="token"\n                                 page-name="\'HERMES_RYI_PAGE\'"\n                                 title-txt-property="\'ryiDesignExp.propHeader\'"\n                                 subtitle-property="\'ryiDesignExp.propText\'"\n                                 background-image="{{ryiDesignExp.propImage}}"\n                                 ng-if="ryiDesignExp && !isMessengerBAIntegration"\n\n            >\n            </xo-marketing-offers>\n        </div>\n    </div>\n    <div class="reviewTopup" ng-if="checkoutCart.isWalletTokenization()">\n        <div class="topupError" ng-if="topupError">\n            <span class="topupErrorIcon"></span>\n            <span>{{content(\'review.pinError\')}}</span>\n        </div>\n        <xo-title title-txt="Review the details"></xo-title>\n        <div class="topupMsg">{{content(\'review.topup\')}}</div>\n        <xo-review-topup class="fillflex" token="token" pin="pin"></xo-review-topup>\n        <div class="disclaimer reviewMsg" ng-bind-html="content(\'review.topupTokenizedWalletSetupAgreements\', {type: tokenizedWalletInfoModel.brandName(), link: tokenizedWalletInfoModel.getDisclaimerLink()})"></div>\n        <div id="button" class="buttons reviewButton">\n            <input track-submit type="submit" value="{{payButtonText()}}" id="confirmButtonTop"\n                   class="btn full confirmButton continueButton" ng-click="onPay()" />\n        </div>\n    </div>\n    <div ui-view></div>\n    <xo-3ds on-complete-3ds-handler="onComplete3DSHandler" token="token" data="resolve_3ds_data" ng-if="launch3DSResolver"></xo-3ds>\n</section>\n';
    },
    "./components/xo-styles/dist/lib/toggle.less": "./css/app.less",
    "./pages/xo-authorization-message/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$AuthorizationMessageRoute = undefined;
        __webpack_require__("./pages/xo-authorization-message/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $AuthorizationMessageRoute = exports.$AuthorizationMessageRoute = _squid.$ComponentRoute.extend("$AuthorizationMessageRoute", {
            path: "authorizationmessage",
            directive: "xo-authorization-message",
            titleContent: "authUserLearnMore.authUserTitle",
            trackingData: {
                fptiState: "authorizationmessage",
                templateName: "authorizationMessage.dust",
                pageGoal: "Authorization Message",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-authorizationmessage",
                        pagename2: "%::fullpage-authorizationmessage:member:hermes:",
                        version: "member:%:"
                    }
                }
            }
        });
        angular.value("$AuthorizationMessageRoute", $AuthorizationMessageRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-authorization-message/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _template = __webpack_require__("./pages/xo-authorization-message/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoAuthorizationMessageComponent", {
            tag: "xo-authorization-message",
            template: _template2["default"]
        });
        _squid.$Component;
        module.exports = exports["default"];
    },
    "./pages/xo-authorization-message/template.html": function(module, exports) {
        module.exports = '<section class="review" content id="memberReview" form-autofocus>\n\n    <div class="row-fluid justMember">\n        <div class="span14 trayInner reviewSections">\n            <div id="authMsg" tabindex="-1" modal-box aria-labelledby="authUserTitle" aria-describedby="authUserContent1 authUserContent2">\n                <div id="authUserLearnMore" class="trayInner trayInnerDefault">\n                    <h4 id="authUserTitle" class="authUserTitle zeta">{{content(\'authUserLearnMore.authUserTitle\')}}</h4>\n                    <p id="authUserContent1" class="authUserContent">{{content(\'authUserLearnMore.authUserContentPara1\')}}</p>\n                    <p id="authUserContent2" class="authUserContent">{{content(\'authUserLearnMore.authUserContentPara2\')}}</p>\n                </div>\n                <div class="buttons">\n                    <button class="btn authUserBtn full" ui-sref="checkout.review" focus-after-transition=".authUserLink" name="authUserBtn">{{content(\'authUserLearnMore.ok\')}}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n';
    },
    "./pages/xo-add-card/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$AddCardPageRoute = undefined;
        __webpack_require__("./components/xo-wallet-components/src/add-card/route.js");
        __webpack_require__("./pages/xo-add-card/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $AddCardPageRoute = exports.$AddCardPageRoute = _squid.$ComponentRoute.extend("$AddCardPageRoute", {
            path: "pageAddCard",
            directive: "xo-page-add-card-page",
            titleContent: "asideHeader.addCard",
            query: [ "cause", "message" ],
            trackingData: {
                templateName: "addCard.dust",
                pageGoal: "Add Card",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-add-cc",
                        pagename2: "%::fullpage-add-cc:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: [ {
                name: "$AddCardFlowRoute",
                attributes: {
                    token: "token",
                    messagetitle: "messagetitle",
                    message: "message",
                    pagetitle: "pagetitle",
                    "parent-callbacks": "callbacks",
                    logout: "logout",
                    "show-cancel": "showCancel"
                }
            } ]
        });
        angular.value("$AddCardPageRoute", $AddCardPageRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-add-card/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoPageAddCardPageComponent = undefined;
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _template = __webpack_require__("./pages/xo-add-card/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-wallet-components/src/add-card/directive.js");
        __webpack_require__("./components/xo-validation/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
        __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
        __webpack_require__("./components/xo-models/src/fi/lib/fiMessages.js");
        __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index = __webpack_require__("./components/xo-models/src/app/index.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _choice = __webpack_require__("./components/xo-models/src/choice/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoPageAddCardPageComponent = exports.$xoPageAddCardPageComponent = _squid.$Component.extend("$xoPageAddCardPageComponent", {
            tag: "xo-page-add-card-page",
            template: _template2["default"],
            scope: {},
            controller: function controller($scope, $rootScope, $state, $locale, $CheckoutSessionModel, $populate, $stateParams, $CheckoutPayeeModel, $CheckoutCartModel, $AuthModel, $fiMessages) {
                $scope.token = $rootScope.token;
                $scope.locale = $locale;
                var models = {};
                $scope.callbacks = {
                    finish: function finish() {
                        if (models.cart.isWalletTokenization() && models.walletPinModel.isSetupEligible()) {
                            _logger.$logger.debug("pinSetup_required");
                            $state.go("checkout.pinSetup");
                        } else {
                            $state.go("checkout.review");
                        }
                    }
                };
                $populate(models, {
                    checkoutSession: $CheckoutSessionModel.instance($scope.token).retrieve({
                        contingencies: {
                            NEED_CREDIT_CARD: angular.noop,
                            EXPIRED_CREDIT_CARD: angular.noop,
                            NEED_DEBIT_CARD: angular.noop,
                            EXPIRED_DEBIT_CARD: angular.noop
                        }
                    }),
                    payee: $CheckoutPayeeModel.instance($scope.token),
                    cart: $CheckoutCartModel.instance($scope.token),
                    auth: $AuthModel.instance().retrieve()
                }).then(function() {
                    if (models.cart.isWalletTokenization()) {
                        return $populate(models, {
                            walletPinModel: _index.$TokenizedWalletPinModel.instance($scope.token)
                        });
                    } else {
                        return _angular.$q.when();
                    }
                }).then(function() {
                    (0, _squid.$pxp)("xo_hermes_addcard_msg", {
                        "ctx.COUNTRY": $scope.locale.country
                    }, "xo_hermes_addcard_msg_treatment").then(function(result) {
                        var message = $fiMessages.processorDeclinedMsg(models.checkoutSession, false);
                        if (!message && models.checkoutSession.get("errorData.cause") && $stateParams.message !== "NEED_DEBIT_CARD") {
                            if (models.payee.isGambling()) {
                                message = $fiMessages.getGamblingMsg();
                            } else if (result) {
                                message = $fiMessages.getAddCardTreatmentMsg(models.checkoutSession);
                            } else {
                                message = $fiMessages.getAddCardControlMsg(models.checkoutSession);
                            }
                        }
                        $scope.message = undefined;
                        $scope.cart = models.cart;
                        $scope.auth = models.auth;
                        if (message) {
                            $scope.message = {
                                type: message.type,
                                msgs: [ message.msg ]
                            };
                            if (message.title) {
                                $scope.messagetitle = $locale.content.get(message.title.key);
                            }
                        }
                        return _choice.$ChoiceEligibility.instance().getVariant($scope.token).then(function(variant) {
                            var selectFiVariants = _squid.$config.choiceExperiment && _squid.$config.choiceExperiment.selectFi || [];
                            if (selectFiVariants.indexOf(variant) !== -1 && !message) {
                                $scope.showCancel = true;
                                $scope.callbacks.cancel = function() {
                                    $state.go("checkout.selectFi");
                                };
                                $scope.pagetitle = $locale.content.get("addCard.addACard");
                            }
                        });
                    });
                });
                $scope.isUpdateDebitCard = function() {
                    return $stateParams.message === "EXPIRED_DEBIT_CARD";
                };
                $scope.logout = function() {
                    _logger.$logger.info("not_you_logout");
                    if (window.xchild && _squid.$util.isIFrame()) {
                        window.xchild.hide();
                        var url = window.location.href.split("#")[0];
                        var xprops = _extends({}, window.xprops);
                        xprops.url = url;
                        xprops.payment = function() {
                            return $scope.auth.logout().then(function() {
                                return $scope.token;
                            });
                        };
                        return window.ppxo.Checkout.renderPopupTo(window.xchild.getParentRenderWindow(), xprops);
                    }
                    $scope.auth.logout().then(function() {
                        $state.go("checkout.login", {
                            source: "NOT_YOU"
                        });
                    });
                };
            }
        });
        angular.value("$xoPageAddCardPageComponent", $xoPageAddCardPageComponent);
        _angular.$q;
        _index.$TokenizedWalletPinModel;
        _squid.$Component;
        _squid.$config;
        _squid.$pxp;
        _squid.$util;
        _choice.$ChoiceEligibility;
        _logger.$logger;
    },
    "./pages/xo-add-card/template.html": function(module, exports) {
        module.exports = '<section class="addCard" id="addCard" content>\n    <div class="row-fluid" ng-if="!cart.isWalletTokenization()">\n        <div class="span14">\n            <ui-view></ui-view>\n        </div>\n\n        <div class="span10" feature="propValue">\n            <xo-value-props type="addCard" title="{{content(\'memberReview.propHead\')}}" text-content="memberReview.propVal"></xo-value-props>\n        </div>\n\n        <div class="span10" unless-feature="propValue">\n            <xo-value-props type="addCard" title="{{content(\'login.propHeadAlt\')}}" text-content="login.propValAlt"></xo-value-props>\n        </div>\n    </div>\n    <div class="sidepage noSlide" modal-box tabindex="-1" ng-if="cart.isWalletTokenization()">\n        <div class="aside noSlide" id="sidepageAddCard" modal-box>\n            <xo-aside-header heading="{{isUpdateDebitCard() ? \'asideHeader.updateDebitCard\' : \'asideHeader.addDebitCard\'}}"\n                             hidex="true"></xo-aside-header>\n            <div class="content">\n                <ui-view></ui-view>\n            </div>\n        </div>\n    </div>\n</section>\n';
    },
    "./pages/xo-add-fi/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$AddFiPageRoute = undefined;
        __webpack_require__("./components/xo-wallet-components/src/add-card/route.js");
        __webpack_require__("./components/xo-wallet-components/src/add-bank/route.js");
        __webpack_require__("./pages/xo-add-fi/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $AddFiPageRoute = exports.$AddFiPageRoute = _squid.$ComponentRoute.extend("$AddFiPageRoute", {
            path: "pageAddFi",
            directive: "xo-page-add-fi-page",
            query: [ "cause", "message" ],
            titleContent: "addCard.addPaymentMethod",
            trackingData: {
                templateName: "addFi.dust",
                pageGoal: "Add Funding Instrument",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-add-fi",
                        pagename2: "%::fullpage-add-fi:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: [ {
                name: "$AddCardFlowRoute",
                attributes: {
                    token: "token",
                    message: "message",
                    hideparenthead: "hideparenthead",
                    billingaddressupdated: "billingaddressupdated",
                    "parent-callbacks": "callbacks",
                    "page-level": "pageLevel"
                }
            }, {
                name: "$AddBankFlowRoute",
                attributes: {
                    token: "token",
                    message: "message",
                    hideparenthead: "hideparenthead",
                    "parent-callbacks": "callbacks",
                    "page-level": "pageLevel"
                }
            } ]
        });
        angular.value("$AddFiPageRoute", $AddFiPageRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-add-fi/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoPageAddFiPageComponent = undefined;
        var _template = __webpack_require__("./pages/xo-add-fi/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-wallet-components/src/add-card/directive.js");
        __webpack_require__("./components/xo-validation/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
        __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
        __webpack_require__("./components/xo-models/src/checkout/index.js");
        __webpack_require__("./components/xo-models/src/fi/lib/fiMessages.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoPageAddFiPageComponent = exports.$xoPageAddFiPageComponent = _squid.$Component.extend("$xoPageAddFiPageComponent", {
            tag: "xo-page-add-fi-page",
            template: _template2["default"],
            scope: {
                logout: "="
            },
            controller: function controller($scope, $rootScope, $util, $AuthModel, $state, $locale, $CheckoutSessionModel, $populate, $stateParams, $CheckoutPayeeModel, $fiMessages, $logger) {
                $scope.token = $rootScope.token;
                $scope.locale = $locale;
                $scope.billingaddressupdated = {
                    value: false
                };
                $scope.hideparenthead = {
                    toggle: false
                };
                $scope.title = $locale.content.get("addCard.addACard");
                $scope.callbacks = {
                    finish: function finish() {
                        $state.go("checkout.review");
                    },
                    done: function done() {
                        $state.go("checkout.review");
                    }
                };
                var models = {};
                $populate($scope, {
                    auth: $AuthModel.instance(),
                    payee: $CheckoutPayeeModel.instance($scope.token)
                }).then(function() {
                    $scope.logout = function() {
                        $logger.info("not_you_logout");
                        $scope.auth.logout().then(function() {
                            $state.go("checkout.login");
                        });
                    };
                    $scope.showNotYou = $scope.auth && $scope.auth.showNotYou();
                    $populate(models, {
                        checkoutSession: $CheckoutSessionModel.instance($scope.token)
                    }).then(function() {
                        (0, _squid.$pxp)("xo_hermes_addcard_msg", {
                            "ctx.COUNTRY": $scope.locale.country
                        }, "xo_hermes_addcard_msg_treatment").then(function(result) {
                            var message = $fiMessages.processorDeclinedMsg(models.checkoutSession, false);
                            if ($scope.payee.isGambling()) {
                                message = $fiMessages.getGamblingMsg();
                            } else if (result) {
                                message = $fiMessages.getAddCardTreatmentMsg(models.checkoutSession);
                            } else {
                                message = $fiMessages.getAddCardControlMsg(models.checkoutSession);
                            }
                            if (message.msg) {
                                $scope.pageLevel = $scope.pageLevel || {};
                                $scope.pageLevel.message = {
                                    type: message.type,
                                    msgs: [ message.msg ]
                                };
                                $scope.showHiMsg = true;
                                if (message.title) {
                                    $scope.messagetitle = $locale.content.get(message.title.key);
                                }
                            }
                        });
                    });
                });
            }
        });
        angular.value("$xoPageAddFiPageComponent", $xoPageAddFiPageComponent);
        _squid.$Component;
        _squid.$pxp;
    },
    "./pages/xo-add-fi/template.html": function(module, exports) {
        module.exports = '<section class="addFi" id="addFi" content>\n    <div class="row-fluid">\n        <div class="span14">\n            <p class="userEmail" id="reviewUserInfo" ng-if="showHiMsg">\n                {{ content(\'creditcard.hi\', {userName: auth.first_name ? auth.first_name : auth.email}) }}\n                    <span ng-if="showNotYou">\n                        <a track-link="login_with_diff_user" href="" ng-click="logout()" style="font-weight:700;">{{ content(\'memberReview.notYou\')}}</a>\n                    </span>\n            </p>\n            <div class="trayInner trayInnerDefault">\n                <h1 class="gamma noHead" ng-if="!hideparenthead.toggle">\n    \t\t\t\t{{content(\'addCard.addPaymentMethod\')}}\n\t\t\t\t</h1>\n                <xo-message message="pageLevel.message"></xo-message>\n                <ul class="form-tabs" id="paymentTab" ng-if="!hideparenthead.toggle">\n                    <li class="bank" ui-sref-active="active">\n                        <a ui-sref=".bank.add" class="bankTab">{{content(\'bank.bank\')}}</a>\n                    </li>\n                    <li class="card" ui-sref-active="active">\n                        <a ui-sref=".addCardFlow.addCard" class="cardTab" for="cardTab">{{content(\'bank.card\')}}</a>\n                    </li>\n                </ul>\n                <ui-view></ui-view>\n            </div>\n        </div>\n        <div class="span10" feature="propValue">\n            <xo-value-props  type="review" title="{{content(\'memberReview.propHead\')}}" text-content="memberReview.propVal"></xo-value-props>\n        </div>\n\n        <div class="span10" unless-feature="propValue">\n            <xo-value-props type="review" title="{{content(\'login.propHeadAlt\')}}" text-content="login.propValAlt"></xo-value-props>\n        </div>\n    </div>\n</section>\n';
    },
    "./pages/xo-add-card-meft/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$AddCardMeftRoute = undefined;
        __webpack_require__("./components/xo-wallet-components/src/add-card/route.js");
        __webpack_require__("./pages/xo-add-card-meft/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $AddCardMeftRoute = exports.$AddCardMeftRoute = _squid.$ComponentRoute.extend("$AddCardMeftRoute", {
            path: "pageAddCardMeft",
            directive: "xo-page-add-card-meft-page",
            titleContent: "asideHeader.addCard",
            query: [ "message" ],
            trackingData: {
                templateName: "meftDeclineAddCard.dust",
                pageGoal: "Add Card for MEFT Decline",
                buzname: {
                    fullpage: {
                        pagename: "%:de:meft-addcard",
                        pagename2: "%:de:meft-addcard:member:hermes:",
                        hier1: "%de",
                        version: "member:%:",
                        flowname: "%de",
                        subfeature2: "%de"
                    }
                }
            },
            children: [ {
                name: "$AddCardFlowRoute",
                attributes: {
                    token: "token",
                    message: "message",
                    pagetitle: "pagetitle",
                    billingaddressupdated: "billingaddressupdated",
                    showmeftsection: "showmeftsection",
                    "parent-callbacks": "callbacks"
                }
            } ]
        });
        angular.value("$AddCardMeftRoute", $AddCardMeftRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-add-card-meft/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoPageAddCardMeftPageComponent = undefined;
        var _template = __webpack_require__("./pages/xo-add-card-meft/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-models/src/checkout/index.js");
        __webpack_require__("./components/xo-wallet-components/src/add-card/directive.js");
        __webpack_require__("./components/xo-validation/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
        __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoPageAddCardMeftPageComponent = exports.$xoPageAddCardMeftPageComponent = _squid.$Component.extend("$xoPageAddCardMeftPageComponent", {
            tag: "xo-page-add-card-meft-page",
            template: _template2["default"],
            controller: function controller($scope, $rootScope, $state, $CheckoutAppDataModel, $locale, $CheckoutSessionModel) {
                $scope.token = $rootScope.token;
                $scope.locale = $locale;
                $scope.checkoutAppData = $CheckoutAppDataModel.instance($scope.token);
                function populateInfoMessage() {
                    var msg = $locale.content.get("DEMemberGuest.meftDeclinePageErrorMsg");
                    $scope.message = {
                        msgs: [ msg ],
                        type: "info"
                    };
                }
                populateInfoMessage();
                $scope.showmeftsection = {
                    toggle: true
                };
                $scope.useMeft = function() {
                    $scope.checkoutAppData.action("meft", {
                        success: function success(result) {
                            $CheckoutSessionModel.instance($scope.token).reload();
                            $state.go("checkout.review");
                        }
                    });
                };
                $scope.callbacks = {
                    finish: function finish() {
                        $state.go("checkout.review");
                    }
                };
                $scope.billingaddressupdated = {
                    value: false
                };
            }
        });
        angular.value("$xoPageAddCardMeftPageComponent", $xoPageAddCardMeftPageComponent);
        _squid.$Component;
    },
    "./pages/xo-add-card-meft/template.html": function(module, exports) {
        module.exports = '<section class="addCard" id="addCard" content>\n    <div class="row-fluid">\n        <div class="span14">\n            <ui-view></ui-view>\n            <div ng-show="showmeftsection.toggle">\n                <p class="useMeftInstead">{{content (\'DEMemberGuest.useMeftInstead\')}}</p>\n\n                <div>\n                    <a track-link="meft_done" id="submitBtnMeft" href="" class="btn btn-secondary\n                            btn-large full submit" ng-click="useMeft()"\n                       role="button">{{content (\'DEMemberGuest.useMeftBtn\')}}</a>\n                </div>\n            </div>\n        </div>\n        <div class="span10" feature="propValue">\n            <xo-value-props type="addCard" title="{{content(\'memberReview.propHead\')}}" text-content="memberReview.propVal"></xo-value-props>\n        </div>\n\n        <div class="span10" unless-feature="propValue">\n            <xo-value-props type="addCard" title="{{content(\'login.propHeadAlt\')}}" text-content="login.propValAlt"></xo-value-props>\n        </div>\n    </div>\n</section>\n';
    },
    "./pages/xo-add-tax-id/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$AddTaxIdRoute = undefined;
        __webpack_require__("./pages/xo-add-tax-id/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $AddTaxIdRoute = exports.$AddTaxIdRoute = _squid.$ComponentRoute.extend("$AddTaxIdRoute", {
            path: "addTaxId",
            directive: "xo-add-tax-id-page",
            titleContent: "addTaxId.addTaxId",
            query: [ "message" ],
            trackingData: {
                templateName: "addTaxId.dust",
                pageGoal: "Add Tax Id",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-add-tax-id",
                        pagename2: "%::fullpage-add-tax-id:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            loginRequired: true,
            children: []
        });
        angular.value("$AddTaxIdRoute", $AddTaxIdRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-add-tax-id/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _template = __webpack_require__("./pages/xo-add-tax-id/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-form-components/src/add-tax-id/directive.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoAddTaxIdPageComponent", {
            tag: "xo-add-tax-id-page",
            template: _template2["default"],
            lifecycle: {
                enter: function enter() {
                    this.token = _angular.$rootScope.token;
                    this.locale = _squid.$locale;
                    this.finish = function() {
                        _uiRouter.$state.go("checkout.review");
                    };
                }
            }
        });
        _angular.$rootScope;
        _squid.$Component;
        _squid.$locale;
        _uiRouter.$state;
        module.exports = exports["default"];
    },
    "./pages/xo-add-tax-id/template.html": function(module, exports) {
        module.exports = '<section class="addTaxId" id="addTaxId" content>\n    <div class="row-fluid">\n        <div class="span14">\n            <xo-add-tax-id token="token" finish="finish"></xo-add-tax-id>\n        </div>\n\n        <div class="span10" feature="propValue">\n            <xo-value-props type="addTaxId" title="{{content(\'login.propHead\')}}" text-content="login.propVal"></xo-value-props>\n        </div>\n\n        <div class="span10" unless-feature="propValue">\n            <xo-value-props type="addTaxId" title="{{content(\'login.propHeadAlt\')}}" text-content="login.propValAlt"></xo-value-props>\n        </div>\n    </div>\n</section>\n';
    },
    "./components/xo-form-components/src/add-tax-id/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-form-components/src/add-tax-id/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/user/index.js"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            squid.module("xo-add-tax-id.directive", [ "squid", "xomodel.checkout", "xomodel.user", "xo-error-tooltip.directive" ]).directive("xoAddTaxId", function() {
                return {
                    scope: {
                        token: "=",
                        finish: "="
                    },
                    template: template,
                    controller: function controller($scope, $populate, $state, $element, $CheckoutSessionModel, $UserInfoModel, $CheckoutCartModel) {
                        function thenFunction() {
                            var taxIdType = "CPF";
                            if ($scope.checkoutSession.errorData && $scope.checkoutSession.errorData.cause === "NEED_BUSINESS_TAX_INFO_TO_PAY") {
                                taxIdType = "CNPJ";
                            }
                            var issuer = "BR_" + taxIdType;
                            $scope.subType = taxIdType;
                            $scope.userInfo = $UserInfoModel.instance($scope.token);
                            $scope.onSubmit = function() {
                                var unformatted = ($scope.taxId || "").replace(/[^0-9]+/g, "");
                                var data = {
                                    newDocId: {
                                        type: "TAX_ID",
                                        subType: $scope.subType,
                                        issuerCountry: "BR",
                                        issuer: issuer,
                                        value: unformatted,
                                        collectionPoint: "UNKNOWN",
                                        placeOfIssue: "BR"
                                    }
                                };
                                $scope.userInfo.action("addTaxId", {
                                    data: data,
                                    success: function success() {
                                        var checkoutSession = $CheckoutSessionModel.instance($scope.token);
                                        var checkoutCart = $CheckoutCartModel.instance($scope.token);
                                        return checkoutSession.action("create", {
                                            data: {
                                                baToken: checkoutCart.billing && checkoutCart.billing.ba_token
                                            },
                                            success: function success() {
                                                $scope.checkoutSession.errorData = undefined;
                                                $scope.finish();
                                            }
                                        });
                                    },
                                    validation: function validation(validationData) {
                                        var $el = $($element);
                                        var $field = $($el.find('[name="' + validationData.field + '"]'));
                                        $field.addClass("backendError");
                                        $field.attr("aria-invalid", true);
                                        $field.focus();
                                    }
                                });
                            };
                            $scope.changeTaxId = function(newValue) {
                                var unformatted = (newValue || "").replace(/[^0-9]+/g, "");
                                var formatted = "";
                                var i = 0;
                                if ($scope.subType === "CPF") {
                                    for (i = 0; i < unformatted.length; i++) {
                                        if (i === 3 || i === 6) {
                                            formatted = formatted + ".";
                                        }
                                        if (i === 9) {
                                            formatted = formatted + "-";
                                        }
                                        formatted = formatted + unformatted.charAt(i);
                                    }
                                    $scope.taxId = formatted;
                                } else if ($scope.subType === "CNPJ") {
                                    for (i = 0; i < unformatted.length; i++) {
                                        if (i === 2 || i === 5) {
                                            formatted = formatted + ".";
                                        } else if (i === 8) {
                                            formatted = formatted + "/";
                                        } else if (i === 12) {
                                            formatted = formatted + "-";
                                        }
                                        formatted = formatted + unformatted.charAt(i);
                                    }
                                    $scope.taxId = formatted;
                                } else {
                                    $scope.taxId = unformatted;
                                }
                            };
                        }
                        $populate($scope, {
                            checkoutSession: $CheckoutSessionModel.instance($scope.token)
                        }).then(thenFunction());
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-form-components/src/add-tax-id/template.html": function(module, exports) {
        module.exports = '<form id="taxIdForm" name="taxIdForm" class="taxIdForm" content novalidate>\n    <div class="trayInner trayInnerDefault">\n        <div ng-if="subType === \'CNPJ\'">\n            <h3 class="gamma noHead">{{ content(\'addTaxId.addTaxIdCNPJ\') }}</h3>\n            <p>{{ content(\'addTaxId.noteCNPJ\') }}</p>\n\n            <div class="inputField confidential" floating-label>\n                <input id="taxId" name="taxId" maxlength="18" ng-model="$parent.taxId"\n                       xo-error-tooltip required placeholder="{{ content(\'common.taxIdCNPJ_length\') }}"\n                       data-error-key="validation.validCNPJ" ng-change="changeTaxId(taxId)" />\n                <label for="taxId">{{ content(\'addTaxId.cnpj\') }}</label>\n            </div>\n        </div>\n\n        <div ng-if="subType === \'CPF\'">\n            <h3 class="gamma noHead">{{ content(\'addTaxId.addTaxId\') }}</h3>\n            <p>{{ content(\'addTaxId.note\') }}</p>\n\n            <div class="inputField confidential" floating-label>\n                <input id="taxId" name="taxId" maxlength="14" ng-model="$parent.taxId"\n                       xo-error-tooltip required placeholder="{{ content(\'common.taxId_length\') }}"\n                       data-error-key="validation.validCPF" ng-change="changeTaxId(taxId)" />\n                <label for="taxId">{{ content(\'addTaxId.cpf\') }}</label>\n            </div>\n        </div>\n\n        <div class="buttons">\n            <input track-submit type="submit" id="proceedButton" value="{{ content(\'addTaxId.save\') }}" class="btn full btn-large" validate-submit="onSubmit()" />\n        </div>\n    </div>\n</form>\n';
    },
    "./pages/xo-add-shipping/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$AddShippingPageRoute = undefined;
        __webpack_require__("./pages/xo-add-shipping/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $AddShippingPageRoute = exports.$AddShippingPageRoute = _squid.$ComponentRoute.extend("$AddShippingPageRoute", {
            path: "pageAddShipping",
            directive: "xo-page-add-shipping-page",
            titleContent: "addShipping.addAddress",
            query: [ "message" ],
            trackingData: {
                templateName: "addShipping.dust",
                pageGoal: "Add Shipping",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-add-shipping-address-nonXB",
                        pagename2: "%::fullpage-add-shipping-address-nonXB:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: [ {
                name: "$AddShippingRoute",
                attributes: {
                    token: "token",
                    "done-fn": "callbacks.done",
                    sidebar: "sidebar"
                }
            } ]
        });
        angular.value("$AddShippingPageRoute", $AddShippingPageRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-add-shipping/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoPageAddShippingPageComponent = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _template = __webpack_require__("./pages/xo-add-shipping/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-address-components/src/add-address/directive.js");
        __webpack_require__("./components/xo-form-components/src/select-shipping-country/directive.js");
        __webpack_require__("./components/xo-validation/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
        __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoPageAddShippingPageComponent = exports.$xoPageAddShippingPageComponent = _squid.$Component.extend("$xoPageAddShippingPageComponent", {
            tag: "xo-page-add-shipping-page",
            template: _template2["default"],
            controller: function controller($scope, $rootScope, $state, $populate, $feature, $locale, $CheckoutAppDataModel) {
                $scope.token = $rootScope.token;
                $scope.locale = $locale;
                $scope.sidebar = false;
                $scope.callbacks = {
                    done: function done() {
                        $state.go("checkout.review");
                    }
                };
                $populate($scope, {
                    checkoutAppData: $CheckoutAppDataModel.instance($scope.token)
                }).then(function() {
                    var merchantCountry = $scope.checkoutAppData.get("merchant.merchant_country", "US");
                    if (!$feature("supportBlockNonDomesticShipping", false, merchantCountry)) {
                        $state.go("checkout.review");
                    }
                });
            }
        });
        angular.value("$xoPageAddShippingPageComponent", $xoPageAddShippingPageComponent);
        _squid.$Component;
    },
    "./pages/xo-add-shipping/template.html": function(module, exports) {
        module.exports = '<section class="addShipping" id="addShipping" content>\n    <div class="row-fluid">\n\n        <div class="span14">\n            <ui-view></ui-view>\n        </div>\n\n        <div class="span10" feature="propValue">\n            <xo-value-props type="review" title="{{content(\'memberReview.propHead\')}}" text-content="memberReview.propVal"></xo-value-props>\n        </div>\n\n        <div class="span10" unless-feature="propValue">\n            <xo-value-props type="review" title="{{content(\'login.propHeadAlt\')}}" text-content="login.propValAlt"></xo-value-props>\n        </div>\n\n    </div>\n</section>\n';
    },
    "./pages/xo-add-national-id/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$AddNationalIdRoute = undefined;
        __webpack_require__("./pages/xo-add-national-id/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $AddNationalIdRoute = exports.$AddNationalIdRoute = _squid.$ComponentRoute.extend("$AddNationalIdRoute", {
            path: "addNationalId",
            directive: "xo-add-national-id-page",
            titleContent: "addTaxId.nationalityUpdate",
            trackingData: {
                fptiState: "add-national-id",
                buzname: {
                    fullpage: {
                        pagename: "%::add-national-id",
                        pagename2: "%::add-national-id:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: []
        });
        angular.value("$AddNationalIdRoute", $AddNationalIdRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-add-national-id/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoAddNationalIdPageComponent = undefined;
        var _template = __webpack_require__("./pages/xo-add-national-id/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-form-components/src/national-id-input/directive.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoAddNationalIdPageComponent = exports.$xoAddNationalIdPageComponent = _squid.$Component.extend("$xoAddNationalIdPageComponent", {
            tag: "xo-add-national-id-page",
            template: _template2["default"],
            controller: function controller($scope, $rootScope, $state, $locale, $AddKYCModel, $CheckoutSessionModel, $NationalIdModel, $logger) {
                $scope.locale = $locale;
                $scope.user = {
                    country: $locale.country,
                    countryOfResidence: $locale.country
                };
                $scope.validate = function() {
                    $scope.validated = true;
                    return true;
                };
                $scope.onContinue = function() {
                    $scope.nationalIdModel = $NationalIdModel.instance($rootScope.token);
                    $scope.checkoutSession = $CheckoutSessionModel.instance($rootScope.token);
                    $scope.addKYC = new $AddKYCModel({
                        token: $rootScope.token
                    });
                    $scope.KYCData = {
                        nationalIdModel: $scope.nationalIdModel,
                        user: $scope.user
                    };
                    $scope.addKYC.save({
                        data: $scope.KYCData,
                        success: function success() {
                            $state.go("checkout.review");
                        },
                        contingencies: {
                            DEFAULT: function DEFAULT(err, message) {
                                $logger.info("add_KYC_contingency", {
                                    name: err,
                                    message: message
                                });
                            }
                        },
                        validation: function validation(res) {}
                    });
                };
            }
        });
        angular.value("$xoAddNationalIdPageComponent", $xoAddNationalIdPageComponent);
        _squid.$Component;
    },
    "./pages/xo-add-national-id/template.html": function(module, exports) {
        module.exports = '<section class="addNationalId" id="addNationalId" content>\n    <div class="row-fluid">\n        <div class="span14 trayInner reviewSections">\n            <p>\n                {{ content(\'creditcard.hi\', {userName: auth.first_name ? auth.first_name : auth.email}) }}\n                <span ng-if="auth.is_auth_api_call">\n                    <a track-link="login_with_diff_user" href="" ng-click="logout()">{{ content(\'memberReview.notYou\')}}</a>\n                </span>\n            </p>\n\n            <div class="trayInner trayInnerDefault">\n                <h1 class="gamma noHead" ng-if="!hideparenthead.toggle">\n                    {{ content( \'addTaxId.nationalityUpdate\' ) }}\n                </h1>\n                <p>\n                    {{ content( \'addTaxId.nationalityNote\' ) }}\n                </p>\n                <ui-view></ui-view>\n            </div>\n\n            <form id="addNationalIdForm" name="addNationalIdForm" ng-submit="addNationalIdForm.$valid && onContinue()" ng-class="{\'validated\': validated}" novalidate>\n                <xo-national-id-input country={{locale.country}} user="user"></xo-national-id-input>\n\n                <div class="buttons">\n                    <input track-submit id="nationalIdSubmit" type="submit" value="{{ content( \'common.agreeAndContinue\' ) }}" ng-click="validate()" class="btn full signupFlowSubmit"/>\n                </div>\n            </form>\n        </div>\n\n        <div class="span10" feature="propValue">\n            <xo-value-props  type="review" title="{{content(\'memberReview.propHead\')}}" text-content="memberReview.propVal"></xo-value-props>\n        </div>\n\n        <div class="span10" unless-feature="propValue">\n            <xo-value-props type="review" title="{{content(\'login.propHeadAlt\')}}" text-content="login.propValAlt"></xo-value-props>\n        </div>\n    </div>\n</section>\n';
    },
    "./components/xo-form-components/src/national-id-input/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            __webpack_require__("./components/xo-ui-components/src/directionality/directive.js");
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-form-components/src/national-id-input/template.html"), __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js"), __webpack_require__("./components/xo-form-components/src/dob-input/directive.js"), __webpack_require__("./components/xo-models/src/checkout/index.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-national-id-input.directive", [ "squid", "xo-tooltip.directive", "xo-dob-input.directive", "xomodel.checkout" ]).directive("brIdValidations", function() {
                    return {
                        require: "ngModel",
                        link: function link(scope, element, attr, ctrl) {
                            scope.cpfValidator = function cpfValidator(ngModelValue) {
                                var value = ngModelValue.replace(/[^0-9]/gi, "");
                                var len = value.length;
                                if (len !== 11) {
                                    ctrl.$setValidity("nationalId", false);
                                    return ngModelValue;
                                }
                                var x = value.match(/\b(\d)\1+\b/);
                                if (x) {
                                    ctrl.$setValidity("nationalId", false);
                                    return ngModelValue;
                                }
                                var v1 = 0;
                                var v2 = 0;
                                var dv1;
                                var dv2;
                                var i;
                                var j;
                                for (i = 0, j = 10; i < 9, j > 1; i++, j--) {
                                    v1 += j * +value[i];
                                }
                                v1 = v1 % 11;
                                dv1 = 11 - v1 < 10 ? 11 - v1 : 0;
                                for (i = 0, j = 11; i < 9, j > 2; i++, j--) {
                                    v2 += j * +value[i];
                                }
                                v2 += dv1 * 2;
                                v2 = v2 % 11;
                                dv2 = 11 - v2 < 10 ? 11 - v2 : 0;
                                scope.isValid = dv1 === parseInt(value[9], 10) && dv2 === parseInt(value[10], 10);
                                ctrl.$setValidity("nationalId", scope.isValid);
                                return ngModelValue;
                            };
                            ctrl.$parsers.push(scope.cpfValidator);
                        }
                    };
                }).directive("sgIdValidations", function() {
                    return {
                        require: "ngModel",
                        link: function link(scope, element, attr, ctrl) {
                            scope.nricFinValidator = function nricFinValidator(ngModelValue) {
                                var idType = scope.$parent.nationalIdModel.nationalId.type;
                                if (idType === "NATIONAL_ID") {
                                    scope.isValid = false;
                                    if (ngModelValue.match(/^[S|T|G|F]\d{7}$/gi)) {
                                        scope.isValid = true;
                                    }
                                } else {
                                    scope.isValid = true;
                                }
                                ctrl.$setValidity("nationalId", scope.isValid);
                                return ngModelValue;
                            };
                            ctrl.$parsers.push(scope.nricFinValidator);
                        }
                    };
                }).directive("ruIdValidations", function() {
                    return {
                        require: "ngModel",
                        link: function link(scope, element, attr, ctrl) {
                            function validateSNILSChunk(sum, checksum) {
                                if (sum < 100 && sum === checksum) {
                                    return true;
                                } else if ((sum === 100 || sum === 101) && checksum === 0) {
                                    return true;
                                } else if (sum > 101) {
                                    var remainder = sum % 101;
                                    return validateSNILSChunk(remainder, checksum);
                                }
                                return false;
                            }
                            function validateSNILS(value) {
                                if (value.length === 11) {
                                    if (Number(value) > 1001998) {
                                        var snilsNumber = value.substring(0, 9);
                                        var checksum = Number(value.substring(9));
                                        var sum = 0;
                                        var multiplier = 1;
                                        for (var i = snilsNumber.length - 1; i >= 0; i--) {
                                            sum = sum + Number(snilsNumber.charAt(i)) * multiplier;
                                            multiplier++;
                                        }
                                        return validateSNILSChunk(sum, checksum);
                                    }
                                    return true;
                                }
                                return false;
                            }
                            function validateINNChecksum(value, factor, valueLength, match) {
                                var n;
                                var sumn = 0;
                                for (var i = 0; i < valueLength; i++) {
                                    sumn = sumn + Number(value[i]) * Number(factor[i]);
                                }
                                n = sumn % 11;
                                n = n === 10 ? 0 : n;
                                if (n !== Number(match)) {
                                    return false;
                                }
                                return true;
                            }
                            function validateINN(value) {
                                if (value.length === 12) {
                                    var factor = [ 7, 2, 4, 10, 3, 5, 9, 4, 6, 8 ];
                                    if (!validateINNChecksum(value, factor, value.length - 2, value[10])) {
                                        return false;
                                    }
                                    factor.unshift(3);
                                    if (!validateINNChecksum(value, factor, value.length - 1, value[11])) {
                                        return false;
                                    }
                                    return true;
                                }
                                return false;
                            }
                            function validateOMS(value) {
                                if (value.length >= 11 && value.length <= 16) {
                                    return true;
                                }
                                return false;
                            }
                            scope.idValidator = function idValidator(ngModelValue) {
                                var value = ngModelValue.replace(/[^0-9]/gi, "");
                                var secondaryType = scope.nationalIdModel.secondaryIdType;
                                if (secondaryType === "SNILS") {
                                    scope.isValid = validateSNILS(value);
                                } else if (secondaryType === "INN") {
                                    scope.isValid = validateINN(value);
                                } else if (secondaryType === "OMS") {
                                    scope.isValid = validateOMS(value);
                                }
                                ctrl.$setValidity("secondaryId", scope.isValid);
                                return ngModelValue;
                            };
                            ctrl.$parsers.push(scope.idValidator);
                        }
                    };
                }).directive("xoNationalIdInput", function() {
                    return {
                        template: template,
                        scope: {
                            user: "=",
                            country: "@"
                        },
                        link: function link(scope, element, attr) {
                            var passportMask = "0000000000";
                            element.on("keyup", function(event) {
                                if (scope.user.countryOfResidence === "RU") {
                                    $("#nationalId").mask(passportMask, {
                                        translation: {
                                            0: {
                                                pattern: /[0-9]/
                                            }
                                        }
                                    });
                                } else {
                                    $("#nationalId").unmask(passportMask);
                                }
                            });
                        },
                        controller: function controller($scope, $feature, $locale, $rootScope, $CheckoutCartModel, $NationalIdModel, $util) {
                            $scope.nationalIdModel = $NationalIdModel.instance($rootScope.token);
                            $scope.checkoutCart = $CheckoutCartModel.instance($rootScope.token);
                            $scope.user = $scope.user || {};
                            $scope.user.countryOfResidence = $scope.user.countryOfResidence || $scope.country;
                            $scope.formattedValues = {};
                            $scope.showNationalIdFields = false;
                            if ($scope.checkoutCart.payer && $scope.checkoutCart.payer.tax_id) {
                                $scope.nationalIdModel.nationalId.value = $scope.checkoutCart.payer.tax_id;
                            }
                            $scope.countryChanged = function() {
                                if ($scope.user.countryOfResidence === "RU") {
                                    $scope.showNationalIdFields = true;
                                    $scope.minLengthNatId = 10;
                                    $scope.maxLengthNatId = 10;
                                } else {
                                    $scope.showNationalIdFields = false;
                                    $scope.minLengthNatId = 6;
                                    $scope.maxLengthNatId = 15;
                                }
                            };
                            $scope.cpfMasking = function(newValue) {
                                if (newValue) {
                                    var unformatted = newValue.replace(/[^0-9]/gi, "");
                                    var formatted = [ [ "", unformatted.slice(0, 3) ], [ ".", unformatted.slice(3, 6) ], [ ".", unformatted.slice(6, 9) ], [ "-", unformatted.slice(9) ] ].map(function(x) {
                                        return x[1] && x[0] + x[1] || "";
                                    }).join("");
                                    $scope.formattedValues.nationalId = formatted;
                                    $scope.nationalIdModel.nationalId.value = unformatted;
                                } else {
                                    $scope.nationalIdModel.nationalId.value = "";
                                }
                            };
                            $scope.secondaryIdFormatting = function() {
                                var $el = $("#idValue");
                                if ($scope.nationalIdModel.secondaryIdType === "SNILS" && $el.length > 0) {
                                    var unformatted = $el.val().replace(/[^0-9]/gi, "");
                                    var formatted = [ [ "", unformatted.slice(0, 3) ], [ "-", unformatted.slice(3, 6) ], [ "-", unformatted.slice(6, 9) ], [ " ", unformatted.slice(9) ] ].map(function(x) {
                                        return x[1] && x[0] + x[1] || "";
                                    }).join("");
                                    $scope.nationalIdModel.secondaryIdValue = formatted;
                                }
                            };
                            $scope.secondaryIdChange = function() {
                                var currentSecondaryId = $scope.secondaryIds[$scope.nationalIdModel.secondaryIdType];
                                $scope.nationalIdModel.secondaryIdValue = "";
                                $scope.maxLength = currentSecondaryId.length;
                                $scope.minLength = currentSecondaryId.minlength ? currentSecondaryId.minlength : currentSecondaryId.length;
                                $scope.maskCharLength = currentSecondaryId.maskCharLength ? currentSecondaryId.maskCharLength : 0;
                            };
                            $scope.sgIdChange = function() {
                                $scope.nationalIdModel.nationalId.value = "";
                            };
                            function setLocalizedNatIDLabels() {
                                $scope.nationalIds = {
                                    PASSPORT: {
                                        name: "PASSPORT_NUMBER",
                                        value: $locale.content.addTaxId.passport
                                    }
                                };
                                if ($locale.country !== "KR") {
                                    $scope.nationalIds.NATID = {
                                        name: "NATIONAL_ID",
                                        value: $locale.content.addTaxId.natid
                                    };
                                }
                                if ($locale.country === "HK" && $feature("driverLicenseToTempNationalID", false, $locale.country)) {
                                    $scope.nationalIds.TNID = {
                                        name: "TEMPORARY_NATIONAL_ID",
                                        value: $locale.content.addTaxId.tnid
                                    };
                                } else {
                                    $scope.nationalIds.DL = {
                                        name: "DRIVERS_LICENSE",
                                        value: $locale.content.addTaxId.dl
                                    };
                                }
                            }
                            function setLocalizedRUContent() {
                                $scope.countries = $locale.metadata.territory;
                                $scope.secondaryIds = {
                                    INN: {
                                        name: "INN",
                                        value: $locale.content.addTaxId.INN,
                                        length: 12
                                    },
                                    SNILS: {
                                        name: "SNILS",
                                        value: $locale.content.addTaxId.SNILS,
                                        length: 14,
                                        maskCharLength: 3
                                    },
                                    OMS: {
                                        name: "OMS",
                                        value: $locale.content.addTaxId.OMS,
                                        length: 16,
                                        minlength: 11
                                    }
                                };
                            }
                            if ($locale.country === "BR") {
                                $scope.nationalIdModel.nationalId.type = "TAX_ID";
                                $scope.nationalIdModel.nationalId.subType = "CPF";
                                $scope.cpfMasking($scope.nationalIdModel.nationalId.value);
                            } else if ($scope.country === "RU") {
                                setLocalizedRUContent();
                                $scope.nationalIdModel.nationalId.type = "PASSPORT";
                                $scope.nationalIdModel.nationalId.subType = "";
                                $scope.user.nativeName = $scope.user.nativeName || {};
                                if (!$scope.nationalIdModel.secondaryIdType) {
                                    $scope.nationalIdModel.secondaryIdType = $scope.secondaryIds.INN.name;
                                }
                                $scope.secondaryIdChange();
                                $scope.countryChanged();
                            } else if ($scope.country === "KR") {
                                $scope.nationalIds = {
                                    PASSPORT: {
                                        name: "PASSPORT_NUMBER",
                                        value: $locale.content.addTaxId.passport
                                    },
                                    DL: {
                                        name: "DRIVERS_LICENSE",
                                        value: $locale.content.addTaxId.dl
                                    }
                                };
                                $scope.nationalIdModel.nationalId.type = "PASSPORT_NUMBER";
                                $scope.nationalIdModel.nationalId.subType = "";
                            } else {
                                setLocalizedNatIDLabels();
                                $scope.nationalIdModel.nationalId.type = "NATIONAL_ID";
                                $scope.nationalIdModel.nationalId.subType = "";
                            }
                            $scope.$on("contentChange", function() {
                                setLocalizedNatIDLabels();
                                if ($scope.country === "RU") {
                                    setLocalizedRUContent();
                                }
                            });
                        }
                    };
                }).factory("$NationalIdModel", function($Model) {
                    return $Model.extend("NationalIdModel", {
                        init: function init() {
                            this._super.init.apply(this);
                            this.nationalId = this.nationalId || {};
                        },
                        serialize: function serialize() {
                            return this.nationalId;
                        }
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-form-components/src/national-id-input", "components/xo-form-components/src/national-id-input/directive.js");
    },
    "../node_modules/noop-loader/index.js!./components/xo-form-components/src/national-id-input/template.html": function(module, exports) {
        module.exports = '<div id="nationalIdFields" class="clearfix" content>\n    <div class="bankField restricted">\n        <div ng-switch="country">\n            <div ng-switch-when="SG">\n                <div class="dropdown nationalID fidobDay inputField" floating-label-dropdown>\n                    <select xo-dropdown name="idType"\n                            ng-model="nationalIdModel.nationalId.type"\n                            id="idType"\n                            ng-change="sgIdChange()"\n                            aria-required="true">\n                        <option ng-repeat="items in nationalIds" value="{{items.name}}" ng-selected="nationalIdModel.nationalId.type===\'{{items.name}}\'">{{items.value}}</option>\n                    </select>\n                    <label for="idType">{{content(\'signupAccountCreation.idType\')}}</label>\n                </div>\n\n                <div class="inputField nationalIDValue" floating-label directionality>\n                    <input ng-model="nationalIdModel.nationalId.value"\n                           name="idValue"\n                           id="idValue"\n                           class="additionalIDBox"\n                           value=""\n                           autocapitalize="off"\n                           aria-required="true"\n                           autocomplete="off"\n                           valid-letters="data.validLetters"\n                           sg-id-validations\n                           required/>\n                    <label for="idValue">{{content(\'signupAccountCreation.idNumber\')}}</label>\n                </div>\n            </div>\n\n            <div ng-switch-when="BR">\n\n                <div class="inputField confidential nationalId" floating-label directionality>\n                    <input ng-model="formattedValues.nationalId"\n                           name="nationalId"\n                           id="nationalId"\n                           value=""\n                           autocapitalize="off"\n                           aria-required="true"\n                           autocomplete="off"\n                           xo-error-tooltip\n                           br-id-validations\n                           maxlength="14"\n                           ng-change="cpfMasking(formattedValues.nationalId)"\n                           required/>\n                    <label for="nationalId">{{content(\'addTaxId.cpf\')}}</label>\n                </div>\n\n            </div>\n\n            <div ng-switch-when="KR">\n\n                <div class="dropdown nationalID fidobDay inputField" floating-label-dropdown>\n                    <select xo-dropdown name="idType"\n                            ng-model="nationalIdModel.nationalId.type"\n                            id="idType"\n                            aria-required="false">\n                        <option ng-repeat="items in nationalIds" value="{{items.name}}" ng-selected="nationalIdModel.nationalId.type===\'{{items.name}}\'">{{items.value}}</option>\n                    </select>\n                    <label for="idType">{{content(\'signupAccountCreation.idType\')}}</label>\n                </div>\n\n                <div class="inputField nationalIDValue" floating-label directionality>\n                    <input ng-model="nationalIdModel.nationalId.value"\n                           name="idValue"\n                           id="idValue"\n                           class="additionalIDBox"\n                           value=""\n                           autocapitalize="off"\n                           aria-required="false"\n                           autocomplete="off"/>\n                    <label for="idValue">{{content(\'signupAccountCreation.idNumber\')}}</label>\n                </div>\n\n            </div>\n\n            <div ng-switch-when="RU">\n\n                <div class="nationalId">\n                    <div class="dropdown confidential country clearfix inputField" floating-label-dropdown>\n                        <select xo-dropdown name="country" ng-model="user.countryOfResidence" id="country"\n                                        aria-labelledby="countryLabel" ng-change="countryChanged()" xo-error-tooltip required>\n                            <option ng-repeat="country in countries" value="{{country.code}}" ng-selected="user.countryOfResidence === country.code">{{country.name}}</option>\n                        </select>\n                        <label for="country" id="countryLabel">{{content(\'common.country\')}}</label>\n                    </div>\n\n                    <div ng-if="showNationalIdFields">\n                        <xo-name-input user="user.nativeName"></xo-name-input>\n\n                        <div class="inputField confidential full" floating-label directionality>\n                            <input ng-model="user.nativeName.middle_name"\n                                   name="middleName"\n                                   id="middleName"\n                                   value=""\n                                   autocapitalize="off"\n                                   aria-required="true"\n                                   autocomplete="off"\n                                   required />\n                            <label for="middleName" id="middleNameLabel">{{content(\'common.middleName\')}}</label>\n                        </div>\n                    </div>\n\n                    <div class="inputField full" floating-label directionality>\n                        <input ng-model="nationalIdModel.nationalId.value"\n                                name="nationalId"\n                                id="nationalId"\n                                value=""\n                                autocapitalize="off"\n                                aria-required="true"\n                                autocomplete="off"\n                                minlength="{{minLengthNatId}}"\n                                maxlength="{{maxLengthNatId}}"\n                                placeholder="{{user.countryOfResidence === \'RU\' && content(\'addTaxId.passportRU\') || content(\'addTaxId.passportEN\')}}"\n                                xo-validation=\'{"validator": "validRUPassport"}\'\n                                xo-error-tooltip\n                                required />\n\n                        <label for="nationalId">{{content(\'addTaxId.passport\')}}</label>\n                    </div>\n\n                    <xo-dob-input user="user"></xo-dob-input>\n\n                    <div ng-if="showNationalIdFields">\n                        <legend class="fieldLegend" for="additionalId">{{content(\'addTaxId.additionalInfo\')}}\n                            <div class="additionalIdHelper">\n                                <a href="#" id="verifyHelpAdditionalId" alt="Why do we need this" class="verifyHelp"></a>\n                            </div>\n                            <div class="lineSpacing">\n                                <xo-tooltip trigger="#verifyHelpAdditionalId">\n                                    <div class="tip tipDesc">\n                                        {{content(\'addTaxId.additionalInfoNote\')}}\n                                    </div>\n                                </xo-tooltip>\n                            </div>\n                        </legend>\n\n                        <div id="additionalId">\n                            <div class="dropdown inputField" floating-label-dropdown>\n                                <select xo-dropdown name="idType"\n                                        ng-model="nationalIdModel.secondaryIdType"\n                                        id="idType"\n                                        aria-label="{{ content(\'signup.accountCreationGuest.dobDay\') }}"\n                                        ng-change="secondaryIdChange()"\n                                        aria-required="true">\n                                    <option ng-repeat="items in secondaryIds" value="{{items.name}}" ng-selected="nationalIdModel.secondaryIdType===\'{{items.name}}\'">{{items.value}}</option>\n                                </select>\n                                <label for="idType">{{content(\'signupAccountCreation.idType\')}}</label>\n                            </div>\n\n                            <div class="inputField" floating-label directionality>\n                                <input ng-model="nationalIdModel.secondaryIdValue"\n                                       name="idValue"\n                                       id="idValue"\n                                       value=""\n                                       maxlength="{{maxLength}}"\n                                       minlength="{{minLength}}"\n                                       autocapitalize="off"\n                                       aria-required="true"\n                                       autocomplete="off"\n                                       placeholder="{{(maxLength - maskCharLength)}} {{content(\'addTaxId.digits\')}}"\n                                       required\n                                       ru-id-validations\n                                       ng-change="secondaryIdFormatting()"/>\n                                <label for="idValue">{{content(\'signupAccountCreation.idNumber\')}}</label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div ng-switch-default>\n              <div class="dropdown nationalID fidobDay inputField" floating-label-dropdown>\n                  <select xo-dropdown name="idType"\n                          ng-model="nationalIdModel.nationalId.type"\n                          id="idType"\n                          aria-required="true">\n                      <option ng-repeat="items in nationalIds" value="{{items.name}}" ng-selected="nationalIdModel.nationalId.type===\'{{items.name}}\'">{{items.value}}</option>\n                  </select>\n                  <label for="idType">{{content(\'signupAccountCreation.idType\')}}</label>\n              </div>\n\n              <div class="inputField nationalIDValue" floating-label directionality>\n                  <input ng-model="nationalIdModel.nationalId.value"\n                         name="idValue"\n                         id="idValue"\n                         class="additionalIDBox"\n                         value=""\n                         autocapitalize="off"\n                         aria-required="true"\n                         autocomplete="off"\n                         required/>\n                  <label for="idValue">{{content(\'signupAccountCreation.idNumber\')}}</label>\n              </div>\n            </div>\n        </div>\n    </div>\n</div>\n';
    },
    "./components/xo-form-components/src/dob-input/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        __webpack_require__("./components/xo-ui-components/src/directionality/directive.js");
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-form-components/src/dob-input/template.html") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            squid.module("xo-dob-input.directive", [ "squid" ]).directive("dobValidation", function() {
                return {
                    require: "ngModel",
                    link: function link(scope, element, attr, ctrl) {
                        scope.isValidDate = true;
                        scope.isValidAge = true;
                        scope.isValid = false;
                        scope.dobToolTip = "hide";
                        function isValidDate(year, month, day) {
                            var date = new Date(year, month, day);
                            var fullYear = date.getFullYear();
                            var dateMonth = date.getMonth();
                            var dateDay = date.getDate();
                            var now = new Date();
                            if (fullYear > now.getFullYear() || fullYear < 1900) {
                                return false;
                            }
                            if (fullYear === parseInt(year, 10) && dateMonth === parseInt(month, 10) && dateDay === parseInt(day, 10)) {
                                return true;
                            }
                            return false;
                        }
                        function isOfLegalAge(birthDate) {
                            var tempDate = new Date(birthDate.getFullYear() + 18, birthDate.getMonth(), birthDate.getDate());
                            return tempDate <= new Date().setHours(0, 0, 0, 0);
                        }
                        function parseDob(inputVal) {
                            var day;
                            var month;
                            var year;
                            var sep = scope.dateSeparator();
                            var partsArr = inputVal.split(sep);
                            var first = partsArr[0];
                            var sec = partsArr[1];
                            var third = partsArr[2];
                            if (scope.dateFormat() === "DMY") {
                                day = first;
                                month = sec;
                                year = third;
                            } else if (scope.dateFormat() === "YMD") {
                                year = first;
                                month = sec;
                                day = third;
                            } else {
                                month = first;
                                day = sec;
                                year = third;
                            }
                            var dayLen = ("" + day).length;
                            var monLen = ("" + month).length;
                            var yrLen = ("" + year).length;
                            var validDay = dayLen === 1 || dayLen === 2;
                            var validMon = monLen === 1 || monLen === 2;
                            var validYr = yrLen === 4;
                            var requirement = validDay && validMon && validYr;
                            if (requirement) {
                                scope.isValidDate = isValidDate(year, month - 1, day);
                                scope.isValidAge = isOfLegalAge(new Date(year, month - 1, day));
                                scope.isValid = scope.isValidDate && scope.isValidAge;
                                scope.dobToolTip = scope.isValid ? "hide" : "show";
                                scope.user.dob_day = day;
                                scope.user.dob_month = month;
                                scope.user.dob_year = year;
                            } else {
                                scope.isValid = false;
                            }
                            ctrl.$setValidity("dobText", scope.isValid);
                            return inputVal;
                        }
                        scope.dobValidator = function dobValidator(ngModelValue) {
                            var input = element;
                            var dateMask = scope.dateMask();
                            input.mask(dateMask, {
                                translation: {
                                    Z: {
                                        pattern: /[0-9]/,
                                        optional: true
                                    },
                                    "0": {
                                        pattern: /[0-9]/,
                                        optional: false
                                    }
                                },
                                onComplete: function onComplete(val) {
                                    ngModelValue = val;
                                    return parseDob(ngModelValue);
                                }
                            });
                            return parseDob(ngModelValue);
                        };
                        scope.dobTester = function dobTester(val) {
                            return parseDob(val);
                        };
                        ctrl.$parsers.push(scope.dobValidator);
                    }
                };
            }).directive("xoDobInput", function() {
                return {
                    template: template,
                    restrict: "E",
                    scope: {
                        user: "="
                    },
                    controller: function controller($scope, $locale) {
                        var DateManager = {
                            dateSeparator: undefined,
                            dateFormat: undefined,
                            griffinDateEntry: undefined,
                            _init_: function _init_() {
                                this.griffinDateEntry = $locale.metadata.dateEntry;
                                this.dateSeparator = this.getDateSeparator(this.griffinDateEntry);
                                this.dateFormat = undefined;
                                this.dateFormat = this.getDateFormat();
                                this.dateRegex = this.getDateRegex();
                                $scope.dateFormat = this.getDateFormat.bind(this);
                                $scope.dateSeparator = this.getDateSeparator.bind(this, this.griffinDateEntry);
                                $scope.dateMask = this.getDateMask.bind(this, this.dateSeparator);
                            },
                            getDateFormat: function getDateFormat() {
                                if (this.dateFormat) {
                                    return this.dateFormat;
                                }
                                var griffinDateFormat = $locale.metadata.dateFormat.toUpperCase();
                                var dateFormatComponents = griffinDateFormat.split(this.dateSeparator);
                                var dIdx = dateFormatComponents.indexOf("DD"), mIdx = dateFormatComponents.indexOf("MM");
                                var formatComponentMap = this.getFormatComponentIdxMappings();
                                if (formatComponentMap["DMY"].day === dIdx && formatComponentMap["DMY"].month === mIdx) {
                                    return "DMY";
                                } else if (formatComponentMap["MDY"].day === dIdx && formatComponentMap["MDY"].month === mIdx) {
                                    return "MDY";
                                }
                                return "YMD";
                            },
                            setDobTextPlaceHolder: function setDobTextPlaceHolder() {
                                $scope.dobTextPlaceholder = this.griffinDateEntry.toUpperCase();
                            },
                            dobTextKeyupHandler: function dobTextKeyupHandler(event) {
                                this.updateDobBindings(true);
                            },
                            updateDobBindings: function updateDobBindings(change) {
                                var cleanedDob = ($scope.dob.value || "").replace(this.dateRegex, "");
                                $scope.dob.value = cleanedDob;
                                if (change) {
                                    $scope.dob.value = $("#dobText").val();
                                }
                            },
                            getDateRegex: function getDateRegex() {
                                var escapedRegexChars = [ ".", "$", "^", "{", "[", "(", "|", ")", "*", "+", "?", "\\" ];
                                var sep = this.dateSeparator;
                                var assembledRegex = "[^0-9" + (escapedRegexChars.indexOf(sep) !== -1 ? "\\" + sep : sep) + "]";
                                return new RegExp(assembledRegex, "gi");
                            },
                            getDateMask: function getDateMask(dateSeparator) {
                                var dateFormat = this.dateFormat;
                                if (dateFormat === "DMY" || dateFormat === "MDY") {
                                    return "0Z" + dateSeparator + "0Z" + dateSeparator + "0000";
                                }
                                return "0000" + dateSeparator + "0Z" + dateSeparator + "0Z";
                            },
                            getDateSeparator: function getDateSeparator(dateEntry) {
                                var ret = "";
                                this.getDateSeparators().forEach(function(ele, iter) {
                                    if (dateEntry.indexOf(ele) !== -1) {
                                        ret = ele;
                                    }
                                });
                                return ret;
                            },
                            getDateSeparators: function getDateSeparators() {
                                return [ "-", ".", "/" ];
                            },
                            updateDateInputForFormat: function updateDateInputForFormat(oldFormat, newFormat, oldSeparator) {
                                var curDateVal = $scope.dob.value || "";
                                if (curDateVal.length < 8) {
                                    $scope.dob.value = "";
                                    return;
                                }
                                var formatComponentIdxMappings = this.getFormatComponentIdxMappings(), oldFormatIdxMapping = formatComponentIdxMappings[oldFormat], newFormatIdxMapping = formatComponentIdxMappings[newFormat];
                                var oldDateComponents = curDateVal.split(oldSeparator), newDateComponents = [ "", "", "" ];
                                newDateComponents[newFormatIdxMapping.day] = oldDateComponents[oldFormatIdxMapping.day];
                                newDateComponents[newFormatIdxMapping.month] = oldDateComponents[oldFormatIdxMapping.month];
                                newDateComponents[newFormatIdxMapping.year] = oldDateComponents[oldFormatIdxMapping.year];
                                $scope.dob.value = newDateComponents.join(this.dateSeparator);
                            },
                            getFormatComponentIdxMappings: function getFormatComponentIdxMappings() {
                                return {
                                    DMY: {
                                        day: 0,
                                        month: 1,
                                        year: 2
                                    },
                                    MDY: {
                                        day: 1,
                                        month: 0,
                                        year: 2
                                    },
                                    YMD: {
                                        day: 2,
                                        month: 1,
                                        year: 0
                                    }
                                };
                            },
                            prefillFetchedDob: function prefillFetchedDob() {
                                if ($scope.user && $scope.user.dob_day && $scope.user.dob_month && $scope.user.dob_year) {
                                    if (!$scope.dob) {
                                        $scope.dob = {};
                                    }
                                    if (this.dateFormat === "DMY") {
                                        $scope.dob.value = $scope.user.dob_day + this.dateSeparator + $scope.user.dob_month + this.dateSeparator + $scope.user.dob_year;
                                    } else if (this.dateFormat === "YMD") {
                                        $scope.dob.value = $scope.user.dob_year + this.dateSeparator + $scope.user.dob_month + this.dateSeparator + $scope.user.dob_day;
                                    } else {
                                        $scope.dob.value = $scope.user.dob_month + this.dateSeparator + $scope.user.dob_day + this.dateSeparator + $scope.user.dob_year;
                                    }
                                } else {
                                    $scope.dob = {
                                        value: ""
                                    };
                                }
                            }
                        };
                        DateManager._init_();
                        DateManager.setDobTextPlaceHolder();
                        DateManager.prefillFetchedDob();
                        $scope.onDobTextKeyup = function(event) {
                            DateManager.dobTextKeyupHandler(event);
                        };
                        $scope.$on("localeChange", function() {
                            var oldDateFormat = DateManager.dateFormat;
                            var oldSeparator = DateManager.dateSeparator;
                            DateManager._init_();
                            DateManager.updateDateInputForFormat(oldDateFormat, DateManager.dateFormat, oldSeparator);
                            DateManager.updateDobBindings(false);
                            DateManager.setDobTextPlaceHolder();
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-form-components/src/dob-input/template.html": function(module, exports) {
        module.exports = '<div id="dobComp" class="dobbank" ng-class="{dobTXT: dobInputType()===\'TXT\'}" content>\n    <div class="dobField full inputField last-child" floating-label directionality>\n        <input ng-model="dob.value"\n               name="dobText"\n               id="dobText"\n               value=""\n               maxlength="10"\n               autocapitalize="off"\n               aria-required="true"\n               autocomplete="off"\n               placeholder="{{ dobTextPlaceholder }}"\n               xo-error-tooltip\n               dob-validation\n               ng-keyup="onDobTextKeyup($event)"\n               required />\n        <div ng-class="dobToolTip">\n            <xo-tooltip trigger="#dobText" show-event="keyup" ng-class="dobToolTip" id="dobToolTip">\n                <div class="tip tipDesc dobToolTip">\n                  <p class="tipInfoText restriction active" ng-if="!isValidDate">{{ content(\'scripts.validDate\') }}</p>\n                  <p class="tipInfoText restriction active" ng-if="isValidDate && !isValidAge">{{ content(\'scripts.legalAge\') }}</p>\n                </div>\n            </xo-tooltip>\n        </div>\n        <label id="dobLabel" for="dob">{{ content(\'signup.accountCreationGuest.dobLabel\') }}</label>\n    </div>\n</div>\n';
    },
    "./pages/xo-update-card/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$UpdateCardPageRoute = undefined;
        __webpack_require__("./pages/xo-update-card/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $UpdateCardPageRoute = exports.$UpdateCardPageRoute = _squid.$ComponentRoute.extend("$UpdateCardPageRoute", {
            path: "updateCard",
            directive: "xo-update-card-page",
            titleContent: "asideHeader.update",
            query: [ "message" ],
            trackingData: {
                templateName: "tray/editCard.dust",
                pageGoal: "Update Card",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-edit-cc",
                        pagename2: "%::fullpage-edit-cc:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: [ {
                name: "$AddCardFlowRoute",
                attributes: {
                    token: "token",
                    message: "message",
                    pagetitle: "pagetitle",
                    isUpdateFlow: "isUpdateFlow",
                    cardmodel: "cardmodel",
                    "parent-callbacks": "callbacks"
                }
            } ]
        });
        angular.value("$UpdateCardPageRoute", $UpdateCardPageRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-update-card/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoUpdateCardPageComponent = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/xo-wallet-components/src/add-card/directive.js");
        __webpack_require__("./components/xo-models/src/fi/index.js");
        __webpack_require__("./components/xo-validation/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
        __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
        var _template = __webpack_require__("./pages/xo-update-card/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoUpdateCardPageComponent = exports.$xoUpdateCardPageComponent = _squid.$Component.extend("$xoUpdateCardPageComponent", {
            tag: "xo-update-card-page",
            template: _template2["default"],
            controller: function controller($scope, $rootScope, $populate, $state, $renderContent, $locale, $CheckoutSessionModel, $stateParams) {
                $scope.callbacks = {
                    finish: function finish() {
                        $state.go("checkout.review");
                    }
                };
                $scope.token = $rootScope.token;
                $scope.locale = $locale;
                var models = {};
                function setErrorMessage(contentKey, msgType) {
                    $scope.message = {
                        msgs: [ $renderContent(contentKey) ],
                        type: msgType
                    };
                }
                $populate(models, {
                    checkoutSession: $CheckoutSessionModel.instance($scope.token).retrieve({
                        contingencies: {
                            NEED_CREDIT_CARD: angular.noop,
                            EXPIRED_CREDIT_CARD: angular.noop,
                            NEED_DEBIT_CARD: angular.noop,
                            EXPIRED_DEBIT_CARD: angular.noop
                        }
                    })
                }).then(function() {
                    if (models.checkoutSession.get("errorData.cause") === "NEED_AUTHENTICATED_CARD") {
                        setErrorMessage("creditcard.errorUnconfirmedCard");
                    } else {
                        setErrorMessage("creditcard.errorExpiredCard", $stateParams.message === "EXPIRED_DEBIT_CARD" ? "error" : "info");
                    }
                });
            }
        });
        angular.value("$xoUpdateCardPageComponent", $xoUpdateCardPageComponent);
        _squid.$Component;
    },
    "./pages/xo-update-card/template.html": function(module, exports) {
        module.exports = '<section class="addCard updateCard" id="addCard" content>\n    <div class="row-fluid">\n        <div class="span14">\n            <ui-view></ui-view>\n        </div>\n        <div class="span10" feature="propValue">\n            <xo-value-props type="addCard" title="{{content(\'memberReview.propHead\')}}" text-content="memberReview.propVal"></xo-value-props>\n        </div>\n\n        <div class="span10" unless-feature="propValue">\n            <xo-value-props type="addCard" title="{{content(\'login.propHeadAlt\')}}" text-content="login.propValAlt"></xo-value-props>\n        </div>\n    </div>\n</section>\n';
    },
    "./pages/xo-eConsent/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-eConsent/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$xoEConsentPageRoute", {
            path: "econsent",
            directive: _directive2["default"],
            titleContent: "eConsent.title",
            trackingData: {
                fptiState: "econsent",
                templateName: "eConsent.dust",
                pageGoal: "eConsent",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-econsent",
                        pagename2: "%::fullpage-econsent:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: []
        });
        _index.$Route;
        module.exports = exports["default"];
    },
    "./pages/xo-eConsent/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index3 = __webpack_require__("./components/xo-models/src/app/index.js");
        var _index4 = __webpack_require__("./components/xo-models/src/user/index.js");
        var _newMember = __webpack_require__("./components/xo-models/src/newMember/index.js");
        var _util = __webpack_require__("./pages/xo-login/util.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _config = __webpack_require__("./components/squid/dist/core/config.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
        __webpack_require__("./components/xo-title/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/message/directive.js");
        __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js");
        var _template = __webpack_require__("./pages/xo-eConsent/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./pages/xo-eConsent/styles.less");
        var _factory = __webpack_require__("./pages/xo-login/tokenized-wallet-loader/factory.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Component.extend("$xoEConsentPageDirective", {
            tag: "xo-econsent-page",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: true
                },
                success: {
                    type: "var",
                    required: true
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutSession: _index2.$CheckoutSessionModel.instance(this.props.token),
                        eConsent: _index4.$EConsentModel.instance(),
                        checkoutCart: _index2.$CheckoutCartModel.instance(this.props.token).retrieve(),
                        checkoutAppData: _index2.$CheckoutAppDataModel.instance(this.props.token).retrieve(),
                        tokenizedWalletEligibility: _index3.$TokenizedWalletEligibilityModel.instance(this.props.token),
                        tokenizedWalletPin: _index3.$TokenizedWalletPinModel.instance(this.props.token),
                        tokenizedWalletInfoModel: _index3.$TokenizedWalletInfoModel.instance(this.props.token).retrieve()
                    };
                }
            },
            lifecycle: {
                enter: function enter() {
                    this.locale = _index.$locale;
                }
            },
            actions: {
                submit: function submit() {
                    var _this = this;
                    var self = this;
                    var fptiData = {
                        from: "CREATE_XO_SESSION",
                        to: "process_create_xo_session"
                    };
                    var hardErrors = [ "RESTRICTED_USER", "PAYEE_BLOCKED_TRANSACTION", "PAYMENT_ALREADY_DONE", "PAYMENT_DENIED", "PAYEE_ACCOUNT_RESTRICTED", "INVALID_RESOURCE_ID", "EXPIRED_SESSION", "PAYER_COUNTRY_NOT_ALLOWED", "PAYER_LOGIN_COUNTRY_NOT_ALLOWED", "GAMING_FUNDING_SOURCE_VALIDATION_FAILED" ];
                    self.handleSymphonyContingency = function(name, err) {
                        if (!self.dependencyEligibility) {
                            return;
                        }
                        var errorCode = err.cause || name;
                        fptiData.int_error_code = errorCode;
                        fptiData.error_source = "paymentapiplatformserv";
                        fptiData.error_type = hardErrors.indexOf(errorCode) > -1 ? "hard_decline" : "soft_decline";
                        _logger.$logger.info("checkout_fpti", fptiData);
                        throw err;
                    };
                    self.handleSymphonyNoValidTopupFiContingency = function(name, err) {
                        if (!self.dependencyEligibility) {
                            return;
                        }
                        if (self.models.checkoutCart.isWalletTokenization()) {
                            fptiData.int_error_code = err.cause;
                            fptiData.error_source = "paymentapiplatformserv";
                            fptiData.error_type = hardErrors.indexOf(err.cause) > -1 ? "hard_decline" : "soft_decline";
                            _logger.$logger.info("checkout_fpti", fptiData);
                            self.models.checkoutSession.contingency = name;
                            return _factory.$TokenizedWalledLoaderFactory.goToTokenizationInfoPage();
                        } else {
                            self.handleSymphonyContingency(name, err);
                        }
                    };
                    self.dependencyEligibility = true;
                    self.proceedToReview = true;
                    var isPayPalCredit = self.models.checkoutAppData.is_second_button_txn || _squid.$Class.get(window, "xprops.fundingSource") === "credit";
                    var eConsentBatch = [ this.models.eConsent.save({
                        batch: {
                            name: "econsent",
                            id: "accept"
                        }
                    }), this.models.checkoutSession.action("create", {
                        data: {
                            baToken: this.models.checkoutCart.get("billing.ba_token"),
                            preselected_fi_type: isPayPalCredit ? "credit" : undefined
                        },
                        success: function success(result) {
                            if (!self.dependencyEligibility) {
                                return;
                            }
                            _logger.$logger.info("checkout_fpti", {
                                from: "CREATE_XO_SESSION",
                                to: "process_create_xo_session"
                            });
                            if (self.models.checkoutSession.negBals) {
                                self.proceedToReview = false;
                                return _uiRouter.$state.go("checkout.negativeBalanceRecovery");
                            }
                            if (isPayPalCredit) {
                                self.proceedToReview = false;
                                return _util.$capeRedirectUtil.handleCapeRouting(result, self.models.checkoutCart, self.props.token);
                            }
                            if (self.models.checkoutCart.isWalletTokenization()) {
                                return _factory.$TokenizedWalledLoaderFactory.goToTokenizationInfoPage();
                            }
                        },
                        contingencies: {
                            NEED_DEBIT_CARD: self.handleSymphonyNoValidTopupFiContingency,
                            EXPIRED_DEBIT_CARD: self.handleSymphonyNoValidTopupFiContingency,
                            DEFAULT: self.handleSymphonyContingency
                        },
                        batch: {
                            name: "econsent",
                            id: "createCheckout",
                            dependencies: self.models.checkoutCart.isWalletTokenization() ? [ "accept", "tokenizedWalletLightEligibility", "tokenizedWalletPin" ] : [ "accept" ]
                        }
                    }) ];
                    if (self.models.checkoutCart.isWalletTokenization()) {
                        self.proceedToReview = false;
                        var _self$models$tokenize = self.models.tokenizedWalletInfoModel, wallet_id = _self$models$tokenize.wallet_id, external_device_id = _self$models$tokenize.external_device_id, tr_client_id = _self$models$tokenize.tr_client_id, product_name = _self$models$tokenize.product_name;
                        var subject = self.models.tokenizedWalletInfoModel.getSubject();
                        var WALLET_BRANDS = {
                            google: "APAY",
                            Samsung: "SAMSUNGPAY"
                        };
                        var params = {
                            wallet_brand: WALLET_BRANDS[subject],
                            tenant_id: "Hermes",
                            wallet_id: wallet_id,
                            external_device_id: external_device_id,
                            subject: subject,
                            tr_client_id: tr_client_id,
                            product_name: product_name
                        };
                        if (_config.$meta.query && _config.$meta.query.wallet_id) {
                            params.wallet_id = _config.$meta.query.wallet_id;
                        }
                        if (_config.$meta.query && _config.$meta.query.jwt) {
                            params.jwt = _config.$meta.query.jwt;
                        }
                        eConsentBatch.push(this.models.tokenizedWalletEligibility.retrieve({
                            params: params,
                            success: function success(result) {
                                if (!result.eligible) {
                                    var msg = "tokenized_wallet_ineligible_for_provisioning";
                                    _logger.$logger.info(msg);
                                    fptiData.int_error_code = result.reason;
                                    fptiData.error_source = "paymenttokenserv";
                                    fptiData.error_type = "hard_decline";
                                    _logger.$logger.info("checkout_fpti", fptiData);
                                    self.dependencyEligibility = false;
                                    var code = result.reason === "WALLET_ID_ALREADY_PROVISIONED" ? "ANDROID_PAY_ALREADY_PROVISIONED" : "ANDROID_PAY_ELIGIBILITY_ERROR";
                                    code = window.btoa(code);
                                    return _uiRouter.$state.go("checkout.genericError", {
                                        code: code
                                    });
                                }
                            },
                            batch: {
                                name: "econsent",
                                id: "tokenizedWalletLightEligibility",
                                dependencies: [ "accept" ]
                            }
                        }));
                        eConsentBatch.push(this.models.tokenizedWalletPin.retrieve({
                            success: function success(result) {
                                if (result.pinId) {
                                    _logger.$logger.info("tokenized_wallet_get_pin_set", {
                                        pinOrigin: result.pinOrigin,
                                        pinId: result.pinId
                                    });
                                } else {
                                    _logger.$logger.info("tokenized_wallet_get_pin_not_set");
                                }
                            },
                            contingencies: {
                                DEFAULT: function DEFAULT(name, err) {
                                    _logger.$logger.info("tokenized_wallet_get_pin_error");
                                }
                            },
                            batch: {
                                name: "econsent",
                                id: "tokenizedWalletPin",
                                dependencies: [ "accept" ]
                            }
                        }));
                    }
                    return _angular.$q.all(eConsentBatch).then(function() {
                        if (self.proceedToReview) {
                            return _newMember.$NewMemberEligibility.instance().getVariant(self.props.token).then(function(nmjVariant) {
                                if (nmjVariant === "multi_page") {
                                    return _uiRouter.$state.go("checkout.payWithCard");
                                }
                                return _this.props.success();
                            });
                        }
                    });
                }
            }
        });
        _angular.$q;
        _logger.$logger;
        _index.$Component;
        _index.$locale;
        _index2.$CheckoutSessionModel;
        _index2.$CheckoutCartModel;
        _index2.$CheckoutAppDataModel;
        _index3.$TokenizedWalletEligibilityModel;
        _index3.$TokenizedWalletPinModel;
        _index3.$TokenizedWalletInfoModel;
        _index4.$EConsentModel;
        _newMember.$NewMemberEligibility;
        _util.$capeRedirectUtil;
        _uiRouter.$state;
        _config.$meta;
        _squid.$Class;
        _factory.$TokenizedWalledLoaderFactory;
        module.exports = exports["default"];
    },
    "./pages/xo-eConsent/template.html": function(module, exports) {
        module.exports = '<section class="eConsent" id="eConsent" content>\n    <div class="row-fluid">\n        <div class="span14 trayInner">\n            <xo-message message="errorMessage"></xo-message>\n            <xo-title title-txt="{{content(\'eConsent.title\')}}"></xo-title>\n            <form name="eConsentForm" class="proceed" content novalidate="novalidate" autocomplete="off">\n                <p class="content">{{content(\'eConsent.consent\')}}</p>\n\n                <div class="agree checkbox legal">\n                    <input ng-model="fields.agree" type="checkbox" name="agree" id="agree" data-error-text="{{content(\'eConsent.eConsentError\')}}" xo-error-tooltip required />\n                    <label class="noBottom" for="agree" ng-bind-html="content(\'eConsent.agreement\')"></label>\n                </div>\n                <div class="buttons">\n                    <input track-submit type="submit" id="submitEConsent" value="{{content(\'common.agreeAndContinue\')}}" class="btn full" validate-submit="actions.submit()" />\n                </div>\n            </form>\n        </div>\n        <div class="span10" feature="propValue">\n            <xo-value-props type="review" title="{{content(\'memberReview.propHead\')}}" text-content="memberReview.propVal"></xo-value-props>\n        </div>\n\n        <div class="span10" unless-feature="propValue">\n            <xo-value-props type="review" title="{{content(\'login.propHeadAlt\')}}" text-content="login.propValAlt"></xo-value-props>\n        </div>\n    </div>\n</section>\n';
    },
    "./pages/xo-eConsent/styles.less": "./css/app.less",
    "./pages/xo-travel-rule/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$TravelRuleRoute = undefined;
        __webpack_require__("./pages/xo-travel-rule/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $TravelRuleRoute = exports.$TravelRuleRoute = _squid.$ComponentRoute.extend("$TravelRuleRoute", {
            path: "travelRule",
            directive: "xo-travel-rule-page",
            titleContent: "travelRule.travelRule",
            trackingData: {
                templateName: "travelRule.dust",
                pageGoal: "collect payer ssn and/or taxId",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-travel-rule",
                        pagename2: "%::fullpage-travel-rule:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            loginRequired: true,
            children: []
        });
        angular.value("$TravelRuleRoute", $TravelRuleRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-travel-rule/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _template = __webpack_require__("./pages/xo-travel-rule/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-form-components/src/travel-rule/directive.js");
        __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js");
        __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoTravelRulePageComponent", {
            tag: "xo-travel-rule-page",
            template: _template2["default"],
            lifecycle: {
                enter: function enter() {
                    this.token = _angular.$rootScope.token;
                    this.locale = _squid.$locale;
                    this.finish = function() {
                        _uiRouter.$state.go("checkout.review");
                    };
                }
            }
        });
        _angular.$rootScope;
        _squid.$Component;
        _squid.$locale;
        _uiRouter.$state;
        module.exports = exports["default"];
    },
    "./pages/xo-travel-rule/template.html": function(module, exports) {
        module.exports = '<section class="travelRule" id="travelRule" content>\n    <div class="row-fluid">\n        <div class="span14">\n            <xo-travel-rule token="token" finish="finish"></xo-travel-rule>\n        </div>\n\n        <div class="span10" feature="propValue">\n            <xo-value-props type="addTaxId" title="{{content(\'login.propHead\')}}" text-content="login.propVal"></xo-value-props>\n        </div>\n\n        <div class="span10" unless-feature="propValue">\n            <xo-value-props type="addTaxId" title="{{content(\'login.propHeadAlt\')}}" text-content="login.propValAlt"></xo-value-props>\n        </div>\n    </div>\n</section>\n';
    },
    "./components/xo-form-components/src/travel-rule/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            var _index = __webpack_require__("./components/squid/dist/index.js");
            var _index2 = __webpack_require__("./components/xo-models/src/checkout/index.js");
            var _index3 = __webpack_require__("./components/xo-models/src/user/index.js");
            __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
            __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js");
            var _template = __webpack_require__("./components/xo-form-components/src/travel-rule/template.html");
            var _template2 = _interopRequireDefault(_template);
            __webpack_require__("./components/xo-form-components/src/travel-rule/styles.less");
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            exports["default"] = _index.$Component.extend("xoTravelRule", {
                tag: "xo-travel-rule",
                template: _template2["default"],
                props: {
                    token: {
                        type: "var",
                        required: true
                    },
                    finish: {
                        type: "var",
                        required: true
                    }
                },
                resolve: {
                    models: function models() {
                        return {
                            checkoutSession: _index2.$CheckoutSessionModel.instance(this.token).retrieve()
                        };
                    }
                },
                actions: {
                    submit: function submit() {
                        var _this = this;
                        var data = {};
                        if (this.needPayerGovtId) {
                            var findChoosenId = function findChoosenId(compareId) {
                                return function(obj) {
                                    return obj.name === compareId;
                                };
                            };
                            var chosenIdDetails = this.idTypes.filter(findChoosenId(this.idData.type))[0];
                            var unformatted = (this.idData.value || "").replace(/[^0-9a-zA-Z]+/g, "");
                            data.newDocId = {
                                type: chosenIdDetails.idType,
                                subType: chosenIdDetails.idSubtype,
                                issuerCountry: this.idData.country,
                                issuer: chosenIdDetails.idIssuer,
                                value: unformatted,
                                collectionPoint: "UNKNOWN",
                                placeOfIssue: this.idData.country
                            };
                        }
                        if (this.needPayerAddress) {
                            var address = this.address;
                            data.newAddress = {
                                address1: address.line1,
                                address2: address.line2,
                                city: address.city,
                                state: address.state,
                                zip: address.postal_code,
                                iso_country: "US"
                            };
                        }
                        this.userInfo.action("governmentId-address", {
                            data: data,
                            success: function success() {
                                var checkoutCart = _index2.$CheckoutCartModel.instance(_this.token);
                                return _this.models.checkoutSession.action("create", {
                                    data: {
                                        baToken: checkoutCart.billing && checkoutCart.billing.ba_token
                                    },
                                    success: function success() {
                                        _this.models.checkoutSession.errorData = undefined;
                                        _this.finish();
                                    }
                                });
                            },
                            validation: function validation(validationData) {
                                var $el = $(this.$element);
                                var $field = $($el.find('[name="' + validationData.field + '"]'));
                                $field.addClass("backendError");
                                $field.attr("aria-invalid", true);
                                $field.focus();
                            }
                        });
                    }
                },
                lifecycle: {
                    populate: function populate() {
                        var country = _index.$locale.getCountryCodeISO();
                        this.country = country;
                        this.address = {
                            country: country
                        };
                        this.countryList = _index.$locale.metadata.territory;
                        this.idTypes = [ {
                            name: "SSN",
                            value: _index.$locale.content.get("travelRule.ssnDropdownLabel"),
                            idType: "TAX_ID",
                            idSubtype: "SSN",
                            idIssuer: "US_SSN"
                        }, {
                            name: "TaxID",
                            value: _index.$locale.content.get("travelRule.taxIdDropdownLabel"),
                            idType: "TAX_ID",
                            idSubtype: "ITIN",
                            idIssuer: "US_ITIN"
                        }, {
                            name: "EmployerID",
                            value: _index.$locale.content.get("travelRule.employerIdDropdownLabel"),
                            idType: "TAX_ID",
                            idSubtype: "TIN",
                            idIssuer: "US_TIN"
                        }, {
                            name: "Passport",
                            value: _index.$locale.content.get("travelRule.passportDropdownLabel"),
                            idType: "PASSPORT",
                            idIssuer: "PASSPORT"
                        }, {
                            name: "AlienNumber",
                            value: _index.$locale.content.get("travelRule.aNumberDropdownLabel"),
                            idType: "IMMGT_ID",
                            idIssuer: "IMMIGRATION"
                        } ];
                        this.idData = {
                            type: "SSN",
                            value: "",
                            country: "US"
                        };
                        this.idTypeChanged = function() {
                            this.idData.country = "US";
                        };
                        var checkoutSession = _index2.$CheckoutSessionModel.instance(this.token);
                        var payerDetailsTypes = checkoutSession.get("errorData.resolution.data", []);
                        if (payerDetailsTypes.indexOf("GOVERNMENT_ID") > -1) {
                            this.needPayerGovtId = true;
                        }
                        if (payerDetailsTypes.indexOf("STREET_ADDRESS") > -1) {
                            this.needPayerAddress = true;
                        }
                        this.userInfo = _index3.$UserInfoModel.instance(this.token);
                    }
                }
            });
            _index.$Component;
            _index.$locale;
            _index2.$CheckoutSessionModel;
            _index2.$CheckoutCartModel;
            _index3.$UserInfoModel;
            module.exports = exports["default"];
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-form-components/src/travel-rule/template.html": function(module, exports) {
        module.exports = '<form id="travelRuleForm" name="travelRuleForm" class="travelRuleForm" content novalidate>\n    <div class="trayInner trayInnerDefault">\n        <h3 class="gamma noHead">{{ content(\'travelRule.travelRule\') }}</h3>\n        <p>{{ content(\'travelRule.note\') }}</p>\n        \n        <div ng-if="needPayerGovtId" class="govtId">\n            <div class="dropdown idType inputField" floating-label-dropdown>\n                <select xo-dropdown \n                        name="idType"\n                        ng-model="idData.type"\n                        id="idType"\n                        ng-change="idTypeChanged()"\n                        aria-required="true">\n                    <option ng-repeat="item in idTypes" value="{{item.name}}" ng-selected="idData.type===\'{{item.name}}\'">{{item.value}}</option>\n                </select>\n                <label for="idType">{{content(\'travelRule.idType\')}}</label>\n            </div>\n            <div></div>\n            <div class="inputField confidential" \n                ng-switch on="idData.type">\n                <div class="animate-switch" ng-switch-when="SSN">\n                    <input id="data" name="data" maxlength="14" ng-model="idData.value"\n                       xo-error-tooltip required placeholder="{{ content(\'travelRule.ssnPlaceholder\') }}"/>\n                </div>\n                <div class="animate-switch" ng-switch-when="TaxID">\n                    <label for="data" class="nolap">{{ content(\'travelRule.taxIdDesc\') }}</label>\n                    <input id="data" name="data" maxlength="14" ng-model="idData.value"\n                       xo-error-tooltip required placeholder="{{ content(\'travelRule.taxIdPlaceholder\') }}"/>\n                </div>\n                <div class="animate-switch" ng-switch-when="EmployerID">\n                    <label for="data" class="nolap">{{ content(\'travelRule.employerIdDesc\') }}</label>\n                    <input id="data" name="data" maxlength="14" ng-model="idData.value"\n                       xo-error-tooltip required placeholder="{{ content(\'travelRule.employerIdPlaceHolder\') }}"/>\n                </div>\n                <div class="animate-switch" ng-switch-when="Passport">\n                    <label for="data" class="nolap">{{ content(\'travelRule.passportDesc\') }}</label>\n                    <input id="data" name="data" maxlength="14" ng-model="idData.value"\n                       xo-error-tooltip required placeholder="{{ content(\'travelRule.passportPlaceholder\') }}"/>\n                    <div class="dropdown confidential country clearfix inputField" content floating-label-dropdown>\n                        <select xo-dropdown name="passportCountry" ng-model="idData.country" ng-options="country.code as country.name for country in countryList" id="passportCountry" aria-labelledby="countryLabel" xo-error-tooltip required>\n                        </select>\n                    </div>\n                </div>\n                <div class="animate-switch" ng-switch-when="AlienNumber">\n                    <label for="data" class="nolap">{{ content(\'travelRule.aNumberDesc\') }}</label>\n                    <input id="data" name="data" maxlength="14" ng-model="idData.value"\n                       xo-error-tooltip required placeholder="{{ content(\'travelRule.aNumberPlaceholder\') }}"/>\n                </div>\n            </div>\n        </div>\n\n        <div ng-if="needPayerAddress" class="address">\n            <p>{{ content(\'travelRule.pleaseEnterStreetAddress\') }}</p>\n            <xo-add-address country="country" address="address" token="token"></xo-add-address>\n        </div>\n    \n        <div class="buttons">\n            <input track-submit type="submit" id="proceedButton" value="{{ content(\'travelRule.payButton\') }}" class="btn full btn-large" validate-submit="actions.submit()" />\n        </div>\n    </div>\n</form>\n';
    },
    "./components/xo-form-components/src/travel-rule/styles.less": "./css/app.less",
    "./pages/xo-nbr/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-nbr/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$xoNbrDEPageRoute", {
            path: "negativeBalanceRecovery",
            directive: _directive2["default"],
            children: []
        });
        _index.$Route;
        module.exports = exports["default"];
    },
    "./pages/xo-nbr/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _angular2 = _interopRequireDefault(_angular);
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _util = __webpack_require__("./pages/xo-login/util.js");
        __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
        __webpack_require__("./components/xo-title/dist/directive.js");
        __webpack_require__("./components/xo-ui-components/src/message/directive.js");
        __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js");
        var _template = __webpack_require__("./pages/xo-nbr/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./pages/xo-nbr/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoNbrDEPageDirective", {
            tag: "xo-nbr-page",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: false
                },
                isUnbranded: {
                    type: "var",
                    required: false
                }
            },
            resolve: {
                models: function models() {
                    var props = this.props;
                    if (props.token) {
                        return {
                            checkoutSession: _index.$CheckoutSessionModel.instance(props.token).retrieve({
                                contingencies: {
                                    NEGATIVE_BALANCE_RECOVERY: _angular2["default"].noop,
                                    EXPIRED_CREDIT_CARD: _angular2["default"].noop
                                }
                            }),
                            checkoutAppData: _index.$CheckoutAppDataModel.instance(props.token).retrieve(),
                            checkoutCart: _index.$CheckoutCartModel.instance(props.token).retrieve()
                        };
                    }
                }
            },
            lifecycle: {
                enter: function enter() {
                    var self = this, configUrls = _squid.$config.urls;
                    (0, _jquery2["default"])(".paypalHeaderWrapper").hide();
                    (0, _jquery2["default"])(".footerWrapper").addClass("nbr");
                    self.nbrUrl = configUrls.nbrUrl;
                    self.meft = function(evt) {
                        evt.preventDefault();
                        _squid.$util.redirect(configUrls.nbrUrl);
                    };
                    self.resume = function(evt) {
                        var models = self.models;
                        evt.preventDefault();
                        if (models.checkoutSession.origContName) {
                            throw new _squid.$Contingency(models.checkoutSession.origContName);
                        }
                        var isPayPalCredit = models.checkoutAppData.is_second_button_txn || _squid.$Class.get(window, "xprops.fundingSource") === "credit";
                        if (isPayPalCredit) {
                            _util.$capeRedirectUtil.handleCapeRouting(models.checkoutSession, models.checkoutCart, self.props.token);
                        } else {
                            _uiRouter.$state.go("checkout.review");
                        }
                    };
                },
                exit: function exit() {
                    (0, _jquery2["default"])(".paypalHeaderWrapper").show();
                    (0, _jquery2["default"])(".footerWrapper").removeClass("nbr");
                },
                populate: function populate() {
                    var tokenHash, self = this, checkoutSession = self.models.checkoutSession, negBals = checkoutSession.negBals, plan = checkoutSession.plan.sources && checkoutSession.plan.sources[0], bodyContentKey = "nbr.body", preBankBtnKey = "nbr.preBankBtn", prePayBtnKey = "nbr.prePayBtn";
                    if (negBals && negBals[0]) {
                        tokenHash = {
                            neg_bal: (0, _squid.formatCurrency)(negBals[0] && negBals[0].amount, negBals[0].currency_code, false),
                            amt: plan && (0, _squid.formatCurrency)(plan.amount, plan.currency_code, false)
                        };
                    }
                    if (negBals.length > 1) {
                        bodyContentKey += "Plural";
                        preBankBtnKey += "Plural";
                        tokenHash.neg_bal2 = (0, _squid.formatCurrency)(negBals[1].amount, negBals[1].currency_code, false);
                    }
                    if (!plan) {
                        prePayBtnKey += "NoAmt";
                    }
                    self.bodyContentKey = bodyContentKey;
                    self.tokenHash = tokenHash;
                    self.isDE = _squid.$locale.metadata.country === "DE";
                    self.prePayBtnKey = prePayBtnKey;
                    self.preBankBtnKey = preBankBtnKey;
                }
            }
        });
        _squid.formatCurrency;
        _squid.$Component;
        _squid.$locale;
        _squid.$util;
        _squid.$config;
        _squid.$Contingency;
        _squid.$Class;
        _uiRouter.$state;
        _index.$CheckoutSessionModel;
        _index.$CheckoutAppDataModel;
        _index.$CheckoutCartModel;
        _util.$capeRedirectUtil;
        module.exports = exports["default"];
    },
    "./pages/xo-nbr/template.html": function(module, exports) {
        module.exports = '<section id="nbr" content>\n    <div class="container">\n        <div class="logo" ng-if="!props.isUnbranded"></div>\n        <div class="title">\n            {{ content(\'nbr.title\') }}\n        </div>\n        <div class="message" ng-bind-html="content(bodyContentKey, tokenHash)"></div>\n        <div ng-if="isDE" class="actions message">\n            <p class="bold" ng-bind-html="content(prePayBtnKey, tokenHash)"></p>\n            <button ng-click="resume($event)" class="btn full">\n                {{ content(\'nbr.payBtn\') }}\n            </button>\n            <p class="small">\n                {{ content(\'nbr.postPayBtn\') }}\n            </p>\n            <p class="bold" ng-bind-html="content(preBankBtnKey, tokenHash)"></p>\n            <a href="{{nbrUrl}}" ng-click="meft($event)" class="btn full btn-secondary">\n                {{ content(\'nbr.bankBtn\') }}\n            </a>\n            <p class="small">\n                {{ content(\'nbr.postBankBtn\') }}\n            </p>\n        </div>\n        <p class="btn-spaced" ng-if="!isDE">\n            <button ng-click="resume($event)" class="btn full">\n                {{ content(\'nbr.payBtn\') }}\n            </button>\n        </p>\n    </div>\n</section>\n';
    },
    "./pages/xo-nbr/styles.less": "./css/app.less",
    "./pages/xo-framebust/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoFrameBustRoute = undefined;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-framebust/directive.js");
        var $xoFrameBustRoute = exports.$xoFrameBustRoute = _index.$Route.extend("$xoFrameBustRoute", {
            path: "framebust",
            directive: _directive.$xoFrameBustPageDirective,
            auth: false,
            query: [ "action", "url" ],
            children: []
        });
        angular.value("$xoFrameBustRoute", $xoFrameBustRoute);
        _index.$Route;
        _directive.$xoFrameBustPageDirective;
    },
    "./pages/xo-framebust/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoFrameBustPageDirective = undefined;
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        exports.getCenterPosition = getCenterPosition;
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _icFallback = __webpack_require__("./js/lib/icFallback.js");
        var _template = __webpack_require__("./pages/xo-framebust/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./pages/xo-framebust/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function getCenterPosition(_ref) {
            var width = _ref.width, height = _ref.height;
            var left = void 0;
            var top = void 0;
            if (width) {
                if (window.outerWidth) {
                    left = Math.round((window.outerWidth - width) / 2) + window.screenX;
                } else if (window.screen.width) {
                    left = Math.round((window.screen.width - width) / 2);
                }
            }
            if (height) {
                if (window.outerHeight) {
                    top = Math.round((window.outerHeight - height) / 2) + window.screenY;
                } else if (window.screen.height) {
                    top = Math.round((window.screen.height - height) / 2);
                }
            }
            return {
                left: left,
                top: top
            };
        }
        var $xoFrameBustPageDirective = exports.$xoFrameBustPageDirective = _index.$Component.extend("$xoFrameBustPageDirective", {
            tag: "xo-framebust-page",
            template: _template2["default"],
            props: {},
            resolve: {},
            actions: {
                submit: function submit() {
                    window.xchild.hide();
                    var url = decodeURIComponent(_uiRouter.$stateParams.url);
                    if (_uiRouter.$stateParams.action === "open") {
                        var xprops = _extends({}, window.xprops);
                        xprops.url = url;
                        _logger.$logger.warn("framebust_click_to_hermes");
                        return window.ppxo.Checkout.renderPopupTo(window.xchild.getParentRenderWindow(), xprops);
                    }
                    if (_uiRouter.$stateParams.action === "fallback") {
                        _logger.$logger.warn("framebust_click_to_legacy");
                        var width = 970;
                        var height = 850;
                        var _getCenterPosition = getCenterPosition({
                            width: width,
                            height: height
                        }), left = _getCenterPosition.left, top = _getCenterPosition.top;
                        var win = window.open(url, "hermes_fallback", "width=" + width + ",height=" + height + ",top=" + top + ",left=" + left);
                        (0, _icFallback.$incontextFallback)(win, url);
                    }
                }
            }
        });
        angular.value("getCenterPosition", getCenterPosition);
        angular.value("$xoFrameBustPageDirective", $xoFrameBustPageDirective);
        _logger.$logger;
        _uiRouter.$stateParams;
        _index.$Component;
        _icFallback.$incontextFallback;
    },
    "./pages/xo-framebust/template.html": function(module, exports) {
        module.exports = '<form content novalidate="novalidate" autocomplete="off">\n    <input type="submit" value="{{ content(\'login.loginBtn\') }}" class="btn full loginBtn frameBustBtn" ng-click="actions.submit()" />\n</form>\n\n\n';
    },
    "./pages/xo-framebust/styles.less": "./css/app.less",
    "./pages/xo-sepa/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$SepaPageRoute = undefined;
        __webpack_require__("./pages/xo-sepa/directive.js");
        __webpack_require__("./components/xo-wallet-components/src/member-sepa/route.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $SepaPageRoute = exports.$SepaPageRoute = _squid.$ComponentRoute.extend("$SepaPageRoute", {
            path: "sepapage",
            directive: "xo-sepa-page",
            titleContent: "DEMemberGuest.sepaTitle",
            query: [ "message" ],
            trackingData: {
                fptiState: "membersepa",
                templateName: "membersepa.dust",
                pageGoal: "SEPA Review"
            },
            children: [ {
                name: "$MemberSepaRoute",
                attributes: {
                    token: "token",
                    "parent-callbacks": "callbacks"
                }
            } ]
        });
        angular.value("$SepaPageRoute", $SepaPageRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-sepa/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoSepaPageComponent = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _template = __webpack_require__("./pages/xo-sepa/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-models/src/checkout/index.js");
        __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
        __webpack_require__("./components/xo-return-to-merchant/dist/util.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoSepaPageComponent = exports.$xoSepaPageComponent = _squid.$Component.extend("$xoSepaPageComponent", {
            tag: "xo-sepa-page",
            template: _template2["default"],
            scope: {
                token: "="
            },
            controller: function controller($scope, $state, $populate, $ReturnToMerchant, $CheckoutAppDataModel, $CheckoutSessionModel) {
                $scope.callbacks = {
                    success: function success(sepaModel) {
                        $populate($scope, {
                            checkoutAppData: $CheckoutAppDataModel.instance($scope.token),
                            checkoutSession: $CheckoutSessionModel.instance($scope.token)
                        }).then(function() {
                            return sepaModel.action("clearSepa", {
                                data: {
                                    bank: {
                                        id: sepaModel.bankId
                                    },
                                    token: $scope.token
                                },
                                success: function success() {
                                    $scope.checkoutSession.action("authorize", {
                                        success: function success() {
                                            $state.go("checkout.end");
                                        }
                                    });
                                }
                            });
                        });
                    }
                };
                $state.go("checkout.sepapage.membersepa.sepaAgreement");
            }
        });
        angular.value("$xoSepaPageComponent", $xoSepaPageComponent);
        _squid.$Component;
    },
    "./pages/xo-sepa/template.html": function(module, exports) {
        module.exports = "<ui-view></ui-view>\n";
    },
    "./components/xo-wallet-components/src/member-sepa/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-wallet-components/src/member-sepa/directive.js"), __webpack_require__("./components/xo-wallet-components/src/member-sepa/sepaAgreement/route.js"), __webpack_require__("./components/xo-wallet-components/src/member-sepa/sepaMandate/route.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-member-sepa.route", [ "squid", "xo-member-sepa.directive", "xo-member-sepa.sepaAgreement.route", "xo-member-sepa.sepaMandate.route" ]).factory("$MemberSepaRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("MemberSepaRoute", {
                        name: "membersepa",
                        directive: "xo-member-sepa",
                        titleContent: "directDebitAgreement.sepaTitle",
                        children: [ {
                            name: "$XOSepaAgreementRoute",
                            attributes: {
                                token: "token",
                                sepa: "sepa",
                                "parent-callbacks": "callbacks"
                            }
                        }, {
                            name: "$XOSepaMandateRoute",
                            attributes: {
                                token: "token",
                                sepa: "sepa",
                                "parent-callbacks": "callbacks"
                            }
                        } ]
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-wallet-components/src/member-sepa", "components/xo-wallet-components/src/member-sepa/route.js");
    },
    "./components/xo-wallet-components/src/member-sepa/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/member-sepa/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/fi/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            return squid.module("xo-member-sepa.directive", [ "squid", "xomodel.checkout", "xomodel.fi" ]).directive("xoMemberSepa", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        parentCallbacks: "="
                    },
                    controller: function controller($scope, $CheckoutAppDataModel, $CheckoutSessionModel, $SepaModel, $populate, $rootScope) {
                        $scope.sepa = $SepaModel.instance({
                            id: 123
                        });
                        $scope.callbacks = {
                            sepaAccept: function sepaAccept() {
                                $populate($scope, {
                                    checkoutAppData: $CheckoutAppDataModel.instance($scope.token),
                                    checkoutSession: $CheckoutSessionModel.instance($scope.token)
                                }).then(function() {
                                    $rootScope.$emit("loading");
                                    $scope.sepa.action("sepaAccept", {
                                        data: {
                                            bank: {
                                                id: $scope.sepa.bankId
                                            }
                                        },
                                        success: function success() {
                                            $scope.parentCallbacks.success($scope.sepa);
                                        }
                                    });
                                });
                            }
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/member-sepa/template.html": "./pages/xo-sepa/template.html",
    "./components/xo-wallet-components/src/member-sepa/sepaAgreement/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-wallet-components/src/member-sepa/sepaAgreement/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-member-sepa.sepaAgreement.route", [ "squid", "xo-member-sepa.sepaAgreement.directive" ]).factory("$XOSepaAgreementRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("XOSepaAgreementRoute", {
                        name: "sepaAgreement",
                        directive: "xo-sepa-agreement",
                        titleContent: "directDebitAgreement.sepaTitle",
                        trackingData: {
                            fptiState: "sepa_agreement",
                            buzname: {
                                fullpage: {
                                    pagename: "%::sepa_agreement",
                                    pagename2: "%::sepa_agreement:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        loginRequired: true,
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-wallet-components/src/member-sepa/sepaAgreement", "components/xo-wallet-components/src/member-sepa/sepaAgreement/route.js");
    },
    "./components/xo-wallet-components/src/member-sepa/sepaAgreement/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/member-sepa/sepaAgreement/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/fi/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            return squid.module("xo-member-sepa.sepaAgreement.directive", [ "squid", "xomodel.checkout", "xomodel.fi" ]).directive("xoSepaAgreement", function($rootScope) {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        sepa: "=",
                        parentCallbacks: "="
                    },
                    controller: function controller($scope, $CheckoutSessionModel, $SepaModel, $populate) {
                        $("body").addClass("pageSepaAgreementContingency");
                        $scope.$on("$destroy", function() {
                            $("body").removeClass("pageSepaAgreementContingency");
                        });
                        $populate($scope, {
                            checkoutSession: $CheckoutSessionModel.instance($scope.token)
                        }).then(function() {
                            $scope.sepa.bankId = $scope.checkoutSession.sepa_mandate.bankId;
                            $scope.sepa.action("sepaDirectMandate", {
                                resultModel: $scope.sepa,
                                data: {
                                    bank: {
                                        id: $scope.sepa.bankId
                                    }
                                },
                                success: function success() {
                                    $scope.onSubmit = function() {
                                        $scope.parentCallbacks.sepaAccept();
                                    };
                                }
                            });
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/member-sepa/sepaAgreement/template.html": function(module, exports) {
        module.exports = '<section id="sepaAgreementContingency" content>\n    <div class="row-fluid">\n        <div class="centerTray">\n            <div class="trayInner trayInnerDefault loggingIn">\n                <form ng-submit="onSubmit()" method="post" class="proceed ddAgreementForm" id="payment_form" novalidate>\n                    <h2 class="zeta">{{content(\'directDebitAgreement.sepaTitle\')}}</h2>\n\n                    <p ng-bind-html ="content(\'directDebitAgreement.ddAgreementPara1\')"></p>\n                    <p>\n\n                        <span\n                                bind-html-compile="htmlContent(\'directDebitAgreement.ddAgreementPara2\',{bankName:sepa.bank.bank_name, bankNumber:sepa.bank.bank_id, href: \'^.sepaMandate\'})">\n                        </span>\n\n                    </p>\n\n                    <div class="buttons">\n                        <input track-submit ng-if="model.useraction.commit" id="proceedButton" type="submit" value="{{content(\'directDebitAgreement.acceptAndPay\')}}"  class="btn" />\n                        <input track-submit ng-if="!model.useraction.commit" id="proceedButton" type="submit" value="{{content(\'directDebitAgreement.acceptAndContinue\')}}" class="btn" />\n                    </div>\n                </form>\n            </div>\n        </div>\n\n    </div>\n</section>\n\n';
    },
    "./components/xo-wallet-components/src/member-sepa/sepaMandate/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-wallet-components/src/member-sepa/sepaMandate/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-member-sepa.sepaMandate.route", [ "squid", "xo-member-sepa.sepaMandate.directive" ]).factory("$XOSepaMandateRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("XOSepaMandateRoute", {
                        name: "sepaMandate",
                        directive: "xo-sepa-mandate",
                        titleContent: "directDebitAgreement.ddFullAgreementTitle",
                        trackingData: {
                            fptiState: "sepa_mandate",
                            buzname: {
                                fullpage: {
                                    pagename: "%::sepa_mandate",
                                    pagename2: "%::sepa_mandate:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        loginRequired: true,
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-wallet-components/src/member-sepa/sepaMandate", "components/xo-wallet-components/src/member-sepa/sepaMandate/route.js");
    },
    "./components/xo-wallet-components/src/member-sepa/sepaMandate/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/member-sepa/sepaMandate/template.html") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            return squid.module("xo-member-sepa.sepaMandate.directive", [ "squid" ]).directive("xoSepaMandate", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        sepa: "=",
                        parentCallbacks: "="
                    },
                    controller: function controller($scope) {
                        $("body").addClass("pageSepaMandateContingency");
                        $scope.$on("$destroy", function() {
                            $("body").removeClass("pageSepaMandateContingency");
                        });
                        $scope.onSubmit = function() {
                            $scope.parentCallbacks.sepaAccept();
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-wallet-components/src/member-sepa/sepaMandate/template.html": function(module, exports) {
        module.exports = '<section id="sepaMandateContingency" content>\n    <div class="row-fluid">\n        <div class="centerTray">\n            <div class="trayInner trayInnerDefault loggingIn">\n                <form ng-submit="onSubmit()" method="post" class="proceed" id="payment_form" novalidate>\n                    <h2 class="zeta">{{content(\'directDebitAgreement.ddFullAgreementTitle\')}}</h2>\n                    <p>{{content(\'DEMemberGuest.ddAgreementPara1\')}}</p>\n                    <div class="row-fluid sepaInfo">\n                        <div class="span">\n                            <strong>{{content(\'DEMemberGuest.accountCarrier\')}}</strong>\n                            <p>\n                                <span>{{sepa.user.name}}</span>\n                                <br/>{{sepa.user.address.line1}}\n                                <br/>{{sepa.user.address.line2}}\n                                <br/> {{sepa.user.address.city}}, {{sepa.user.address.postal_code}}\n                                <br/>{{sepa.user.address.country}}\n                            </p>\n                        </div>\n                        <div class="span bankDetails">\n                            <p>\n                                <strong>{{content(\'DEMemberGuest.IBAN\')}}</strong>\n                            </p>\n                            {{sepa.bank.iban_number}}\n                            <p class="marginTop">\n                                <strong>{{content(\'DEMemberGuest.bankName\')}}</strong>\n                            </p>\n                            {{sepa.bank.bank_name}}\n                            <p class="marginTop">\n                                <strong>{{content(\'DEMemberGuest.bic\')}}</strong>\n                            </p>\n                            {{sepa.bank.bic}}\n                        </div>\n                        <div class="span">\n                            <p>\n                                <strong>{{content(\'DEMemberGuest.creditor\')}}</strong>\n                            </p>\n                            {{sepa.creditor.name}}\n                            <p></p>\n                            <div class="adr">\n                                <div class="confidential streets street-address darker">\n                                    {{sepa.creditor.address.line1}}\n                                </div>\n\n                            <div class="confidential">\n                                <span class="postal-code">{{sepa.creditor.address.postal_code}}</span>\n                                <span class="locality">{{sepa.creditor.address.country}}</span>\n                            </div>\n                            </div>\n                            <p></p>\n                            <p class="marginTop">\n                                <strong>{{content(\'DEMemberGuest.creditorId\')}}</strong>\n                            </p>\n                            {{sepa.creditor.id}}\n                        </div>\n                    </div>\n                    <p>\n                        <span ng-if="model.useraction.commit" ng-bind-html="htmlContent(\'directDebitAgreement.ddAgreementPara2AcceptPay\')"></span>\n                        <span ng-if="!model.useraction.commit" ng-bind-html="htmlContent(\'directDebitAgreement.ddAgreementPara2AcceptContinue\')"></span>\n                    </p>\n                    <p class="dateLocationMarker">{{sepa.date}},{{sepa.user.address.city}},{{content(\'countryList.DE\')}}</p>\n                    <div class="buttons">\n                        <input track-submit ng-if="model.useraction.commit" id="proceedButton" type="submit" value="{{content(\'directDebitAgreement.acceptAndPay\')}}"  class="btn" />\n                        <input track-submit ng-if="!model.useraction.commit" id="proceedButton" type="submit" value="{{content(\'directDebitAgreement.acceptAndContinue\')}}" class="btn" />\n                    </div>\n                </form>\n            </div>\n        </div>\n\n    </div>\n</section>\n\n';
    },
    "./pages/xo-end/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$EndRoute = undefined;
        __webpack_require__("./components/xo-models/src/checkout/index.js");
        __webpack_require__("./components/xo-return-to-merchant/dist/util.js");
        var _returnParams = __webpack_require__("./components/xo-page-components/src/returnParams/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $EndRoute = exports.$EndRoute = _squid.$ComponentRoute.extend("EndRoute", {
            path: "end",
            trackingData: {
                fptiState: "back_to_merchant",
                trackStateExit: true
            },
            resolve: {
                action: function action($q, $window, $util, $config, $meta, $locale, $CheckoutAppDataModel, $CheckoutCartModel, $CheckoutSessionModel, $ReturnToMerchant, $rootScope, $populate, $MerchantPreferenceModel, $CheckoutPayeeModel, $unresolved) {
                    function returnMethod(merchantPreferences) {
                        if (_squid.$integration.getConfig("RETURN_METHOD_BASED_ON_MERCHANT_PREFS") && merchantPreferences) {
                            return merchantPreferences.returnMethod();
                        } else {
                            return "GET";
                        }
                    }
                    function returnUrl(checkoutAppData, merchantPreferences) {
                        if (checkoutAppData.is_wps_subscription_flow()) {
                            return $config.urls.wpsSubscriptionReturnUrl;
                        }
                        if (_squid.$integration.getConfig("REDIRECT_QUERY_PARAM")) {
                            return $util.param("redirect_uri");
                        }
                        if (_squid.$integration.getConfig("RETURN_URL_FROM_MERCHANT_PREFS") && merchantPreferences) {
                            return checkoutAppData.urls.return_url || merchantPreferences.returnUrl();
                        }
                        return checkoutAppData.urls.return_url;
                    }
                    function returnParams(checkoutCart, checkoutSession, checkoutAppData, returnToMerchantMethod) {
                        if (checkoutAppData.is_wps_subscription_flow()) {
                            return {
                                token: $meta.token,
                                mfid: $meta.mfid,
                                mode: "member",
                                "country.x": $locale.country,
                                "locale.x": $locale.lang + "_" + $locale.country
                            };
                        }
                        var params = {};
                        if (_squid.$integration.getConfig("ALLOW_PAYER_ID_RETURN_PARAM") && !checkoutCart.isBillingNoPurchase()) {
                            params.PayerID = checkoutSession.payer.id;
                        }
                        var billingData = checkoutCart.billing;
                        if (billingData && billingData.ba_token && !checkoutAppData.legacy_billing_integration) {
                            params.ba_token = billingData.ba_token;
                        }
                        if (_squid.$integration.isFlow("WPS")) {
                            var isCartUpload = checkoutAppData.flags.is_cart_upload_flow || checkoutAppData.flags.is_shopping_cart_flow;
                            params = (0, _returnParams.$returnParams)(checkoutCart, checkoutSession, returnToMerchantMethod, "WPS", isCartUpload);
                        }
                        if (_squid.$integration.getConfig("REDIRECT_QUERY_PARAM")) {
                            params.opType = "payment";
                            params.token = $rootScope.token;
                            params.return_uri = $util.buildURL(checkoutAppData.urls.return_url, params);
                        }
                        return params;
                    }
                    function getMerchantPreferences(dataModel) {
                        if (_squid.$integration.getConfig("POPULATE_MERCHANT_PREFERENCES")) {
                            return $populate(dataModel, {
                                merchantPreferences: $MerchantPreferenceModel.instance(dataModel.payee.merchant.id)
                            });
                        } else {
                            return $q.when();
                        }
                    }
                    var models = {};
                    return $populate(models, {
                        checkoutAppData: $CheckoutAppDataModel.instance($rootScope.token),
                        checkoutCart: $CheckoutCartModel.instance($rootScope.token),
                        checkoutSession: $CheckoutSessionModel.instance($rootScope.token),
                        payee: $CheckoutPayeeModel.instance($rootScope.token)
                    }).then(function() {
                        return getMerchantPreferences(models);
                    }).then(function() {
                        var url = returnUrl(models.checkoutAppData, models.merchantPreferences);
                        var returnToMerchantMethod = returnMethod(models.merchantPreferences);
                        var params = returnParams(models.checkoutCart, models.checkoutSession, models.checkoutAppData, returnToMerchantMethod);
                        if (models.checkoutAppData.is_wps_subscription_flow()) {
                            $util.redirect($util.paypalURL(url, params));
                        }
                        if (window.xchild) {
                            _logger.$logger.done();
                            $rootScope.$emit("loading");
                            var xparams = {
                                paymentToken: $rootScope.token,
                                billingToken: params["ba_token"],
                                payerID: params["PayerID"],
                                paymentID: params["paymentId"] || models.checkoutAppData.payment_id,
                                intent: models.checkoutCart.payment_action
                            };
                            xparams.returnUrl = $util.buildURL(url, params);
                            return window.xprops.onAuthorize(xparams);
                        }
                        if (returnToMerchantMethod === "POST") {
                            $ReturnToMerchant.postTo(url, params);
                        } else {
                            if (models.merchantPreferences && !models.merchantPreferences.pdtEnabled()) {
                                return $ReturnToMerchant.goTo(url);
                            }
                            $ReturnToMerchant.goTo($util.buildURL(url, params));
                        }
                        return $unresolved;
                    });
                }
            }
        });
        angular.value("$EndRoute", $EndRoute);
        _returnParams.$returnParams;
        _logger.$logger;
        _squid.$ComponentRoute;
        _squid.$integration;
    },
    "./components/xo-page-components/src/returnParams/index.js": function(module, exports, __webpack_require__) {
        var addValidParam = __webpack_require__("./components/xo-page-components/src/utils/index.js").addValidParam;
        function returnWPSParams(checkoutCart, checkoutSession, returnToMerchantMethod, is_cart_upload_flow) {
            var params = {};
            var customData = checkoutCart.get("purchase.custom");
            if (returnToMerchantMethod === "POST") {
                if (checkoutSession.postbackData) {
                    params = checkoutSession.postbackData;
                }
            } else {
                var transactionDetail = checkoutSession.transactionDetails;
                if (transactionDetail) {
                    addValidParam(params, "tx", transactionDetail.id);
                    addValidParam(params, "st", transactionDetail.state);
                    if (transactionDetail.amount) {
                        addValidParam(params, "amt", transactionDetail.amount.total);
                        addValidParam(params, "cc", transactionDetail.amount.currency);
                    }
                }
                if (!is_cart_upload_flow) {
                    var itemDetail = checkoutSession.get("itemsList.0");
                    if (itemDetail) {
                        addValidParam(params, "item_name", itemDetail.name);
                        addValidParam(params, "item_number", itemDetail.sku);
                    }
                }
                addValidParam(params, "cm", customData);
            }
            return params;
        }
        module.exports = {
            $returnParams: function $returnParams(checkoutCart, checkoutSession, returnToMerchantMethod, feature, is_cart_upload_flow) {
                if (feature === "WPS") {
                    return returnWPSParams(checkoutCart, checkoutSession, returnToMerchantMethod, is_cart_upload_flow);
                }
                return {};
            }
        };
    },
    "./pages/xo-de-guest/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoDeGuest = undefined;
        __webpack_require__("./components/xo-models/src/checkout/index.js");
        __webpack_require__("./components/xo-return-to-merchant/dist/util.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $xoDeGuest = exports.$xoDeGuest = _squid.$ComponentRoute.extend("EndRoute", {
            path: "xoDeGuest",
            resolve: {
                action: function action($q, $window, $util, $CheckoutAppDataModel, $CheckoutCartModel, $CheckoutSessionModel, $ReturnToMerchant, $rootScope, $populate, $MerchantPreferenceModel, $CheckoutPayeeModel, $CreditDataModel, $unresolved) {
                    function returnMethod(merchantPreferences) {
                        if (_squid.$integration.getConfig("RETURN_METHOD_BASED_ON_MERCHANT_PREFS") && merchantPreferences) {
                            return merchantPreferences.returnMethod();
                        } else {
                            return "GET";
                        }
                    }
                    function returnUrl(checkoutAppData, merchantPreferences) {
                        if (_squid.$integration.getConfig("REDIRECT_QUERY_PARAM")) {
                            return $util.param("redirect_uri");
                        }
                        if (_squid.$integration.getConfig("RETURN_URL_FROM_MERCHANT_PREFS") && merchantPreferences) {
                            return checkoutAppData.urls.return_url || merchantPreferences.returnUrl();
                        }
                        return checkoutAppData.urls.return_url;
                    }
                    function returnParams(checkoutCart, checkoutAppData, checkoutSession, returnToMerchantMethod) {
                        var params = {};
                        params.PayerID = checkoutSession.payer.id;
                        var billingData = checkoutCart.billing;
                        if (billingData && billingData.ba_token && !checkoutAppData.legacy_billing_integration) {
                            params.ba_token = billingData.ba_token;
                        }
                        if (_squid.$integration.getConfig("REDIRECT_QUERY_PARAM")) {
                            params.opType = "payment";
                            params.token = $rootScope.token;
                            params.return_uri = $util.buildURL(checkoutAppData.urls.return_url, params);
                        }
                        return params;
                    }
                    function getMerchantPreferences(dataModel) {
                        if (_squid.$integration.getConfig("POPULATE_MERCHANT_PREFERENCES")) {
                            return $populate(dataModel, {
                                merchantPreferences: $MerchantPreferenceModel.instance(dataModel.payee.merchant.id)
                            });
                        } else {
                            return $q.when();
                        }
                    }
                    var models = {};
                    var capeData = {};
                    return $populate(models, {
                        checkoutAppData: $CheckoutAppDataModel.instance($rootScope.token),
                        checkoutCart: $CheckoutCartModel.instance($rootScope.token),
                        payee: $CheckoutPayeeModel.instance($rootScope.token)
                    }).then(function() {
                        return getMerchantPreferences(models);
                    }).then(function() {
                        var creditDataModel = $CreditDataModel.instance($rootScope.token);
                        return creditDataModel.action("readCreditKey", {
                            data: {
                                capeKey: creditDataModel.getCapeKey()
                            },
                            success: function success(res) {
                                capeData = res;
                                return $populate(models, {
                                    creditDataModel: creditDataModel
                                });
                            }
                        });
                    }).then(function() {
                        var financial_instrument_id = capeData.financial_instrument_id.indexOf("BC") !== 0 ? "BC" + capeData.financial_instrument_id : capeData.financial_instrument_id;
                        var checkoutSession = $CheckoutSessionModel.instance($rootScope.token);
                        return checkoutSession.action("create", {
                            data: {
                                pmode: "FAST",
                                preselected_fi: financial_instrument_id,
                                ftype: "GUEST_ACQUISITION"
                            },
                            params: {
                                pmode: "FAST",
                                preselected_fi: financial_instrument_id,
                                ftype: "GUEST_ACQUISITION"
                            },
                            success: function success() {
                                return $populate(models, {
                                    checkoutSession: checkoutSession
                                });
                            }
                        });
                    }).then(function() {
                        var url = returnUrl(models.checkoutAppData, models.merchantPreferences);
                        var returnToMerchantMethod = returnMethod(models.merchantPreferences);
                        var params = returnParams(models.checkoutCart, models.checkoutAppData, models.checkoutSession, returnToMerchantMethod);
                        return models.checkoutSession.action("authorize", {
                            data: {
                                pmode: "FAST"
                            },
                            success: function success() {
                                if (returnToMerchantMethod === "POST") {
                                    $ReturnToMerchant.postTo(url, params);
                                } else {
                                    if (models.merchantPreferences && !models.merchantPreferences.pdtEnabled()) {
                                        return $ReturnToMerchant.goTo(url);
                                    }
                                    $ReturnToMerchant.goTo($util.buildURL(url, params));
                                }
                            }
                        });
                    });
                }
            }
        });
        angular.value("$xoDeGuest", $xoDeGuest);
        _squid.$ComponentRoute;
        _squid.$integration;
    },
    "./components/xo-login-components/src/fullpage-onetouch-upsell/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-login-components/src/fullpage-onetouch-upsell/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("xo-fullpage-onetouch-upsell.route", [ "squid", "xo-fullpage-onetouch-upsell.directive" ]).factory("$FullpageOnetouchUpsellRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("FullpageOnetouchUpsellRoute", {
                        name: "FullpageOnetouchUpsell",
                        directive: "xo-fullpage-onetouch-upsell",
                        trackingData: {
                            fptiState: "fullpage-onetouch-upsell",
                            buzname: {
                                fullpage: {
                                    pagename: "%::fullpage-onetouch-upsell",
                                    pagename2: "%::fullpage-onetouch-upsell:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-login-components/src/fullpage-onetouch-upsell", "components/xo-login-components/src/fullpage-onetouch-upsell/route.js");
    },
    "./components/xo-login-components/src/fullpage-onetouch-upsell/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-login-components/src/fullpage-onetouch-upsell/template.html"), __webpack_require__("./components/xo-tracking/dist/index.js"), __webpack_require__("./components/ul-inline/dist/inject.js"), __webpack_require__("./components/xo-login-components/src/onetouch-interstitial/kmliUpsell.js"), __webpack_require__("./components/xo-device-info/dist/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular, squid, template) {
            return angular.module("xo-fullpage-onetouch-upsell.directive", [ "squid", "xolocale", "tracking", "xo-device-info" ]).directive("xoFullpageOnetouchUpsell", function() {
                return {
                    template: template,
                    scope: {
                        token: "="
                    },
                    controller: function controller($scope, $rootScope, $state, $element, $timeout, $logger, $LocaleModel, $locale, $CalDataModel, $config, $meta, $KmliUpsell, $DeviceInfo) {
                        $scope.locale = $LocaleModel.instance();
                        $scope.disableCloseButton = $DeviceInfo.isDevice();
                        var ulMeta = $config.ulMeta || {};
                        var PAYPAL = window.PAYPAL || {};
                        var ulTimeOutValue = 5e3;
                        var ulTimeoutPromise = null;
                        var styleSet = false;
                        var fptiData = $KmliUpsell.getFPTIAttributes();
                        function deInitStyles() {
                            $("#paypalLogo").show();
                            $(".footer").show();
                            $(".paypalHeaderWrapper.span14").attr("style", "");
                            $(".row-fluid.paypalHeaderWrapper").show();
                        }
                        function closeInterstitial() {
                            deInitStyles();
                            $state.go("checkout.review");
                        }
                        function failureHandler(reason) {
                            $logger.info("KMLI_UPSELL_error_" + reason);
                            closeInterstitial();
                        }
                        var startTimerTS;
                        function startTimer(tag) {
                            startTimerTS = Date.now();
                            $logger.info("KMLI_UPSELL_START_TIMER_" + tag, {
                                startTime: startTimerTS
                            });
                            $logger.info("checkout_fpti", {
                                from: "Interstitial_Timer",
                                to: "prepare_" + tag
                            });
                            ulTimeoutPromise = $timeout(function() {
                                var stop_time = Date.now();
                                var time_taken = stop_time - startTimerTS;
                                $logger.info("checkout_fpti", {
                                    from: "Interstitial_Timer",
                                    to: "process_timeout",
                                    int_error_code: "ULLOGIN_TIMEOUT",
                                    int_error_description: "ULLOGIN_TIMEOUT",
                                    error_source: "unifiedloginnodeweb",
                                    error_type: "soft_decline",
                                    page_load_time: time_taken
                                });
                                failureHandler("timedout");
                                $rootScope.$emit("loaded");
                            }, ulTimeOutValue);
                        }
                        function stopTimer(tag) {
                            var stopTimerTS = Date.now();
                            var timeTaken = stopTimerTS - startTimerTS;
                            $logger.info("KMLI_UPSELL_STOP_TIMER_" + tag, {
                                stopTimer: stopTimerTS,
                                page_load_time: timeTaken
                            });
                            $logger.info("checkout_fpti", {
                                from: "Interstitial_Timer",
                                to: "process_" + tag,
                                page_load_time: timeTaken
                            });
                            if (ulTimeoutPromise) {
                                $timeout.cancel(ulTimeoutPromise);
                            }
                        }
                        function logSubmit(data) {
                            var fptiPayload = {
                                from: fptiData.stateName,
                                to: "process" + fptiData.transInfix + "optin"
                            };
                            if (data && data.errorCode) {
                                angular.extend(fptiPayload, {
                                    int_error_code: data.errorCode,
                                    error_type: "hard_decline",
                                    error_source: "unifiedloginnodeweb"
                                });
                            }
                            $logger.info("checkout_fpti", fptiPayload);
                        }
                        $scope.$on("$locationChangeStart", function(event, next, current) {
                            if (styleSet) {
                                deInitStyles();
                            }
                        });
                        $scope.hideModal = function(event) {
                            if (event) {
                                event.preventDefault();
                            }
                            $logger.info("checkout_fpti", {
                                from: fptiData.stateName,
                                to: "process" + fptiData.transInfix + "decline",
                                click_source: "close_button"
                            });
                            closeInterstitial();
                        };
                        var ulEventHandlers = {
                            oneTouchInterstitialOptInLoaded: function oneTouchInterstitialOptInLoaded(data) {
                                stopTimer(data.event);
                                $rootScope.$emit("loaded");
                                $("#paypalLogo").hide();
                                $(".footer").hide();
                                $(".paypalHeaderWrapper.span14").attr("style", "border:none;");
                                $(".row-fluid.paypalHeaderWrapper").hide();
                                styleSet = true;
                            },
                            oneTouchInterstitialOptInAttempted: function oneTouchInterstitialOptInAttempted(data) {
                                $rootScope.$emit("loading");
                                startTimer(data.event);
                            },
                            oneTouchInterstitialOptInSuccess: function oneTouchInterstitialOptInSuccess(data) {
                                stopTimer(data.event);
                                $rootScope.$emit("loaded");
                                logSubmit();
                                closeInterstitial(data);
                            },
                            oneTouchInterstitialOptInFailed: function oneTouchInterstitialOptInFailed(data) {
                                stopTimer(data.event);
                                $rootScope.$emit("loaded");
                                logSubmit({
                                    errorCode: data.event
                                });
                                closeInterstitial(data);
                            },
                            oneTouchInterstitialOptInNotAuthorized: function oneTouchInterstitialOptInNotAuthorized(data) {
                                stopTimer(data.event);
                                logSubmit({
                                    errorCode: data.event
                                });
                                $rootScope.$emit("loaded");
                                closeInterstitial(data);
                            },
                            oneTouchInterstitialOptInNotNowClicked: function oneTouchInterstitialOptInNotNowClicked(data) {
                                $logger.info("checkout_fpti", {
                                    from: fptiData.stateName,
                                    to: "process" + fptiData.transInfix + "decline",
                                    click_source: "not_now_link"
                                });
                                closeInterstitial(data);
                            }
                        };
                        function postMessageHandler(response) {
                            $timeout(function() {
                                $logger.info("ul_postmessaged_received", response);
                                var data = response.data || response.error;
                                var eventId = data && data.event;
                                if (eventId) {
                                    $logger.debug("KMLI_UPSELL_" + eventId, response);
                                    var handler = ulEventHandlers[eventId];
                                    if (handler) {
                                        handler(data);
                                    }
                                }
                            });
                        }
                        function loadOneTouchUpsell() {
                            $rootScope.$emit("loading");
                            var options = {
                                targetElement: document.getElementById("injectedOneTouchInterstitial"),
                                queryParams: {
                                    stsRedirectUri: ulMeta.stsReturnUrl,
                                    "country.x": $scope.locale.country,
                                    "locale.x": $scope.locale.getLocaleCode(),
                                    flowId: $scope.token,
                                    correlationId: $CalDataModel.getCalCorrId(),
                                    flowName: "checkout"
                                },
                                iframePathname: "/signin/activate-one-touch",
                                onPostMessage: postMessageHandler
                            };
                            angular.extend(options.queryParams, $KmliUpsell.getOptions());
                            if ($config.deploy.isLocal()) {
                                options.origin = "https://" + $meta.stage;
                            }
                            if (PAYPAL && PAYPAL.unifiedLogin) {
                                startTimer("initializeUpsell");
                                PAYPAL.unifiedLogin.inject(options);
                            } else {
                                failureHandler("PAYPAL.unifiedLogin_undefined");
                            }
                        }
                        loadOneTouchUpsell();
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-login-components/src/fullpage-onetouch-upsell/template.html": function(module, exports) {
        module.exports = '<div class="aside">\n    <a class="close" href="#" title="Close" ng-click="hideModal($event)"></a>\n    <div id="injectedOneTouchInterstitial">\n    </div>\n</div>\n<div class="pushLogo"></div>\n<div class="logo"></div>\n\n';
    },
    "./pages/xo-create-password/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-create-password/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        var _route = __webpack_require__("./components/xo-login-components/src/password-recovery-overlay/route.js");
        var _route2 = _interopRequireDefault(_route);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Route.extend("$xoPageCreatePasswordRoute", {
            path: "createPassword",
            directive: _directive2["default"],
            trackingData: {
                fptiState: "quick_security_check"
            },
            params: {
                targetPage: null
            },
            children: [ {
                route: _route2["default"],
                props: function props() {
                    var _this = this;
                    return {
                        token: this.token,
                        cancel: function cancel() {
                            return _this.goto("^");
                        },
                        success: function success() {
                            return _this.goto("checkout.login");
                        }
                    };
                }
            } ]
        });
        _squid.$Route;
        module.exports = exports["default"];
    },
    "./pages/xo-create-password/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        __webpack_require__("./components/xo-login-components/src/create-password/directive.js");
        __webpack_require__("./pages/xo-create-password/styles.less");
        var _template = __webpack_require__("./pages/xo-create-password/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoPageCreatePasswordDirective", {
            tag: "xo-page-create-password",
            template: _template2["default"],
            props: {
                token: {
                    type: "var"
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    this.auth = _auth.$AuthModel.instance();
                    this.reason = _uiRouter.$stateParams.targetPage;
                    this.onContinue = function() {
                        return _this.goto(".passwordRecovery");
                    };
                    this.logout = function() {
                        _logger.$logger.info("not_you_logout");
                        _this.auth.logout().then(function() {
                            _this.goto("checkout.login", {
                                source: "NOT_YOU"
                            });
                        });
                    };
                }
            }
        });
        _squid.$Component;
        _uiRouter.$stateParams;
        _auth.$AuthModel;
        _logger.$logger;
        module.exports = exports["default"];
    },
    "./components/xo-login-components/src/create-password/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        __webpack_require__("./components/xo-login-components/src/create-password/styles.less");
        var _template = __webpack_require__("./components/xo-login-components/src/create-password/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var CONTENT_KEY_MAP = {
            ADD_CARD: {
                benefitsKey: "passwordRecovery.stepUpBenefits",
                reasonKey: "passwordRecovery.stepUpAddCard"
            },
            ADD_SHIPPING: {
                benefitsKey: "passwordRecovery.stepUpBenefits",
                reasonKey: "passwordRecovery.stepUpAddShipping"
            },
            APPLY_PPC: {
                benefitsKey: "passwordRecovery.stepUpApplyPPCBenefits",
                reasonKey: "passwordRecovery.stepUpApplyPPC"
            },
            GENERIC: {
                benefitsKey: "passwordRecovery.stepUpGenericBenefits",
                reasonKey: "passwordRecovery.stepUpGeneric"
            },
            NEW_PHONE: {
                reasonKey: "passwordRecovery.stepUpNewPhone"
            },
            NEED_US_ADDRESS: {
                reasonKey: "passwordRecovery.stepUpNeedUSAddress"
            },
            CARD_EXPIRED: {
                reasonKey: "passwordRecovery.stepUpCardExpired"
            },
            MERCHANT_NOT_ACCEPT_AMEX: {
                reasonKey: "passwordRecovery.stepUpMerchantNotAcceptAmex"
            },
            NEED_CREDIT_CARD: {
                reasonKey: "passwordRecovery.stepUpContigencyAddCard"
            },
            PAYER_AUTHENTICATION_REQUIRED: {
                reasonKey: "passwordRecovery.stepUpNewAddress"
            },
            BILLING_AGREEMENTS: {
                reasonKey: "passwordRecovery.stepUpBillingAgreements"
            },
            GENERIC_CONTINGENCY: {
                reasonKey: "passwordRecovery.stepUpContigencyGeneric"
            }
        };
        exports["default"] = _squid.$Component.extend("$xoPasswordRecoveryLandingDirective", {
            tag: "xo-create-password",
            template: _template2["default"],
            props: {
                token: {
                    type: "var"
                },
                onContinue: {
                    type: "var"
                },
                onCancel: {
                    type: "var",
                    required: false
                },
                reason: {
                    type: "var",
                    required: false
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    this.contingencyName = this.reason && _squid.$util.camelToCapsUnderscore(this.reason) || "GENERIC";
                    this.getReasonKey = function() {
                        return (CONTENT_KEY_MAP[_this.contingencyName] || CONTENT_KEY_MAP["GENERIC"]).reasonKey;
                    };
                    this.getBenefitsKey = function() {
                        return (CONTENT_KEY_MAP[_this.contingencyName] || CONTENT_KEY_MAP["GENERIC"]).benefitsKey;
                    };
                    this.onSubmit = function() {
                        _logger.$logger.info("checkout_fpti", {
                            from: "quick_security_check",
                            to: "process_quick_security_check"
                        });
                        _this.onContinue();
                    };
                }
            }
        });
        _squid.$Component;
        _squid.$util;
        _logger.$logger;
        module.exports = exports["default"];
    },
    "./components/xo-login-components/src/create-password/styles.less": "./css/app.less",
    "./components/xo-login-components/src/create-password/template.html": function(module, exports) {
        module.exports = '<section id="createPassword" content>\n    <div class="heading">{{content(\'passwordRecovery.quickSecurityCheck\')}}</div>\n\n    <div class="msg">{{content(getReasonKey())}}</div>\n\n    <div class="msg">{{content(getBenefitsKey())}}</div>\n\n    <button class="btn full continueBtn" ng-click="onSubmit()">{{content(\'common.continueLabel\')}}</button>\n    <div ng-if="onCancel" class="cancelLink"><a ng-click="onCancel($event)">{{content(\'common.cancel\')}}</a></div>\n</section>\n';
    },
    "./pages/xo-create-password/styles.less": "./css/app.less",
    "./pages/xo-create-password/template.html": function(module, exports) {
        module.exports = '<section id="createPasswordPage" content>\n    <div class="row-fluid">\n        <div class="span14 trayInner">\n            <p class="userEmail" id="reviewUserInfo">\n                {{ content(\'creditcard.hi\', {userName: auth.first_name ? auth.first_name : auth.email}) }}\n                <span>\n                    <a track-link="login_with_diff_user" href="" class="textLink" ng-click="logout()">{{ content(\'memberReview.notYou\')}}</a>\n                </span>\n            </p>\n            <xo-create-password token="token" reason="reason" on-continue="onContinue"></xo-create-password>\n        </div>\n        <div class="span10">\n            <xo-value-props type="login" title="{{content(\'login.propHead\')}}" text-content="login.propVal"></xo-value-props>\n        </div>\n    </div>\n    <div ui-view></div>\n</section>\n';
    },
    "./components/xo-login-components/src/password-recovery-overlay/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./components/xo-login-components/src/password-recovery-overlay/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Route.extend("$xoPasswordRecoveryOverlayRoute", {
            path: "passwordRecovery",
            directive: _directive2["default"],
            trackingData: {
                fptiState: "password_recovery"
            },
            children: []
        });
        _squid.$Route;
        module.exports = exports["default"];
    },
    "./components/xo-login-components/src/password-recovery-overlay/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
            var _template = __webpack_require__("./components/xo-login-components/src/password-recovery-overlay/template.html");
            var _template2 = _interopRequireDefault(_template);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            exports["default"] = _squid.$Component.extend("$xoPasswordRecoveryOverlayDirective", {
                tag: "xo-password-recovery-overlay",
                template: _template2["default"],
                props: {
                    token: {
                        type: "var"
                    },
                    cancel: {
                        type: "var"
                    },
                    success: {
                        type: "var"
                    }
                },
                lifecycle: {
                    enter: function enter() {
                        var _this = this;
                        var auth = _auth.$AuthModel.instance();
                        _angular.$rootScope.$emit("loading");
                        var hideOverlay = function hideOverlay(callback) {
                            $("#wrapper #spinner").attr("style", "");
                            _this.$element.removeClass("overlayOpen");
                            (0, _angular.$timeout)(function() {
                                return callback();
                            }, 300);
                        };
                        this.hideModal = function(event) {
                            event.preventDefault();
                            hideOverlay(auth.password_less ? _this.cancel : _this.success);
                        };
                        this.onPasswordRecoveryReady = function() {
                            (0, _angular.$timeout)(function() {
                                _angular.$rootScope.$emit("loaded");
                                _this.$element.addClass("overlayOpen");
                            });
                        };
                        this.onContinue = function() {
                            hideOverlay(_this.success);
                        };
                        this.onPasswordRecovery = function() {
                            auth.password_less = false;
                        };
                    }
                }
            });
            _squid.$Component;
            _angular.$rootScope;
            _angular.$timeout;
            _auth.$AuthModel;
            module.exports = exports["default"];
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-login-components/src/password-recovery-overlay/template.html": function(module, exports) {
        module.exports = '<div class="pwrOverlay" ng-class="{mobile: isDevice}">\n    <div class="overlayMask"></div>\n    <div class="overlayWrapper">\n        <div class="overlayContainer">\n            <xo-spinner></xo-spinner>\n            <div class="aside">\n                <a track-link="user_cancel" class="close" href="#" ng-click="hideModal($event)"></a>\n                <section id="pwrOverlay">\n                    <xo-password-recovery token="token" on-password-recovery="onPasswordRecovery" on-load="onPasswordRecoveryReady" on-continue="onContinue"></xo-password-recovery>\n                </section>\n            </div>\n            <div class="pushLogo"></div>\n        </div>\n        <div class="logo"></div>\n    </div>\n</div>\n';
    },
    "./pages/xo-tokenization-info/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-tokenization-info/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$xoTokenizationInfoPageRoute", {
            path: "tokenizationInfo",
            directive: _directive2["default"],
            titleContent: "Tokenization Info Page",
            trackingData: {
                fptiState: "tokenizationInfo"
            },
            children: []
        });
        _index.$Route;
        module.exports = exports["default"];
    },
    "./pages/xo-tokenization-info/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/app/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _template = __webpack_require__("./pages/xo-tokenization-info/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./pages/xo-tokenization-info/styles.less");
        var _app = __webpack_require__("./components/xo-models/src/app/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoTokenizationInfoPageDirective", {
            tag: "xo-tokenization-info",
            template: _template2["default"],
            props: {
                token: {
                    type: "var"
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutSession: _index.$CheckoutSessionModel.instance(this.props.token).retrieve(),
                        walletPinModel: _index2.$TokenizedWalletPinModel.instance(this.props.token).retrieve(),
                        tokenizedWalletInfoModel: _app.$TokenizedWalletInfoModel.instance(this.props.token).retrieve()
                    };
                }
            },
            actions: {
                logout: function logout() {
                    var _this = this;
                    this.auth.logout().then(function() {
                        _logger.$logger.info("tokenized_wallet", {
                            from: "PP_AndroidPay_Info",
                            to: "process_PP_AndroidPay_Info",
                            context_id: _this.props.token,
                            context_type: "EC-Token"
                        });
                        _uiRouter.$state.go("checkout.login", {
                            source: "NOT_YOU"
                        });
                    });
                },
                continue: function _continue() {
                    _logger.$logger.info("tokenized_wallet", {
                        from: "PP_AndroidPay_Info",
                        to: "process_PP_AndroidPay_Info",
                        context_id: this.props.token,
                        context_type: "EC-Token"
                    });
                    var fi = this.models.checkoutSession.get("errorData.resolution.data.fi");
                    if (fi) {
                        var contingency = new _squid.$Contingency(fi.fundingId ? "EXPIRED_DEBIT_CARD" : "NEED_DEBIT_CARD");
                        _squid.$util.extend(contingency, this.models.checkoutSession.errorData);
                        throw contingency;
                    }
                    if (this.models.walletPinModel.isSetupEligible()) {
                        _logger.$logger.debug("pinSetup_required");
                        _uiRouter.$state.go("checkout.pinSetup");
                    } else {
                        _uiRouter.$state.go("checkout.review");
                    }
                }
            },
            lifecycle: {
                enter: function enter() {
                    this.auth = _auth.$AuthModel.instance();
                    this.showNotYou = this.auth && this.auth.showNotYou();
                    this.userName = (0, _squid.formatNameInformal)({
                        first_name: this.auth.first_name,
                        last_name: this.auth.last_name
                    }) || this.auth.email;
                },
                populate: function populate() {
                    (0, _jquery2["default"])("#tokenizationInfo .infoPage").css("min-height", function() {
                        var height = window.innerHeight || document.documentElement && document.documentElement.clientHeight;
                        return height && height - 125;
                    });
                    this.brandName = this.models.tokenizedWalletInfoModel.brandName();
                }
            }
        });
        _auth.$AuthModel;
        _squid.$Component;
        _squid.$Contingency;
        _squid.formatNameInformal;
        _squid.$util;
        _index.$CheckoutSessionModel;
        _index2.$TokenizedWalletPinModel;
        _uiRouter.$state;
        _logger.$logger;
        _app.$TokenizedWalletInfoModel;
        module.exports = exports["default"];
    },
    "./pages/xo-tokenization-info/template.html": function(module, exports) {
        module.exports = '<section id="tokenizationInfo" modal-box content>\n    <div class="infoPage">\n        <span>\n            {{ content(\'creditcard.hi\', {userName: userName}) }}\n            <span ng-if="showNotYou">\n                <a track-link="login_with_diff_user" href="" class="textLink" ng-click="actions.logout()">{{ content(\'memberReview.notYou\')}}</a>\n            </span>\n        </span>\n        <div class="info_content">\n            <div class="heading">{{ content(\'topup.commonTopupInfoHeading\', {type: brandName}) }}</div>\n            <div class="content_wrapper">\n                <div class="segment">\n                    <div class="glyph" id="glyph_a"></div>\n                    <div class="text" ng-bind-html="content(\'topup.commonTopupInfo1\', {type: brandName})"></div>\n                </div>\n                <div class="segment">\n                    <div class="glyph" id="glyph_b"></div>\n                    <div class="text" ng-bind-html="content(\'topup.commonTopupInfo2\', {type: brandName})"></div>\n                </div>\n                <div class="segment">\n                    <div class="glyph" id="glyph_c"></div>\n                    <div class="text" ng-bind-html="content(\'topup.topupInfoMayNeedPin\')"></div>\n                </div>\n            </div>\n        </div>\n        <input ng-click="actions.continue()" value="{{content(\'common.next\')}}" class="btn full continueButton">\n    </div>\n</section>\n';
    },
    "./pages/xo-tokenization-info/styles.less": "./css/app.less",
    "./pages/xo-pin-setup/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-pin-setup/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$xoPinSetupPageRoute", {
            path: "pinSetup",
            directive: _directive2["default"],
            titleContent: "Wallet Pin Setup",
            trackingData: {
                fptiState: "pinSetup"
            },
            children: []
        });
        _index.$Route;
        module.exports = exports["default"];
    },
    "./pages/xo-pin-setup/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _index = __webpack_require__("./components/xo-models/src/app/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _template = __webpack_require__("./pages/xo-pin-setup/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./pages/xo-pin-setup/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoPinSetupPageDirective", {
            tag: "xo-pin-setup",
            template: _template2["default"],
            props: {
                token: {
                    type: "var"
                }
            },
            lifecycle: {
                enter: function enter() {
                    _logger.$logger.info("tokenized_wallet", {
                        from: "PINSETUP",
                        to: "PREPARE_PINSETUP"
                    });
                }
            },
            controller: function controller($scope) {
                var currentPin = "";
                $scope.madeAttempt = false;
                $scope.pinError = "";
                $scope.pinChanged = false;
                function done(pinValue) {
                    _index.$TokenizedWalletPinModel.instance(_angular.$rootScope.token).retrieve().then(function(WalletPinModel) {
                        WalletPinModel.userPin = pinValue;
                        _logger.$logger.info("tokenized_wallet", {
                            from: "PINSETUP",
                            to: "PROCESS_PINSETUP"
                        });
                        (0, _angular.$timeout)(function() {
                            return _uiRouter.$state.go("checkout.review");
                        }, 1500);
                    });
                }
                $scope.pinComplete = function(result) {
                    var value = result && result.value;
                    if (result && result.error === "pin_too_simple") {
                        $scope.pinError = "toEasy";
                        $scope.madeAttempt = false;
                        currentPin = "";
                        $scope.$broadcast("resetPin");
                        return;
                    }
                    $scope.pinChanged = $scope.madeAttempt && currentPin === value;
                    $scope.pinError = $scope.madeAttempt && !$scope.pinChanged ? "missMatch" : "";
                    currentPin = $scope.madeAttempt ? "" : value;
                    $scope.madeAttempt = !$scope.madeAttempt;
                    if (!$scope.pinChanged) {
                        $scope.$broadcast("resetPin");
                    } else {
                        done(value);
                    }
                };
            }
        });
        _squid.$Component;
        _index.$TokenizedWalletPinModel;
        _uiRouter.$state;
        _angular.$rootScope;
        _angular.$timeout;
        _logger.$logger;
        module.exports = exports["default"];
    },
    "./pages/xo-pin-setup/template.html": function(module, exports) {
        module.exports = '<section id="pinSetup" modal-box content>\n    <div class="pinError" ng-if="pinError">\n        <div class="errorIcon"></div>\n        <div class="errorText">\n            <span ng-if="pinError===\'missMatch\'">{{content(\'review.pinMissMatch\')}}</span>\n            <span ng-if="pinError===\'toEasy\'">{{content(\'review.pinEasy\')}}</span>\n        </div>\n    </div>\n    <div class="content">\n        <div class="pinUpdate" ng-if="!pinChanged">\n            <xo-mobile-pin done="pinComplete"></xo-mobile-pin>\n            <div class="subtext" ng-if="!pinMissMatch && !madeAttempt">{{content(\'review.pinFirstEntry\')}}</div>\n            <div class="subtext" ng-if="!pinMissMatch && madeAttempt">{{content(\'review.pinSecondEntry\')}}</div>\n            <div class="subtext" ng-if="pinMissMatch">{{content(\'review.pinBadEntry\')}}</div>\n            <div class="secondarySubtext">{{content(\'review.pinSubText\')}}</div>\n        </div>\n        <div class="pinSuccess" ng-if="pinChanged">\n            <div class="successGif"></div>\n            <div class="successText">{{content(\'review.pinChanged\')}}</div>\n        </div>\n    </div>\n</section>\n';
    },
    "./pages/xo-pin-setup/styles.less": "./css/app.less",
    "./pages/xo-venmo/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-venmo/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        var _route = __webpack_require__("./components/xo-third-party-components/src/venmo-billing/route.js");
        var _route2 = _interopRequireDefault(_route);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Route.extend("$VenmoRoute", {
            path: "venmo",
            directive: _directive2["default"],
            auth: false,
            query: [ _directive.TOKEN_PARAM_NAME ],
            trackingData: {
                fptiState: "venmo_entrypoint",
                trackStateExit: true
            },
            children: [ {
                name: "$AddShippingRoute",
                attributes: {
                    token: "token",
                    "done-fn": "done",
                    sidebar: "sidebar",
                    "render-billing-add-checkbox": "renderBillingAddCheckbox"
                }
            }, {
                route: _route2["default"],
                attributes: {
                    token: "token",
                    sidebar: "sidebar"
                }
            } ]
        });
        _squid.$Route;
        _directive.TOKEN_PARAM_NAME;
        module.exports = exports["default"];
    },
    "./pages/xo-venmo/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.TOKEN_PARAM_NAME = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index = __webpack_require__("./components/xo-models/src/fi/index.js");
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _venmoModels = __webpack_require__("./components/xo-third-party-components/src/venmo-models/index.js");
        var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _template = __webpack_require__("./pages/xo-venmo/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var TOKEN_PARAM_NAME = exports.TOKEN_PARAM_NAME = "payload_id";
        exports["default"] = _squid.$Component.extend("$VenmoPayloadBootstrap", {
            tag: "venmo-payload-bootstrap",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    optional: false
                }
            },
            resolve: {
                venmoParams: function venmoParams() {
                    var _ref;
                    return _ref = {}, _ref[TOKEN_PARAM_NAME] = _uiRouter.$stateParams[TOKEN_PARAM_NAME], 
                    _ref;
                },
                checkoutCart: function checkoutCart() {
                    return _checkout.$CheckoutCartModel.instance(this.token).retrieve();
                },
                checkoutPayee: function checkoutPayee() {
                    return _checkout.$CheckoutPayeeModel.instance(this.token).retrieve();
                },
                appData: function appData() {
                    return _checkout.$CheckoutAppDataModel.instance(this.token).retrieve();
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    _logger.$logger.info([ "xo-venmo directive", "lifecycle", "enter" ].join("::"));
                    this.done = function(shippingAddress) {
                        if (!_this.renderBillingAddCheckbox) {
                            _this.goto("checkout.review");
                        } else if (shippingAddress) {
                            var add = {
                                newAddress: {
                                    address1: shippingAddress.line1,
                                    address2: shippingAddress.line2,
                                    city: shippingAddress.city,
                                    state: shippingAddress.state,
                                    zip: shippingAddress.postal_code,
                                    isoCountry: shippingAddress.country
                                }
                            };
                            var billingAddress = new _index.$AddBillingAddressModel({
                                instrumentid: _this.instrumentID
                            });
                            var self = _this;
                            billingAddress.save({
                                data: add,
                                success: function success() {
                                    _logger.$logger.info([ "xo-venmo directive", "Billing Address", "added" ].join("::"));
                                    _logger.$logger.info([ "xo-venmo directive", "Calling checkout session again" ].join("::"));
                                    var sessionModel = _checkout.$CheckoutSessionModel.instance(self.token);
                                    var cartModel = _checkout.$CheckoutCartModel.instance(self.token);
                                    var venmoOnboardModel = _venmoModels.$VenmoOnboardModel.instance(self.token);
                                    sessionModel.action("create", {
                                        data: {
                                            fraudnet_id: cartModel.supplementary && cartModel.supplementary.risk_correlation_id,
                                            baToken: cartModel.billing && cartModel.billing.ba_token,
                                            user_selected_funding_source: {
                                                dcvv: venmoOnboardModel.dcvv,
                                                product_name: "VENMO_US_PPMERCHANT_SINGLEUSETOKEN"
                                            },
                                            is_skip_gfo: true
                                        },
                                        success: function success() {
                                            _uiRouter.$state.go("checkout.review");
                                        }
                                    });
                                },
                                error: function error(err) {
                                    _logger.$logger.error("billingAddressSaveError", err);
                                    _uiRouter.$state.go("checkout.login", {
                                        venmoError: true
                                    });
                                },
                                validation: function validation(_validation) {
                                    _logger.$logger.error("billingAddressValidationError", _validation);
                                    _uiRouter.$state.go("checkout.login", {
                                        venmoError: true
                                    });
                                }
                            });
                        } else {
                            _this.goto("checkout.venmo.addBilling");
                        }
                    };
                },
                populate: function populate() {
                    var _this2 = this;
                    (0, _jquery2["default"])("#preloaderSpinner").show();
                    var venmoParams = this.venmoParams, checkoutCart = this.checkoutCart, checkoutPayee = this.checkoutPayee, appData = this.appData;
                    var checkoutSessionModel = _checkout.$CheckoutSessionModel.instance(this.token);
                    var venmoOnboardModel = _venmoModels.$VenmoOnboardModel.instance(this.token);
                    var venmoDcvv = void 0;
                    var totalTransaction = checkoutCart && checkoutCart.purchase && checkoutCart.purchase.amounts && checkoutCart.purchase.amounts.total;
                    var onboardRequest = {
                        payload_id: venmoParams.payload_id,
                        limit: {
                            currency: totalTransaction.currency_code,
                            amount: totalTransaction.amount
                        },
                        intent: checkoutCart.payment_action,
                        merchant_id: checkoutPayee.merchant.id
                    };
                    var onboardMember = function onboardMember() {
                        return venmoOnboardModel.save({
                            data: onboardRequest,
                            success: function success(data) {
                                _logger.$logger.info(data);
                                venmoDcvv = data.dcvv;
                                _this2.instrumentID = data.instrument_id;
                                return data;
                            },
                            error: function error(err) {
                                failureHandling("hermesnodeweb", err && err.stack || err);
                            },
                            validation: function validation(_validation2) {
                                return _uiRouter.$state.go("checkout.login", {
                                    venmoError: true
                                });
                            },
                            contingencies: {
                                DEFAULT: function DEFAULT(msg, contingency) {
                                    failureHandling("hermesnodeweb", contingency && contingency.message);
                                }
                            }
                        });
                    };
                    var setVenmoToken = function setVenmoToken() {
                        return _thirdPartyInfo.thirdPartyExperience.setAsVenmoExperience(_this2.token);
                    };
                    var self = this;
                    var createCheckoutSession = function createCheckoutSession() {
                        return checkoutSessionModel.action("create", {
                            data: {
                                fraudnet_id: checkoutCart.supplementary && checkoutCart.supplementary.risk_correlation_id,
                                baToken: checkoutCart.billing && checkoutCart.billing.ba_token,
                                user_selected_funding_source: {
                                    dcvv: venmoDcvv,
                                    product_name: "VENMO_US_PPMERCHANT_SINGLEUSETOKEN"
                                },
                                is_skip_gfo: true
                            },
                            success: function success(result) {
                                return result;
                            },
                            contingencies: {
                                NEED_SHIPPING_ADDRESS: function NEED_SHIPPING_ADDRESS(msg, contingency) {
                                    _logger.$logger.info("venmo_shipping_contingency");
                                    return _index.$BillingAddressesModel.instance().retrieve().then(function(billingAddresses) {
                                        self.renderBillingAddCheckbox = !(billingAddresses && billingAddresses.addresses && billingAddresses.addresses["0"]);
                                        _uiRouter.$state.go("checkout.venmo.addShipping");
                                    });
                                },
                                DEFAULT: function DEFAULT(msg, contingency) {
                                    _logger.$logger.info("venmo_unhandled_symphony_contingency", msg);
                                    failureHandling("paymentapiplatserv", contingency && contingency.message);
                                }
                            }
                        });
                    };
                    var refreshAuthState = function refreshAuthState() {
                        var auth = _auth.$AuthModel.instance().reload();
                        _squid.$locale.choose(auth.country, auth.language, false);
                        return auth;
                    };
                    var onAuth = function onAuth(authModel) {
                        if (window.xprops && window.xprops.onAuth && authModel && authModel.access_token) {
                            return window.xprops.onAuth({
                                accessToken: authModel.access_token
                            });
                        }
                    };
                    var routeDecision = function routeDecision(checkoutSession) {
                        if (checkoutSession) {
                            _index.$BillingAddressesModel.instance().retrieve().then(function(billingAddresses) {
                                _this2.renderBillingAddCheckbox = !(billingAddresses && billingAddresses.addresses && billingAddresses.addresses["0"]);
                                if (appData && appData.flags && appData.flags.shipping_address_required && !checkoutSession.shipping) {
                                    return _uiRouter.$state.go("checkout.venmo.addShipping");
                                } else if (_this2.renderBillingAddCheckbox) {
                                    return _uiRouter.$state.go("checkout.venmo.addBilling");
                                } else {
                                    return _uiRouter.$state.go("checkout.review");
                                }
                            });
                        } else {
                            _logger.$logger.info("venmo_empty_checkoutSession");
                        }
                    };
                    var failureHandling = function failureHandling(source, err) {
                        _logger.$logger.info("checkout_fpti", {
                            from: "VENMO_ENTRYPOINT",
                            to: "process_venmo_entrypoint",
                            int_error_description: "venmo_onboard_failure",
                            error_type: "soft_decline",
                            error_source: source
                        });
                        _logger.$logger.error("venmoOnboardingError", err);
                        _uiRouter.$state.go("checkout.login", {
                            venmoError: true
                        });
                    };
                    onboardMember().then(setVenmoToken).then(refreshAuthState).then(onAuth).then(createCheckoutSession).then(routeDecision)["catch"](function(err) {
                        venmoOnboardModel.invalidate();
                        if (err instanceof _squid.$Forbidden) {} else {
                            failureHandling("hermesnodeweb", err && err.stack || err);
                        }
                    });
                },
                exit: function exit() {
                    (0, _jquery2["default"])("#preloaderSpinner").hide();
                }
            }
        });
        _squid.$Component;
        _squid.$locale;
        _squid.$Forbidden;
        _logger.$logger;
        _checkout.$CheckoutSessionModel;
        _checkout.$CheckoutCartModel;
        _checkout.$CheckoutAppDataModel;
        _checkout.$CheckoutPayeeModel;
        _index.$AddBillingAddressModel;
        _index.$BillingAddressesModel;
        _auth.$AuthModel;
        _venmoModels.$VenmoOnboardModel;
        _thirdPartyInfo.thirdPartyExperience;
        _uiRouter.$stateParams;
        _uiRouter.$state;
    },
    "./pages/xo-venmo/template.html": function(module, exports) {
        module.exports = '<section class="addShipping" id="addShipping" content>\n    <div class="row-fluid">\n\n        <div class="span14">\n            <ui-view></ui-view>\n        </div>\n\n    </div>\n</section>\n\n';
    },
    "./components/xo-third-party-components/src/venmo-billing/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./components/xo-third-party-components/src/venmo-billing/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        __webpack_require__("./components/xo-address-components/src/add-address/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Route.extend("$VenmoAddBillingRoute", {
            path: "addBilling",
            directive: _directive2["default"],
            titleContent: "addBillingAddress.title",
            trackingData: {
                fptiState: "edit_billing"
            },
            loginRequired: true
        });
        _squid.$Route;
        module.exports = exports["default"];
    },
    "./components/xo-third-party-components/src/venmo-billing/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _checkout = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index = __webpack_require__("./components/xo-models/src/fi/index.js");
        var _venmoModels = __webpack_require__("./components/xo-third-party-components/src/venmo-models/index.js");
        __webpack_require__("./components/xo-address-components/src/add-address/directive.js");
        __webpack_require__("./components/xo-page-components/src/aside-header/directive.js");
        __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js");
        __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _template = __webpack_require__("./components/xo-third-party-components/src/venmo-billing/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-third-party-components/src/venmo-billing/style.less");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$VenmoAddBilling", {
            tag: "venmo-add-billing",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    optional: false
                },
                sidebar: {
                    type: "var",
                    optional: false
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutSession: _checkout.$CheckoutSessionModel.instance(this.token).retrieve()
                    };
                }
            },
            lifecycle: {
                enter: function enter() {
                    this.country = _squid.$locale.getCountryCodeISO();
                    this.billing = true;
                    this.address = this.address || {
                        country: this.country
                    };
                },
                populate: function populate() {
                    var $el = (0, _jquery2["default"])(this.$element);
                    var handleValidation = function handleValidation(res) {
                        if (res && res.fields && res.fields.length) {
                            res.fields.forEach(function(field) {
                                if (field.field) {
                                    var $field = (0, _jquery2["default"])($el.find('[name="' + field.field + '"]'));
                                    if ($field.length === 0 && field.field === "zip") {
                                        $field = (0, _jquery2["default"])($el.find('[ng-model="address.postal_code"], [ng-model="zipCode"]'));
                                    }
                                    $field.addClass("backendError");
                                    $field.attr("aria-invalid", true);
                                }
                            });
                        }
                        $el.find("form").find(".backendError, .ng-invalid").first().focus();
                    };
                    this.done = function() {
                        this.goto("checkout.review");
                    };
                    this.error = function() {
                        this.goto("checkout.login", {
                            venmoError: true
                        });
                    };
                    this.onSubmit = function() {
                        this.validateAddress();
                    };
                    this.validateAddress = function() {
                        var self = this;
                        var newBilling = new _index.$BillingAddressModel({
                            line1: this.address.line1,
                            line2: this.address.line2,
                            city: this.address.city,
                            state: this.address.state,
                            postal_code: this.address.postal_code,
                            country: this.country,
                            id: "0"
                        });
                        newBilling.save({
                            success: function success() {
                                if (self && self.models && self.models.checkoutSession && self.models.checkoutSession.plan && self.models.checkoutSession.plan.sources && self.models.checkoutSession.plan.sources["0"] && self.models.checkoutSession.plan.sources["0"].instrument_id) {
                                    var instrumentID = self.models.checkoutSession.plan.sources["0"].instrument_id;
                                    self.saveBillingAddressAndReturn(instrumentID);
                                } else {
                                    self.error();
                                }
                            },
                            validation: function validation(res) {
                                handleValidation(res);
                            },
                            error: function error(err) {
                                _logger.$logger.error("venmoBillingAddressValidateError", err);
                                self.error();
                            }
                        });
                    };
                    this.saveBillingAddressAndReturn = function(instrumentID) {
                        var self = this;
                        var add = {
                            newAddress: {
                                address1: this.address.line1,
                                address2: this.address.line2,
                                city: this.address.city,
                                state: this.address.state,
                                zip: this.address.postal_code,
                                isoCountry: this.country
                            }
                        };
                        var billingAddress = new _index.$AddBillingAddressModel({
                            instrumentid: instrumentID
                        });
                        billingAddress.save({
                            data: add,
                            success: function success() {
                                _logger.$logger.info([ "venmo-billing directive", "Billing Address", "added" ].join("::"));
                                _logger.$logger.info([ "venmo-billing directive", "Calling checkout session again" ].join("::"));
                                var sessionModel = _checkout.$CheckoutSessionModel.instance(self.token);
                                var cartModel = _checkout.$CheckoutCartModel.instance(self.token);
                                var venmoOnboardModel = _venmoModels.$VenmoOnboardModel.instance(self.token);
                                sessionModel.action("create", {
                                    data: {
                                        fraudnet_id: cartModel.supplementary && cartModel.supplementary.risk_correlation_id,
                                        baToken: cartModel.billing && cartModel.billing.ba_token,
                                        user_selected_funding_source: {
                                            dcvv: venmoOnboardModel.dcvv,
                                            product_name: "VENMO_US_PPMERCHANT_SINGLEUSETOKEN"
                                        },
                                        is_skip_gfo: true
                                    },
                                    success: function success() {
                                        self.done();
                                    }
                                });
                            },
                            validation: function validation(err) {
                                _logger.$logger.error("venmoBillingAddressValidationError", err);
                                self.error();
                            },
                            error: function error(err) {
                                _logger.$logger.error("venmoAddBillingAddressError", err);
                                self.error();
                            }
                        });
                    };
                }
            }
        });
        _squid.$Component;
        _squid.$locale;
        _checkout.$CheckoutSessionModel;
        _checkout.$CheckoutCartModel;
        _index.$BillingAddressModel;
        _index.$AddBillingAddressModel;
        _venmoModels.$VenmoOnboardModel;
        _logger.$logger;
        module.exports = exports["default"];
    },
    "./components/xo-third-party-components/src/venmo-billing/template.html": function(module, exports) {
        module.exports = '<div id="addBillingAddress" ng-if="billing" modal-box="address">\n\n\n    <h1 class="gamma addBillingTitle" ng-if="!sidebar && !debitCardFlow">{{ content(\'addBillingAddress.title\') }}</h1>\n\n    <form id="billingAddressForm" name="billingAddressForm" class="asideView addressForm" content form-autofocus novalidate>\n        <div class="trayInner container">\n            <div class="clearfix">\n                <xo-add-address country="country" address="address" token="token"></xo-add-address>\n            </div>\n\n            <div class="buttons clearfix">\n                <input track-submit  type="submit" id="proceedButton-venmoBA" value="{{ content(\'common.save\') }}" class="btn" ng-class="{full:sidebar}" validate-submit="onSubmit()" />\n            </div>\n        </div>\n    </form>\n</div>\n<div ui-view></div>\n';
    },
    "./components/xo-third-party-components/src/venmo-billing/style.less": "./css/app.less",
    "./pages/xo-third-party-wallet/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-third-party-wallet/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Route.extend("$ThirdPartyWalletFlowRoute", {
            path: "thirdPartyWalletFlow",
            directive: _directive2["default"],
            auth: false,
            trackingData: {
                fptiState: "third_party_wallet_flow",
                trackStateExit: true
            }
        });
        _squid.$Route;
        module.exports = exports["default"];
    },
    "./pages/xo-third-party-wallet/directive.js": function(module, exports, __webpack_require__) {
        (function(console) {
            exports.__esModule = true;
            var _template = __webpack_require__("./pages/xo-third-party-wallet/template.html");
            var _template2 = _interopRequireDefault(_template);
            __webpack_require__("./pages/xo-third-party-wallet/styles.less");
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
            var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
            var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
            var _index2 = __webpack_require__("./components/xo-models/src/thirdPartyWallet/index.js");
            var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
            var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            exports["default"] = _squid.$Component.extend("$xoThirdPartyFlowComponent", {
                tag: "xo-third-party-flow",
                template: _template2["default"],
                props: {
                    token: {
                        type: "var",
                        required: true
                    }
                },
                resolve: {
                    models: function models() {
                        return {
                            cart: _index.$CheckoutCartModel.instance(this.props.token).retrieve(),
                            checkoutAppData: _index.$CheckoutAppDataModel.instance(this.props.token).retrieve(),
                            checkoutPayee: _index.$CheckoutPayeeModel.instance(this.props.token).retrieve()
                        };
                    }
                },
                actions: {},
                lifecycle: {
                    enter: function enter() {
                        if (_squid.$locale.country === "CN") {
                            _squid.$locale.choose("C2", "zh_C2", false);
                        }
                    },
                    populate: function populate() {
                        var _this = this;
                        var routingDecision = function routingDecision(payload_id) {
                            var thirdPartyOnboard = _index2.$ThirdPartyOnboard.instance(_this.token);
                            return thirdPartyOnboard.action("lookup", {
                                data: {
                                    payload_id: payload_id
                                },
                                success: function success(result) {
                                    refreshAuthState().then(onAuth).then(setBaiduExperience).then(createCheckoutSession);
                                },
                                error: function error(err) {
                                    _logger.$logger.error("lookup_api_error", err);
                                    _logger.$logger.info("checkout_fpti", {
                                        from: "third_party_wallet_flow",
                                        to: "process_third_party_wallet_flow",
                                        int_error_description: "baidu_lookup_failure",
                                        error_type: "soft_decline",
                                        error_source: "hermesnodeweb"
                                    });
                                    _uiRouter.$state.go("checkout.login", {
                                        baiduError: true
                                    });
                                },
                                contingencies: {
                                    NO_PAYMENT_TOKEN_FOUND: function NO_PAYMENT_TOKEN_FOUND(msg, contingency) {
                                        _uiRouter.$state.go("checkout.thirdPartyInfoCollectFlow", {
                                            payload_id: payload_id
                                        });
                                    },
                                    DEFAULT: function DEFAULT(msg, contingency) {
                                        _logger.$logger.info("checkout_fpti", {
                                            from: "third_party_wallet_flow",
                                            to: "process_third_party_wallet_flow",
                                            int_error_description: "baidu_lookup_failure",
                                            error_type: "soft_decline",
                                            error_source: "hermesnodeweb"
                                        });
                                        _uiRouter.$state.go("checkout.login", {
                                            baiduError: true
                                        });
                                    }
                                }
                            });
                        };
                        var createCheckoutSession = function createCheckoutSession() {
                            var checkoutSessionModel = _index.$CheckoutSessionModel.instance(_this.token);
                            return checkoutSessionModel.action("create", {
                                data: {
                                    fraudnet_id: _this.models.cart.supplementary && _this.models.cart.supplementary.risk_correlation_id,
                                    user_selected_funding_source: {
                                        product_name: "BAIDU"
                                    },
                                    is_skip_gfo: true
                                },
                                success: function success() {
                                    return _uiRouter.$state.go("checkout.review");
                                },
                                contingencies: {
                                    DEFAULT: function DEFAULT(msg, contingency) {
                                        _logger.$logger.info("SYMPHONY CONTINGENCY", msg);
                                        _uiRouter.$state.go("checkout.login", {
                                            baiduError: true
                                        });
                                    }
                                }
                            });
                        };
                        var refreshAuthState = function refreshAuthState() {
                            var auth = _auth.$AuthModel.instance().reload();
                            _squid.$locale.choose(auth.country, auth.language, false);
                            return auth;
                        };
                        var onAuth = function onAuth(authModel) {
                            if (window.xprops && window.xprops.onAuth && authModel && authModel.access_token) {
                                return window.xprops.onAuth({
                                    accessToken: authModel.access_token
                                });
                            }
                        };
                        var setBaiduExperience = function setBaiduExperience() {
                            return _thirdPartyInfo.thirdPartyExperience.setAsBaiduExperience(_this.token);
                        };
                        var _models = this.models, cart = _models.cart, checkoutPayee = _models.checkoutPayee;
                        var hashResult = _index2.$ThirdPartyOnboard.instance(this.token).action("hash-info", {
                            data: {
                                payToken: this.token
                            },
                            success: function success(result) {
                                return result;
                            },
                            contingencies: {
                                DEFAULT: function DEFAULT(msg, contingency) {
                                    _uiRouter.$state.go("checkout.login", {
                                        baiduError: true
                                    });
                                }
                            }
                        });
                        hashResult.then(function(result) {
                            return _squid.$dom.loadScript("baiduComponent", "https://www.paypalobjects.com/api/thirdPartyWallet.js").then(function() {
                                _logger.$logger.info("rendering_baidu_flow");
                                _logger.$logger.info("checkout_fpti", {
                                    to: "rendering_baidu_iframe"
                                });
                                return window.paypal.ThirdPartyWallet.render({
                                    env: _squid.$config.thirdPartyWallet.baidu,
                                    timeout: 2e4,
                                    properties: {
                                        paypal_order_id: _this.token,
                                        business_id: checkoutPayee.get("merchant.id"),
                                        currency_code: cart.get("purchase.amounts.total.currency_code"),
                                        transaction_amount: cart.get("purchase.amounts.total.amount"),
                                        payload_hash: result.hash,
                                        key_id: result.keyId
                                    },
                                    onComplete: function onComplete(data) {
                                        _logger.$logger.info("complete_bently_flow", {
                                            payload_id: data.payloadID
                                        });
                                        _logger.$logger.info("checkout_fpti", {
                                            to: "completing_baidu_iframe"
                                        });
                                        if (data && data.payloadID) {
                                            return routingDecision(data.payloadID);
                                        } else {
                                            _uiRouter.$state.go("checkout.login", {
                                                baiduError: true
                                            });
                                        }
                                    },
                                    onCancel: function onCancel(data) {
                                        _uiRouter.$state.go("checkout.login", {
                                            baiduError: true
                                        });
                                    },
                                    onError: function onError(data) {
                                        _logger.$logger.info("baidu_error", data);
                                        _logger.$logger.info("checkout_fpti", {
                                            int_error_code: data.errorReason,
                                            int_error_desc: data.pageName
                                        });
                                    },
                                    onTransitionStart: function onTransitionStart(data) {
                                        console.log("transition start happened ", data);
                                    },
                                    onTransitionEnd: function onTransitionEnd(data) {
                                        console.log("transition end happened ", data);
                                    },
                                    onTimeout: function onTimeout(data) {
                                        _logger.$logger.info("baidu_flow_load_timeout");
                                        _logger.$logger.info("checkout_fpti", {
                                            int_error_code: "TIMEOUT",
                                            int_error_desc: "Iframe timeout"
                                        });
                                        _uiRouter.$state.go("checkout.login", {
                                            baiduError: true
                                        });
                                    }
                                }, "#thirdPartyWalletContainer");
                            });
                        });
                    },
                    exit: function exit() {}
                }
            });
            _squid.$Component;
            _squid.$dom;
            _squid.$locale;
            _squid.$config;
            _logger.$logger;
            _index.$CheckoutPayeeModel;
            _index.$CheckoutCartModel;
            _index.$CheckoutAppDataModel;
            _index.$CheckoutSessionModel;
            _auth.$AuthModel;
            _index2.$ThirdPartyOnboard;
            _thirdPartyInfo.thirdPartyExperience;
            _uiRouter.$state;
            module.exports = exports["default"];
        }).call(exports, __webpack_require__("../node_modules/console-browserify/index.js"));
    },
    "./pages/xo-third-party-wallet/template.html": function(module, exports) {
        module.exports = '<div id="thirdPartyWalletContainer"></div>\n';
    },
    "./pages/xo-third-party-wallet/styles.less": "./css/app.less",
    "./components/xo-models/src/thirdPartyWallet/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$ThirdPartyOnboard = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $ThirdPartyOnboard = exports.$ThirdPartyOnboard = _squid.$Model.extend("$ThirdPartyOnboard", {
            api: new _squid.$Api({
                uri: "/api/third-party",
                cache: true
            })
        });
        angular.value("$ThirdPartyOnboard", $ThirdPartyOnboard);
        _squid.$Model;
        _squid.$Api;
    },
    "./pages/xo-pay-with-card/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-pay-with-card/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        var _route = __webpack_require__("./pages/xo-sidebar/route.js");
        var _route2 = _interopRequireDefault(_route);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$xoPayWithCardPageRoute", {
            path: "payWithCard",
            directive: _directive2["default"],
            titleContent: "payWithCard.title",
            trackingData: {
                fptiState: "pay-with-card",
                templateName: "paywithcard.dust",
                pageGoal: "pay-with-card",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-pay-with-card",
                        pagename2: "%::fullpage-pay-with-card:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: [ {
                route: _route2["default"],
                attributes: {
                    "back-uri": "backUri",
                    "done-uri": "doneUri",
                    update: "update",
                    token: "token"
                }
            } ]
        });
        _index.$Route;
        module.exports = exports["default"];
    },
    "./pages/xo-pay-with-card/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _template = __webpack_require__("./pages/xo-pay-with-card/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _marketingoffer = __webpack_require__("./components/xo-models/src/marketingoffer/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Component.extend("$xoPayWithCardPageDirective", {
            tag: "xo-pay-with-card-page",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: true
                }
            },
            resolve: {
                models: function models() {
                    return {
                        auth: _auth.$AuthModel.instance().retrieve(),
                        checkoutSession: _index2.$CheckoutSessionModel.instance(this.props.token).retrieve()
                    };
                }
            },
            lifecycle: {
                enter: function enter() {
                    this.nmjExperience = {
                        multiPage: true
                    };
                    this.backUri = this.doneUri = "checkout.payWithCard";
                    this.propValueObj = {
                        propHeader: "memberReview.propHead",
                        propVal: "memberReview.propVal",
                        propImage: "https://www.paypalobjects.com/images/checkout/hermes/scr_vp_fprd_shield_bags.png"
                    };
                    this.installment = {};
                },
                populate: function populate() {
                    var $scope = this;
                    var auth = $scope.models.auth;
                    $scope.user = {
                        first_name: auth.first_name,
                        last_name: auth.last_name
                    };
                    $scope.formattedNameInformal = (0, _index.formatNameInformal)($scope.user) || auth.email;
                    $scope.showNotYou = auth && auth.showNotYou();
                    $scope.checkoutSession = $scope.models.checkoutSession;
                    var memberSegment = _marketingoffer.$MemberSegmentModel.instance();
                    $scope.creditOfferContext = {
                        newMember: {
                            variant: "multi_page",
                            useCEPDecision: true,
                            creditOffer: memberSegment && memberSegment.creditOffer
                        }
                    };
                },
                exit: function exit() {
                    delete this.models.checkoutSession.message;
                }
            },
            actions: {
                next: function next() {
                    _uiRouter.$state.go("checkout.shipTo");
                }
            }
        });
        _index.$Component;
        _index.formatNameInformal;
        _auth.$AuthModel;
        _index2.$CheckoutSessionModel;
        _marketingoffer.$MemberSegmentModel;
        _uiRouter.$state;
        module.exports = exports["default"];
    },
    "./pages/xo-pay-with-card/template.html": function(module, exports) {
        module.exports = '<section class="review" content ng-click="onPageClick($event)" id="payWithCard" tabindex=-1 role="presentation">\n\n    <xo-title title-txt="{{content(\'memberReview.memberReviewTitle\')}}" class="accessAid"></xo-title>\n\n    <div class="row-fluid justMember">\n        <div class="span14 trayInner reviewSections">\n            <div id="userBanner" class="userBanner">\n                 <xo-banner is-nmj="nmjExperience">\n                    <p class="userEmail" id="reviewUserInfo">\n                        <span >{{ content(\'memberReview.hiUser_welcome\', {userName: formattedNameInformal}) }}</span>\n                        <span ng-if="showNotYou"><xo-not-you></xo-not-you></span>\n                    </p>\n                </xo-banner>\n            </div>\n\n            <div id="userAssistBanner" class="reviews">\n                <xo-assist-banner header="content(\'payWith.assistHeader\')"\n                            body="content(\'payWith.assistBody\')"\n                            hide-highlight="!!checkoutSession.message">\n                </xo-assist-banner>\n            </div>\n\n            <div id="notifications" ng-if"checkoutSession.message">\n                <xo-message message="checkoutSession.message"></xo-message>\n            </div>\n\n            <div id="payWithSection" class="reviews">\n                <xo-review-paywith  token="token" nmj-experience=nmjExperience></xo-review-paywith>\n            </div>\n\n            <div class="offers" class="reviews hideOffersSeparator hideSeparator">\n                <xo-offer token="token" parent-context="creditOfferContext" installment="installment"></xo-offer>\n            </div>\n\n            <div id="button" class="buttons reviewButton">\n                <input track-submit type="submit" value="{{content(\'addShipping.next\')}}" id="confirmButtonTop" class="btn full confirmButton continueButton" ng-click="actions.next()" />\n            </div>\n\n        </div>\n\n        <!-- Value Props -->\n        <div class="span10">\n            <xo-marketing-offers placement-code="\'202003\'"\n                                 token="token"\n                                 page-name="\'HERMES_RYI_PAGE\'"\n                                 title-txt-property="propValueObj.propHeader"\n                                 subtitle-property="propValueObj.propVal"\n                                 background-image= "propValueObj.propImage"\n            >\n            </xo-marketing-offers>\n        </div>\n    </div>\n\n    <!-- Placeholder to be able to render the sidebar routes-->\n    <div ui-view></div>\n\n</section>\n';
    },
    "./pages/xo-ship-to/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-ship-to/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        var _route = __webpack_require__("./pages/xo-sidebar/route.js");
        var _route2 = _interopRequireDefault(_route);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Route.extend("$xoShipToPageRoute", {
            path: "shipTo",
            directive: _directive2["default"],
            titleContent: "shipTo.title",
            trackingData: {
                fptiState: "ship-to",
                templateName: "shipTo.dust",
                pageGoal: "ship-to",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-ship-to",
                        pagename2: "%::fullpage-ship-to:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: [ {
                route: _route2["default"],
                attributes: {
                    "back-uri": "backUri",
                    "done-uri": "backUri",
                    token: "token"
                }
            } ]
        });
        _index.$Route;
        module.exports = exports["default"];
    },
    "./pages/xo-ship-to/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _template = __webpack_require__("./pages/xo-ship-to/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _index = __webpack_require__("./components/squid/dist/index.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _index2 = __webpack_require__("./components/xo-models/src/checkout/index.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _index.$Component.extend("$xoShipToPageDirective", {
            tag: "xo-ship-to-page",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: true
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutSession: _index2.$CheckoutSessionModel.instance(this.props.token).retrieve()
                    };
                }
            },
            lifecycle: {
                enter: function enter() {
                    this.nmjExperience = {
                        multiPage: true
                    };
                    this.propValueObj = {
                        propHeader: "memberReview.propHead",
                        propVal: "memberReview.propVal",
                        propImage: "https://www.paypalobjects.com/images/checkout/hermes/scr_vp_fprd_shield_bags.png"
                    };
                },
                populate: function populate() {
                    this.token = this.props.token;
                    this.backUri = "checkout.shipTo";
                    this.checkoutSession = this.models.checkoutSession;
                },
                exit: function exit() {
                    delete this.models.checkoutSession.message;
                }
            },
            actions: {
                next: function next() {
                    _uiRouter.$state.go("checkout.review");
                }
            }
        });
        _index.$Component;
        _uiRouter.$state;
        _index2.$CheckoutSessionModel;
        module.exports = exports["default"];
    },
    "./pages/xo-ship-to/template.html": function(module, exports) {
        module.exports = '<section class="review" content ng-click="onPageClick($event)" id="shipTo" tabindex=-1 role="presentation">\n\n    <xo-title title-txt="{{content(\'memberReview.memberReviewTitle\')}}" class="accessAid"></xo-title>\n\n    <div class="row-fluid justMember">\n        <div class="span14 trayInner reviewSections">\n            <div id="userAssistBanner" class="reviews">\n                <xo-assist-banner header="htmlContent(\'addShipping.assistHeader\')"\n                            body="htmlContent(\'addShipping.assistBody\')"></xo-assist-banner>\n            </div>\n            <div id="notifications" ng-if"checkoutSession.message">\n                <xo-message message="checkoutSession.message"></xo-message>\n            </div>\n            <div id="reviewAddress" class="reviews">\n                <xo-review-address token="token" make-addr-preferred="makeAddrPreferred" store-pick-up-selected="checkoutCart.isShippingMethodStorePickUp()" nmj-experience=nmjExperience hide-ship-to-header=true></xo-review-address>\n            </div>\n            <div id="button" class="buttons reviewButton">\n                <input track-submit type="submit" value="{{content(\'addShipping.next\')}}" id="confirmButtonTop" class="btn full confirmButton continueButton" ng-click="actions.next()" />\n            </div>\n        </div>\n\n        <!-- Value Props -->\n        <div class="span10">\n            <xo-marketing-offers placement-code="\'202003\'"\n                                 token="token"\n                                 page-name="\'HERMES_RYI_PAGE\'"\n                                 title-txt-property="propValueObj.propHeader"\n                                 subtitle-property="propValueObj.propVal"\n                                 background-image= "propValueObj.propImage"\n            >\n            </xo-marketing-offers>\n        </div>\n\n    </div>\n\n    <div ui-view></div>\n</section>\n';
    },
    "./pages/xo-third-party-info/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-third-party-info/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Route.extend("$ThirdPartyInfoCollectFlowRoute", {
            path: "thirdPartyInfoCollectFlow",
            directive: _directive2["default"],
            query: [ "payload_id" ],
            auth: false,
            trackingData: {
                fptiState: "third_party_info_collect"
            }
        });
        _squid.$Route;
        module.exports = exports["default"];
    },
    "./pages/xo-third-party-info/directive.js": function(module, exports, __webpack_require__) {
        (function($, console) {
            exports.__esModule = true;
            var _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };
            var _template = __webpack_require__("./pages/xo-third-party-info/template.html");
            var _template2 = _interopRequireDefault(_template);
            __webpack_require__("./pages/xo-third-party-info/styles.less");
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
            var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
            var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
            var _index2 = __webpack_require__("./components/xo-models/src/fi/index.js");
            var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
            var _index3 = __webpack_require__("./components/xo-models/src/thirdPartyWallet/index.js");
            var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
            __webpack_require__("./components/xo-form-components/src/select-shipping-country/directive.js");
            __webpack_require__("./components/xo-address-components/src/add-address/directive.js");
            __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js");
            __webpack_require__("./components/xo-ui-components/src/message/directive.js");
            __webpack_require__("./components/xo-form-components/src/phone/phoneInput/directive.js");
            __webpack_require__("./components/xo-form-components/src/emailInput/directive.js");
            __webpack_require__("./components/xo-form-components/src/name-input/directive.js");
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            exports["default"] = _squid.$Component.extend("$xoThirdPartyInfoFlowComponent", {
                tag: "xo-third-party-info-collect",
                template: _template2["default"],
                props: {
                    token: {
                        type: "var",
                        required: true
                    }
                },
                resolve: {
                    models: function models() {
                        return {
                            cart: _index.$CheckoutCartModel.instance(this.props.token).retrieve(),
                            checkoutAppData: _index.$CheckoutAppDataModel.instance(this.props.token).retrieve(),
                            checkoutPayee: _index.$CheckoutPayeeModel.instance(this.props.token).retrieve()
                        };
                    },
                    payloadId: function payloadId() {
                        return {
                            payload_id: _uiRouter.$stateParams["payload_id"]
                        };
                    }
                },
                actions: {
                    handleFormValidation: function handleFormValidation(res) {
                        var $el = $(this.$element);
                        if (res && res.fields && res.fields.length) {
                            res.fields.forEach(function(field) {
                                if (field.field) {
                                    var $field = $($el.find('[name="' + field.field + '"]'));
                                    if ($field.length === 0 && field.field === "zip") {
                                        $field = $($el.find('[ng-model="address.postal_code"], [ng-model="zipCode"]'));
                                    }
                                    $field.addClass("backendError");
                                    $field.attr("aria-invalid", true);
                                }
                            });
                        }
                        $el.find("form").find(".backendError, .ng-invalid").first().focus();
                    },
                    onSubmit: function onSubmit() {
                        var _this = this;
                        var createCheckoutSession = function createCheckoutSession() {
                            var checkoutSessionModel = _index.$CheckoutSessionModel.instance(_this.token);
                            return checkoutSessionModel.action("create", {
                                data: {
                                    fraudnet_id: _this.models.cart.supplementary && _this.models.cart.supplementary.risk_correlation_id,
                                    user_selected_funding_source: {
                                        product_name: "BAIDU"
                                    },
                                    is_skip_gfo: true
                                },
                                success: function success() {
                                    return _uiRouter.$state.go("checkout.review");
                                },
                                contingencies: {
                                    DEFAULT: function DEFAULT(msg, contingency) {
                                        _logger.$logger.info("SYMPHONY CONTINGENCY", msg);
                                        _uiRouter.$state.go("checkout.login", {
                                            baiduError: true
                                        });
                                    }
                                }
                            });
                        };
                        var refreshAuthState = function refreshAuthState() {
                            var auth = _auth.$AuthModel.instance().reload();
                            _squid.$locale.choose(auth.country, auth.language, false);
                            return auth;
                        };
                        var onAuth = function onAuth(authModel) {
                            if (window.xprops && window.xprops.onAuth && authModel && authModel.access_token) {
                                return window.xprops.onAuth({
                                    accessToken: authModel.access_token
                                });
                            }
                        };
                        var phone = this.buyerInfo.phone.telephone;
                        phone = phone.replace(/\(|\)|\s|\-/g, "");
                        var onboardRequest = {
                            payload_id: this.buyerInfo.payload_id,
                            phone: _extends({}, this.buyerInfo.phone, {
                                telephone: phone
                            }),
                            email: this.buyerInfo.user.email,
                            address: this.buyerInfo.address
                        };
                        var onboardMember = function onboardMember() {
                            var thirdPartyModel = _index3.$ThirdPartyOnboard.instance(_this.token);
                            return thirdPartyModel.action("onboard", {
                                data: onboardRequest,
                                success: function success(data) {
                                    _logger.$logger.info("baidu_onboard_success");
                                },
                                error: function error(err) {
                                    _logger.$logger.info("baidu_onboard_error: ", err);
                                    _logger.$logger.info("checkout_fpti", {
                                        from: "third_party_info_collect",
                                        to: "process_third_party_info_collect",
                                        int_error_description: "baidu_onboard_failure",
                                        error_type: "soft_decline",
                                        error_source: "hermesnodeweb"
                                    });
                                    _uiRouter.$state.go("checkout.login", {
                                        baiduError: true
                                    });
                                },
                                contingencies: {
                                    DEFAULT: function DEFAULT(msg, contingency) {
                                        _logger.$logger.info("THIS IS ONBOARD CONTINGENCY: ", msg);
                                        _logger.$logger.info("checkout_fpti", {
                                            from: "third_party_info_collect",
                                            to: "process_third_party_info_collect",
                                            int_error_description: msg,
                                            error_type: "soft_decline",
                                            error_source: "hermesnodeweb"
                                        });
                                        _uiRouter.$state.go("checkout.login", {
                                            baiduError: true
                                        });
                                    }
                                }
                            });
                        };
                        var setBaiduExperience = function setBaiduExperience() {
                            return _thirdPartyInfo.thirdPartyExperience.setAsBaiduExperience(_this.token);
                        };
                        var addressValidation = new _index2.$BillingAddressModel({
                            line1: this.buyerInfo.address.line1,
                            line2: this.buyerInfo.address.line2,
                            city: this.buyerInfo.address.city,
                            state: this.buyerInfo.address.state,
                            postal_code: this.buyerInfo.address.postal_code,
                            country: this.buyerInfo.address.country,
                            id: "0"
                        });
                        addressValidation.save({
                            success: function success() {
                                onboardMember().then(refreshAuthState).then(onAuth).then(setBaiduExperience).then(createCheckoutSession);
                            },
                            validation: function validation(res) {
                                _this.actions.handleFormValidation(res);
                            },
                            error: function error() {
                                console.log("address_validation_error");
                            }
                        });
                    }
                },
                lifecycle: {
                    enter: function enter() {
                        this.buyerInfo = {
                            address: {
                                country: _squid.$locale.country
                            },
                            user: {},
                            phone: {}
                        };
                    },
                    populate: function populate() {
                        var payloadId = this.payloadId, cart = this.models.cart;
                        var phone = cart.get("purchase.phone_fields.shipping_phone_number");
                        var email = cart.get("payer.email");
                        var shipping_address = cart.get("purchase.shipping_address");
                        if (shipping_address) {
                            shipping_address.country = shipping_address.country_code ? shipping_address.country_code : this.buyerInfo.address.country;
                            shipping_address.country = shipping_address.country === "CN" ? "C2" : shipping_address.country;
                            this.buyerInfo.address = shipping_address;
                        }
                        if (email) {
                            this.buyerInfo.user.email = email;
                        }
                        if (phone) {
                            this.buyerInfo.phone.telephone = phone;
                        }
                        this.buyerInfo.payload_id = payloadId.payload_id;
                    }
                }
            });
            _squid.$Component;
            _squid.$locale;
            _uiRouter.$stateParams;
            _uiRouter.$state;
            _logger.$logger;
            _index.$CheckoutPayeeModel;
            _index.$CheckoutCartModel;
            _index.$CheckoutAppDataModel;
            _index.$CheckoutSessionModel;
            _index2.$BillingAddressModel;
            _auth.$AuthModel;
            _index3.$ThirdPartyOnboard;
            _thirdPartyInfo.thirdPartyExperience;
            module.exports = exports["default"];
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("../node_modules/console-browserify/index.js"));
    },
    "./pages/xo-third-party-info/template.html": function(module, exports) {
        module.exports = '<section class="review" content tabindex=-1 role="presentation">\n    <div class="thirdPartyInfoCollect row-fluid">\n        <div class="span14 trayInner reviewSections">\n            <xo-message ng-if="message" message="message"></xo-message>\n            <h1 class="alpha">{{ content(\'common.confirmShippingDetails\') }}</h1>\n            <p class="subTitle">{{content(\'common.confirmShippingDetailsReqs\')}}</p>\n\n\n            <form id="buyerInformationForm" name="buyerInformationForm" class="" content novalidate form-autofocus>\n                <h1 class="gamma">{{content(\'common.confirmShippingDetailsSub\')}}</h1>\n                <xo-select-shipping-country shipping-address="buyerInfo.address"\n                                            token="token" ng-click="removeValidation()"></xo-select-shipping-country>\n\n                <xo-name-input  user="buyerInfo.address" country="{{buyerInfo.address.country}}"></xo-name-input>\n\n                <xo-phone-input phone="buyerInfo.phone" countryCode="buyerInfo.address.country"></xo-phone-input>\n\n                <xo-add-address address="buyerInfo.address" country="buyerInfo.address.country"></xo-add-address>\n\n                <h1 class="gamma">{{content(\'applyForBmlUK.personalInformation\')}}</h1>\n\n                <xo-email-input class="emailInputBelowName" hide-helper="true" flags="flags" user="buyerInfo.user"></xo-email-input>\n\n                <p class="legal" ng-bind-html=\'htmlContent("common.confirmBaiduPaypalPolicyAgreement")\'></p>\n\n                <div class="buttons">\n                    <input track-submit type="submit" id="proceedButton" value="{{content(\'memberReview.agreeAndContinueLabel\')}}" class="btn full"  validate-submit="actions.onSubmit()"/>\n                </div>\n            </form>\n\n        </div>\n    </div>\n</section>\n';
    },
    "./pages/xo-third-party-info/styles.less": "./css/app.less",
    "./components/xo-form-components/src/phone/phoneInput/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _template = __webpack_require__("./components/xo-form-components/src/phone/phoneInput/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-form-components/src/phone/phoneInputB/directive.js");
        __webpack_require__("./components/xo-form-components/src/phone/phoneInputA/directive.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoPhoneInput", {
            tag: "xo-phone-input",
            template: _template2["default"],
            props: {
                phone: {
                    type: "var",
                    optional: false
                },
                showPhoneType: {
                    type: "var",
                    optional: true,
                    default: true
                },
                hideWork: {
                    type: "var",
                    optional: true,
                    default: false
                },
                token: {
                    type: "var",
                    optional: true
                },
                exclude: {
                    type: "var",
                    optional: true
                },
                hidePhoneType: {
                    type: "var",
                    optional: true,
                    default: false
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    var getTreatment = function getTreatment() {
                        if ((0, _squid.$feature)("showNewPhoneDesign", false, _squid.$locale.country)) {
                            return true;
                        }
                        var throttle = void 0;
                        if (_squid.$config["newPhoneDesignThrottle"]) {
                            throttle = _squid.$config["newPhoneDesignThrottle"]["DEFAULT"];
                            if (_squid.$config["newPhoneDesignThrottle"][_squid.$locale.country] >= 0) {
                                throttle = _squid.$config["newPhoneDesignThrottle"][_squid.$locale.country];
                            }
                        }
                        var id = _squid.$locale.country + _angular.$rootScope.token;
                        return throttle !== undefined && (0, _squid.$experiment)("new_phone_design_exp", throttle, id, {}) ? true : false;
                    };
                    this.treatment = getTreatment();
                    this.$watch("showPhoneType", function() {
                        _this.hidePhoneType = _this.showPhoneType === false;
                    }, true);
                }
            }
        });
        _angular.$rootScope;
        _squid.$Component;
        _squid.$locale;
        _squid.$experiment;
        _squid.$config;
        _squid.$feature;
        module.exports = exports["default"];
    },
    "./components/xo-form-components/src/phone/phoneInput/template.html": function(module, exports) {
        module.exports = '<xo-phone-input-a ng-if="!treatment" token="token" phone="phone"\n                  show-phone-type="showPhoneType" exclude="exclude"></xo-phone-input-a>\n<xo-phone-input-b ng-if="treatment" phone="phone" hide-phone-type="hidePhoneType" show-phone-type="showPhoneType"\n                  hide-work="hideWork"></xo-phone-input-b>\n';
    },
    "./components/xo-form-components/src/phone/phoneInputB/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _template = __webpack_require__("./components/xo-form-components/src/phone/phoneInputB/template.html");
        var _template2 = _interopRequireDefault(_template);
        __webpack_require__("./components/xo-form-components/src/phone/phoneInputB/styles.less");
        __webpack_require__("./components/jquery-mask-plugin/dist/jquery.mask.min.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var MOBILE = "Mobile";
        var KEYS = {
            ENTER: 13,
            UP: 38,
            DOWN: 40,
            TAB: 9,
            ESC: 27,
            A: 65,
            Z: 90,
            SPACE: 32
        };
        var query = "";
        var queryTimer = null;
        exports["default"] = _squid.$Component.extend("$xoPhoneInputB", {
            tag: "xo-phone-input-b",
            template: _template2["default"],
            props: {
                phone: {
                    type: "var",
                    optional: false
                },
                hidePhoneType: {
                    type: "var",
                    optional: true
                },
                hideWork: {
                    type: "var",
                    optional: true,
                    default: false
                }
            },
            actions: {
                getPhonePattern: function getPhonePattern(phoneEntry) {
                    var DEFAULT_PATTERN = "^[0-9]+$";
                    var patterns = phoneEntry && phoneEntry.patterns;
                    return patterns && patterns.GENERAL ? patterns.GENERAL : DEFAULT_PATTERN;
                },
                getPhoneMask: function getPhoneMask(phoneType, phoneEntry) {
                    var DEFAULT_MASK = "0000000000000000";
                    var masks = phoneEntry && phoneEntry.masks;
                    if (phoneType === MOBILE) {
                        return masks && masks.MOBILE ? masks.MOBILE : DEFAULT_MASK;
                    } else {
                        return masks && masks.FIXED_LINE ? masks.FIXED_LINE : DEFAULT_MASK;
                    }
                },
                updatePhoneMaskAndPattern: function updatePhoneMaskAndPattern() {
                    var phoneEntry = this.metadata.phoneEntry;
                    this.mask = this.actions.getPhoneMask(this.phone.phoneType, phoneEntry);
                    this.pattern = this.actions.getPhonePattern(phoneEntry);
                    this.actions.applyMaskOnPhoneInput();
                },
                updateDialingCodeAndCountry: function updateDialingCodeAndCountry(territory) {
                    this.phoneCountry = territory.code;
                    this.phone.IntDialingCountryCode = territory.internationalDialingCode;
                    (0, _jquery2["default"])(".fixedCode").text("+" + this.phone.IntDialingCountryCode);
                },
                updatePhoneFieldMetadata: function updatePhoneFieldMetadata(territory) {
                    if (!this.metadata) {
                        this.metadata = _squid.$MetadataModel.instance(0, {
                            noBroadcast: true
                        });
                    }
                    this.metadata.choose(territory.code);
                    this.actions.updateDialingCodeAndCountry(territory);
                    if (this.listVisible) {
                        this.actions.collapseListAndFocusOnParent();
                    }
                    _logger.$logger.info("phone_country_code_updated", {
                        territory: territory.code
                    });
                },
                getTerritoryDataFromMetadata: function getTerritoryDataFromMetadata(country) {
                    var territory = _squid.$util.find(this.dialingCodeList, function(obj) {
                        return obj.code === country;
                    });
                    return territory;
                },
                init: function init(country) {
                    this.hidePhoneType = this.hidePhoneType || (0, _squid.$feature)("hidePhoneType", false, country);
                    this.showDialingCodeContainer = (0, _squid.$feature)("showDialingCodeContainer", false, country);
                    this.listVisible = false;
                    this.phone = this.phone || {};
                    this.phone.phoneType = this.phone.phoneType || "Mobile";
                    this.dialingCodeList = _squid.$locale.metadata.territory;
                    var territory = this.actions.getTerritoryDataFromMetadata(this.phone.phoneCountry || country);
                    this.actions.updatePhoneFieldMetadata(territory);
                },
                expandList: function expandList() {
                    (0, _jquery2["default"])(".country-list").show();
                    this.listVisible = true;
                    (0, _jquery2["default"])(".country-list .country.selected").focus();
                },
                collapseList: function collapseList() {
                    this.listVisible = false;
                    (0, _jquery2["default"])(".country-list").hide();
                },
                collapseListAndFocusOnParent: function collapseListAndFocusOnParent() {
                    this.actions.collapseList();
                    (0, _jquery2["default"])("#dialingCodeContainer div.selected-flag").focus();
                },
                toggleList: function toggleList() {
                    if (this.listVisible) {
                        this.actions.collapseListAndFocusOnParent();
                    } else {
                        this.actions.expandList();
                    }
                },
                highlightListItem: function highlightListItem(listItem) {
                    (0, _jquery2["default"])("li.country").removeClass("highlight");
                    listItem.addClass("highlight");
                    listItem.focus();
                },
                selectListItem: function selectListItem(listItem) {
                    var country = listItem.attr("data-country-code");
                    var territory = this.actions.getTerritoryDataFromMetadata(country);
                    this.actions.updatePhoneFieldMetadata(territory);
                },
                searchForCountry: function searchForCountry(queryString) {
                    for (var i = 0; i < this.dialingCodeList.length; i++) {
                        if (this.actions.startsWith(this.dialingCodeList[i].name, queryString)) {
                            var listItem = (0, _jquery2["default"])(".country-list").find('[data-country-code="' + this.dialingCodeList[i].code + '"]');
                            this.actions.highlightListItem(listItem);
                            break;
                        }
                    }
                },
                startsWith: function startsWith(a, b) {
                    return a.substr(0, b.length).toUpperCase() === b;
                },
                applyMaskOnPhoneInput: function applyMaskOnPhoneInput() {
                    this.$element.find(".telephone").mask(this.mask, {
                        translation: {
                            0: {
                                pattern: /[0-9]/
                            }
                        }
                    });
                },
                handleListMouseover: function handleListMouseover($event) {
                    this.actions.highlightListItem((0, _jquery2["default"])($event.target));
                },
                handleKeyboardInputForDropdown: function handleKeyboardInputForDropdown($event) {
                    var key = $event.which;
                    if (key === KEYS.DOWN || key === KEYS.UP || key === KEYS.SPACE) {
                        $event.stopPropagation();
                        $event.preventDefault();
                        this.actions.expandList();
                    } else {
                        this.actions.collapseList();
                    }
                },
                handleKeyboardInputForList: function handleKeyboardInputForList($event) {
                    var $listItems = (0, _jquery2["default"])("li.country");
                    var key = $event.which;
                    var $selected = (0, _jquery2["default"])($event.target);
                    var $current = void 0;
                    $event.stopPropagation();
                    $event.preventDefault();
                    if (key >= KEYS.A && key <= KEYS.Z) {
                        if (queryTimer) {
                            _angular.$timeout.cancel(queryTimer);
                        }
                        query += String.fromCharCode(key);
                        this.actions.searchForCountry(query);
                        queryTimer = (0, _angular.$timeout)(function() {
                            query = "";
                        }, 1e3);
                        return;
                    }
                    if (key !== KEYS.DOWN && key !== KEYS.UP && key !== KEYS.ENTER && key !== KEYS.ESC) {
                        return;
                    }
                    if (key === KEYS.ENTER) {
                        this.actions.selectListItem($selected);
                        return;
                    }
                    if (key === KEYS.ESC) {
                        this.actions.collapseListAndFocusOnParent();
                        return;
                    }
                    if (key === KEYS.DOWN) {
                        if (!$selected.length || $selected.is(":last-child")) {
                            $current = $listItems.eq(0);
                        } else {
                            $current = $selected.next();
                        }
                    }
                    if (key === KEYS.UP) {
                        if (!$selected.length || $selected.is(":first-child")) {
                            $current = $listItems.last();
                        } else {
                            $current = $selected.prev();
                        }
                    }
                    this.actions.highlightListItem($current);
                }
            },
            lifecycle: {
                enter: function enter() {
                    this.actions.init(_squid.$locale.country);
                },
                populate: function populate() {
                    var _this = this;
                    this.$on("localeChange", function() {
                        _this.actions.init(_squid.$locale.country);
                    });
                    this.$watch("metadata", function() {
                        _this.actions.updatePhoneMaskAndPattern();
                    }, true);
                    this.$watch("this.phone.telephone", function(newVal) {
                        if (newVal) {
                            _this.$element.find(".telephone").val(newVal).trigger("input");
                        }
                    }, true);
                    (0, _jquery2["default"])("*").on("click", function(event) {
                        if (!(0, _jquery2["default"])("#dialingCodeContainer div.selected-flag").is((0, 
                        _jquery2["default"])(event.target))) {
                            _this.actions.collapseList();
                        }
                    });
                }
            }
        });
        _angular.$timeout;
        _squid.$Component;
        _squid.$locale;
        _squid.$feature;
        _squid.$util;
        _squid.$MetadataModel;
        _logger.$logger;
        module.exports = exports["default"];
    },
    "./components/xo-form-components/src/phone/phoneInputB/template.html": function(module, exports) {
        module.exports = '<div class="row-fluid fieldGroup clearfix" content>\n    <div ng-if="hidePhoneType !== true"\n         id="phoneTypeContainer"\n         class="phoneTypeContainer dropdown confidential inputField half"\n         ng-class="{\'rtlPhoneType\': locale.metadata.directionality === \'rtl\', \'dialCodeVisible\': showDialingCodeContainer}"\n         ng-cloak\n         floating-label-dropdown >\n\n        <select xo-dropdown\n                ng-model="phone.phoneType"\n                name="phoneType"\n                id="phoneType"\n                ng-change="actions.updatePhoneMaskAndPattern()"\n                xo-error-tooltip>\n            <option value="Mobile" selected="">{{content(\'common.mobile\')}}</option>\n            <option value="Home">{{content(\'common.home\')}}</option>\n            <option ng-if="!hideWork" value="Work">{{content(\'common.work\')}}</option>\n        </select>\n\n        <label for="phoneType" id="phoneTypeLabel">{{content(\'common.phoneType\')}}</label>\n    </div>\n\n\n    <div ng-if="showDialingCodeContainer"\n         id="dialingCodeContainer"\n         class="dialingCodeContainer dropdown confidential half last-child inputField intl-tel-input"\n         ng-cloak\n         floating-label-dropdown>\n\n        <div class="flag-dropdown">\n            <div tabindex="0"\n                 class="selected-flag"\n                 title="{{ phoneCountry + \' +\'+this.phone.IntDialingCountryCode }}"\n                 ng-keydown="actions.handleKeyboardInputForDropdown($event)"\n                 ng-click="actions.toggleList()">\n                <div class="iti-flag {{ phoneCountry | lowercase }}" style="pointer-events: none"></div>\n                <div class="arrow" style="pointer-events: none"></div>\n            </div>\n\n            <ul class="country-list hide">\n                <li ng-repeat="(key, value) in dialingCodeList;"\n                    tabindex="-1"\n                    class="country"\n                    data-country-code="{{ value.code }}"\n                    ng-class="{\'selected\': value.code === phoneCountry}"\n                    ng-click="actions.updatePhoneFieldMetadata(value)"\n                    ng-keydown="actions.handleKeyboardInputForList($event)"\n                    ng-mouseover="actions.handleListMouseover($event)">\n\n                    <div class="flag" style="pointer-events: none">\n                        <div class="iti-flag {{ value.code | lowercase }}"/>\n                    </div>\n\n                    <span class="country-name" style="pointer-events: none">{{ value.name }}</span>\n\n                    <span class="dial-code" style="pointer-events: none">+{{ value.internationalDialingCode }}</span>\n                </li>\n            </ul>\n        </div>\n\n        <label for="phoneCountryCode" id="phoneCodeLabel" class="focus accessAid">{{content(\'common.phoneCountryCode\')}}</label>\n    </div>\n\n\n    <div id="phoneNumberContainer"\n         class="inputField confidential last-child phoneNumber"\n         ng-class="{\'half\': !hidePhoneType,\n            \'telephoneField\': !hidePhoneType,\n            \'telephoneFieldFull\': hidePhoneType,\n            \'rtlPhoneField\': locale.metadata.directionality === \'rtl\',\n            \'dialCodeVisible\': showDialingCodeContainer,\n            \'singleLineMobile\' : hidePhoneType}"\n         floating-label\n         directionality >\n\n        <span class="fixedCode ltrOverride">+{{ phone.IntDialingCountryCode }}</span>\n        <input id="telephone"\n               class="telephone"\n               ng-class="{\'digit1\' : phone.IntDialingCountryCode.length === 1, \'digit2\' : phone.IntDialingCountryCode.length === 2, \'digit3\' : phone.IntDialingCountryCode.length === 3, \'digit4\' : phone.IntDialingCountryCode.length === 4 }"\n               type="tel"\n               ng-model="phone.telephone"\n               name="telephone"\n               value=""\n               data-mask="{{mask}}"\n               ng-change="actions.applyMaskOnPhoneInput()"\n               autocapitalize="off"\n               autocomplete="off"\n               aria-required="true"\n               country-code="phone.phoneCountryCode"\n               xo-validation=\'{"validator": "validPhone"}\'\n               data-error-key="validation.validPhone"\n               maxlength="{{mask.length}}"\n               ng-keyup="actions.applyMaskOnPhoneInput()"\n               required\n               xo-error-tooltip />\n        <label for="telephone" class="focus">{{content(\'common.phone\')}}</label>\n    </div>\n\n\n</div>\n\n';
    },
    "./components/xo-form-components/src/phone/phoneInputB/styles.less": "./css/app.less",
    "./components/xo-form-components/src/phone/phoneInputA/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        __webpack_require__("./components/xo-form-components/src/phone/phoneInputA/styles.less");
        __webpack_require__("./components/xo-ui-components/src/directionality/directive.js");
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-form-components/src/phone/phoneInputA/template.html"), __webpack_require__("./components/xo-form-components/src/phone/lib/territoriesByCode.js"), __webpack_require__("./components/xo-ui-components/src/dropdown/directive.js"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js"), __webpack_require__("./components/xo-ui-components/src/floating-label/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular, squid, template, countryPhoneCode) {
            angular.module("xo-phone.phoneInput", [ "squid", "xo-dropdown.directive", "xo-error-tooltip.directive", "floating-label.directive" ]).directive("xoPhoneInputA", function() {
                return {
                    template: template,
                    scope: {
                        phone: "=",
                        showPhoneType: "=",
                        exclude: "@"
                    },
                    link: function link(scope, element, attr, controller) {
                        element.on("keyup", function(event) {
                            element.find(".telephone").mask(scope.mask, {
                                translation: {
                                    0: {
                                        pattern: /[0-9]/
                                    }
                                }
                            });
                        });
                    },
                    controller: function controller($scope, $feature, $locale) {
                        $scope.locale = $locale;
                        $scope.IntDialingCodes = countryPhoneCode;
                        $scope.defaultCountryPhoneCode = countryPhoneCode[$locale.country];
                        $scope.showPhoneType = $feature("phoneType", true, $scope.country) && $scope.showPhoneType !== false;
                        $scope.hideCountry = function(dropdownCountry, hideInOtherCountries) {
                            return $locale.country !== dropdownCountry && hideInOtherCountries;
                        };
                        $scope.phone = $scope.phone || {};
                        $scope.phone.phoneType = $scope.phone.phoneType || "Mobile";
                        $scope.phone.IntDialingCountryCode = $scope.defaultCountryPhoneCode.phoneCountryCode;
                        angular.extend($scope.phone, {
                            phoneCountryCode: $locale.country
                        });
                        function getPhoneMask(phoneType, phoneEntry) {
                            var defaultMask = "0000000000000000";
                            var masks = phoneEntry && phoneEntry.masks;
                            var mobileMask = masks && masks.MOBILE ? masks.MOBILE : defaultMask;
                            var fixedLineMask = masks && masks.FIXED_LINE ? masks.FIXED_LINE : defaultMask;
                            return phoneType === "Mobile" ? mobileMask : fixedLineMask;
                        }
                        function getPhonePattern(phoneEntry) {
                            var defaultPattern = "^[0-9]+$";
                            var patterns = phoneEntry && phoneEntry.patterns;
                            if (patterns) {
                                return patterns.GENERAL ? patterns.GENERAL : defaultPattern;
                            }
                            return defaultPattern;
                        }
                        function populatePhoneMetadata() {
                            if (!$scope.metadata || $scope.metadata.country !== $locale.metadata.country) {
                                $scope.metadata = angular.copy($locale.metadata);
                            }
                            var phoneEntry = $scope.metadata.phoneEntry;
                            $scope.mask = getPhoneMask($scope.phone.phoneType, phoneEntry);
                            $scope.pattern = getPhonePattern(phoneEntry);
                        }
                        populatePhoneMetadata();
                        $scope.phoneTypeChanged = function() {
                            $scope.mask = getPhoneMask($scope.phone.phoneType, $scope.metadata.phoneEntry);
                            $scope.pattern = getPhonePattern($scope.metadata.phoneEntry);
                            $(".telephone").mask($scope.mask);
                        };
                        $scope.$watch("phone.phoneCountryCode", function(newValue) {
                            $scope.phone.IntDialingCountryCode = countryPhoneCode[newValue].phoneCountryCode;
                        });
                        $scope.$on("localeChange", function() {
                            $scope.defaultCountryPhoneCode = countryPhoneCode[$locale.country];
                            $scope.phone.phoneCountryCode = $locale.country;
                            if (!$scope.metadata || $scope.metadata.country !== $locale.metadata.country) {
                                populatePhoneMetadata();
                                $(".telephone").mask($scope.mask);
                            }
                        });
                        $scope.showWork = $scope.exclude === "WORK";
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./components/xo-form-components/src/phone/phoneInputA/styles.less": "./css/app.less",
    "../node_modules/noop-loader/index.js!./components/xo-form-components/src/phone/phoneInputA/template.html": function(module, exports) {
        module.exports = '<div class="row-fluid fieldGroup clearfix" ng-class="{countryCodeSelect: defaultCountryPhoneCode.showCountryCodeList === true}" content>\n    <div id="phoneTypeContainer" class="phoneTypeContainer dropdown confidential inputField half" ng-cloak\n         ng-if="showPhoneType === true" ng-class="{\'rtlPhoneType\': locale.metadata.directionality === \'rtl\'}"\n         floating-label-dropdown>\n        <select xo-dropdown ng-model="phone.phoneType" name="phoneType" id="phoneType" ng-change="phoneTypeChanged()" xo-error-tooltip>\n            <option value="Mobile" selected="">{{content(\'common.mobile\')}}</option>\n            <option value="Home">{{content(\'common.home\')}}</option>\n            <option ng-if="!showWork" value="Work">{{content(\'common.work\')}}</option>\n        </select>\n        <label for="phoneType" id="phoneTypeLabel">{{content(\'common.phoneType\')}}</label>\n    </div>\n\n    <div id="phoneCodeContainer" class="phoneCodeContainer dropdown confidential half last-child inputField" ng-cloak\n         ng-if="defaultCountryPhoneCode.showCountryCodeList" floating-label-dropdown>\n        <select xo-dropdown ng-model="phone.phoneCountryCode" name="phoneCountryCode" id="phoneCountryCode" aria-required="true" xo-error-tooltip required>\n            <option ng-repeat="(key, value) in IntDialingCodes" value="{{key}}" ng-if="!hideCountry(key, value.hideInOtherCountries)" ng-selected="phone.phoneCountryCode === key">{{value.phoneCountryCode}} ({{key}})</option>\n        </select>\n        <label for="phoneCountryCode" id="phoneCodeLabel">{{content(\'common.phoneCountryCode\')}}</label>\n    </div>\n\n    <div class="inputField confidential last-child"\n         ng-class="{\'half\': showPhoneType || defaultCountryPhoneCode.showCountryCodeList, \'telephoneField\': showPhoneType,\n         \'telephoneFieldFull\': !showPhoneType, \'rtlPhoneField\': locale.metadata.directionality === \'rtl\',\n         singleLineMobile: !showPhoneType && !defaultCountryPhoneCode.showCountryCodeList}" floating-label directionality >\n\n        <input id="telephone"\n               class="telephone"\n               type="tel"\n               ng-model="phone.telephone"\n               name="telephone"\n               value=""\n               autocapitalize="off"\n               autocomplete="off"\n               aria-required="true"\n               country-code="phone.phoneCountryCode"\n               phone-pattern="{{pattern}}"\n               xo-validation=\'{"validator": "validPhone"}\'\n               data-error-key="validation.validPhone"\n               maxlength="{{mask.length}}"\n               required\n               xo-error-tooltip />\n        <label for="telephone" class="focus">{{content(\'common.phone\')}}</label>\n    </div>\n</div>\n';
    },
    "./components/xo-form-components/src/phone/lib/territoriesByCode.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
            return {
                AC: {
                    status: "reserved",
                    phoneCountryCode: "247",
                    showCountryCodeList: false
                },
                AD: {
                    status: "assigned",
                    phoneCountryCode: "376",
                    showCountryCodeList: false
                },
                AE: {
                    status: "assigned",
                    phoneCountryCode: "971",
                    showCountryCodeList: false
                },
                AF: {
                    status: "assigned",
                    phoneCountryCode: "93",
                    showCountryCodeList: false
                },
                AG: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                AI: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                AL: {
                    status: "assigned",
                    phoneCountryCode: "355",
                    showCountryCodeList: false
                },
                AM: {
                    status: "assigned",
                    phoneCountryCode: "374",
                    showCountryCodeList: false
                },
                AN: {
                    status: "assigned",
                    phoneCountryCode: "599",
                    showCountryCodeList: false
                },
                AO: {
                    status: "assigned",
                    phoneCountryCode: "244",
                    showCountryCodeList: false
                },
                AQ: {
                    status: "assigned",
                    phoneCountryCode: "672",
                    showCountryCodeList: false
                },
                AR: {
                    status: "assigned",
                    phoneCountryCode: "54",
                    showCountryCodeList: false
                },
                AS: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                AT: {
                    status: "assigned",
                    phoneCountryCode: "43",
                    showCountryCodeList: true
                },
                AU: {
                    status: "assigned",
                    phoneCountryCode: "61",
                    showCountryCodeList: true
                },
                AW: {
                    status: "assigned",
                    phoneCountryCode: "297",
                    showCountryCodeList: false
                },
                AZ: {
                    status: "assigned",
                    phoneCountryCode: "994",
                    showCountryCodeList: false
                },
                BA: {
                    status: "assigned",
                    phoneCountryCode: "387",
                    showCountryCodeList: false
                },
                BB: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                BD: {
                    status: "assigned",
                    phoneCountryCode: "880",
                    showCountryCodeList: false
                },
                BE: {
                    status: "assigned",
                    phoneCountryCode: "32",
                    showCountryCodeList: true
                },
                BF: {
                    status: "assigned",
                    phoneCountryCode: "226",
                    showCountryCodeList: false
                },
                BG: {
                    status: "assigned",
                    phoneCountryCode: "359",
                    showCountryCodeList: false
                },
                BH: {
                    status: "assigned",
                    phoneCountryCode: "973",
                    showCountryCodeList: false
                },
                BI: {
                    status: "assigned",
                    phoneCountryCode: "257",
                    showCountryCodeList: false
                },
                BJ: {
                    status: "assigned",
                    phoneCountryCode: "229",
                    showCountryCodeList: false
                },
                BL: {
                    status: "assigned",
                    phoneCountryCode: "590",
                    showCountryCodeList: false
                },
                BM: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                BN: {
                    status: "assigned",
                    phoneCountryCode: "673",
                    showCountryCodeList: false
                },
                BO: {
                    status: "assigned",
                    phoneCountryCode: "591",
                    showCountryCodeList: false
                },
                BQ: {
                    status: "assigned",
                    phoneCountryCode: "599",
                    showCountryCodeList: false
                },
                BR: {
                    status: "assigned",
                    phoneCountryCode: "55",
                    showCountryCodeList: false
                },
                BS: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                BT: {
                    status: "assigned",
                    phoneCountryCode: "975",
                    showCountryCodeList: false
                },
                BV: {
                    status: "assigned"
                },
                BW: {
                    status: "assigned",
                    phoneCountryCode: "267",
                    showCountryCodeList: false
                },
                BY: {
                    status: "assigned",
                    phoneCountryCode: "375",
                    showCountryCodeList: false
                },
                BZ: {
                    status: "assigned",
                    phoneCountryCode: "501",
                    showCountryCodeList: false
                },
                C2: {
                    status: "assigned",
                    phoneCountryCode: "86",
                    showCountryCodeList: false
                },
                CA: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                CC: {
                    status: "assigned",
                    phoneCountryCode: "61",
                    showCountryCodeList: false
                },
                CD: {
                    status: "assigned",
                    phoneCountryCode: "243",
                    showCountryCodeList: false
                },
                CF: {
                    status: "assigned",
                    phoneCountryCode: "236",
                    showCountryCodeList: false
                },
                CG: {
                    status: "assigned",
                    phoneCountryCode: "242",
                    showCountryCodeList: false
                },
                CH: {
                    status: "assigned",
                    phoneCountryCode: "41",
                    showCountryCodeList: true
                },
                CI: {
                    status: "assigned",
                    phoneCountryCode: "225",
                    showCountryCodeList: false
                },
                CK: {
                    status: "assigned",
                    phoneCountryCode: "682",
                    showCountryCodeList: false
                },
                CL: {
                    status: "assigned",
                    phoneCountryCode: "56",
                    showCountryCodeList: false
                },
                CM: {
                    status: "assigned",
                    phoneCountryCode: "237",
                    showCountryCodeList: false
                },
                CN: {
                    status: "assigned",
                    phoneCountryCode: "86",
                    showCountryCodeList: false
                },
                CO: {
                    status: "assigned",
                    phoneCountryCode: "57",
                    showCountryCodeList: false
                },
                CR: {
                    status: "assigned",
                    phoneCountryCode: "506",
                    showCountryCodeList: false
                },
                CU: {
                    status: "assigned",
                    phoneCountryCode: "53",
                    showCountryCodeList: false
                },
                CV: {
                    status: "assigned",
                    phoneCountryCode: "238",
                    showCountryCodeList: false
                },
                CW: {
                    status: "assigned",
                    phoneCountryCode: "599",
                    showCountryCodeList: false
                },
                CX: {
                    status: "assigned",
                    phoneCountryCode: "61",
                    showCountryCodeList: false
                },
                CY: {
                    status: "assigned",
                    phoneCountryCode: "357",
                    showCountryCodeList: false
                },
                CZ: {
                    status: "assigned",
                    phoneCountryCode: "420",
                    showCountryCodeList: false
                },
                DE: {
                    status: "assigned",
                    phoneCountryCode: "49",
                    showCountryCodeList: false
                },
                DJ: {
                    status: "assigned",
                    phoneCountryCode: "253",
                    showCountryCodeList: false
                },
                DK: {
                    status: "assigned",
                    phoneCountryCode: "45",
                    showCountryCodeList: true
                },
                DM: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                DO: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                DZ: {
                    status: "assigned",
                    phoneCountryCode: "213",
                    showCountryCodeList: false
                },
                EC: {
                    status: "assigned",
                    phoneCountryCode: "593",
                    showCountryCodeList: false
                },
                EE: {
                    status: "assigned",
                    phoneCountryCode: "372",
                    showCountryCodeList: false
                },
                EG: {
                    status: "assigned",
                    phoneCountryCode: "20",
                    showCountryCodeList: false
                },
                EH: {
                    status: "assigned",
                    phoneCountryCode: "212",
                    showCountryCodeList: false
                },
                ER: {
                    status: "assigned",
                    phoneCountryCode: "291",
                    showCountryCodeList: false
                },
                ES: {
                    status: "assigned",
                    phoneCountryCode: "34",
                    showCountryCodeList: false
                },
                ET: {
                    status: "assigned",
                    phoneCountryCode: "251",
                    showCountryCodeList: false
                },
                FI: {
                    status: "assigned",
                    phoneCountryCode: "358",
                    showCountryCodeList: false
                },
                FJ: {
                    status: "assigned",
                    phoneCountryCode: "679",
                    showCountryCodeList: false
                },
                FK: {
                    status: "assigned",
                    phoneCountryCode: "500",
                    showCountryCodeList: false
                },
                FM: {
                    status: "assigned",
                    phoneCountryCode: "691",
                    showCountryCodeList: false
                },
                FO: {
                    status: "assigned",
                    phoneCountryCode: "298",
                    showCountryCodeList: false
                },
                FR: {
                    status: "assigned",
                    phoneCountryCode: "33",
                    showCountryCodeList: false
                },
                GA: {
                    status: "assigned",
                    phoneCountryCode: "241",
                    showCountryCodeList: false
                },
                GB: {
                    status: "assigned",
                    phoneCountryCode: "44",
                    showCountryCodeList: false
                },
                GD: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                GE: {
                    status: "assigned",
                    phoneCountryCode: "995",
                    showCountryCodeList: false
                },
                GF: {
                    status: "assigned",
                    phoneCountryCode: "594",
                    showCountryCodeList: false
                },
                GG: {
                    status: "assigned",
                    phoneCountryCode: "44",
                    showCountryCodeList: false
                },
                GH: {
                    status: "assigned",
                    phoneCountryCode: "233",
                    showCountryCodeList: false
                },
                GI: {
                    status: "assigned",
                    phoneCountryCode: "350",
                    showCountryCodeList: false
                },
                GL: {
                    status: "assigned",
                    phoneCountryCode: "299",
                    showCountryCodeList: false
                },
                GM: {
                    status: "assigned",
                    phoneCountryCode: "220",
                    showCountryCodeList: false
                },
                GN: {
                    status: "assigned",
                    phoneCountryCode: "224",
                    showCountryCodeList: false
                },
                GP: {
                    status: "assigned",
                    phoneCountryCode: "590",
                    showCountryCodeList: false
                },
                GQ: {
                    status: "assigned",
                    phoneCountryCode: "240",
                    showCountryCodeList: false
                },
                GR: {
                    status: "assigned",
                    phoneCountryCode: "30",
                    showCountryCodeList: false
                },
                GS: {
                    status: "assigned",
                    phoneCountryCode: "500",
                    showCountryCodeList: false
                },
                GT: {
                    status: "assigned",
                    phoneCountryCode: "502",
                    showCountryCodeList: false
                },
                GU: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                GW: {
                    status: "assigned",
                    phoneCountryCode: "245",
                    showCountryCodeList: false
                },
                GY: {
                    status: "assigned",
                    phoneCountryCode: "592",
                    showCountryCodeList: false
                },
                HK: {
                    status: "assigned",
                    phoneCountryCode: "852",
                    showCountryCodeList: true
                },
                HM: {
                    status: "assigned"
                },
                HN: {
                    status: "assigned",
                    phoneCountryCode: "504",
                    showCountryCodeList: false
                },
                HR: {
                    status: "assigned",
                    phoneCountryCode: "385",
                    showCountryCodeList: false
                },
                HT: {
                    status: "assigned",
                    phoneCountryCode: "509",
                    showCountryCodeList: false
                },
                HU: {
                    status: "assigned",
                    phoneCountryCode: "36",
                    showCountryCodeList: false
                },
                ID: {
                    status: "assigned",
                    phoneCountryCode: "62",
                    showCountryCodeList: false
                },
                IE: {
                    status: "assigned",
                    phoneCountryCode: "353",
                    showCountryCodeList: false
                },
                IL: {
                    status: "assigned",
                    phoneCountryCode: "972",
                    showCountryCodeList: false
                },
                IM: {
                    status: "assigned",
                    phoneCountryCode: "44",
                    showCountryCodeList: false
                },
                IN: {
                    status: "assigned",
                    phoneCountryCode: "91",
                    showCountryCodeList: false
                },
                IO: {
                    status: "assigned",
                    phoneCountryCode: "246",
                    showCountryCodeList: false
                },
                IQ: {
                    status: "assigned",
                    phoneCountryCode: "964",
                    showCountryCodeList: false
                },
                IR: {
                    status: "assigned",
                    phoneCountryCode: "98",
                    showCountryCodeList: false
                },
                IS: {
                    status: "assigned",
                    phoneCountryCode: "354",
                    showCountryCodeList: false
                },
                IT: {
                    status: "assigned",
                    phoneCountryCode: "39",
                    showCountryCodeList: false
                },
                JE: {
                    status: "assigned",
                    phoneCountryCode: "44",
                    showCountryCodeList: false
                },
                JM: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                JO: {
                    status: "assigned",
                    phoneCountryCode: "962",
                    showCountryCodeList: false
                },
                JP: {
                    status: "assigned",
                    phoneCountryCode: "81",
                    showCountryCodeList: false
                },
                KE: {
                    status: "assigned",
                    phoneCountryCode: "254",
                    showCountryCodeList: false
                },
                KG: {
                    status: "assigned",
                    phoneCountryCode: "996",
                    showCountryCodeList: false
                },
                KH: {
                    status: "assigned",
                    phoneCountryCode: "855",
                    showCountryCodeList: false
                },
                KI: {
                    status: "assigned",
                    phoneCountryCode: "686",
                    showCountryCodeList: false
                },
                KM: {
                    status: "assigned",
                    phoneCountryCode: "269",
                    showCountryCodeList: false
                },
                KN: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                KP: {
                    status: "assigned",
                    phoneCountryCode: "850",
                    showCountryCodeList: false
                },
                KR: {
                    status: "assigned",
                    phoneCountryCode: "82",
                    showCountryCodeList: false
                },
                KW: {
                    status: "assigned",
                    phoneCountryCode: "965",
                    showCountryCodeList: false
                },
                KY: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                KZ: {
                    status: "assigned",
                    phoneCountryCode: "7",
                    showCountryCodeList: false
                },
                LA: {
                    status: "assigned",
                    phoneCountryCode: "856",
                    showCountryCodeList: true
                },
                LB: {
                    status: "assigned",
                    phoneCountryCode: "961",
                    showCountryCodeList: false
                },
                LC: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                LI: {
                    status: "assigned",
                    phoneCountryCode: "423",
                    showCountryCodeList: false
                },
                LK: {
                    status: "assigned",
                    phoneCountryCode: "94",
                    showCountryCodeList: false
                },
                LR: {
                    status: "assigned",
                    phoneCountryCode: "231",
                    showCountryCodeList: false
                },
                LS: {
                    status: "assigned",
                    phoneCountryCode: "266",
                    showCountryCodeList: false
                },
                LT: {
                    status: "assigned",
                    phoneCountryCode: "370",
                    showCountryCodeList: false
                },
                LU: {
                    status: "assigned",
                    phoneCountryCode: "352",
                    showCountryCodeList: false
                },
                LV: {
                    status: "assigned",
                    phoneCountryCode: "371",
                    showCountryCodeList: false
                },
                LY: {
                    status: "assigned",
                    phoneCountryCode: "218",
                    showCountryCodeList: false
                },
                MA: {
                    status: "assigned",
                    phoneCountryCode: "212",
                    showCountryCodeList: false
                },
                MC: {
                    status: "assigned",
                    phoneCountryCode: "377",
                    showCountryCodeList: false
                },
                MD: {
                    status: "assigned",
                    phoneCountryCode: "373",
                    showCountryCodeList: false
                },
                ME: {
                    status: "assigned",
                    phoneCountryCode: "382",
                    showCountryCodeList: false
                },
                MF: {
                    status: "assigned",
                    phoneCountryCode: "590",
                    showCountryCodeList: false
                },
                MG: {
                    status: "assigned",
                    phoneCountryCode: "261",
                    showCountryCodeList: false
                },
                MH: {
                    status: "assigned",
                    phoneCountryCode: "692",
                    showCountryCodeList: false
                },
                MK: {
                    status: "assigned",
                    phoneCountryCode: "389",
                    showCountryCodeList: false
                },
                ML: {
                    status: "assigned",
                    phoneCountryCode: "223",
                    showCountryCodeList: false
                },
                MM: {
                    status: "assigned",
                    phoneCountryCode: "95",
                    showCountryCodeList: false
                },
                MN: {
                    status: "assigned",
                    phoneCountryCode: "976",
                    showCountryCodeList: false
                },
                MO: {
                    status: "assigned",
                    phoneCountryCode: "853",
                    showCountryCodeList: false
                },
                MP: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                MQ: {
                    status: "assigned",
                    phoneCountryCode: "596",
                    showCountryCodeList: false
                },
                MR: {
                    status: "assigned",
                    phoneCountryCode: "222",
                    showCountryCodeList: false
                },
                MS: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                MT: {
                    status: "assigned",
                    phoneCountryCode: "356",
                    showCountryCodeList: false
                },
                MU: {
                    status: "assigned",
                    phoneCountryCode: "230",
                    showCountryCodeList: false
                },
                MV: {
                    status: "assigned",
                    phoneCountryCode: "960",
                    showCountryCodeList: false
                },
                MW: {
                    status: "assigned",
                    phoneCountryCode: "265",
                    showCountryCodeList: false
                },
                MX: {
                    status: "assigned",
                    phoneCountryCode: "52",
                    showCountryCodeList: false
                },
                MY: {
                    status: "assigned",
                    phoneCountryCode: "60",
                    showCountryCodeList: false
                },
                MZ: {
                    status: "assigned",
                    phoneCountryCode: "258",
                    showCountryCodeList: false
                },
                NA: {
                    status: "assigned",
                    phoneCountryCode: "264",
                    showCountryCodeList: false
                },
                NC: {
                    status: "assigned",
                    phoneCountryCode: "687",
                    showCountryCodeList: false
                },
                NE: {
                    status: "assigned",
                    phoneCountryCode: "227",
                    showCountryCodeList: false
                },
                NF: {
                    status: "assigned",
                    phoneCountryCode: "672",
                    showCountryCodeList: false
                },
                NG: {
                    status: "assigned",
                    phoneCountryCode: "234",
                    showCountryCodeList: false
                },
                NI: {
                    status: "assigned",
                    phoneCountryCode: "505",
                    showCountryCodeList: false
                },
                NL: {
                    status: "assigned",
                    phoneCountryCode: "31",
                    showCountryCodeList: true
                },
                NO: {
                    status: "assigned",
                    phoneCountryCode: "47",
                    showCountryCodeList: true
                },
                NP: {
                    status: "assigned",
                    phoneCountryCode: "977",
                    showCountryCodeList: false
                },
                NR: {
                    status: "assigned",
                    phoneCountryCode: "674",
                    showCountryCodeList: false
                },
                NU: {
                    status: "assigned",
                    phoneCountryCode: "683",
                    showCountryCodeList: false
                },
                NZ: {
                    status: "assigned",
                    phoneCountryCode: "64",
                    showCountryCodeList: false
                },
                OM: {
                    status: "assigned",
                    phoneCountryCode: "968",
                    showCountryCodeList: false
                },
                PA: {
                    status: "assigned",
                    phoneCountryCode: "507",
                    showCountryCodeList: false
                },
                PE: {
                    status: "assigned",
                    phoneCountryCode: "51",
                    showCountryCodeList: false
                },
                PF: {
                    status: "assigned",
                    phoneCountryCode: "689",
                    showCountryCodeList: false
                },
                PG: {
                    status: "assigned",
                    phoneCountryCode: "675",
                    showCountryCodeList: false
                },
                PH: {
                    status: "assigned",
                    phoneCountryCode: "63",
                    showCountryCodeList: false
                },
                PK: {
                    status: "assigned",
                    phoneCountryCode: "92",
                    showCountryCodeList: false
                },
                PL: {
                    status: "assigned",
                    phoneCountryCode: "48",
                    showCountryCodeList: true
                },
                PM: {
                    status: "assigned",
                    phoneCountryCode: "508",
                    showCountryCodeList: false
                },
                PN: {
                    status: "assigned",
                    phoneCountryCode: "870",
                    showCountryCodeList: false
                },
                PR: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                PS: {
                    status: "assigned",
                    phoneCountryCode: "970",
                    showCountryCodeList: false
                },
                PT: {
                    status: "assigned",
                    phoneCountryCode: "351",
                    showCountryCodeList: false
                },
                PW: {
                    status: "assigned",
                    phoneCountryCode: "680",
                    showCountryCodeList: false
                },
                PY: {
                    status: "assigned",
                    phoneCountryCode: "595",
                    showCountryCodeList: false
                },
                QA: {
                    status: "assigned",
                    phoneCountryCode: "974",
                    showCountryCodeList: false
                },
                RE: {
                    status: "assigned",
                    phoneCountryCode: "262",
                    showCountryCodeList: false
                },
                RO: {
                    status: "assigned",
                    phoneCountryCode: "40",
                    showCountryCodeList: false
                },
                RS: {
                    status: "assigned",
                    phoneCountryCode: "381",
                    showCountryCodeList: false
                },
                RU: {
                    status: "assigned",
                    phoneCountryCode: "7",
                    showCountryCodeList: false
                },
                RW: {
                    status: "assigned",
                    phoneCountryCode: "250",
                    showCountryCodeList: false
                },
                SA: {
                    status: "assigned",
                    phoneCountryCode: "966",
                    showCountryCodeList: false
                },
                SB: {
                    status: "assigned",
                    phoneCountryCode: "677",
                    showCountryCodeList: false
                },
                SC: {
                    status: "assigned",
                    phoneCountryCode: "248",
                    showCountryCodeList: false
                },
                SD: {
                    status: "assigned",
                    phoneCountryCode: "249",
                    showCountryCodeList: false
                },
                SE: {
                    status: "assigned",
                    phoneCountryCode: "46",
                    showCountryCodeList: true
                },
                SG: {
                    status: "assigned",
                    phoneCountryCode: "65",
                    showCountryCodeList: true
                },
                SH: {
                    status: "assigned",
                    phoneCountryCode: "290",
                    showCountryCodeList: false
                },
                SI: {
                    status: "assigned",
                    phoneCountryCode: "386",
                    showCountryCodeList: false
                },
                SJ: {
                    status: "assigned",
                    phoneCountryCode: "47",
                    showCountryCodeList: false
                },
                SK: {
                    status: "assigned",
                    phoneCountryCode: "421",
                    showCountryCodeList: false
                },
                SL: {
                    status: "assigned",
                    phoneCountryCode: "232",
                    showCountryCodeList: false
                },
                SM: {
                    status: "assigned",
                    phoneCountryCode: "378",
                    showCountryCodeList: false
                },
                SN: {
                    status: "assigned",
                    phoneCountryCode: "221",
                    showCountryCodeList: false
                },
                SO: {
                    status: "assigned",
                    phoneCountryCode: "252",
                    showCountryCodeList: false
                },
                SR: {
                    status: "assigned",
                    phoneCountryCode: "597",
                    showCountryCodeList: false
                },
                SS: {
                    status: "assigned",
                    phoneCountryCode: "211",
                    showCountryCodeList: false
                },
                ST: {
                    status: "assigned",
                    phoneCountryCode: "239",
                    showCountryCodeList: false
                },
                SV: {
                    status: "assigned",
                    phoneCountryCode: "503",
                    showCountryCodeList: false
                },
                SX: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                SY: {
                    status: "assigned",
                    phoneCountryCode: "963",
                    showCountryCodeList: false
                },
                SZ: {
                    status: "assigned",
                    phoneCountryCode: "268",
                    showCountryCodeList: false
                },
                TC: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                TD: {
                    status: "assigned",
                    phoneCountryCode: "235",
                    showCountryCodeList: false
                },
                TF: {
                    status: "assigned",
                    phoneCountryCode: "262",
                    showCountryCodeList: false
                },
                TG: {
                    status: "assigned",
                    phoneCountryCode: "228",
                    showCountryCodeList: false
                },
                TH: {
                    status: "assigned",
                    phoneCountryCode: "66",
                    showCountryCodeList: false
                },
                TJ: {
                    status: "assigned",
                    phoneCountryCode: "992",
                    showCountryCodeList: false
                },
                TK: {
                    status: "assigned",
                    phoneCountryCode: "690",
                    showCountryCodeList: false
                },
                TL: {
                    status: "assigned",
                    phoneCountryCode: "670",
                    showCountryCodeList: false
                },
                TM: {
                    status: "assigned",
                    phoneCountryCode: "993",
                    showCountryCodeList: false
                },
                TN: {
                    status: "assigned",
                    phoneCountryCode: "216",
                    showCountryCodeList: false
                },
                TO: {
                    status: "assigned",
                    phoneCountryCode: "676",
                    showCountryCodeList: false
                },
                TR: {
                    status: "assigned",
                    phoneCountryCode: "90",
                    showCountryCodeList: true
                },
                TT: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                TV: {
                    status: "assigned",
                    phoneCountryCode: "688",
                    showCountryCodeList: false
                },
                TW: {
                    status: "assigned",
                    phoneCountryCode: "886",
                    showCountryCodeList: true
                },
                TZ: {
                    status: "assigned",
                    phoneCountryCode: "255",
                    showCountryCodeList: false
                },
                UA: {
                    status: "assigned",
                    phoneCountryCode: "380",
                    showCountryCodeList: false
                },
                UG: {
                    status: "assigned",
                    phoneCountryCode: "256",
                    showCountryCodeList: false
                },
                UM: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                US: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false,
                    hideInOtherCountries: true
                },
                UY: {
                    status: "assigned",
                    phoneCountryCode: "598",
                    showCountryCodeList: false
                },
                UZ: {
                    status: "assigned",
                    phoneCountryCode: "998",
                    showCountryCodeList: false
                },
                VA: {
                    status: "assigned",
                    phoneCountryCode: "39",
                    showCountryCodeList: false
                },
                VC: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                VE: {
                    status: "assigned",
                    phoneCountryCode: "58",
                    showCountryCodeList: false
                },
                VG: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                VI: {
                    status: "assigned",
                    phoneCountryCode: "1",
                    showCountryCodeList: false
                },
                VN: {
                    status: "assigned",
                    phoneCountryCode: "84",
                    showCountryCodeList: false
                },
                VU: {
                    status: "assigned",
                    phoneCountryCode: "678",
                    showCountryCodeList: false
                },
                WF: {
                    status: "assigned",
                    phoneCountryCode: "681",
                    showCountryCodeList: false
                },
                WS: {
                    status: "assigned",
                    phoneCountryCode: "685",
                    showCountryCodeList: false
                },
                YE: {
                    status: "assigned",
                    phoneCountryCode: "967",
                    showCountryCodeList: false
                },
                YT: {
                    status: "assigned",
                    phoneCountryCode: "262",
                    showCountryCodeList: false
                },
                ZA: {
                    status: "assigned",
                    phoneCountryCode: "27",
                    showCountryCodeList: false
                },
                ZM: {
                    status: "assigned",
                    phoneCountryCode: "260",
                    showCountryCodeList: false
                },
                ZW: {
                    status: "assigned",
                    phoneCountryCode: "263",
                    showCountryCodeList: false
                }
            };
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./components/xo-form-components/src/emailInput/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/xo-ui-components/src/directionality/directive.js");
        __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js");
        __webpack_require__("./components/xo-validation/dist/directive.js");
        __webpack_require__("./components/xo-form-components/src/emailInput/styles.less");
        var _template = __webpack_require__("./components/xo-form-components/src/emailInput/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("xoEmailInput", {
            tag: "xo-email-input",
            template: _template2["default"],
            props: {
                user: {
                    type: "var",
                    required: "true"
                },
                disabled: {
                    type: "var",
                    required: "false"
                },
                hideHelper: {
                    type: "var",
                    required: "false"
                },
                flags: {
                    type: "var",
                    required: "false"
                }
            },
            lifecycle: {
                enter: function enter() {
                    this.flags = this.flags ? this.flags : {};
                }
            }
        });
        _squid.$Component;
        module.exports = exports["default"];
    },
    "./components/xo-form-components/src/emailInput/styles.less": "./css/app.less",
    "./components/xo-form-components/src/emailInput/template.html": function(module, exports) {
        module.exports = '<div class="inputField emailField confidential" content floating-label directionality>\n    <input ng-model="user.email" id="email" name="email" type="email" value="" autocapitalize="off"\n           aria-required="false" xo-validation=\'{ "validator": "validEmail" }\' autocomplete="off"\n           data-error-key=\'email.invalid\'\n           ng-disabled="disabled" xo-error-tooltip required />\n    <div class="emailHelper" ng-if="!hideHelper">\n        <a href="#" id="verifyHelp" class="verifyHelp">\n            <img alt="{{ content(\'email.whyTooltip\') }}" />\n        </a>\n    </div>\n    <label for="email">\n        {{ content(\'index.EmailLabel\') }}\n    </label>\n    <xo-tooltip trigger="#verifyHelp" ng-switch="flags.mode" ng-if="!hideHelper">\n        <div id="emailToolTipText" class="tip tipDesc emailToolTip">\n            <span data-type="signup_email_tooltip" ng-switch-when="signup">\n                {{ content(\'common.emailHelper\') }}\n            </span>\n            <span data-type="guest_email_tooltip" ng-switch-default>\n                {{ content(\'common.emailTooltipGuest\') }}\n            </span>\n        </div>\n    </xo-tooltip>\n</div>\n';
    },
    "./pages/xo-inventory-soldout/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$xoSoldOutPageRoute = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _directive = __webpack_require__("./pages/xo-inventory-soldout/directive.js");
        var _directive2 = _interopRequireDefault(_directive);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var $xoSoldOutPageRoute = exports.$xoSoldOutPageRoute = _squid.$ComponentRoute.extend("$xoSoldOutPageRoute", {
            path: "soldout",
            directive: _directive2["default"],
            titleContent: "soldout.title",
            query: [ "items", "soldOutUrl" ],
            auth: false,
            trackingData: {
                fptiState: "soldout",
                templateName: "soldout.dust",
                pageGoal: "soldout page",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-soldout",
                        pagename2: "%::fullpage-soldout:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: []
        });
        angular.value("$xoSoldOutPageRoute", $xoSoldOutPageRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-inventory-soldout/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _util = __webpack_require__("./components/xo-return-to-merchant/dist/util.js");
        __webpack_require__("./components/xo-ui-components/src/modal/directive.js");
        var _template = __webpack_require__("./pages/xo-inventory-soldout/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoSoldoutPageDirective", {
            tag: "xo-soldout-page",
            template: _template2["default"],
            auth: false,
            actions: {
                continueShoppingHandler: function continueShoppingHandler() {
                    _util.$ReturnToMerchant.goTo(decodeURIComponent(_uiRouter.$state.params.soldOutUrl), true);
                }
            },
            lifecycle: {
                enter: function enter() {
                    this.locale = _squid.$locale;
                    angular.element(".paypalHeader").css("display", "none");
                    angular.element("#defaultCancelLink").css("display", "none");
                },
                populate: function populate() {
                    this.item_name = decodeURIComponent(_uiRouter.$state.params.items);
                }
            }
        });
        _squid.$Component;
        _squid.$locale;
        _util.$ReturnToMerchant;
        _uiRouter.$state;
        module.exports = exports["default"];
    },
    "./pages/xo-inventory-soldout/template.html": function(module, exports) {
        module.exports = '<div id="soldOut" content>\n    <div id="soldouticon">\n        <div class="left_section"> </div>\n\n        <div class="text_lines">\n            <span id="text">{{content (\'soldout.icon\')}}</span>\n        </div>\n\n        <div id="rightSection">\n            <span class="shape-right">   </span>\n        </div>\n    </div>\n\n    <div class="soldOutMessage" ng-bind-html="htmlContent(\'soldout.message\', {item: item_name})">\n    </div>\n    <div>\n        <input id= "Continue-Shopping" class="btn full confirmButton continueButton" type="button" value="{{content (\'soldout.continueShoppingButton\')}}" ng-click="actions.continueShoppingHandler()"/>\n\n    </div>\n\n</div>\n';
    },
    "./components/xo-page-components/src/done/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-page-components/src/done/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("xo-done", [ "squid", "xo-done.directive" ]).factory("$DoneRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("DoneRoute", {
                        name: "done",
                        directive: "xo-done",
                        titleContent: "done.paymentCompleted",
                        query: [ "code" ],
                        trackingData: {
                            fptiState: "done_page",
                            templateName: "memberDone.dust",
                            pageGoal: "Payment Done Receipt",
                            trackStateExit: true,
                            buzname: {
                                fullpage: {
                                    pagename: "%::fullpage-done",
                                    pagename2: "%::fullpage-done:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-page-components/src/done", "components/xo-page-components/src/done/route.js");
    },
    "./components/xo-form-components/src/phone/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-form-components/src/phone/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-phone.route", [ "squid", "xo-phone.directive" ]).factory("$AddPhoneRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("AddPhoneRoute", {
                        name: "addPhone",
                        directive: "xo-add-phone",
                        titleContent: "addPhone.addPhoneNumber",
                        query: [ "message" ],
                        trackingData: {
                            templateName: "addPhone.dust",
                            fptiState: "add_phone",
                            pageGoal: "Add Phone",
                            buzname: {
                                fullpage: {
                                    pagename: "%::fullpage-add-phone",
                                    pagename2: "%::fullpage-add-phone:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        loginRequired: true,
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-form-components/src/phone", "components/xo-form-components/src/phone/route.js");
    },
    "./components/xo-form-components/src/phone/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-form-components/src/phone/template.html"), __webpack_require__("./components/xo-form-components/src/phone/phoneInput/directive.js"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/user/index.js"), __webpack_require__("./components/xo-ui-components/src/message/directive.js"), __webpack_require__("./components/xo-models/src/auth/index.js"), __webpack_require__("./components/xo-title/dist/directive.js"), __webpack_require__("./components/xo-page-components/src/value-props/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-phone.directive", [ "squid", "xo-phone.phoneInput", "xomodel.checkout", "xomodel.user", "xomodel.auth", "xo-message.directive", "xo-title.directive", "xo-value-props.directive" ]).directive("xoAddPhone", function() {
                return {
                    template: template,
                    scope: {},
                    controller: function controller($scope, $rootScope, $location, $populate, $contentVersion, $UserInfoModel, $state, $locale, $featureCountries, $CheckoutSessionModel, $util, $logger, $AuthModel, $feature) {
                        $scope.showPhoneDisclosure = $featureCountries("showPhoneDisclosure").indexOf($locale.country) > -1;
                        $scope.phoneConsent = $feature("phoneConsent");
                        $scope.consentContentKey = $scope.phoneConsent ? "addPhone.phoneConsent" : "addPhone.phoneDisclosure";
                        $scope.errorMessage = {
                            msgKeys: [ "addPhone.addPhoneNumberConsent" ],
                            type: "info"
                        };
                        $scope.userInfo = $UserInfoModel.instance($rootScope.token);
                        $scope.phone = {};
                        var CONTENT_KEY = {
                            INVALID_PHONE_NUMBER: "validPhone"
                        };
                        var CONTENT_MAPPING = {
                            numberError: CONTENT_KEY.INVALID_PHONE_NUMBER,
                            typeError: CONTENT_KEY.INVALID_PHONE_NUMBER
                        };
                        var populateErrorMessage = function populateErrorMessage(name) {
                            var contentKey = CONTENT_MAPPING[name];
                            var msg = contentKey ? $locale.content.get("scripts." + contentKey) : "unresolved content for login error " + name;
                            $scope.errorMessage = {
                                msgs: [ msg ],
                                type: "error"
                            };
                        };
                        var validationErrorHandler = {
                            numberError: populateErrorMessage,
                            typeError: populateErrorMessage
                        };
                        $populate($scope, {
                            auth: $AuthModel.instance()
                        }).then(function() {
                            $scope.logout = function() {
                                $logger.info("not_you_logout");
                                $scope.auth.action("logout").then(function() {
                                    $state.go("checkout.login");
                                });
                            };
                            $scope.showNotYou = $scope.auth.is_auth_api_call && $util.param("source") !== "consumerApp" && $scope.logout;
                            $scope.onSubmit = function() {
                                if ($scope.phoneConsent) {
                                    $scope.phone.consent = {
                                        agreed: true,
                                        contentId: $locale.country + ":" + $locale.lang + ":" + $scope.consentContentKey + ":" + $contentVersion()
                                    };
                                }
                                $scope.userInfo.action("addPhone", {
                                    data: $scope.phone,
                                    success: function success(data) {
                                        return $CheckoutSessionModel.instance($rootScope.token).action("create", {
                                            success: function success() {
                                                $state.go("checkout.review");
                                            }
                                        });
                                    },
                                    contingencies: {
                                        NEED_CREDIT_CARD: function NEED_CREDIT_CARD() {
                                            $location.path("/checkout/addCard");
                                        },
                                        EXPIRED_CREDIT_CARD: function EXPIRED_CREDIT_CARD() {
                                            $location.path("/checkout/updateCard");
                                        }
                                    },
                                    validation: function validation(data) {
                                        angular.forEach(data, function(value, key) {
                                            validationErrorHandler[key](key);
                                        });
                                    }
                                });
                            };
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-form-components/src/phone/template.html": function(module, exports) {
        module.exports = '<section class="addPhone" id="addPhone" content>\n    <div class="row-fluid">\n        <div class="span14 trayInner">\n            <xo-message message="errorMessage"></xo-message>\n            <p class="userEmail" id="reviewUserInfo" ng-if="showNotYou">\n                {{ content(\'creditcard.hi\', {userName: auth.first_name ? auth.first_name : auth.email}) }}\n                <span>\n                    <a track-link="login_with_diff_user" href="" ng-click="logout()">{{ content(\'memberReview.notYou\')}}</a>\n                </span>\n            </p>\n            <xo-title title-txt="{{content(\'addPhone.addPhoneNumber\')}}"></xo-title>\n            <form name="addPhoneForm" class="proceed" content autocomplete="off" ng-submit="addPhoneForm.$valid && onSubmit()" ng-class="{true: \'validated\'}[validated]" novalidate>\n\n                <xo-phone-input phone="phone"></xo-phone-input>\n                <p class="disclaimer" id="phoneDisclosure" ng-if="showPhoneDisclosure">\n                    <span data-ng-bind-html="htmlContent(consentContentKey)"></span>\n                </p>\n                <input track-submit type="submit" value="{{showPhoneDisclosure ? content(\'addPhone.agreeContinue\') : content(\'common.continueLabel\') }}" class="btn full" ng-click="validated=true" />\n            </form>\n        </div>\n        <div class="span10">\n            <xo-value-props type="login" title="{{content(\'login.propHead\')}}" text-content="login.propVal"></xo-value-props>\n        </div>\n    </div>\n</section>\n';
    },
    "./components/xo-credit-components/src/banner-interstitial/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        __webpack_require__("./components/xo-credit-components/src/banner-interstitial/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        exports["default"] = _squid.$ComponentRoute.extend("$BannerInterstitialRoute", {
            path: "bannerInterstitial",
            params: {
                creditInterstitialTreatment: null,
                banner: null
            },
            directive: "xo-banner-interstitial",
            titleContent: "bannerInterstitial.interstitial",
            trackingData: {
                fptiState: "banner_interstitial",
                buzname: {
                    fullpage: {
                        pagename: "%::banner_interstitial",
                        pagename2: "%::banner_interstitial:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: []
        });
        _squid.$ComponentRoute;
        module.exports = exports["default"];
    },
    "./components/xo-credit-components/src/banner-interstitial/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _angular2 = _interopRequireDefault(_angular);
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        __webpack_require__("./components/xo-credit-components/src/banner-interstitial/styles.less");
        var _template = __webpack_require__("./components/xo-credit-components/src/banner-interstitial/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var VALID_TREATMENTS = [ 1 ];
        var TREATMENT_PREFIX = "bannerInterstitialPageTreatment";
        exports["default"] = _squid.$Component.extend("$xoBannerInterstitialDirective", {
            tag: "xo-banner-interstitial",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: true
                }
            },
            actions: {
                redirectToReview: function redirectToReview() {
                    _logger.$logger.info("Redirecting to review page from banner-interstitial");
                    _uiRouter.$state.go("checkout.review");
                },
                redirectToCAPE: function redirectToCAPE() {
                    _logger.$logger.info("Redirecting to cape from banner-interstitial");
                    _uiRouter.$state.go("checkout.redirectToCape", {}, {
                        location: false
                    });
                }
            },
            lifecycle: {
                enter: function enter() {
                    _logger.$logger.info("$xoBannerInterstitialDirective:enter():$stateParams", _uiRouter.$stateParams);
                    (0, _jquery2["default"])("body").addClass("bannerInterstitialPage");
                    if (!_angular2["default"].isObject(_uiRouter.$stateParams) || !_angular2["default"].isObject(_uiRouter.$stateParams.banner) || !_uiRouter.$stateParams.banner.hasOwnProperty("bodyText") || VALID_TREATMENTS.indexOf(_uiRouter.$stateParams.creditInterstitialTreatment) === -1) {
                        this.actions.redirectToReview();
                    } else {
                        (0, _jquery2["default"])("body").addClass("" + TREATMENT_PREFIX + _uiRouter.$stateParams.creditInterstitialTreatment);
                        this.banner = _uiRouter.$stateParams.banner;
                    }
                },
                exit: function exit() {
                    _logger.$logger.info("$xoBannerInterstitialDirective:exit()");
                    (0, _jquery2["default"])("body").removeClass("bannerInterstitialPage");
                    _angular2["default"].forEach(VALID_TREATMENTS, function(t) {
                        (0, _jquery2["default"])("body").removeClass("" + TREATMENT_PREFIX + t);
                    });
                }
            }
        });
        _squid.$Component;
        _logger.$logger;
        _uiRouter.$state;
        _uiRouter.$stateParams;
        module.exports = exports["default"];
    },
    "./components/xo-credit-components/src/banner-interstitial/styles.less": "./css/app.less",
    "./components/xo-credit-components/src/banner-interstitial/template.html": function(module, exports) {
        module.exports = '<div id="bannerInterstitial">\n\n  <div class="bannerInterstitialColumn">\n\n    <div class="bannerInterstitialLogo">\n      <img\n        src="https://www.paypalobjects.com/webstatic/credit/img/PPClogo_banner.png"\n        width="90"\n      />\n    </div>\n\n    <div class="bannerInterstitialImage"></div>\n\n    <div class="bannerInterstitialXCloseContainer">\n      <input\n        track-submit="acquisition_offer_interstitial_x_close_review_submit"\n        type="submit"\n        value=""\n        id="buttonRedirectToReviewXClose"\n        class="bannerInterstitialXClose"\n        ng-click="actions.redirectToReview()"\n      />\n    </div>\n\n    <div class="bannerInterstitialHeadline">\n      <span ng-bind-html="banner.bodyText"></span>\n    </div>\n\n    <div class="bannerInterstitialTagline">\n        This offer is always available for purchases of $99+\n    </div>\n\n    <div class="bannerInterstitialTermsContent">\n      <!-- terms tagline -->\n      Interest will be charged to your account from the transaction\n      posting date (which is usually within a few days of the purchase\n      date) if the purchase balance is not paid in full within 6 months.\n      <!-- subject to approval -->\n      <span ng-bind-html="banner.termsText"></span>\n      <!-- see terms -->\n      <a\n        href="{{banner.termsLink}}"\n        class="popup bmlTermsLink bannerInterstitialTermsLink"\n        target="_blank"\n        xo-popup\n        track-link="acquisition_offer_interstitial_terms_link"\n        ng-bind-html="banner.termsLinkText"\n      >\n      </a>\n    </div>\n\n    <div class="button buttonCape">\n        <input\n          track-submit="acquisition_offer_interstitial_cape_submit"\n          type="submit"\n          value="Apply Now"\n          id="buttonRedirectToCAPE"\n          class="btn full confirmButton continueButton"\n          ng-click="actions.redirectToCAPE()"\n        />\n    </div>\n\n    <div class="button buttonReview">\n        <input\n          track-submit="acquisition_offer_interstitial_review_submit"\n          type="submit"\n          value="Maybe Later"\n          id="buttonRedirectToReview"\n          class="btn full confirmButton continueButton"\n          ng-click="actions.redirectToReview()"\n        />\n    </div>\n\n  </div>\n\n</div>\n';
    },
    "./components/xo-credit-components/src/bml-display/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-credit-components/src/bml-display/directive.js"), __webpack_require__("./components/xo-credit-components/src/bml-display/xo-bml-apply/route.js"), __webpack_require__("./components/xo-credit-components/src/bml-display/xo-bml-terms-and-conditions/route.js"), __webpack_require__("./components/xo-credit-components/src/bml-display/xo-bml-signature/route.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-bml-display.route", [ "squid", "xo-bml-display.directive", "xo-bml-apply.route", "xo-bml-terms-and-conditions.route", "xo-bml-signature.route" ]).factory("$BMLDisplay", function($ComponentRoute) {
                    return $ComponentRoute.extend("BmlDisplay", {
                        name: "bmldisplay",
                        directive: "xo-bml-display",
                        trackingData: {
                            fptiState: "ppc_display",
                            buzname: {
                                fullpage: {
                                    pagename: "%::ppc_display",
                                    pagename2: "%::ppc_display:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        titleContent: "applyForBml.bmlApplyHeadline",
                        children: [ {
                            name: "$BmlApplyRoute"
                        }, {
                            name: "$BmlTermsAndConditionsRoute"
                        }, {
                            name: "$BmlSignatureRoute"
                        } ]
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-credit-components/src/bml-display", "components/xo-credit-components/src/bml-display/route.js");
    },
    "./components/xo-credit-components/src/bml-display/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename, $) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-credit-components/src/bml-display/template.html"), __webpack_require__("./components/xo-models/src/bml/index.js"), __webpack_require__("./components/xo-beaver/dist/logger.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid, template) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-bml-display.directive", [ "squid", "xomodel.bml", "beaver" ]).factory("$BMLStateHandler", function($state, $logger) {
                    var APPROVED = "APPROVED";
                    var SOFT_DECLINED = "SOFT_DECLINED";
                    var DECLINED = "DECLINED";
                    var FUNDING_INSTRUMENT_ASSOCIATED_WITH_DIFFERENT_MEMBER = "FUNDING_INSTRUMENT_ASSOCIATED_WITH_DIFFERENT_MEMBER";
                    var NEED_SIGNATURE = "NEED_SIGNATURE";
                    var PENDING_COMPLETION_STATUS = "PENDING_COMPLETION_STATUS";
                    var FULL_APPLY_REQUIRED = "FULL_APPLY_REQUIRED";
                    var UNKNOWN_DECISION = "UNKNOWN_DECISION";
                    var INELIGIBLE = "INELIGIBLE";
                    var MAX_SOFT_DECLINES = config.bmlMaxSoftDeclines;
                    var BMLStateHandler = function BMLStateHandler(bmlData) {
                        this.reviewUrl = bmlData.reviewUrl;
                        this.bml = bmlData.bml;
                        this.bmlApply = bmlData.bmlApply;
                        this.bmlComplete = bmlData.bmlComplete;
                        this.checkoutSession = bmlData.checkoutSession;
                        this.auth = bmlData.auth;
                        this.purchase = bmlData.purchase;
                        this.patchPhone = bmlData.patchPhone;
                        this.billingAddresses = bmlData.billingAddresses;
                        this.merchant = bmlData.merchant;
                        this.merchantId = bmlData.merchantId;
                        this.handlers = {};
                        this.handlers[APPROVED] = this.handleAppStatusApproved;
                        this.handlers[DECLINED] = this.handleAppStatusDeclined;
                        this.handlers[SOFT_DECLINED] = this.handleAppStatusSoftDeclined;
                        this.handlers[FUNDING_INSTRUMENT_ASSOCIATED_WITH_DIFFERENT_MEMBER] = this.handleAppStatusFundingInsExist;
                        this.handlers[NEED_SIGNATURE] = this.handleAppStatusNeedSignature;
                        this.handlers[PENDING_COMPLETION_STATUS] = this.handleAppStatusPendingCompletion;
                        this.handlers[UNKNOWN_DECISION] = this.handleAppStatusUnknownDecision;
                        this.handlers[FULL_APPLY_REQUIRED] = this.handleAppStatusFullApplyRequired;
                        this.handlers[INELIGIBLE] = this.handleAppStatusIneligible;
                    };
                    BMLStateHandler.prototype.payInFullRedirect = function payInFullRedirect(result) {
                        $logger.info("APPLYFORBML_VIEW_OPTOUTBML");
                        $state.go(this.reviewUrl);
                    };
                    BMLStateHandler.prototype.termsAndCondition = function termsAndCondition(result) {
                        $state.go("^.bmltermsandconditions");
                    };
                    BMLStateHandler.prototype.handleAppStatusIneligible = function handleAppStatusIneligible(result) {
                        $logger.info("APPLYFORBML_INELIGIBLE");
                        $logger.info("checkout_fpti", {
                            ppc_status: "bmlIneligible"
                        });
                        this.checkoutSession.bmlOffer = false;
                        this.checkoutSession.creditOffer = false;
                        this.checkoutSession.showDeclinePopup = true;
                        $state.go(this.reviewUrl);
                    };
                    BMLStateHandler.prototype.handleAppStatusUnknownDecision = function handleAppStatusUnknownDecision(result) {
                        $logger.info("APPLYFORBML_UNKNOWN_DECISION");
                        $logger.info("checkout_fpti", {
                            ppc_status: "bmlUnknownDecision"
                        });
                        this.checkoutSession.bmlOffer = false;
                        this.checkoutSession.creditOffer = false;
                        this.checkoutSession.showDeclinePopup = true;
                        $state.go(this.reviewUrl);
                    };
                    BMLStateHandler.prototype.handleAppStatusApproved = function handleAppStatusApproved(result) {
                        $logger.info("APPLYFORBML_ACTION_BMLSUCCESS");
                        $logger.info("checkout_fpti", {
                            ppc_status: "bmlSuccess"
                        });
                        this.checkoutSession.fundingOptions.action("update", {
                            resultModel: this.checkoutSession,
                            data: {
                                planId: this.bml.financial_instrument_id
                            },
                            success: $.proxy(function(successResult) {
                                $state.go(this.reviewUrl);
                            }, this),
                            contingencies: {
                                DEFAULT: function DEFAULT(name) {
                                    $state.go(this.reviewUrl);
                                }
                            }
                        });
                    };
                    BMLStateHandler.prototype.handleAppStatusPendingCompletion = function handleAppStatusPendingCompletion(result) {
                        $logger.info("checkout_fpti", {
                            ppc_status: "completeBmlApply"
                        });
                        this.completeApplication(result.application_id);
                    };
                    BMLStateHandler.prototype.handleAppStatusNeedSignature = function handleAppStatusNeedSignature(result) {
                        $logger.info("APPLYFORBML_NEED_SIGNATURE");
                        this.bml.application_id = result.application_id;
                        $logger.info("checkout_fpti", {
                            ppc_status: "needSignature"
                        });
                        $state.go("^.bmlsignature");
                    };
                    BMLStateHandler.prototype.handleAppStatusDeclined = function handleAppStatusDeclined(result) {
                        $logger.info("APPLYFORBML_ACTION_BMLDECLINEHARD");
                        $logger.info("checkout_fpti", {
                            ppc_status: "creditDeclineHard"
                        });
                        this.bml.application_status = "DECLINED";
                        this.checkoutSession.bmlOffer = false;
                        this.checkoutSession.creditOffer = false;
                        this.checkoutSession.showDeclinePopup = true;
                        $state.go(this.reviewUrl);
                    };
                    BMLStateHandler.prototype.handleAppStatusSoftDeclined = function handleAppStatusSoftDeclined(result) {
                        this.bml.bmlSoftDeclineCtr = (this.bml.bmlSoftDeclineCtr || 0) + 1;
                        if (this.bml.bmlSoftDeclineCtr < MAX_SOFT_DECLINES) {
                            $logger.info("APPLYFORBML_ACTION_BMLDECLINESOFT");
                            $state.go("^.bmlapply");
                        } else {
                            $logger.info("checkout_fpti", {
                                ppc_status: "bmlMaxAttempts"
                            });
                            $logger.info("APPLYFORBML_ACTION_BMLMAXATTEMPTS");
                            this.bml.application_status = "DECLINED";
                            this.checkoutSession.bmlOffer = false;
                            this.checkoutSession.creditOffer = false;
                            this.checkoutSession.showDeclinePopup = true;
                            $state.go(this.reviewUrl);
                        }
                    };
                    BMLStateHandler.prototype.handleAppStatusFundingInsExist = function handleAppStatusFundingInsExist(result) {
                        $logger.info("APPLYFORBML_ACTION_BMLDECLINELINKEDTODIFFMEMBER");
                        $logger.info("checkout_fpti", {
                            ppc_status: "bmlDeclineLinkedToDiffMember"
                        });
                        this.checkoutSession.bmlOffer = false;
                        this.checkoutSession.creditOffer = false;
                        this.checkoutSession.showDeclinePopup = true;
                        $state.go(this.reviewUrl);
                    };
                    BMLStateHandler.prototype.handleAppStatusFullApplyRequired = function handleAppStatusFullApplyRequired(result) {
                        $logger.info("APPLYFORBML_FULLAPPLYREQUIRED");
                        $logger.info("checkout_fpti", {
                            ppc_status: "fullApplyRequired"
                        });
                        this.checkoutSession.bmlOffer = false;
                        this.checkoutSession.creditOffer = false;
                        this.bml.fullApplyRequired = true;
                        this.checkoutSession.showDeclinePopup = true;
                        $state.go(this.reviewUrl);
                    };
                    BMLStateHandler.prototype.handleBmlTransitions = function handleBmlTransitions(result) {
                        var handler = this.handlers[result.application_status];
                        if (!handler) {
                            throw new Error("no registered handler for bml transition for application status " + result.application_status);
                        }
                        return $.proxy(handler, this, result)();
                    };
                    BMLStateHandler.prototype.completeApplication = function completeApplication(application_id) {
                        this.bmlComplete.application_id = application_id;
                        this.bmlComplete.action("complete", {
                            success: $.proxy(function(result) {
                                $logger.info("COMPLETEBMLAPPLY_ACTION_BMLSUCCESS");
                                var bml = this.bml;
                                bml.setProperties({
                                    financial_instrument_id: result.financial_instrument_id,
                                    application_status: result.application_status
                                });
                                if (bml.phoneChanged && result && result.user_info && result.user_info.phones && result.user_info.phones.length > 0 && result.user_info.phones[0].id) {
                                    var newPhoneVO = {
                                        op: "add",
                                        path: "/payer_info",
                                        value: {
                                            phone: this.bmlApply.personalInformation.phone.telephone
                                        }
                                    };
                                    this.patchPhone.save({
                                        data: {
                                            patch: newPhoneVO
                                        },
                                        success: $.proxy(function() {
                                            delete bml.phoneChanged;
                                            this.handleBmlTransitions(result);
                                        }, this),
                                        contingencies: {
                                            DEFAULT: $.proxy(function handleContingency(name, contingency) {
                                                $logger.info("BMLPATCHPHONE_CONTINGENCY", name);
                                                this.handleBmlTransitions(result);
                                            }, this)
                                        }
                                    });
                                } else {
                                    this.handleBmlTransitions(result);
                                }
                            }, this)
                        });
                    };
                    BMLStateHandler.prototype.getDefaultBillingAddress = function getDefaultBillingAddress(billingAddresses) {
                        var defaultBillingAddress = billingAddresses && billingAddresses.addresses;
                        defaultBillingAddress = defaultBillingAddress.map(function(address, index, array) {
                            if (address && address["default"] === true) {
                                return address;
                            }
                        });
                        defaultBillingAddress = defaultBillingAddress.length > 0 && defaultBillingAddress[0];
                        return defaultBillingAddress;
                    };
                    BMLStateHandler.prototype.applyBML = function applyBML() {
                        var defaultBillingAddress = this.getDefaultBillingAddress(this.billingAddresses);
                        this.bml.action("apply", {
                            data: {
                                flow: {
                                    nape: this.bml.nape,
                                    fullApplyRequired: this.bml.fullApplyRequired
                                },
                                payer: {
                                    email: this.checkoutSession.payer.email,
                                    id: this.checkoutSession.payer.id,
                                    phone: this.bmlApply.personalInformation.phone.telephone,
                                    phone_type: this.bmlApply.personalInformation.phone.phoneType
                                },
                                billing_address: {
                                    line1: defaultBillingAddress.line1,
                                    line2: defaultBillingAddress.line2,
                                    city: defaultBillingAddress.city,
                                    state: defaultBillingAddress.state,
                                    postal_code: defaultBillingAddress.postal_code,
                                    country: defaultBillingAddress.country,
                                    id: defaultBillingAddress.id
                                },
                                payment_info: {
                                    total_transaction_amount: {
                                        value: this.purchase.amounts.total.amount,
                                        currency: this.purchase.amounts.total.currency_code
                                    },
                                    recipient: {
                                        id: this.merchantId,
                                        total_amount: {
                                            value: this.purchase.amounts.total.amount,
                                            currency: this.purchase.amounts.total.currency_code
                                        },
                                        business_name: this.merchant.brand_name,
                                        type: "PAYPAL_CORE",
                                        multi_seller_indicator: false,
                                        country_code: this.merchant.merchant_country
                                    },
                                    shipping_address: {
                                        id: this.checkoutSession.shipping.id,
                                        name: this.checkoutSession.shipping.name,
                                        line1: this.checkoutSession.shipping.line1,
                                        line2: this.checkoutSession.shipping.line2,
                                        city: this.checkoutSession.shipping.city,
                                        state: this.checkoutSession.shipping.state,
                                        country_code: this.checkoutSession.shipping.country,
                                        postal_code: this.checkoutSession.shipping.postal_code,
                                        default: this.checkoutSession.shipping["default"]
                                    },
                                    name: {
                                        first_name: this.auth.first_name,
                                        last_name: this.auth.last_name
                                    },
                                    item_info: this.purchase.items
                                },
                                dobSsn: {
                                    dobMonth: this.bmlApply.personalInformation.month,
                                    dobDay: this.bmlApply.personalInformation.day,
                                    dobYear: this.bmlApply.personalInformation.year,
                                    nationalId: this.bmlApply.personalInformation.natId
                                }
                            },
                            resultModel: this.bml,
                            success: $.proxy(function(result) {
                                this.handleBmlTransitions(result);
                            }, this),
                            contingencies: {
                                DEFAULT: $.proxy(function handleContingency(name, contingency) {
                                    this.bml.contingency = name;
                                    this.checkoutSession.bmlOffer = false;
                                    this.checkoutSession.creditOffer = false;
                                    this.checkoutSession.showDeclinePopup = true;
                                    $state.go(this.reviewUrl);
                                }, this)
                            }
                        });
                    };
                    return BMLStateHandler;
                }).directive("xoBmlDisplay", function() {
                    return {
                        template: template,
                        scope: {
                            reviewUrl: "="
                        },
                        controller: function controller($scope, $state, $rootScope, $BMLModel, $ApplyForBMLModel, $BMLApplicationModel, $stateParams) {
                            if (!$rootScope.bml && !$rootScope.bmlApply) {
                                $scope.bml = new $BMLModel();
                                $scope.bmlApply = new $ApplyForBMLModel();
                            } else {
                                $scope.bml = $rootScope.bml;
                                $scope.bmlApply = $rootScope.bmlApply;
                            }
                            $scope.bmlComplete = new $BMLApplicationModel();
                            $state.go("^.bmlapply");
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-credit-components/src/bml-display", "components/xo-credit-components/src/bml-display/directive.js", __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "../node_modules/noop-loader/index.js!./components/xo-credit-components/src/bml-display/template.html": function(module, exports) {
        module.exports = "<div ui-view>\n</div>\n";
    },
    "./components/xo-credit-components/src/bml-display/xo-bml-apply/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-credit-components/src/bml-display/xo-bml-apply/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("xo-bml-apply.route", [ "squid", "xo-bml-apply.directive" ]).factory("$BmlApplyRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("BmlApplyRoute", {
                        name: "bmlapply",
                        trackingData: {
                            fptiState: "ppc_apply",
                            buzname: {
                                fullpage: {
                                    pagename: "%::ppc_apply",
                                    pagename2: "%::ppc_apply:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        directive: "xo-bml-apply-page",
                        titleContent: "applyForBml.bmlApplyHeadline",
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-credit-components/src/bml-display/xo-bml-apply", "components/xo-credit-components/src/bml-display/xo-bml-apply/route.js");
    },
    "./components/xo-credit-components/src/bml-display/xo-bml-apply/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-credit-components/src/bml-display/xo-bml-apply/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-title/dist/directive.js"), __webpack_require__("./components/xo-ui-components/src/message/directive.js"), __webpack_require__("./components/xo-address-components/src/add-address/directive.js"), __webpack_require__("./components/xo-form-components/src/phone/phoneInput/directive.js"), __webpack_require__("./components/xo-form-components/src/dob-nationalid/directive.js"), __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js"), __webpack_require__("./components/xo-address-components/src/add-address/directive.js"), __webpack_require__("./components/xo-models/src/bml/index.js"), __webpack_require__("./components/xo-models/src/address/index.js"), __webpack_require__("./components/xo-models/src/user/index.js"), __webpack_require__("./components/xo-models/src/fi/index.js"), __webpack_require__("./components/xo-models/src/auth/index.js"), __webpack_require__("./components/xo-models/src/credit/index.js"), __webpack_require__("./components/xo-beaver/dist/logger.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular, squid, template) {
            return angular.module("xo-bml-apply.directive", [ "squid", "xomodel.checkout", "xo-title.directive", "xo-message.directive", "xo-address-display.directive", "xo-phone.phoneInput", "xo-dob-nationalid.directive", "xo-tooltip.directive", "xo-add-address.directive", "xomodel.bml", "xomodel.address", "xomodel.user", "xomodel.fi", "xomodel.auth", "beaver" ]).directive("xoBmlApplyPage", function() {
                return {
                    template: template,
                    controller: function controller($scope, $rootScope, $state, $locale, $populate, $BillingAddressModel, $BillingAddressesModel, $AuthModel, $ValidateAddressModel, $element, $ValidatePhoneModel, $CheckoutSessionModel, $CheckoutAppDataModel, $BMLStateHandler, $CheckoutCartModel, $CheckoutPayeeModel, $CreditInstallmentModel, $logger, $PatchPhoneModel) {
                        $populate($scope, {
                            auth: $AuthModel.instance(),
                            payee: $CheckoutPayeeModel.instance($rootScope.token),
                            billingAddresses: $BillingAddressesModel.instance(),
                            checkoutAppData: $CheckoutAppDataModel.instance($rootScope.token),
                            checkoutSession: $CheckoutSessionModel.instance($rootScope.token),
                            checkoutCart: $CheckoutCartModel.instance($rootScope.token),
                            creditOptions: $CreditInstallmentModel.instance($rootScope.token)
                        }).then(function() {
                            var defaultBillingAddress = $scope.billingAddresses && $scope.billingAddresses.addresses;
                            defaultBillingAddress = defaultBillingAddress.map(function(address, index, array) {
                                if (address && address["default"] === true) {
                                    return address;
                                }
                            });
                            defaultBillingAddress = defaultBillingAddress.length > 0 && defaultBillingAddress[0];
                            if (defaultBillingAddress) {
                                $scope.bml.action("napeLookUp", {
                                    data: {
                                        payer: $scope.checkoutSession.payer,
                                        billing_address: {
                                            country: defaultBillingAddress.country,
                                            line1: defaultBillingAddress.line1,
                                            line2: defaultBillingAddress.line2,
                                            city: defaultBillingAddress.city,
                                            state: defaultBillingAddress.state,
                                            postal_code: defaultBillingAddress.postal_code
                                        }
                                    },
                                    success: function success(result) {
                                        if (result && result.account_exists === true) {
                                            $scope.bml.nape = "napePotential";
                                            $scope.bml.fullApplyRequired = false;
                                        }
                                    },
                                    contingencies: {
                                        DEFAULT: function DEFAULT() {}
                                    }
                                });
                            }
                            if ($scope.billingAddresses && $scope.billingAddresses.addresses && $scope.billingAddresses.addresses.length > 0) {
                                $scope.billingAddresses.addresses.forEach(function(address) {
                                    if (address["default"]) {
                                        $scope.address = billingAddressObject(address);
                                        $scope.previousDefaultBillingAddress = address;
                                    }
                                });
                            }
                            var bmlData = {
                                reviewUrl: $scope.$parent.reviewUrl,
                                bml: $scope.$parent.bml,
                                bmlApply: $scope.$parent.bmlApply,
                                bmlComplete: $scope.$parent.bmlComplete,
                                checkoutSession: $scope.checkoutSession,
                                auth: $scope.auth,
                                purchase: $scope.checkoutCart.purchase,
                                patchPhone: $scope.patchPhoneModel,
                                billingAddresses: $scope.billingAddresses,
                                merchant: $scope.checkoutAppData.merchant,
                                merchantId: $scope.payee.merchant.id
                            };
                            $scope.bmlStateHandler = new $BMLStateHandler(bmlData);
                            if ($scope.checkoutSession.payer) {
                                $scope.bmlApply.personalInformation.phone.telephone = $scope.checkoutSession.payer.phone;
                                $scope.bmlApply.personalInformation.phone.phoneType = "MOBILE";
                            } else {
                                $scope.bmlFlags.PhoneAdd = true;
                            }
                        });
                        var $el = $($element);
                        function handleDobValidation() {
                            var $fields = $("#dobSelect .dropdown select");
                            $fields.addClass("backendError");
                            if (window.scrollTo) {
                                window.scrollTo(0, 0);
                            }
                        }
                        function triggerNextState() {
                            $logger.info("APPLYFORBML_VIEW_SUBMIT");
                            if ($scope.bml.nape === "napePotential") {
                                $scope.bmlStateHandler.applyBML();
                            } else {
                                $scope.checkoutSession.message = null;
                                $scope.bmlStateHandler.termsAndCondition();
                            }
                        }
                        function isUserInputtedAddress(address) {
                            return address.id === "0";
                        }
                        function handleValidation(res) {
                            if (res && res.fields && res.fields.length) {
                                res.fields.forEach(function(field) {
                                    if (field.field) {
                                        var $field = $($el.find('[name="' + field.field + '"]'));
                                        $field.addClass("backendError");
                                    }
                                });
                            }
                            $scope.checkoutSession.message = {
                                type: "error",
                                msgKeys: [ "genericError.incontextGenericPageError" ]
                            };
                            if (window.scrollTo) {
                                window.scrollTo(0, 0);
                            }
                        }
                        function handlePhoneValidation() {
                            var $field = $(".telephone");
                            $field.addClass("backendError");
                            if (window.scrollTo) {
                                window.scrollTo(0, 0);
                            }
                        }
                        function billingAddressObject(address) {
                            return new $BillingAddressModel({
                                line1: address.line1,
                                line2: address.line2,
                                city: address.city,
                                state: address.state,
                                postal_code: address.postal_code,
                                country: $scope.countryCode,
                                full_address: address.full_address,
                                id: "0"
                            });
                        }
                        $scope.showPhone = function() {
                            return $scope.checkoutSession.payer.phone && $scope.checkoutSession.payer.phone_type === "WORK";
                        };
                        $scope.patchPhoneModel = new $PatchPhoneModel();
                        $scope.patchPhoneModel.token = $scope.token;
                        $scope.init = function() {
                            $scope.checkoutSession.message = null;
                            $scope.previousDefaultBillingAddress = {};
                            $scope.bmlFlags = {};
                            $scope.address = {};
                            $scope.token = $rootScope.token;
                            $scope.countryCode = $locale.country;
                            $scope.validateAddress = new $ValidateAddressModel();
                            $scope.validatePhoneModel = new $ValidatePhoneModel();
                            $scope.validatePhoneModel.token = $scope.token;
                            $scope.bmlFlags.billingAddressUpdated = false;
                            $scope.bmlFlags.AddressAdd = false;
                            $scope.bmlFlags.AddressDisplay = true;
                            $scope.bmlFlags.PhoneAdd = false;
                            $scope.bmlFlags.ChangeLink = true;
                            $scope.billingAddressUpdated = false;
                            $(".paypalHeaderWrapper").addClass("paypalCredit");
                            $(".paypalHeaderWrapper").removeClass("paypalCreditTnc");
                            $(".paypalHeader").addClass("span14");
                            $(".paypalHeader").removeClass("span24");
                            if ($scope.bml && $scope.bml.application_status === "SOFT_DECLINED") {
                                $scope.checkoutSession.message = {
                                    type: "warning",
                                    msgKeys: [ "applyForBml.bmlDeclineSoft" ]
                                };
                            }
                            $logger.info("APPLYFORBML_VIEW_RENDER");
                        };
                        $scope.redirectToReview = function() {
                            $scope.bmlStateHandler.payInFullRedirect();
                        };
                        $scope.onContinue = function() {
                            if ($scope.validateLegalAge()) {
                                if ($scope.bmlFlags.billingAddressUpdated) {
                                    $scope.validateBillingAddress();
                                } else {
                                    triggerNextState();
                                }
                            }
                        };
                        $scope.validateLegalAge = function() {
                            var dobMonth = $scope.bmlApply.personalInformation.month, dobDay = $scope.bmlApply.personalInformation.day, dobYear = $scope.bmlApply.personalInformation.year, currentDate = new Date(), currentMonth = currentDate.getMonth() + 1, currentDay = currentDate.getDate(), currentYear = currentDate.getFullYear(), largestDOBYear = currentYear - 18;
                            var isLegal = dobYear < largestDOBYear || dobYear === largestDOBYear && dobMonth < currentMonth || dobYear === largestDOBYear && dobMonth === currentMonth && dobDay <= currentDay;
                            if (!isLegal) {
                                handleDobValidation();
                            }
                            return isLegal;
                        };
                        $scope.changeAddress = function() {
                            $scope.bmlFlags.billingAddressUpdated = true;
                            $scope.bml.phoneChanged = true;
                            $scope.bmlFlags.AddressAdd = true;
                            $scope.bmlFlags.AddressDisplay = false;
                            $scope.bmlFlags.PhoneAdd = true;
                            $scope.bmlFlags.ChangeLink = false;
                        };
                        $scope.changePlan = function() {
                            $state.go("checkout.chooseCreditOffer");
                        };
                        $scope.validateBillingAddress = function() {
                            var newBilling = billingAddressObject($scope.address);
                            newBilling["default"] = true;
                            $scope.previousDefaultBillingAddress["default"] = false;
                            $scope.validatePhoneModel.save({
                                data: {
                                    telephone: $scope.bmlApply.personalInformation.phone.telephone,
                                    phoneType: $scope.bmlApply.personalInformation.phone.phoneType
                                },
                                success: function success(result) {
                                    if (result) {
                                        newBilling.save({
                                            data: $scope.billingAddress,
                                            success: function success() {
                                                $scope.updateBillingAddress(newBilling);
                                            },
                                            validation: function validation(res) {
                                                handleValidation(res);
                                            }
                                        });
                                    } else {
                                        handlePhoneValidation(result);
                                    }
                                },
                                validation: function validation(result) {
                                    handlePhoneValidation(result);
                                }
                            });
                        };
                        $scope.updateBillingAddress = function(newBillingAddress) {
                            var addresses = $scope.billingAddresses.addresses;
                            if (!isUserInputtedAddress(addresses[0])) {
                                addresses.unshift(newBillingAddress);
                            } else {
                                addresses[0] = newBillingAddress;
                            }
                            triggerNextState();
                        };
                        $scope.init();
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-credit-components/src/bml-display/xo-bml-apply/template.html": function(module, exports) {
        module.exports = '<section class="signupbml" id="signupbml" content>\n    <xo-title title-txt="{{content(\'signupBml.title\')}}" class="accessAid"></xo-title>\n    <div class="row-fluid justMember">\n        <div class="span14 trayInner">\n\n            <div class="title">\n                <xo-message message="checkoutSession.message"></xo-message>\n            </div>\n\n            <!--Title-->\n            <div id="title">\n                <h2 class="beta">{{ content(\'applyForBml.bmlApplyHeadlineShort\') }}</h2>\n                <p>{{ content(\'applyForBml.bmlApplyWithPayPal\') }}</p>\n            </div>\n\n            <form id="userInfoForm" name="userInfoForm" ng-submit="userInfoForm.$valid && onContinue()" ng-class="{true: \'validated\'}[validated]" novalidate>\n\n                <!--Installment information-->\n                <div class="bmlRow" ng-if="creditOptions.creditType">\n                    <div class="billingAddressRow">\n                        <h4 class="noBottom gamma sameLine">{{ content(\'chooseCreditOption.paymentPlan\') }}</h4>\n                        <a id="changePlanLink" class="changeBillingAddress sameLine" ng-click="changePlan()">{{ content(\'common.change\') }}</a>\n                    </div>\n\n                    <div class="installmentInfo" ng-if="creditOptions.creditType===\'INST\'">\n                        <p class="billingName" ng-bind-html="htmlContent(\'chooseCreditOption.selectedOfferText1\',{term:creditOptions.term, monthlyPayment: creditOptions.monthlyPayment})"></p>\n                        <p class="installmentDescription" ng-bind-html="htmlContent(\'chooseCreditOption.selectedOfferText2\',{apr:creditOptions.apr, interest: creditOptions.totalInterest, totalPayment: creditOptions.totalPayment})"></p>\n                    </div>\n\n                    <div class="installmentInfo" ng-if="creditOptions.creditType===\'SAC\'">\n                        <p class="billingName" ng-bind-html="htmlContent(\'applyForBml.bmlSACOfferDetail\')"></p>\n                    </div>\n                </div>\n\n                <!--Personal information-->\n                <div class="bmlRow">\n                    <h4 class="piHeight gamma">{{ content(\'applyForBml.personalInfo\') }}\n                        <a class="verifyHelp" id="verifyHelp"></a>\n\n                        <xo-tooltip trigger="#verifyHelp" show-event="click">\n                            {{ content(\'applyForBml.ssnToolTip\') }}\n                        </xo-tooltip>\n                    </h4>\n\n                    <div class="dobNatlIdGroup">\n                        <xo-dob-nationalid pi="bmlApply.personalInformation"></xo-dob-nationalid>\n                    </div>\n                </div>\n\n\n                <!--Billing Address-->\n                <div class="bmlRow">\n                    <div class="billingAddressRow">\n                        <h4 class="noBottom gamma sameLine">{{ content(\'applyForBml.bmlApplyBillingAddress\') }}</h4>\n                        <a id="changeAddressLink" class="changeBillingAddress sameLine" ng-show="bmlFlags.ChangeLink" ng-click="changeAddress()">{{ content(\'common.change\') }}</a>\n                    </div>\n\n                    <div id="bmlGivenName">\n                        <p class="billingName">{{auth.first_name}}&nbsp{{auth.last_name}}</p>\n                    </div>\n\n                    <div id="bmlAddressDisplay" class="billingAddressRow" ng-show="bmlFlags.AddressDisplay">\n                        <xo-address-display address=address country-code=countryCode></xo-address-display>\n                        <div id="bmlBillingPhone" class="bmlBillingPhone adr">{{bmlApply.personalInformation.phone.telephone}}</div>\n                    </div>\n\n                    <div id="bmlAddressAdd" class="bmlMargin" ng-show="bmlFlags.AddressAdd">\n                        <xo-add-address country=countryCode address="address" token="token"></xo-add-address>\n                    </div>\n\n                    <div id="addPhone" class="addPhone" ng-show="bmlFlags.PhoneAdd">\n                        <xo-phone-input token="token" exclude="WORK" phone="bmlApply.personalInformation.phone"></xo-phone-input>\n                    </div>\n\n                </div>\n\n                <!--Agree and Continue-->\n                <p class="bmlSeeTerms" bind-html-compile="htmlContent(\'applyForBml.bmlApplyESign\')"></p>\n\n                <div class="buttons">\n                    <input type="submit" track-submit=\'bml_apply\' id="bmlAgreeAndContinue" name="bmlAgreeAndContinue"\n                           value="{{content(\'applyForBml.bmlApplyTermsSubmit\')}}" class="btn full" ng-click="validated=true" />\n                </div>\n\n            </form>\n\n            <div class="bmlMargin" id="bmlBottomText">\n                <p class="bmlSeeTerms sameLine">{{ content(\'applyForBml.notInterestedNoInstallments\') }}</p>\n                <p class="bmlSeeTerms sameLine payInFullLink" ng-bind-html="htmlContent(\'applyForBml.payInFull\')"\n                   ng-click="redirectToReview()"></p>\n            </div>\n\n            <div id="bmlLender">\n                <p class="bmlSeeTerms">{{ content(\'base.bmlLender\') }}</p>\n            </div>\n\n        </div>\n\n        <div class="span10 trayInner" id="bmlApplyEdu">\n            <h2 class="gamma">{{ content(\'applyForBml.bmlApplyEduTitle\') }}</h2>\n            <ul>\n                <li>{{ content(\'applyForBml.bmlApplyEduBullet1\') }}</li>\n                <li>{{ content(\'applyForBml.bmlApplyEduBullet2\') }}</li>\n                <li>{{ content(\'applyForBml.bmlApplyEduBullet3\') }}</li>\n            </ul>\n            <p>{{ content(\'applyForBml.bmlApplyInterestTerms\') }}</p>\n        </div>\n    </div>\n    <div ui-view></div>\n</section>\n';
    },
    "./components/xo-form-components/src/dob-nationalid/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-form-components/src/dob-nationalid/template.html"), __webpack_require__("./components/xo-ui-components/src/tooltip/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-dob-nationalid.directive", [ "squid", "xo-tooltip.directive" ]).directive("xoDobNationalid", function() {
                var padNumber = function padNumber(num) {
                    return num.toString().replace(/^(\d)$/, "0$1");
                };
                var getRange = function getRange(start, end) {
                    var arr = [];
                    if (start < end) {
                        for (;start <= end; start++) {
                            arr.push(padNumber(start));
                        }
                    } else {
                        for (;start >= end; start--) {
                            arr.push(padNumber(start));
                        }
                    }
                    return arr;
                };
                return {
                    template: template,
                    scope: {
                        pi: "="
                    },
                    controller: function controller($scope) {
                        $scope.init = function() {
                            var thisYear = new Date().getFullYear();
                            $scope.days = getRange(1, 31);
                            $scope.months = getRange(1, 12);
                            $scope.years = getRange(thisYear - 18, thisYear - 110);
                        };
                        $scope.init();
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-form-components/src/dob-nationalid/template.html": function(module, exports) {
        module.exports = '<div id="dobNationalId" class="dobNatlIdGroup fieldGroup clearfix" content>\n\n    <div id="dobSelect" class="dob bankField restricted">\n        <fieldset>\n            <legend class="fieldLegend" for="dob">{{content(\'applyForBml.bmlApplyDateOfBirth\')}}</legend>\n\n            <div class="dropdown fidobMonth inputField" floating-label-dropdown>\n                <select xo-dropdown name="dobMonth" ng-model="pi.month" id="dobMonth" aria-label="{{content(\'applyForBml.bmlApplyMonth\')}}" aria-required="true" required>\n                    <option value="">{{content(\'applyForBml.bmlApplyMM\')}}</option>\n                    <option ng-repeat="month in months" value="{{month}}" ng-selected="pi.month===\'{{month}}\'">{{month}}</option>\n                </select>\n                <label for="dobMonth">\n                    {{content(\'applyForBml.bmlApplyMM\')}}\n                </label>\n            </div>\n\n            <div class="dropdown fidobDay inputField" floating-label-dropdown>\n                <select xo-dropdown name="dobDay" ng-model="pi.day" id="dobDay" aria-label="{{content(\'applyForBml.bmlApplyDay\')}}" aria-required="true" required>\n                    <option value="">{{content(\'applyForBml.bmlApplyDD\')}}</option>\n                    <option ng-repeat="day in days" value="{{day}}" ng-selected="pi.day===\'{{day}}\'">{{day}}</option>\n                </select>\n                <label for="dobDay">\n                    {{content(\'applyForBml.bmlApplyDD\')}}\n                </label>\n            </div>\n\n            <div class="dropdown fidobYear inputField" floating-label-dropdown>\n                <select xo-dropdown name="dobYear" ng-model="pi.year" id="dobYear" aria-label="{{content(\'applyForBml.bmlApplyYear\')}}" aria-required="true" required>\n                    <option value="">{{content(\'applyForBml.bmlApplyYYYY\')}}</option>\n                    <option ng-repeat="year in years" value="{{year}}" ng-selected="pi.year===\'{{year}}\'">{{year}}</option>\n                </select>\n                <label for="dobYear">\n                    {{content(\'applyForBml.bmlApplyYYYY\')}}\n                </label>\n            </div>\n\n        </fieldset>\n    </div>\n\n    <div class="inputField confidential nationalId" floating-label>\n        <input ng-model="pi.natId" name="nationalId" id="nationalId" value="" pattern="\\d{4}" maxlength="4" autocapitalize="off" aria-required="true" autocomplete="off" placeholder="{{ content(\'applyForBml.lastFour\') }}" xo-error-tooltip required />\n        <label for="nationalId">{{ content(\'applyForBml.bmlApplyLast4SSN\') }}</label>\n        <xo-tooltip trigger="#nationalId" show-event="click">\n            {{ content(\'applyForBml.bmlApplyToolTipSSN\') }}\n        </xo-tooltip>\n    </div>\n</div>\n';
    },
    "./components/xo-credit-components/src/bml-display/xo-bml-terms-and-conditions/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-credit-components/src/bml-display/xo-bml-terms-and-conditions/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("xo-bml-terms-and-conditions.route", [ "squid", "xo-bml-terms-and-conditions.directive" ]).factory("$BmlTermsAndConditionsRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("BmlTermsAndConditionsRoute", {
                        name: "bmltermsandconditions",
                        trackingData: {
                            fptiState: "ppc_termsandconditions",
                            buzname: {
                                fullpage: {
                                    pagename: "%::ppc_termsandconditions",
                                    pagename2: "%::ppc_termsandconditions:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        directive: "xo-bml-terms-and-conditions-page",
                        titleContent: "applyForBml.bmlApplyHeadline",
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-credit-components/src/bml-display/xo-bml-terms-and-conditions", "components/xo-credit-components/src/bml-display/xo-bml-terms-and-conditions/route.js");
    },
    "./components/xo-credit-components/src/bml-display/xo-bml-terms-and-conditions/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-credit-components/src/bml-display/xo-bml-terms-and-conditions/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-title/dist/directive.js"), __webpack_require__("./components/xo-ui-components/src/message/directive.js"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-models/src/fi/index.js"), __webpack_require__("./components/xo-models/src/bml/index.js"), __webpack_require__("./components/xo-models/src/auth/index.js"), __webpack_require__("./components/xo-models/src/user/index.js"), __webpack_require__("./components/xo-device-info/dist/index.js"), __webpack_require__("./components/xo-beaver/dist/logger.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular, squid, template) {
            return angular.module("xo-bml-terms-and-conditions.directive", [ "squid", "xomodel.checkout", "xo-title.directive", "xo-message.directive", "xomodel.checkout", "xomodel.fi", "xomodel.bml", "xomodel.auth", "xomodel.user", "xo-device-info", "beaver" ]).directive("xoBmlTermsAndConditionsPage", function() {
                var linkFn = function linkFn(scope, element, attrs) {
                    var $agreeButton = $("#bmlAgreeToTerms");
                    var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent", eventer = window[eventMethod], data, messageEvent = eventMethod === "attachEvent" ? "onmessage" : "message";
                    if (window.postMessage) {
                        eventer(messageEvent, function(event) {
                            data = angular.fromJson(event.data);
                            if (data.action === "scroll") {
                                if (data.toEnd && !scope.isMobile) {
                                    scope.scrollComplete();
                                }
                            } else if (data.action === "setHeight" && scope.isMobile) {
                                $(".bmlTermsBody iframe").css("height", data.height + 20 + "px");
                            }
                        }, false);
                    }
                    $agreeButton.click(function(event) {
                        event.preventDefault();
                        scope.handleAgreeToTermsClick();
                    });
                };
                return {
                    template: template,
                    link: linkFn,
                    controller: function controller($scope, $populate, $rootScope, $state, $CheckoutPayeeModel, $BillingAddressesModel, $CheckoutCartModel, $CheckoutSessionModel, $AuthModel, $CheckoutAppDataModel, $BMLApplicationModel, $BMLStateHandler, $PatchPhoneModel, $DeviceInfo, $logger) {
                        if ($scope.$parent && $scope.$parent.bml) {
                            $scope.bml = $scope.$parent.bml;
                            $scope.bmlApply = $scope.$parent.bmlApply;
                            $scope.bmlComplete = $scope.$parent.bmlComplete;
                        }
                        $populate($scope, {
                            auth: $AuthModel.instance(),
                            payee: $CheckoutPayeeModel.instance($rootScope.token),
                            billingAddresses: $BillingAddressesModel.instance(),
                            checkoutCart: $CheckoutCartModel.instance($rootScope.token),
                            checkoutSession: $CheckoutSessionModel.instance($rootScope.token),
                            checkoutAppData: $CheckoutAppDataModel.instance($rootScope.token)
                        }).then(function() {
                            $scope.patchPhoneModel = new $PatchPhoneModel();
                            $scope.patchPhoneModel.token = $scope.token;
                            if ($scope.$parent && $scope.$parent.bml) {
                                var bmlData = {
                                    reviewUrl: $scope.$parent.reviewUrl,
                                    bml: $scope.bml,
                                    bmlApply: $scope.bmlApply,
                                    bmlComplete: $scope.bmlComplete,
                                    checkoutSession: $scope.checkoutSession,
                                    auth: $scope.auth,
                                    purchase: $scope.checkoutCart.purchase,
                                    patchPhone: $scope.patchPhoneModel,
                                    billingAddresses: $scope.billingAddresses,
                                    merchant: $scope.checkoutAppData.merchant,
                                    merchantId: $scope.payee.merchant.id
                                };
                                $scope.bmlStateHandler = new $BMLStateHandler(bmlData);
                            }
                        });
                        $scope.init = function() {
                            $scope.token = $rootScope.token;
                            $(".paypalHeaderWrapper").addClass("paypalCreditTnc");
                            $(".paypalHeader").removeClass("span14");
                            $(".paypalHeader").addClass("span24");
                            $(".paypalHeader").addClass("headerBar");
                            $(".footerWrapper").addClass("hide");
                            $scope.isMobile = $DeviceInfo.isMobile();
                            $scope.isMiniBrowser = $rootScope.miniBrowser;
                            $scope.bmlFlags = {
                                bmlFooterShow: true,
                                full: true,
                                xoFooter: true,
                                enableFooter: true,
                                showConfirmationModal: false,
                                showModalBackdrop: true
                            };
                            if (window.scrollTo) {
                                window.scrollTo(0, 0);
                            }
                            $logger.info("TERMSNCONDITIONS_VIEW_RENDER");
                        };
                        $scope.handleAgreeToTermsClick = function() {
                            this.showConfirmationModal();
                            $logger.info("bmlAgreeToTerms", {});
                        };
                        $scope.showConfirmationModal = function(show) {
                            show = angular.isUndefined(show) ? true : show;
                            $scope.bmlFlags.showConfirmationModal = show;
                        };
                        $scope.agreeToTermsConfirmation = function(event) {
                            event.preventDefault();
                            $logger.info("bmlConfirmAgreeToTermsPopup", {});
                            this.showConfirmationModal(false);
                            this.onContinue();
                        };
                        $scope.cancelApplication = function(event) {
                            event.preventDefault();
                            $logger.info("bmlCancelApplication", {});
                            $scope.bmlStateHandler.payInFullRedirect();
                        };
                        $("html").on("keyup", function(ev) {
                            if (ev.which === 27) {
                                $scope.showConfirmationModal(false);
                            }
                        });
                        $scope.onContinue = function() {
                            $logger.info("BMLTERMSNCONDITIONS_VIEW_SUBMIT");
                            $scope.bmlStateHandler.applyBML();
                        };
                        $scope.init();
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-credit-components/src/bml-display/xo-bml-terms-and-conditions/template.html": function(module, exports) {
        module.exports = '<section class="bmlTermsAndConditions" id="bmlTermsAndConditions" content>\n\n    <div ng-show="bmlFlags.showConfirmationModal" id="creditConfirmation" class="modal bmlModal" role="alertdialog" tabindex="-1">\n\n        <div ng-show="bmlFlags.showModalBackdrop" class="modal-backdrop"></div>\n\n        <div class="modal-wrap">\n\n            <div class="paypalHeaderWrapper paypalCredit">\n                <div class="logo">\n                    <span class="accessAid">{{content(\'applyForBml.payPalCredit\')}}</span>\n                </div>\n                <a class="close" href="#" ng-click="showConfirmationModal(false)">\n                    {{content(\'applyForBml.close\')}}\n                </a>\n            </div>\n\n            <div class="confirmationPopupContent">\n                <h2>{{content(\'applyForBml.justToConfirm\')}}</h2>\n                <ul>\n                    <li>\n                        {{content(\'applyForBml.confirmationPopupListItem1\')}}\n                    </li>\n                    <li>\n                        {{content(\'applyForBml.confirmationPopupListItem2\', { email: auth.email })}}\n                    </li>\n                </ul>\n                <form id="confirmAgreeToTerms">\n                    <input ng-click="agreeToTermsConfirmation($event)" id="confirmAgreeToTermsSubmit"\n                        class="btn btn-submit full" type="submit" value="{{content(\'applyForBml.agreeApply\')}}">\n                </form>\n            </div>\n            <div class="cancelApplicationBlock">\n                <a ng-click="cancelApplication($event)" id="cancelCreditApplication" href="#">\n                    {{content(\'applyForBml.cancelApplication\')}}\n                </a>\n            </div>\n        </div>\n    </div>\n\n\n    <xo-title title-txt="{{content(\'signupBml.title\')}}" class="accessAid"></xo-title>\n    <div class="row-fluid justMember">\n        <div class="trayInner">\n            <xo-message message="checkoutSession.message"></xo-message>\n\n            <div class="bmlTermsHeader">\n                <h2 class="gamma zeta bmlTermsHead">{{ content(\'applyForBml.agreementTermsTitle\') }}</h2>\n                <p class="printContent">\n                    <a href="https://www.paypalobjects.com/webstatic/checkout/hermes/html/PayPalCreditTerms_print.html" xo-popup class=popup target="_blank">\n                       <span ng-if= "!isMobile" >{{ content(\'applyForBml.printCopy\') }} </span>\n                        <span ng-if="isMobile">{{ content(\'applyForBml.download\') }}</span>\n                    </a>\n                </p>\n            </div>\n\n            <div class="span24 trayInner">\n\n                <div class="bmlTermsInnerWrap">\n                    <div class="bmlTermsBody" tabindex="-1">\n                        <iframe id= "tncFrame" src="https://www.paypalobjects.com/webstatic/checkout/hermes/html/PayPalCreditTerms_v2.html"></iframe>\n                   </div>\n                </div>\n\n                <div class="bmlTermsFooter buttons"\n                     ng-class="{\'bmlTermsFooter buttons bmlFooterShow\': bmlFlags.bmlFooterShow ,\n                                \'bmlTermsFooter buttons enabled\' : bmlFlags.enableFooter,\n                                \'bmlTermsFooter buttons\': !bmlFlags.bmlFooterShow || !bmlFlags.enableFooter}">\n                    <div class="proceed">\n                        <button id="bmlAgreeToTerms" track-submit=\'ppc_agree_terms\' class="btn bmlAgreeToTerms"\n                                name="bmlAgreeApply">{{content(\'applyForBml.agreeApply\')}}</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div ui-view></div>\n</section>\n';
    },
    "./components/xo-credit-components/src/bml-display/xo-bml-signature/route.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("./components/xo-credit-components/src/bml-display/xo-bml-signature/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                angular.module("xo-bml-signature.route", [ "squid", "xo-bml-signature.directive" ]).factory("$BmlSignatureRoute", function($ComponentRoute) {
                    return $ComponentRoute.extend("BmlSignatureRoute", {
                        name: "bmlsignature",
                        trackingData: {
                            fptiState: "ppc_signature",
                            buzname: {
                                fullpage: {
                                    pagename: "%::ppc_signature",
                                    pagename2: "%::ppc_signature:member:hermes:",
                                    version: "member:%:"
                                }
                            }
                        },
                        titleContent: "consumerCreditInfo.applicationApprovedMessage",
                        directive: "xo-bml-signature-page",
                        children: []
                    });
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-credit-components/src/bml-display/xo-bml-signature", "components/xo-credit-components/src/bml-display/xo-bml-signature/route.js");
    },
    "./components/xo-credit-components/src/bml-display/xo-bml-signature/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-credit-components/src/bml-display/xo-bml-signature/template.html"), __webpack_require__("./components/xo-models/src/bml/index.js"), __webpack_require__("./components/xo-page-components/src/value-props/directive.js"), __webpack_require__("./components/xo-title/dist/directive.js"), __webpack_require__("./components/xo-ui-components/src/message/directive.js"), __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular, squid, template) {
            return angular.module("xo-bml-signature.directive", [ "squid", "xomodel.bml", "xo-value-props.directive", "xo-title.directive", "xo-message.directive", "xo-error-tooltip.directive" ]).directive("xoBmlSignaturePage", function() {
                return {
                    template: template,
                    controller: function controller($scope, $AuthModel, $populate, $state, $rootScope, $BMLApplicationModel) {
                        $populate($scope, {
                            auth: $AuthModel.instance()
                        }).then(function() {
                            $scope.init = function() {
                                $(".paypalHeaderWrapper").removeClass("paypalCreditTnc");
                                $(".paypalHeaderWrapper").addClass("paypalCredit");
                                $(".paypalHeader").removeClass("span14");
                                $(".paypalHeader").addClass("span24");
                                $(".paypalHeader").addClass("headerBar");
                                $scope.token = $rootScope.token;
                                $scope.bmlSign = new $BMLApplicationModel();
                            };
                            $scope.onSubmit = function() {
                                var application_id = $scope.bml.application_id;
                                $scope.bmlSign.application_id = application_id;
                                $scope.bmlSign.action("sign", {
                                    resultModel: $scope.bml,
                                    success: function success(result) {
                                        $state.go("checkout.review");
                                    }
                                });
                            };
                            $scope.redirectToReview = function() {
                                $state.go("checkout.review");
                            };
                            $scope.init();
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-credit-components/src/bml-display/xo-bml-signature/template.html": function(module, exports) {
        module.exports = '<section class="bmlSignature" id="bmlSignature" content>\n    <div class="row-fluid">\n        <div class="span14 trayInner">\n            <xo-message message="errorMessage"></xo-message>\n            <xo-title title-txt="{{content(\'consumerCreditInfo.applicationApprovedMessage\')}}"></xo-title>\n            <form name="bmlSignatureForm" class="proceed" content novalidate="novalidate" autocomplete="off" ng-submit="bmlSignatureForm.$valid && onSubmit()" ng-class="{true: \'validated\'}[validated]" novalidate>\n                <p class="content">{{content(\'consumerCreditInfo.reviewSecciMessage\')}}</p>\n\n                <div class="agree checkbox legal" ng-class="{error: validated && !bmlSignatureForm.$valid}">\n                    <input ng-model="fields.agree" type="checkbox" name="agree" id="agree" data-error-text="{{content(\'eConsent.eConsentError\')}}" xo-error-tooltip xo-validation=\'{\n                        "validator": "isChecked",\n                        "options": {\n                            "el": "#agree"\n                        }\n                    }\' />\n                    <label id="confirmationMessage" class="noBottom" for="agree" ng-bind-html="htmlContent(\'consumerCreditInfo.secciReadConfirmationMessage\')"></label>\n                </div>\n                <div class="buttons">\n                    <input track-submit=\'bml_signature\' type="submit" value="{{content(\'common.continueLabel\')}}"\n                           class="btn full" ng-click="validated=true" />\n                </div>\n\n                <div class="bmlMargin" id="bmlBottomText">\n                    <p class="bmlSeeTerms sameLine">{{ content(\'applyForBml.notInterestedNoInstallments\') }}</p>\n                    <p class="bmlSeeTerms sameLine" ng-bind-html="htmlContent(\'applyForBml.payInFull\')" ng-click="redirectToReview()"></p>\n                </div>\n            </form>\n        </div>\n        <div class="span10 bmlMargin">\n            <xo-value-props type="signature"></xo-value-props>\n        </div>\n    </div>\n</section>\n';
    },
    "./components/xo-credit-components/src/choose-credit-offer/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$ChooseCreditOfferRoute = undefined;
        __webpack_require__("./components/xo-credit-components/src/choose-credit-offer/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $ChooseCreditOfferRoute = exports.$ChooseCreditOfferRoute = _squid.$ComponentRoute.extend("$ChooseCreditOfferRoute", {
            path: "chooseCreditOffer",
            directive: "xo-choose-credit-offer",
            titleContent: "chooseCreditOffer.choose",
            trackingData: {
                fptiState: "choose_credit_offer",
                buzname: {
                    fullpage: {
                        pagename: "%::choose_credit_offer",
                        pagename2: "%::choose_credit_offer:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            auth: false,
            children: []
        });
        angular.value("$ChooseCreditOfferRoute", $ChooseCreditOfferRoute);
        _squid.$ComponentRoute;
    },
    "./components/xo-credit-components/src/choose-credit-offer/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
            var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
            var _directive = __webpack_require__("./components/xo-credit-components/src/choose-credit-offer/faq/directive.js");
            var _directive2 = _interopRequireDefault(_directive);
            __webpack_require__("./components/xo-credit-components/src/choose-credit-offer/styles.less");
            var _template = __webpack_require__("./components/xo-credit-components/src/choose-credit-offer/template.html");
            var _template2 = _interopRequireDefault(_template);
            var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
            var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
            var _index2 = __webpack_require__("./components/xo-models/src/credit/index.js");
            var _directive3 = __webpack_require__("./components/xo-page-components/src/header/directive.js");
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            exports["default"] = _squid.$Component.extend("$xoChooseCreditOfferDirective", {
                tag: "xo-choose-credit-offer",
                template: _template2["default"],
                props: {
                    token: {
                        type: "var",
                        required: true
                    }
                },
                resolve: {
                    models: function models() {
                        return {
                            auth: _auth.$AuthModel.instance().retrieve(),
                            checkoutCart: _index.$CheckoutCartModel.instance(this.props.token).retrieve(),
                            checkoutAppData: _index.$CheckoutAppDataModel.instance(this.props.token).retrieve(),
                            payee: _index.$CheckoutPayeeModel.instance(this.props.token).retrieve(),
                            creditOptions: _index2.$CreditInstallmentModel.instance(this.props.token).retrieve(),
                            flowEligibility: _index.$FlowEligibilityModel.instance(this.props.token).retrieve()
                        };
                    }
                },
                actions: {
                    redirectToReview: function redirectToReview() {
                        $("body").removeClass("CYCOPage");
                        _directive3.$SetHeaderText.setText("");
                        this.creditDataModel.payInFull = true;
                        if (!this.models.auth.logged_in) {
                            _uiRouter.$state.go("checkout.login");
                        } else {
                            _uiRouter.$state.go("checkout.review");
                        }
                    },
                    toggleSacOffer: function toggleSacOffer(isExtended) {
                        this.sacExtended = isExtended ? false : true;
                    },
                    toggleInstallmentOffer: function toggleInstallmentOffer(isExtended) {
                        this.installmentExtended = isExtended ? false : true;
                    },
                    toggleFAQ: function toggleFAQ(index) {
                        this.faqExtended[index] = !this.faqExtended[index];
                    },
                    toggleAllFAQ: function toggleAllFAQ() {
                        this.allFaqExtended = !this.allFaqExtended;
                        var newState = false;
                        if (this.allFaqExtended) {
                            this.toggleText = (0, _squid.$renderContent)("FAQ.closeAllSections");
                            newState = true;
                        } else {
                            this.toggleText = (0, _squid.$renderContent)("FAQ.openAllSections");
                            newState = false;
                        }
                        for (var i in this.faqExtended) {
                            this.faqExtended[i] = newState;
                        }
                    },
                    getCreditFinancingCodes: function getCreditFinancingCodes(creditOffers) {
                        var financingCodes = "";
                        var installmentOffer = creditOffers.installment_options;
                        var sacOffer = creditOffers.sac_options;
                        if (installmentOffer && installmentOffer.length) {
                            installmentOffer.forEach(function(installment) {
                                financingCodes += installment.financingCode;
                                financingCodes += ",";
                            });
                        }
                        if (sacOffer) {
                            financingCodes += sacOffer.financingCode;
                        }
                        return financingCodes;
                    },
                    handleRedirect: function handleRedirect() {
                        var creditMemberType = this.isCreditInWallet ? "existingMember" : "newMember";
                        var isBuyerSet = this.fundingInstruments;
                        var isSignUpFlow = this.creditDataModel.isCreditSignup();
                        var isChangeInstallment = this.creditDataModel.isChangeStatus();
                        $("body").removeClass("CYCOPage");
                        _directive3.$SetHeaderText.setText("");
                        if (isBuyerSet && creditMemberType === "newMember" || isSignUpFlow && isChangeInstallment || this.country === "DE" || this.models.checkoutCart.isBillingNoPurchase()) {
                            _uiRouter.$state.go("checkout.redirectToCape", {}, {
                                location: false
                            });
                        } else if (creditMemberType === "existingMember") {
                            _uiRouter.$state.go("checkout.review");
                        } else {
                            _uiRouter.$state.go("checkout.login");
                        }
                    },
                    onSelect: function onSelect(index) {
                        var _this = this;
                        if (index === "CORE") {
                            if (this.models.creditOptions && this.models.creditOptions.creditType) {
                                delete this.models.creditOptions.creditType;
                            }
                            _logger.$logger.info("checkout_fpti", {
                                credit_type: "CORE"
                            });
                            this.actions.handleRedirect();
                        } else {
                            var isPPCReuse = this.isCreditInWallet;
                            var selectedOffer = index === "SAC" ? this.creditOffers.sac_options : this.creditOffers.installment_options[index];
                            var param = {
                                financing_code: selectedOffer.financingCode,
                                apr: selectedOffer.apr,
                                term: selectedOffer.term,
                                credit_type: selectedOffer.creditType,
                                paypal_subsidy: selectedOffer.paypalSubsidy
                            };
                            if (index !== "SAC") {
                                param.monthly_percentage_rate = selectedOffer.monthlyPercentageRate;
                                param.total_cost = selectedOffer.totalPayment.value;
                                param.total_interest = selectedOffer.totalInterest.value;
                                param.monthly_payment = selectedOffer.monthlyPayment.value;
                                param.currency = selectedOffer.monthlyPayment.currency;
                            }
                            return this.models.creditOptions.action("select", {
                                data: param,
                                success: function success() {
                                    _logger.$logger.info("checkout_fpti", {
                                        is_ppc_reuse: isPPCReuse ? "1" : "0",
                                        credit_type: selectedOffer.creditType,
                                        financing_code_selected: selectedOffer.financingCode
                                    });
                                    _this.actions.handleRedirect();
                                }
                            });
                        }
                    }
                },
                lifecycle: {
                    enter: function enter() {
                        this.offers = _index.$InstallmentOptionsModel.instance(this.props.token);
                        this.checkoutCart = _index.$CheckoutCartModel.instance(this.props.token);
                        this.checkoutSession = _index.$CheckoutSessionModel.instance(this.props.token);
                        this.creditOffers = this.offers.installments && this.offers.installments[0];
                        this.creditDataModel = _index2.$CreditDataModel.instance(this.props.token);
                        this.installmentCount = this.creditOffers && this.creditOffers.installment_options && this.creditOffers.installment_options.length;
                        this.faqExtended = [ false, false, false ];
                        this.allFaqExtended = false;
                        $(".paypalHeaderWrapper").addClass("paypalCredit");
                        $(".paypalHeaderWrapper").removeClass("paypalCreditTnc");
                        $("body").addClass("CYCOPage");
                        _directive3.$SetHeaderText.setText("chooseCreditOption.offerHeading");
                    },
                    populate: function populate() {
                        var _this2 = this;
                        var self = this;
                        var MIN_AMOUNT = "$99";
                        this.fundingInstruments = this.checkoutSession.get("fundingOptions.instruments");
                        if (this.models.auth.logged_in && this.fundingInstruments) {
                            this.checkoutSession.retrieve();
                        }
                        this.isCreditInWallet = this.fundingInstruments && _squid.$util.some(this.fundingInstruments, function(fi) {
                            return fi.name === "BILL_ME_LATER";
                        });
                        this.country = this.models.checkoutAppData.get("merchant.merchant_country");
                        this.toggleText = (0, _squid.$renderContent)("FAQ.openAllSections");
                        this.templateVars = {
                            merchantName: this.models.checkoutAppData.get("merchant.brand_name"),
                            amount: this.checkoutCart.get("purchase.amounts.total.amount_formatted"),
                            minAmount: MIN_AMOUNT,
                            seeTermsUrl: undefined
                        };
                        function getFlowEligibility() {
                            return self.models.flowEligibility.reload({
                                params: {
                                    localeCountry: self.country
                                }
                            });
                        }
                        function getInstallmentContent() {
                            var contentKey = "chooseCreditOption.singleInstallmentDescription";
                            var isZeroAprAvailable = false;
                            if (self.installmentCount > 1) {
                                self.creditOffers.installment_options.forEach(function(installment) {
                                    if (installment.apr === "0.00") {
                                        isZeroAprAvailable = true;
                                        contentKey = "chooseCreditOption.installmentDescriptionAprZero";
                                    }
                                });
                                if (!isZeroAprAvailable) {
                                    contentKey = "chooseCreditOption.installmentDescription2";
                                }
                            }
                            return contentKey;
                        }
                        if (this.models.checkoutCart.isBilling()) {
                            this.showSingleOffer = true;
                        } else {
                            this.offers.save({
                                data: {
                                    payee: this.models.payee,
                                    checkoutCart: this.models.checkoutCart,
                                    checkoutAppData: this.models.checkoutAppData,
                                    isMemberCredit: true
                                },
                                success: function success(result) {
                                    _this2.creditOffers = result.installments && result.installments[0];
                                    var installmentsPresent = _this2.creditOffers && _this2.creditOffers.installment_options;
                                    _this2.installmentCount = installmentsPresent && _this2.creditOffers.installment_options.length;
                                    _this2.templateVars.seeTermsUrl = _this2.creditOffers ? (0, _squid.$feature)("creditOfferSeeTermsUrl") + _this2.creditOffers.terms_param : undefined;
                                    if (_this2.creditOffers) {
                                        _logger.$logger.info("checkout_fpti", {
                                            financing_code_offered: _this2.actions.getCreditFinancingCodes(_this2.creditOffers)
                                        });
                                    }
                                    _this2.installmentContentKey = getInstallmentContent();
                                    var isFlowInstallmentEligible = getFlowEligibility().then(function(eligibility) {
                                        return eligibility.installment;
                                    });
                                    _this2.defaultinstallmentExtended = (_this2.country === "GB" || _this2.country === "DE") && installmentsPresent && _this2.models.checkoutAppData.is_second_button_txn && isFlowInstallmentEligible;
                                    _this2.showSingleOffer = (_this2.country === "GB" || _this2.country === "DE") && (installmentsPresent && (_this2.models.checkoutAppData.is_second_button_txn ? isFlowInstallmentEligible : _this2.checkoutSession && _this2.checkoutSession.creditOffer) ? false : true);
                                    _this2.showNoInterestSection = _this2.country === "GB" || _this2.country === "DE" ? !_this2.defaultinstallmentExtended : _this2.creditOffers && _this2.creditOffers.sac_options;
                                }
                            });
                        }
                    }
                }
            });
            _squid.$Component;
            _squid.$util;
            _squid.$feature;
            _squid.$renderContent;
            _logger.$logger;
            _uiRouter.$state;
            _auth.$AuthModel;
            _index.$CheckoutSessionModel;
            _index.$CheckoutCartModel;
            _index.$InstallmentOptionsModel;
            _index.$CheckoutPayeeModel;
            _index.$CheckoutAppDataModel;
            _index.$FlowEligibilityModel;
            _index2.$CreditInstallmentModel;
            _index2.$CreditDataModel;
            _directive3.$SetHeaderText;
            module.exports = exports["default"];
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./components/xo-credit-components/src/choose-credit-offer/faq/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-credit-components/src/choose-credit-offer/faq/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(angular, squid, template) {
            squid.module("xo-faq.directive", [ "squid", "xomodel.checkout" ]).directive("xoFaq", function() {
                return {
                    template: template
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-credit-components/src/choose-credit-offer/faq/template.html": function(module, exports) {
        module.exports = '<div class="faq">\n    <div class="clearfix">\n        <a id="toggleAll" class="hideAll" ng-click="actions.toggleAllFAQ()">{{toggleText}}</a>\n        <h2 class="beta" id="title">{{content(\'FAQ.title\')}}</h2>\n    </div>\n    <ul>\n        <li ng-class="{ expanded:faqExtended[0], collapsed:!faqExtended[0], faqContent:true}">\n            <div class=\'action\' ng-click="actions.toggleFAQ(0)">\n                <span ng-class="{ plus:!faqExtended[0], minus:faqExtended[0], faqAction:true}"></span>\n                <p class="gamma">{{content(\'FAQ.question1\')}}</p>\n            </div>\n            <div class="answer secondary longerAnswer">\n                <span class=\'action\' ng-bind-html="htmlContent(\'FAQ.answer1\')"></span>\n                <div class="amortizationTableDEContainer">\n                    <table class="amortizationTableDE">\n                        <tbody>\n                            <tr class="amortizationHeader lastRow">\n                                <th/>\n                                <th>{{content(\'FAQ.month\')}}</th>\n                                <th>{{content(\'FAQ.amountBefore\')}}</th>\n                                <th>{{content(\'FAQ.installment\')}}</th>\n                                <th>{{content(\'FAQ.interest\')}}</th>\n                                <th>{{content(\'FAQ.repayment\')}}</th>\n                                <th>{{content(\'FAQ.amountAfter\')}}</th>\n                            </tr>\n                            <tr class="amortizationContent">\n                                <td class="firstColumn" rowspan="6">\n                                    <p class="firstRow" ng-bind-html="htmlContent(\'FAQ.examplePurchaseAmount1\')" />\n                                    <p ng-bind-html="htmlContent(\'FAQ.exampleAPR1\')" />\n                                </td>\n                                <td> 1 </td>\n                                <td> 389,00 </td>\n                                <td> 66,66 </td>\n                                <td> 3,10 </td>\n                                <td> 63,56 </td>\n                                <td> 325,44 </td>\n\n                            </tr>\n                             <tr class="amortizationContent">\n\n                                <td> 2 </td>\n                                <td> 325,44 </td>\n                                <td> 66,66 </td>\n                                <td> 2,59 </td>\n                                <td> 64,07 </td>\n                                <td> 261,37 </td>\n\n                            </tr>\n                            <tr class="amortizationContent">\n\n                                <td> 3 </td>\n                                <td> 261,37 </td>\n                                <td> 66,66 </td>\n                                <td> 2,08 </td>\n                                <td> 64,58 </td>\n                                <td> 196,79 </td>\n\n                            </tr>\n                            <tr class="amortizationContent">\n\n                                <td> 4 </td>\n                                <td> 196,79 </td>\n                                <td> 66,66 </td>\n                                <td> 1,57 </td>\n                                <td> 65,09 </td>\n                                <td> 131,70 </td>\n\n                            </tr>\n                            <tr class="amortizationContent">\n\n                                 <td> 5 </td>\n                                <td> 131,70 </td>\n                                <td> 66,66 </td>\n                                <td> 1,05 </td>\n                                <td> 65,61 </td>\n                                <td> 66,09 </td>\n\n                            </tr>\n                            <tr class="amortizationContent lastRow">\n                                <td> 6 </td>\n                                <td> 66,09 </td>\n                                <td> 66,62 </td>\n                                <td> 0,53 </td>\n                                <td> 66,09 </td>\n                                <td> 0,00 </td>\n\n                            </tr>\n                            <tr class="amortizationContent">\n                                <td class="firstColumn endOfTable" rowspan="12">\n                                    <p class="firstRow" ng-bind-html="htmlContent(\'FAQ.examplePurchaseAmount2\')" />\n                                    <p class="firstRow" ng-bind-html="htmlContent(\'FAQ.exampleInstallmentTerm2\')" />\n                                    <p ng-bind-html="htmlContent(\'FAQ.exampleAPR2\')" />\n                                </td>\n                                <td> 1 </td>\n                                <td> 699,00 </td>\n                                <td> 60,72 </td>\n                                <td> 4,49 </td>\n                                <td> 56,23 </td>\n                                <td> 642,77 </td>\n\n                            </tr>\n                             <tr class="amortizationContent">\n                                <td> 2 </td>\n                                <td> 642,77 </td>\n                                <td> 60,72 </td>\n                                <td> 4,13 </td>\n                                <td> 56,59 </td>\n                                <td> 586,18 </td>\n\n                            </tr>\n                            <tr class="amortizationContent">\n                                <td> 3 </td>\n                                <td> 586,18 </td>\n                                <td> 60,72 </td>\n                                <td> 3,77 </td>\n                                <td> 56,95 </td>\n                                <td> 529,23 </td>\n\n                            </tr>\n                            <tr class="amortizationContent">\n                                <td> 4 </td>\n                                <td> 529,23 </td>\n                                <td> 60,72 </td>\n                                <td> 3,40 </td>\n                                <td> 57,32 </td>\n                                <td>  471,91</td>\n\n                            </tr>\n                            <tr class="amortizationContent">\n\n                                 <td> 5 </td>\n                                <td> 471,91 </td>\n                                <td> 60,72 </td>\n                                <td> 3,03 </td>\n                                <td> 57,69 </td>\n                                <td> 414,22 </td>\n\n                            </tr>\n                            <tr class="amortizationContent">\n                                <td> 6 </td>\n                                <td> 414,22 </td>\n                                <td> 60,72 </td>\n                                <td> 2,56 </td>\n                                <td> 58,06 </td>\n                                <td> 356,16 </td>\n                            </tr>\n                            <tr class="amortizationContent">\n                                <td> 7 </td>\n                                <td> 356,16 </td>\n                                <td> 60,72 </td>\n                                <td> 2,29 </td>\n                                <td> 58,43 </td>\n                                <td> 297,73 </td>\n                            </tr>\n                            <tr class="amortizationContent">\n                                <td> 8 </td>\n                                <td> 297,73 </td>\n                                <td> 60,72 </td>\n                                <td> 1,91 </td>\n                                <td> 58,81 </td>\n                                <td> 238,92 </td>\n                            </tr>\n                            <tr class="amortizationContent">\n                                <td> 9 </td>\n                                <td> 238,92 </td>\n                                <td> 60,72 </td>\n                                <td> 1,54 </td>\n                                <td> 59,18 </td>\n                                <td> 179,74 </td>\n                            </tr>\n                            <tr class="amortizationContent">\n\n                                <td> 10 </td>\n                                <td> 179,74 </td>\n                                <td> 60,72 </td>\n                                <td> 1,16 </td>\n                                <td> 59,56 </td>\n                                <td> 120,18 </td>\n                            </tr>\n                             <tr class="amortizationContent">\n                                <td> 11 </td>\n                                <td> 120,18 </td>\n                                <td> 60,72 </td>\n                                <td> 0,77 </td>\n                                <td> 59,95 </td>\n                                <td> 60,23 </td>\n                            </tr>\n                             <tr class="amortizationContent">\n                                <td class="endOfTable"> 12 </td>\n                                <td class="endOfTable"> 60,23 </td>\n                                <td class="endOfTable"> 60,62 </td>\n                                <td class="endOfTable"> 0,39 </td>\n                                <td class="endOfTable"> 60,23 </td>\n                                <td class="endOfTable"> 0,00 </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n            </div>\n        </li>\n             \n        <li ng-class="{ expanded:faqExtended[1], collapsed:!faqExtended[1], faqContent:true}">\n            <div class=\'action\' ng-click="actions.toggleFAQ(1)">\n                <span ng-class="{ plus:!faqExtended[1], minus:faqExtended[1], faqAction:true}"></span>\n                <p class="gamma">{{content(\'FAQ.question3\')}}</p>\n            </div>\n            <div class="answer secondary">{{content(\'FAQ.answer3\')}}</div>\n        </li>\n        <li ng-class="{ expanded:faqExtended[2], collapsed:!faqExtended[2], faqContent:true, last:true}">\n            <div class=\'action\' ng-click="actions.toggleFAQ(2)">\n                <span ng-class="{ plus:!faqExtended[2], minus:faqExtended[2], faqAction:true}"></span>\n                <p class="gamma">{{content(\'FAQ.question4\')}}</p>\n            </div>\n            <div class="answer secondary">{{content(\'FAQ.answer4\')}}</div>\n        </li>\n    </ul>\n</div>';
    },
    "./components/xo-credit-components/src/choose-credit-offer/styles.less": "./css/app.less",
    "./components/xo-credit-components/src/choose-credit-offer/template.html": function(module, exports) {
        module.exports = '<section class="creditoffer" id="creditoffer" content>\n    <div class="row-fluid">\n\n        <div class="trayInner">\n            <!--Title-->\n            <div id="title">\n                <h2 class="beta cycoHeader">{{ content(\'chooseCreditOption.offerHeading\')}}</h2>\n                <p ng-if="country === \'GB\' || !isCreditInWallet" class="theta mainDescription"\n                ng-bind-html="htmlContent(\'chooseCreditOption.offerDescription\', {merchantName: templateVars.merchantName})"></p>\n            </div>\n\n            <div class="sacOfferWrapper" ng-if="showSingleOffer">\n                <div id="sacOnlyOffer" class="extendedSacCtaWrap">\n                    <div class="trayInner">\n                        <div class = "extendedOfferContent">\n                            <p class="offerTitle" ng-if="creditOffers.sac_options">{{content(\'chooseCreditOption.NIOnlyHeading\')}}</p>\n                            <p class="offerTitle" ng-if="!creditOffers.sac_options">{{content(\'chooseCreditOption.noOfferHeading\')}}</p>\n                            <p class="ukOfferDescription" ng-if="creditOffers.sac_options">{{content(\'chooseCreditOption.NIOnlyDescription\')}}</p>\n                            <p class="ukOfferDescription" ng-if="!creditOffers.sac_options">{{content(\'chooseCreditOption.noOfferDescription\')}}</p>\n                        </div>\n\n                        <div class="chooseOffer buttons"\n                             ng-click="actions.handleRedirect()">\n                            <input type="submit" value="{{content(\'chooseCreditOption.chooseOfferBtn\')}}" class="btn"/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div ng-class="{reverseOrder:country === \'GB\'}" ng-if="!showSingleOffer">\n                <div class="sacOfferWrapper" ng-if="showNoInterestSection">\n                    <div id="sacOffer" class="sacCtaWrap" ng-class="{extended:sacExtended}">\n                        <div class="trayInner">\n                            <p ng-if="creditOffers.sac_options" class="offerTitle">{{content(\'chooseCreditOption.sacHeading\')}}</p>\n                            <p ng-if="!creditOffers.sac_options" class="offerTitle">{{content(\'chooseCreditOption.noOfferInstallmentHeading\')}}</p>\n                            <a link-button track-link="more_info_sac" class="moreInfoLink sacLink"\n                               ng-click="actions.toggleSacOffer(sacExtended)"\n                               ng-class="{noMargin:!creditOffers.sac_options}"\n                               ng-if="!sacExtended">{{ content(\'chooseCreditOption.moreInfo\') }}\n                                <span class="frontArrow down"></span>\n                            </a>\n                            <a link-button class="moreInfoLink " ng-click="actions.toggleSacOffer(sacExtended)"\n                               ng-if="sacExtended"  ng-class="{noMargin:!creditOffers.sac_options}">{{ content(\'chooseCreditOption.close\') }}\n                                <span class="frontArrow up"></span>\n                            </a>\n                            <p ng-if="creditOffers.sac_options" class="offerSmallText">{{content(\'chooseCreditOption.sacDescription\')}}</p>\n                        </div>\n                    </div>\n                    <div class="extendedSacCtaWrap seeTermsWrap" ng-if="sacExtended && country !== \'GB\'">\n                        <p class="terms" ng-bind-html="htmlContent(\'chooseCreditOption.seeTermsSAC\')"></p>\n                    </div>\n                    <div id="extendedSacOffer" class="extendedSacCtaWrap" ng-if="sacExtended">\n                        <div class="trayInner">\n                            <div class="extendedOfferContent">\n                                <p class= "ukOfferDescription" ng-if="creditOffers.sac_options">{{content(\'chooseCreditOption.sacNote1\')}}</p>\n                                <p class= "ukOfferDescription" ng-if="!creditOffers.sac_options">{{content(\'chooseCreditOption.noOfferInstallmentNote1\')}}</p>\n                                <p>{{content(\'chooseCreditOption.sacNote2\')}}</p>\n                            </div>\n                            <div class="chooseOffer buttons" ng-if="creditOffers.sac_options" ng-click="actions.onSelect(\'SAC\')">\n                                <input id="sacOfferButton" type="submit" track-submit=\'choose_sac\'\n                                       value="{{content(\'chooseCreditOption.chooseOfferBtn\')}}" class="btn"/>\n                                <p ng-if="country !== \'GB\'" class="smallText"\n                                   ng-bind-html="htmlContent(\'chooseCreditOption.minimumAmt\', {minAmount:templateVars.minAmount})"></p>\n                            </div>\n                            <div ng-if="!creditOffers.sac_options" class="chooseOffer buttons" ng-click="actions.onSelect(\'CORE\')">\n                                <input id="coreOfferButton" type="submit" track-submit=\'choose_core\'\n                                       value="{{content(\'chooseCreditOption.chooseOfferBtn\')}}" class="btn"/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class="installmentOfferWrapper" ng-if="creditOffers.installment_options">\n                    <div id="installmentOffer" class="installmentCtaWrap"\n                         ng-class="{extended:installmentExtended || defaultinstallmentExtended}">\n                        <div class="trayInner">\n                            <p class="offerTitle" ng-bind-html="htmlContent(\'chooseCreditOption.installmentHeading\', {amount:templateVars.amount})"></p>\n                            <div class="expandableLinks" ng-if="!defaultinstallmentExtended">\n                                <a link-button ng-if="installmentCount === 1 && !installmentExtended"\n                                   track-link="more_info_installment"\n                                   class="moreInfoLink" ng-click="actions.toggleInstallmentOffer(installmentExtended)">{{\n                                    content(\'chooseCreditOption.moreInfo\') }}\n                                    <span class="frontArrow down"></span>\n                                </a>\n                                <a link-button ng-if="installmentCount > 1 && !installmentExtended"\n                                   track-link="more_info_installment" class="moreInfoLink"\n                                   ng-click="actions.toggleInstallmentOffer(installmentExtended)">{{content(\'chooseCreditOption.seeAllPlans\')\n                                    }}\n                                    <span class="frontArrow down"></span>\n                                </a>\n                                <a link-button class="moreInfoLink"\n                                   ng-click="actions.toggleInstallmentOffer(installmentExtended)"\n                                   ng-if="installmentExtended || defaultinstallmentExtended">{{ content(\'chooseCreditOption.close\') }}\n                                    <span class="frontArrow up"></span>\n                                </a>\n                            </div>\n                            <p class="offerSmallText"\n                               data-ng-bind-html="htmlContent(installmentContentKey,{monthlyPayment: creditOffers.installment_options[installmentCount -1].monthlyPayment.formattedAmt, term:creditOffers.installment_options[installmentCount -1].term , apr: creditOffers.installment_options[installmentCount -1].apr})"></p>\n                        </div>\n                    </div>\n                    <div class="extendedInstallmentCtaWrap seeTermsWrap" ng-if="installmentExtended && country !== \'GB\' ">\n                        <p class="terms"\n                           ng-bind-html="htmlContent(\'chooseCreditOption.seeTermsInstallment\', {seeTermsUrl:templateVars.seeTermsUrl})"></p>\n                    </div>\n                    <div id="extendedInstallmentOffer" class="extendedInstallmentCtaWrap" ng-if="installmentExtended || defaultinstallmentExtended">\n                        <div class="row-fluid gceOffers">\n                            <div class="span24">\n                                <ul class="trayInner trayInnerDefault installmentOptionsB row-fluid">\n                                    <li class="offer span6" ng-repeat="installment in creditOffers.installment_options"\n                                        ng-click="actions.onSelect($index)" track-submit=\'choose_installment\'>\n                                        <form>\n                                            <div ng-if="(country !== \'GB\' && country !== \'DE\')"class="installmentPlanDetails">\n                                                <ul class="subSections">\n                                                    <li class="offerHeading1"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.valueMonths\',{term: installment.term})"></li>\n                                                    <li class="theta"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.valuePerMonth\',{ monthlyPayment: installment.monthlyPayment.formattedAmt})"></li>\n                                                </ul>\n                                                <ul class="subSections">\n                                                    <li class="theta" ng-bind-html=""></li>\n                                                    <li class="theta"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.valueAPR\',{apr: installment.apr})"></li>\n                                                    <li class="theta"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.valueInterest\', { interest: installment.totalInterest.formattedAmt})"></li>\n                                                    <li class="theta"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.valueEveryMonth\', {term: installment.term})"></li>\n                                                </ul>\n                                                <ul class="subSections">\n                                                    <li class="theta">\n                                                        {{content(\'chooseCreditOption.valueTotalPayment\')}}\n                                                    </li>\n                                                    <li class="theta">\n                                                        <strong>{{installment.totalPayment.formattedAmt}}</strong></li>\n                                                    <li class="terms"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.seeTerms\')"></li>\n                                                </ul>\n                                            </div>\n                                            <div ng-if="(country === \'GB\' || country === \'DE\')" class="installmentPlanDetails">\n                                                <ul class="subSections">\n                                                    <li class="offerHeading1"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.valuePerMonth\',{ monthlyPayment: installment.monthlyPayment.formattedAmt})"></li>\n                                                    <li class="theta"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.valueMonths\',{term: installment.term})"></li>\n                                                </ul>\n                                                <ul class="subSections">\n                                                    <li class="theta" ng-bind-html=""></li>\n                                                    <li class="theta"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.promotionalRate\')"></li>\n                                                    <li class="theta"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.valueAPR\',{apr: installment.apr})"></li>\n                                                </ul>\n                                                <ul class="subSections">\n                                                    <li class="theta"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.interestRate\')"></li>\n                                                    <li class="theta"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.valueInterest\', { interest: installment.totalInterest.formattedAmt})"></li>\n                                                </ul>\n                                                <ul class="subSections">\n                                                    <li class="theta">\n                                                        {{content(\'chooseCreditOption.valueTotalPayment\')}}\n                                                    </li>\n                                                    <li class="theta">\n                                                        <strong>{{installment.totalPayment.formattedAmt}}</strong></li>\n                                                    <li class="terms"\n                                                        ng-bind-html="htmlContent(\'chooseCreditOption.seeTerms\')"></li>\n                                                </ul>\n                                            </div>\n\n                                            <div class="buttons">\n                                                <input id="chooseInstallment" type="submit" track-submit=\'choose_installment\'\n                                                       value="{{content(\'chooseCreditOption.chooseOfferBtn\')}}"\n                                                       class="btn"/>\n                                                <p ng-if="country !== \'GB\'" class="smallText"\n                                                   ng-bind-html="htmlContent(\'chooseCreditOption.minimumAmt\', {minAmount:installment.minimumAmount})"></p>\n                                            </div>\n\n                                        </form>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class="bmlMargin" id="bmlBottomText">\n                <p class="sameLine payInFullText" ng-bind-html="htmlContent(\'chooseCreditOption.payInFullText\')"></p>\n                <a link-button class="payInFullLink sameLine" ng-bind-html="htmlContent(\'chooseCreditOption.payInFullLink\')"\n                   ng-click="actions.redirectToReview()"></a>\n            </div>\n\n            <div id="xoCreditExampleUk" ng-if="country === \'GB\'">\n                <div class="creditWorks">\n                <p class="creditWorksTitle">{{content(\'chooseCreditOption.creditSampleHeader\')}}</p>\n                <p class="creditWorksDescription">{{content(\'chooseCreditOption.creditSamplePara\')}}</p>\n                </div>\n                <p class="bmlLender">{{content(\'chooseCreditOption.representativeEx\')}}</p>\n                <p class="bmlLender representativeExHeader">{{content(\'chooseCreditOption.representativeExHeader\')}}</p>\n                <ul class="trayInner trayInnerDefault representativeEx row-fluid">\n                    <li class="span6">\n                        <p class="representativeExKey">{{content(\'chooseCreditOption.purchaseRate\')}}</p>\n                        <p class="representativeExampleAPRAmount">{{content(\'chooseCreditOption.purchaseRateValue\')}}</p>\n                    </li>\n                    <li class="span6">\n                        <p class="representativeExKey">{{content(\'chooseCreditOption.representativeAPR\')}}</p>\n                        <p class="representativeExampleAPRAmount">{{content(\'chooseCreditOption.representativeAPRValue\')}}</p>\n                    </li>\n                    <li class="span6 last">\n                        <p class="representativeExKey">{{content(\'chooseCreditOption.exCreditLimit\')}}</p>\n                        <p class="representativeExampleAPRAmount">{{content(\'chooseCreditOption.exCreditLimitValue\')}}</p>\n                    </li>\n                </ul>\n\n                <p class="faq" ng-bind-html="htmlContent(\'chooseCreditOption.faqLink\')"></p>\n            </div>\n\n            <xo-faq ng-if="country === \'DE\'"></xo-faq>\n\n            <div id="bmlLender">\n                <p ng-if="!isCreditInWallet" class="sameLine bmlLender">\n                    {{content(\'chooseCreditOption.disclaimerText1\')}}</p>\n                <p ng-if="country === \'GB\' && creditOffers.installment_options" class="sameLine bmlLender">{{content(\'chooseCreditOption.disclaimerTextInst\')}}</p>\n                <p ng-if="!(country === \'GB\' && creditOffers.installment_options)" class="sameLine bmlLender">{{content(\'chooseCreditOption.disclaimerText2\')}}</p>\n            </div>\n        </div>\n    </div>\n    <div ui-view></div>\n    <div ng-if="country === \'DE\'" class="poweredBy">\n        <div class="text">{{ content(\'chooseCreditOption.poweredBy\')}}</div>\n        <span class="poweredByFooterWrapper">\n                <span id="paypalLogo" class="logo"></span>\n            </span>\n    </div>\n</section>';
    },
    "./components/xo-page-components/src/header/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(module, __dirname, __filename) {
            __webpack_require__("./components/xo-page-components/src/header/styles.less");
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _index = __webpack_require__("./components/xo-device-info/dist/index.js");
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-page-components/src/header/template.html"), __webpack_require__("./components/xo-page-components/src/cart/directive.js"), __webpack_require__("./components/xo-ui-components/src/escape-hatch/closeFrame/directive.js"), __webpack_require__("./components/xo-form-components/src/language-options/directive.js") ], 
            __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
                (function exportProviders(angular) {
                    angular && angular.exportProviders(module, exports, __dirname, __filename);
                })(window.angular);
                squid.module("xo-header.directive", [ "squid", "xo-cart.directive", "xo-escape-hatch.closeFrame.directive", "xo-language-options.directive" ]).directive("xoHeader", function() {
                    return {
                        template: template,
                        scope: {
                            showCartTotal: "=",
                            renderCartContainer: "=",
                            token: "=",
                            isUnbranded: "=",
                            unbrandedTitle: "=",
                            unbrandedSubTitle: "=",
                            languageSwitch: "=?",
                            redirectiframe: "=",
                            redirectLightbox: "=",
                            isVenmoFlow: "="
                        },
                        controller: function controller($scope, $rootScope, $renderContent, $SetHeaderText) {
                            $scope.isMessengerBAIntegration = _squid.$integration.getConfig("IS_MESSENGER_BA_INTEGRATION");
                            $scope.isMobile = _index.$DeviceInfo.isMobile() || _index.$DeviceInfo.isTablet();
                            $scope.title = $renderContent($scope.unbrandedTitle);
                            $scope.subTitle = $renderContent($scope.unbrandedSubTitle);
                            $SetHeaderText.subscribe($scope, function(event, text) {
                                $scope.unbrandedTitle = text;
                                $scope.title = $renderContent($scope.unbrandedTitle);
                            });
                        }
                    };
                }).factory("$SetHeaderText", function($rootScope) {
                    var headerText = "";
                    return {
                        setText: function setText(text) {
                            headerText = text;
                            $rootScope.$emit("update_header_text", text);
                        },
                        getText: function getText() {
                            return headerText;
                        },
                        subscribe: function subscribe($scope, callback) {
                            var handler = $rootScope.$on("update_header_text", callback);
                            $scope.$on("$destroy", handler);
                        }
                    };
                });
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            _squid.$integration;
            _index.$DeviceInfo;
        }).call(exports, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), "components/xo-page-components/src/header", "components/xo-page-components/src/header/directive.js");
    },
    "./components/xo-page-components/src/header/styles.less": "./css/app.less",
    "../node_modules/noop-loader/index.js!./components/xo-page-components/src/header/template.html": function(module, exports) {
        module.exports = '<div class="row-fluid paypalHeaderWrapper" ng-class="{ \'langDropdown\': languageSwitch && languageSwitch.show }" content>\n    <div class="span14 clearfix paypalHeader">\n        <div id="mobileMerchantHeader">\n            <xo-merchant-header token="token"></xo-merchant-header>\n        </div>\n        <span class="pageTitle" ng-if="unbrandedTitle">{{title}}</span>\n        <div ng-if="!isMessengerBAIntegration && !isUnbranded && !isVenmoFlow" id="paypalLogo" class="logo"><span class="accessAid">{{ content(\'base.payPal\') }}</span></div>\n        <div ng-if="!isMessengerBAIntegration && !isUnbranded && isVenmoFlow" class="venmoLogo"><span class="accessAid">Venmo Checkout</span></div>\n        <div ng-if="isMessengerBAIntegration">\n            <div ng-if="isMobile">\n                <img src="https://www.paypalobjects.com/images/checkout/hermes/PP_Messenger_mobile_logo_lockup_2x.png" class="messengerLogo" width="50%" height="50%" alt="PayPal and Messenger">\n            </div>\n            <div ng-if="!isMobile">\n                <img src="https://www.paypalobjects.com/images/checkout/hermes/PP_Messenger_logo_lockup_2x.png" class="messengerLogo" width="50%" height="50%" alt="PayPal and Messenger">\n            </div>\n        </div>\n        <xo-cart token="token" show-cart-total="showCartTotal" render-cart-container="renderCartContainer"></xo-cart>\n\n        <xo-language-options ng-if="languageSwitch && languageSwitch.show"></xo-language-options>\n\n        <div class="subTitle" ng-if="unbrandedSubTitle">{{subTitle}}</div>\n        <xo-close-frame redirectiframe="redirectiframe" redirect-lightbox="redirectLightbox"></xo-close-frame>\n    </div>\n</div>';
    },
    "./components/xo-page-components/src/cart/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-page-components/src/cart/template.html"), __webpack_require__("./components/xo-page-components/src/cart/lib/pxp.js"), __webpack_require__("./components/xo-page-components/src/cart/lib/ui.js"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js"), __webpack_require__("./components/xo-page-components/src/cart/cartWrapper/directive.js"), __webpack_require__("./components/xo-page-components/src/cart/itemDetails/directive.js"), __webpack_require__("./components/xo-page-components/src/cart/subscription/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            squid.module("xo-cart.directive", [ "squid", "xomodel.checkout", "xo-cart.pxp", "xo-cart.ui", "xo-cart.cart-wrapper.directive", "xo-cart.item-details.directive", "xo-accessibility.directive", "subscription-terms" ]).directive("xoCart", function() {
                return {
                    template: template,
                    restrict: "E",
                    scope: {
                        showCartTotal: "=",
                        renderCartContainer: "=",
                        token: "="
                    },
                    controller: function controller($scope, $populate, $rootScope, $util, $state, $CheckoutCartModel, $CheckoutAppDataModel, $CheckoutPayeeModel, $pxpCartAmt) {
                        $util.assert($scope.token, "Expected token");
                        $populate($scope, {
                            checkoutAppData: $CheckoutAppDataModel.instance($scope.token),
                            checkoutCart: $CheckoutCartModel.instance($scope.token),
                            payee: $CheckoutPayeeModel.instance($scope.token)
                        }).then(function loadCartData() {
                            var emptyCart = $scope.checkoutCart.get("purchase.items.length", 0) <= 0;
                            var cartDesc = $scope.checkoutCart.get("purchase.description");
                            $scope.note = $scope.checkoutCart.get("note");
                            if (cartDesc && angular.isString(cartDesc[0])) {
                                cartDesc = cartDesc[0];
                            } else {
                                cartDesc = "";
                            }
                            $scope.desc = cartDesc;
                            $scope.hasItems = !$scope.renderCartContainer && !emptyCart;
                            var showCartDetails = !$scope.checkoutAppData.flags.hide_cart_details;
                            var notMultiSellerPurchase = !$scope.checkoutCart.isMultiSellerPurchase();
                            var wpsSubscription = $scope.checkoutAppData.is_wps_subscription_flow();
                            $scope.showArrow = wpsSubscription || showCartDetails && (cartDesc || $scope.hasItems || $scope.note) && notMultiSellerPurchase;
                            $scope.checkoutCart.get("purchase.items", []).forEach(function addDetails(item) {
                                item.details = {};
                                if (item.quantity > 1) {
                                    item.details.price = item.price.amount;
                                    item.details.quantity = squid.formatQuantity(item.quantity);
                                }
                                if (item.description) {
                                    if (!item.name) {
                                        item.name = item.description;
                                    } else {
                                        item.details.description = item.description;
                                    }
                                }
                                if (item.item_option_selections) {
                                    item.details.hasSelections = true;
                                    item.details.item_option_selections = item.item_option_selections;
                                }
                                if (item.sku) {
                                    item.details.sku = item.sku;
                                }
                                item.hasDetails = Object.keys(item.details).length > 0;
                                item.details.hasMore = item.hasDetails || item.details.hasSelections;
                            });
                            $scope.amountHeaders = {
                                total: "header.total",
                                subtotal: "header.itemTotal",
                                tax: "header.tax",
                                shipping: "header.shipping",
                                insurance: "header.insurance",
                                handling_fee: "header.handling",
                                shipping_discount: "header.shippingDiscount",
                                description: "header.description",
                                discount: "header.discount"
                            };
                            var userAction = $scope.userAction = $scope.checkoutAppData.useraction();
                            var noLineItemDetails = !(userAction && userAction.toLowerCase() === "commit") && emptyCart;
                            return $pxpCartAmt($scope.checkoutAppData.get("merchant.merchant_country"), $scope.payee.get("merchant.id", ""), noLineItemDetails, $scope.checkoutCart.isPurchase()).then(function(showAmount) {
                                $scope.showAmt = showAmount;
                                var purchase = $scope.checkoutCart.purchase;
                                var total = purchase && purchase.amounts && purchase.amounts.total;
                                var wpsSubscriptionFlow = $scope.checkoutAppData.is_wps_subscription_flow();
                                $scope.showCartSubTotal = showAmount && total && !wpsSubscriptionFlow;
                                $scope.showAmountInCartIcon = showAmount && +total.amount !== 0;
                            });
                        }).then(function handleCartOpenClose() {
                            function decideShowCart(currentState) {
                                if ($scope.note && !$scope.openedAlready && /^checkout\.(review|guest)$/.test(currentState)) {
                                    $scope.openedAlready = true;
                                    return true;
                                }
                                return false;
                            }
                            $scope.showCartItem = function(breakdown) {
                                return breakdown.field_name !== "total" && Number(breakdown.amount) !== 0;
                            };
                            $scope.showCart = decideShowCart($state.current.name);
                            var openCartListener = $rootScope.$on("$stateChangeSuccess", function(event, toState) {
                                $scope.showCart = decideShowCart(toState.name);
                            });
                            $scope.$on("$destroy", openCartListener);
                            $scope.toggleCart = function($event) {
                                $scope.showCart = !$scope.showCart;
                                $event.preventDefault();
                            };
                            $scope.closeCart = function($event) {
                                $scope.showCart = false;
                                $scope.$broadcast("cart-closed");
                                if ($event) {
                                    $event.preventDefault();
                                }
                            };
                            $scope.$on("clickBody", function($event, target) {
                                if ($scope.showCart && $(target).parents(".cartContainer").length === 0) {
                                    $scope.closeCart($event);
                                    $scope.$apply();
                                }
                            });
                            $scope.$watch("showCart", function(showCart) {
                                if (showCart) {
                                    $scope.$broadcast("cart-updated");
                                }
                            });
                        }).then(function handleEllipsisIssues() {
                            $scope.toolongTracker = {};
                            $scope.toolong = function(idx) {
                                $scope.toolongTracker[idx] = true;
                                $scope.$broadcast("cart-updated");
                            };
                            $scope.showMore = function(idx, type) {
                                var itemIsTooLong = $scope.toolongTracker[idx];
                                var isAppropriateType = itemIsTooLong && type === "floating" || !itemIsTooLong && type === "inline";
                                return $scope.hasExpandedState(idx) && !$scope.isExpanded(idx) && isAppropriateType;
                            };
                            $scope.expandedIndex = -1;
                            $scope.isExpanded = function isExpanded(idx) {
                                return idx === $scope.expandedIndex;
                            };
                            $scope.hasExpandedState = function hasExpandedState(idx) {
                                var item = $scope.checkoutCart.get("purchase.items", [])[idx] || {};
                                var nameTooLong = $scope.toolongTracker[idx];
                                return nameTooLong || item.hasDetails || item.sku;
                            };
                            $scope.expand = function expand(idx) {
                                $scope.expandedIndex = idx;
                                $scope.$broadcast("cart-updated");
                            };
                            $scope.collapse = function collapse() {
                                $scope.expandedIndex = -1;
                                $scope.$broadcast("cart-updated");
                            };
                            $scope.$emit("dataLoaded");
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-page-components/src/cart/template.html": function(module, exports) {
        module.exports = '<div class="cartContainer" content ng-if="showAmt || showArrow">\n    <div class="transactionDetailsContainer" ng-class="{cart:showCart, hasAmount:showAmt}">\n\n        <a href="#transactionCartDetails"\n           class="transactionDetails scTrack:hermes-cartExpanded"\n           aria-controls="transctionCartDetails" aria-haspopup="true"\n           role="button" ng-click="toggleCart($event)"\n           focus-when focus-refresh-on="\'cart-closed\'" ng-if="showArrow">\n            <cart-wrapper ng-if="showArrow" show-amt="showAmountInCartIcon" show-arrow="showArrow" token="token"></cart-wrapper>\n        </a>\n\n        <cart-wrapper ng-if="!showArrow" show-amt="showAmountInCartIcon" show-arrow="showArrow"\n                      token="token"></cart-wrapper>\n\n        <div class="transctionCartDetails" id="transctionCartDetails" modal-box modal-refresh-on="\'cart-updated\'" modal-cancel="closeCart()" aria-hidden="{{ !showArrow }}" ng-if="showArrow">\n            <div class="details" role="document" focus-when focus-refresh-on="\'cart-updated\'" focus-element="expandedIndex === -1 ? \'a.more\': \'a.less\'">\n\n                <a id="closeCart" link-button="content(\'header.close\')" class="actions focusableIcon" ng-click="closeCart($event)" ></a>\n\n                <div>\n                    <h2 ng-if="checkoutAppData.merchant" class="merchantName" ng-class="{merchantTitle: showAmt && (note || desc)}" id="merchantName">\n                        <span ng-if="note">{{ content(\'header.noteFromMerchant\', {merchant: checkoutAppData.merchant.brand_name}) }}</span>\n                        <span ng-if="!note">{{ checkoutAppData.merchant.brand_name }}</span>\n                    </h2>\n                    <p ng-if="note || desc"class="note" ng-class="{ noteHighlighted: desc || !showAmt }">\n                        <span ng-if="note">{{ note | decodeEntities }}</span>\n                        <span ng-if="!note">{{ desc | decodeEntities }}</span>\n                    </p>\n                </div>\n\n                <subscription ng-if="checkoutAppData.is_wps_subscription_flow()"\n                              ba-token="checkoutCart.getBaToken()" merchant-id="payee.getId()"></subscription>\n\n\n                <div ng-if="!checkoutAppData.is_wps_subscription_flow()" dynamic-maxheight="\'cart-updated\'" class="scrollable-middle">\n                    <ul class="detail-items" ng-if="hasItems">\n                        <li ng-repeat="item in checkoutCart.purchase.items" class="items">\n\n                            <div class="itemNameContainer" ng-class="{expanded: isExpanded($index)}">\n                                <a class="more" link-button="content(\'header.srMore\')" ng-show="showMore($index, \'floating\')" ng-click="expand($index)">{{ content(\'header.more\') }}</a>\n                                <span on-ellipsis="toolong($index)" title="{{ item.name }}" class="itemName">{{ item.name }} <a class="less" link-button="content(\'header.srLess\')" ng-show="isExpanded($index) && !item.hasDetails" ng-click="collapse()">{{ content(\'header.less\') }}</a><a class="more inline-more" link-button="content(\'header.srMore\')" ng-show="showMore($index, \'inline\')" ng-click="expand($index)">{{ content(\'header.more\') }}</a></span>\n                            </div>\n                            <span class="itemPrice">\n                                <format-currency code="item.amount.currency_code" amount="item.amount.amount"></format-currency>\n                            </span>\n                            <item-details ng-show="isExpanded($index) && item.hasDetails" currency-code="item.amount.currency_code" details="item.details" on-click-less="collapse()">\n                        </li>\n                    </ul>\n\n                    <ul class="detail-extras" ng-if="showAmt && hasItems">\n                        <li class="detail-breakdown" ng-if="checkoutCart.purchase.amounts">\n                            <li ng-repeat="breakdown in checkoutCart.purchase.amounts" class="amounts" ng-if="showCartItem(breakdown)">\n                                <span class="itemNameContainer">{{ content(amountHeaders[breakdown.field_name]) }}</span>\n                                <span class="itemPrice">\n                                    <format-currency code="breakdown.currency_code" amount="breakdown.amount"></format-currency>\n                                </span>\n                            </li>\n                        </li>\n                    </ul>\n                </div>\n\n                <div class="subTotal" ng-if="showCartSubTotal">\n                    <span class="itemNameContainer">{{ userAction === \'commit\' || showCartTotal === true ? content(\'header.total\') : content(\'header.subTotal\') }}</span>\n                    <span class="itemPrice">\n                        <format-currency code="checkoutCart.purchase.amounts.total.currency_code"\n                                         amount="checkoutCart.purchase.amounts.total.amount"></format-currency>\n                    </span>\n                </div>\n\n            </div>\n            <div class="pointer"> </div>\n        </div>\n    </div>\n</div>\n';
    },
    "./components/xo-page-components/src/cart/cartWrapper/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-page-components/src/cart/cartWrapper/template.html"), __webpack_require__("./components/xo-models/src/checkout/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-cart.cart-wrapper.directive", [ "squid", "xomodel.checkout" ]).directive("cartWrapper", function() {
                return {
                    template: template,
                    restrict: "E",
                    scope: {
                        showAmt: "=",
                        showArrow: "=",
                        token: "="
                    },
                    controller: function controller($scope, $populate, $util, $CheckoutCartModel) {
                        $util.assert($scope.token, "Expected token");
                        $populate($scope, {
                            checkoutCart: $CheckoutCartModel.instance($scope.token)
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-page-components/src/cart/cartWrapper/template.html": function(module, exports) {
        module.exports = '<span class="totalWrapper clearfix" id="totalWrapper" content>\n    <span id="transactionCart" ng-class="{hasItems:showArrow}">\n        <span class="cartIcon" aria-label="{{ content(\'base.shoppingCart\') }}"></span>\n        <span ng-if="showAmt">\n            <format-currency class="formatCurrency" code="checkoutCart.purchase.amounts.total.currency_code"\n                             amount="checkoutCart.purchase.amounts.total.amount"></format-currency>\n        </span>\n        <span ng-if="showArrow" class="arrow" aria-label="{{ content(\'common.show\') }}"/>\n    </span>\n</span>\n';
    },
    "./components/xo-page-components/src/cart/itemDetails/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-page-components/src/cart/itemDetails/template.html"), __webpack_require__("./components/xo-ui-components/src/accessibility/directive.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-cart.item-details.directive", [ "squid", "xo-accessibility.directive" ]).directive("itemDetails", function() {
                return {
                    template: template,
                    restrict: "E",
                    scope: {
                        details: "=",
                        sku: "=",
                        currencyCode: "=",
                        onClickLess: "&"
                    },
                    controller: function controller() {}
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-page-components/src/cart/itemDetails/template.html": function(module, exports) {
        module.exports = '<!-- this directive requires\n  * visible boolean\n  * details object (with .price, .quantity, .description,\n  * possible .item_option_selections)\n  * currency-code string\n  * possible sku (item number)\n  * on-click-less - function invocation expression\n-->\n<ul content class="itemDetails">\n  <li ng-if="details.sku">\n      <span>\n          <strong>{{ content(\'header.itemNumber\') }}</strong> <span class="item-number">{{ details.sku }}</span>\n      </span>\n  </li>\n  <li ng-if="details.price">{{ content(\'header.price\') }}\n    <format-currency code="currencyCode" amount="details.price"></format-currency>\n  </li>\n  <li ng-if="details.quantity">{{ content(\'header.quantity\') }} <span class="item-quantity">{{ details.quantity }}</span></li>\n  <li ng-if="details.hasMore">\n    <div ng-if="details.hasSelections" class="item-selections">\n      <span class="item-selection" ng-repeat="selection in details.item_option_selections">\n        <strong class="item-selection-name">{{ selection.name }}:</strong>\n        <span class="item-selection-value">{{ selection.select }}</span>\n      </span>\n    </div>\n\n    <div ng-if="details.description">\n      <strong class="item-selection-name">{{ content(\'header.description\') }}</strong> <span class="item-description">{{ details.description }}</span>\n    </div>\n    <a class="less" link-button="content(\'header.srLess\')" ng-click="onClickLess()">{{ content(\'header.less\') }}</a>\n  </li>\n</ul>\n';
    },
    "./components/xo-page-components/src/cart/subscription/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        __webpack_require__("./components/squid/dist/index.js");
        var _template = __webpack_require__("./components/xo-page-components/src/cart/subscription/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _subscriptionTerms = __webpack_require__("./components/xo-page-components/src/subscription-terms/index.js");
        var _subscriptionTerms2 = _interopRequireDefault(_subscriptionTerms);
        var _index = __webpack_require__("./components/xo-models/src/subscription/index.js");
        __webpack_require__("./components/xo-page-components/src/cart/subscription/styles.less");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$subscription", {
            tag: "subscription",
            template: _template2["default"],
            props: {
                baToken: {
                    type: "var",
                    optional: false
                },
                merchantId: {
                    type: "var",
                    optional: false
                }
            },
            resolve: {
                models: function models() {
                    return {
                        subscriptionData: _index.$SubscriptionModel.instance(this.baToken).retrieve({
                            params: {
                                merchant_id: this.merchantId
                            }
                        })
                    };
                }
            },
            lifecycle: {
                populate: function populate() {
                    var _this = this;
                    this.itemName = _subscriptionTerms2["default"].getItemName(this.models.subscriptionData);
                    this.itemOptions = _subscriptionTerms2["default"].getItemOptions(this.models.subscriptionData);
                    this.getFirstAmount = function() {
                        return _subscriptionTerms2["default"].getFormattedFirstAmount(_this.models.subscriptionData);
                    };
                    this.getTermsText = function() {
                        return _subscriptionTerms2["default"].getTermsText(_this.models.subscriptionData);
                    };
                }
            }
        });
        _squid.$Component;
        _index.$SubscriptionModel;
        module.exports = exports["default"];
    },
    "./components/xo-page-components/src/cart/subscription/template.html": function(module, exports) {
        module.exports = '<div id="subscriptionTerms" content>\n    <div role="grid" class="minicart">\n        <div class="subscriptionDetails" role="gridcell">\n\n            <h4 class="heading">{{content(\'wpsSubscription.message.subscriptionDetails\')}}:</h4>\n            <div class="content">\n\n                <span class="item-name">{{itemName}}</span>\n                <div class="item-option">\n                    <div ng-repeat="option in itemOptions">{{option.name}}:\n                        {{option.selection}}\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="subs-terms-text" role="gridcell">\n            <h4 class="heading">{{content(\'wpsSubscription.message.terms\')}}:\n            </h4>\n            <div class="content">\n                <span class="term-line" ng-repeat="term in getTermsText() track by $index">{{term}}</span>\n            </div>\n        </div>\n        <div class="firstAmount" role="gridcell">\n            <h4 class="heading">{{content(\'wpsSubscription.message.firstAmount\')}}</h4>\n            <div ng-bind-html="getFirstAmount()" class="content"></div>\n        </div>\n    </div>\n</div>\n';
    },
    "./components/xo-page-components/src/subscription-terms/index.js": function(module, exports, __webpack_require__) {
        var _subscriptionTerms = __webpack_require__("./components/xo-page-components/src/subscription-terms/subscriptionTerms.js");
        var _subscriptionTerms2 = _interopRequireDefault(_subscriptionTerms);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        module.exports = {
            getFirstAmount: _subscriptionTerms2["default"].getFirstAmount,
            getFormattedFirstAmount: _subscriptionTerms2["default"].getFormattedFirstAmount,
            getItemOptions: _subscriptionTerms2["default"].getItemOptions,
            getItemName: _subscriptionTerms2["default"].getItemName,
            getCurrencyCode: _subscriptionTerms2["default"].getCurrencyCode,
            getTermsText: _subscriptionTerms2["default"].getTermsText,
            getEffectiveDate: _subscriptionTerms2["default"].getEffectiveDate
        };
    },
    "./components/xo-page-components/src/subscription-terms/subscriptionTerms.js": function(module, exports, __webpack_require__) {
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var BILL_PERIOD_DAY = "DAY";
        var BILL_PERIOD_WEEK = "WEEK";
        var BILL_PERIOD_MONTH = "MONTH";
        var BILL_PERIOD_YEAR = "YEAR";
        var TRIAL_SUBSCRIPTION = "TRIAL";
        var REGULAR_SUBSCRIPTION = "REGULAR";
        var INFINITE_CYCLES = "INFINITE";
        var pluralTimeUnit = false;
        var hasPriorTerm = false;
        function localizedContent(key, props) {
            return _squid.Content.get(key, props) && _squid.Content.get(key, props).toString();
        }
        function computeTimeUnit(billPeriod) {
            var timeUnit = void 0;
            switch (billPeriod) {
              case BILL_PERIOD_DAY:
                timeUnit = pluralTimeUnit ? "days" : "day";
                break;

              case BILL_PERIOD_WEEK:
                timeUnit = pluralTimeUnit ? "weeks" : "week";
                break;

              case BILL_PERIOD_MONTH:
                timeUnit = pluralTimeUnit ? "months" : "month";
                break;

              case BILL_PERIOD_YEAR:
                timeUnit = pluralTimeUnit ? "years" : "year";
                break;

              default:
                timeUnit = "";
            }
            return localizedContent("wpsSubscription.label." + timeUnit);
        }
        function computeAmount(amount, currencyCode) {
            if (amount === 0) {
                return localizedContent("wpsSubscription.label.free");
            } else {
                return (0, _squid.formatCurrency)(amount, currencyCode, false);
            }
        }
        function computeFirstTrialKey() {
            if (pluralTimeUnit) {
                return "firstTrialPeriod.plural";
            } else {
                return "firstTrialPeriod.singular";
            }
        }
        function computeSecondTrialKey() {
            if (pluralTimeUnit) {
                return "secondTrialPeriod.plural";
            } else {
                return "secondTrialPeriod.singular";
            }
        }
        function computeRegularSubscriptionKey(totalCycles) {
            var key = "regularSubscriptionPeriod";
            if (hasPriorTerm) {
                key += ".withPriorTerms";
            } else {
                key += ".noPriorTerms";
            }
            if (pluralTimeUnit) {
                key += ".plural";
            } else {
                key += ".singular";
            }
            switch (+totalCycles) {
              case 0:
              case 1:
                key += ".nonRecurring";
                break;

              case Infinity:
                key += ".recurringInfinite";
                break;

              default:
                key += ".recurring";
            }
            return key;
        }
        function prepareIndividualTermText(subscriptionTerms, index, currencyCode) {
            var amount = +subscriptionTerms[index].amount, billPeriod = subscriptionTerms[index].billPeriod, periodType = subscriptionTerms[index].periodType, billFrequency = +subscriptionTerms[index].billFrequency, totalCycles = +subscriptionTerms[index].totalCycles;
            var contentKey = void 0;
            hasPriorTerm = index > 0;
            pluralTimeUnit = billFrequency > 1;
            if (periodType === TRIAL_SUBSCRIPTION) {
                if (index === 0) {
                    contentKey = computeFirstTrialKey();
                } else if (index === 1) {
                    contentKey = computeSecondTrialKey();
                }
            } else if (periodType === REGULAR_SUBSCRIPTION) {
                contentKey = computeRegularSubscriptionKey(totalCycles);
            }
            contentKey = "wpsSubscription.message." + contentKey;
            var templatePlaceholderData = {
                amount: computeAmount(amount, currencyCode),
                timePeriod: billFrequency,
                timeUnit: computeTimeUnit(billPeriod),
                installmentCount: totalCycles
            };
            return localizedContent(contentKey, templatePlaceholderData);
        }
        function mapBaResponse(baResponseData) {
            var mappedSubscriptionDetails = {};
            var plan = baResponseData && baResponseData.plan;
            var allTerms = plan && plan.payment_definitions;
            var mappedTerms = [];
            var regularAmount = void 0, firstTrialAmount = null;
            mappedSubscriptionDetails.currencyCode = plan && plan.currency_code;
            if (allTerms) {
                allTerms.forEach(function(eachTerm) {
                    var totalCycles = eachTerm.duration === INFINITE_CYCLES ? Infinity : eachTerm.cycles;
                    var eachMappedTerm = {
                        amount: eachTerm.amount && eachTerm.amount.value / 100,
                        billPeriod: eachTerm.frequency,
                        periodType: eachTerm.type,
                        billFrequency: eachTerm.frequency_interval,
                        totalCycles: totalCycles
                    };
                    if (eachTerm.type === TRIAL_SUBSCRIPTION && eachTerm.index === "1") {
                        firstTrialAmount = eachMappedTerm.amount;
                    } else if (eachTerm.type === REGULAR_SUBSCRIPTION) {
                        regularAmount = eachMappedTerm.amount;
                    }
                    mappedTerms.push(eachMappedTerm);
                });
                mappedSubscriptionDetails.firstAmount = firstTrialAmount !== null ? firstTrialAmount : regularAmount;
                mappedSubscriptionDetails.subscriptionTerms = mappedTerms;
            }
            return mappedSubscriptionDetails;
        }
        function getTermsText(baResponseData) {
            var subscriptionDetails = mapBaResponse(baResponseData);
            var subscriptionTerms = subscriptionDetails.subscriptionTerms;
            var currencyCode = subscriptionDetails.currencyCode;
            var termTextList = [];
            for (var i = 0; i < subscriptionTerms.length; i++) {
                termTextList.push(prepareIndividualTermText(subscriptionTerms, i, currencyCode));
            }
            return termTextList;
        }
        function getFirstAmount(baResponseData) {
            var subscriptionDetails = mapBaResponse(baResponseData);
            return subscriptionDetails.firstAmount;
        }
        function getCurrencyCode(baResponseData) {
            var plan = baResponseData && baResponseData.plan;
            return plan && plan.currency_code;
        }
        function getFormattedFirstAmount(baResponseData) {
            var amount = getFirstAmount(baResponseData);
            var currencyCode = getCurrencyCode(baResponseData);
            return (0, _squid.formatCurrency)(amount, currencyCode, false);
        }
        function getItemOptions(baResponseData) {
            var itemDetails = baResponseData && baResponseData.items && baResponseData.items[0];
            return itemDetails.options;
        }
        function getItemName(baResponseData) {
            var itemDetails = baResponseData && baResponseData.items && baResponseData.items[0];
            return itemDetails.name;
        }
        function getEffectiveDate(baResponseData) {
            return baResponseData && baResponseData.effective_date;
        }
        module.exports = {
            getFirstAmount: getFirstAmount,
            getFormattedFirstAmount: getFormattedFirstAmount,
            getItemOptions: getItemOptions,
            getItemName: getItemName,
            getCurrencyCode: getCurrencyCode,
            getTermsText: getTermsText,
            getEffectiveDate: getEffectiveDate
        };
        _squid.formatCurrency;
        _squid.Content;
    },
    "./components/xo-models/src/subscription/index.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$SubscriptionModel = exports.$CreateBAModel = undefined;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $CreateBAModel = exports.$CreateBAModel = _squid.$Model.extend("$CreateBAModel", {
            api: new _squid.$Api({
                uri: "/api/billagmt",
                postAttempts: 3
            })
        });
        var $SubscriptionModel = exports.$SubscriptionModel = _squid.$Model.extend("$SubscriptionModel", {
            api: new _squid.$Api({
                uri: "/api/billagmt/:id",
                postAttempts: 3,
                cache: true
            })
        });
        angular.value("$CreateBAModel", $CreateBAModel);
        angular.value("$SubscriptionModel", $SubscriptionModel);
        _squid.$Model;
        _squid.$Api;
    },
    "./components/xo-page-components/src/cart/subscription/styles.less": "./css/app.less",
    "./components/xo-ui-components/src/escape-hatch/closeFrame/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-ui-components/src/escape-hatch/closeFrame/template.html"), __webpack_require__("./components/xo-models/src/user/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-escape-hatch.closeFrame.directive", [ "squid", "xomodel.user" ]).directive("xoCloseFrame", function() {
                return {
                    template: template,
                    restrict: "E",
                    scope: {
                        redirectiframe: "=",
                        redirectLightbox: "="
                    },
                    controller: function controller($scope, $rootScope, $populate, $CheckoutInputDataModel, $window, $CheckoutAppDataModel, $util, $injector, $logger, $ReturnToMerchant) {
                        $populate($scope, {
                            checkoutAppData: $CheckoutAppDataModel.instance($rootScope.token)
                        }).then(function() {
                            var cancel_url = $scope.checkoutAppData.urls.cancel_url;
                            $scope.checkoutInputData = $CheckoutInputDataModel.instance($scope.token);
                            $scope.isIFrame = $util.isIFrame();
                            $scope.closeFrame = function(event) {
                                event.preventDefault();
                                event.stopPropagation();
                                if (window.xchild) {
                                    if (window.xprops.onCancel) {
                                        return window.xprops.onCancel({
                                            token: $scope.token,
                                            cancelUrl: cancel_url
                                        });
                                    } else {
                                        return window.xchild.close();
                                    }
                                }
                                if ($scope.redirectLightbox) {
                                    var result = $ReturnToMerchant.postToMerchant({
                                        operation: "return_to_merchant",
                                        returnUrl: cancel_url,
                                        updateParent: true
                                    });
                                    if (!result) {
                                        $util.redirect(cancel_url);
                                    }
                                } else if ($scope.redirectiframe) {
                                    $window.location.replace(cancel_url);
                                } else {
                                    var iFrameFlow = $injector.get("$IFrameFlow");
                                    $logger.info("HELIOS_FLOW_FALLBACK");
                                    $logger.info("HELIOS_FALLBACK_TO_MERCHANT");
                                    $logger.info("HELIOS_FALLBACK_MERCHANT_USER_CANCELLED");
                                    var url = $scope.checkoutInputData.errorUrl("user_cancelled");
                                    if ($scope.auth && $scope.auth.code) {
                                        url += "&code=" + $scope.auth.code;
                                    }
                                    iFrameFlow.findWindowAndRedirect($scope.checkoutInputData, url);
                                }
                                $scope.$emit("exitFrame");
                            };
                        });
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-ui-components/src/escape-hatch/closeFrame/template.html": function(module, exports) {
        module.exports = '<a ng-show="isIFrame" href="{{redirectURL}}" id="closeButton" target="_parent" role="button" ng-click="closeFrame($event)">{{ content(\'base.closePayPalCheckoutLabel\') }}</a>\n';
    },
    "./components/xo-credit-components/src/redirect-to-cape/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$RedirectToCapeRoute = undefined;
        __webpack_require__("./components/xo-credit-components/src/redirect-to-cape/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $RedirectToCapeRoute = exports.$RedirectToCapeRoute = _squid.$ComponentRoute.extend("$RedirectToCapeRoute", {
            path: "redirectToCape",
            directive: "xo-redirect-to-cape",
            titleContent: "redirectToCape",
            trackingData: {
                fptiState: "redirect-to-cape",
                buzname: {
                    fullpage: {
                        pagename: "%::redirect-to-cape",
                        pagename2: "%::redirect-to-cape:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            loginRequired: true,
            auth: false,
            children: []
        });
        angular.value("$RedirectToCapeRoute", $RedirectToCapeRoute);
        _squid.$ComponentRoute;
    },
    "./components/xo-credit-components/src/redirect-to-cape/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _index = __webpack_require__("./components/xo-device-info/dist/index.js");
        var _template = __webpack_require__("./components/xo-credit-components/src/redirect-to-cape/template.html");
        var _template2 = _interopRequireDefault(_template);
        var _auth = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index3 = __webpack_require__("./components/xo-models/src/credit/index.js");
        var _model = __webpack_require__("./components/xo-tracking/dist/model.js");
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoRedirectToCapeDirective", {
            tag: "xo-redirect-to-cape",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: true
                }
            },
            resolve: {
                models: function models() {
                    return {
                        checkoutAppData: _index2.$CheckoutAppDataModel.instance(this.props.token).retrieve(),
                        auth: _auth.$AuthModel.instance().retrieve(),
                        checkoutCart: _index2.$CheckoutCartModel.instance(this.props.token).retrieve()
                    };
                }
            },
            lifecycle: {
                populate: function populate() {
                    var _this = this;
                    var navigation = window.performance && window.performance.navigation || {};
                    if (navigation.type === 2) {
                        _logger.$logger.info("CAPE_redirect_on_history_traversal");
                    }
                    function getMORSCreditIncentiveCampaign(MORSCampaigns) {
                        var creditIncentiveCampaign = null;
                        Object.keys(MORSCampaigns).forEach(function(key) {
                            if (MORSCampaigns[key] && MORSCampaigns[key].hasOwnProperty("incentiveOfferProgramId")) {
                                creditIncentiveCampaign = MORSCampaigns[key];
                            }
                        });
                        return creditIncentiveCampaign;
                    }
                    function createAuditData(creditIncentiveCampaign) {
                        return {
                            credit_incentive_offer_messages: [ {
                                credit_incentive_offer_descriptor: "PID-" + creditIncentiveCampaign.placementCode,
                                credit_incentive_offer_value: creditIncentiveCampaign.buyItemId
                            } ]
                        };
                    }
                    function createCreditIncentiveContextData(creditIncentiveCampaign) {
                        return {
                            incentive_offer_program_id: creditIncentiveCampaign.incentiveOfferProgramId,
                            incentive_offer_value: creditIncentiveCampaign.incentiveOfferValue,
                            incentive_offer_currency_code: creditIncentiveCampaign.incentiveOfferCurrencyCode,
                            offer_text_1: creditIncentiveCampaign.OfferText1,
                            offer_text_2: creditIncentiveCampaign.OfferText2,
                            terms_link: creditIncentiveCampaign.TermsLink,
                            terms_link_text: creditIncentiveCampaign.TermsLinkText,
                            terms_text: creditIncentiveCampaign.TermsText,
                            buy_item_id: creditIncentiveCampaign.buyItemId,
                            audit_data: createAuditData(creditIncentiveCampaign)
                        };
                    }
                    this.creditDataModel = _index3.$CreditDataModel.instance(this.props.token);
                    var url = "https://" + window.location.host + _squid.$config.urls.baseUrl;
                    var returnUrl = _squid.$util.buildURL(url, {
                        token: this.props.token
                    });
                    var transactionType = this.models.checkoutAppData.is_second_button_txn ? "SECOND_BUTTON" : "HERMES";
                    var isSignupFlow = this.models.auth.logged_in ? "false" : "true";
                    var isRP = this.models.checkoutCart.get("billing.type") === "RECURRING_PAYMENTS";
                    var trafficSourceContent = "";
                    var pageContext = "Full-context";
                    var flow = this.models.checkoutAppData.is_second_button_txn ? "CHECKOUT_CREDIT_BUTTON" : "CHECKOUT";
                    if (_angular.$rootScope.miniBrowser) {
                        pageContext = "Mb-context";
                    } else if (_angular.$rootScope.isIFrame) {
                        pageContext = "In-context";
                    }
                    if (this.models.checkoutCart.isBillingNoPurchase()) {
                        if (isRP) {
                            trafficSourceContent = "BA_RP_WITHOUT_PURCHASE";
                        } else {
                            trafficSourceContent = "BA_RT_WITHOUT_PURCHASE";
                        }
                    } else if (this.models.checkoutCart.isBillingPurchase()) {
                        if (isRP) {
                            trafficSourceContent = "BA_RP_WITH_PURCHASE";
                        } else {
                            trafficSourceContent = "BA_RT_WITH_PURCHASE";
                        }
                    }
                    var capeData = {
                        flow_attributes: {
                            channel: _index.$DeviceInfo.isMobile() ? "MOBILE" : "WEB",
                            flow: flow,
                            primary_actor: "PAYPAL",
                            tracking_id: this.props.token,
                            business_case_variation: transactionType,
                            credit_application_traffic_source: trafficSourceContent
                        },
                        locale: _squid.$locale.lang + "_" + _squid.$locale.country,
                        cart_id: this.props.token,
                        fraudnet_id: this.props.token,
                        "context-type": pageContext,
                        cal_correlation_id: _model.$CalDataModel.getCalCorrId(),
                        return_uris: {
                            normal_return_uri: returnUrl + "&success=true",
                            system_error_uri: returnUrl + "&success=false&isInternalServiceError=true",
                            return_to_login_uri: returnUrl,
                            full_pay_uri: this.models.auth.logged_in ? returnUrl + "&success=false" : undefined,
                            cancel_uri: this.models.checkoutAppData.urls.cancel_url,
                            change_installments_uri: returnUrl + "&changeStatus=changeInstallment&creditSignup=" + isSignupFlow
                        }
                    };
                    if (this.$root.MORS) {
                        var creditIncentiveCampaign = getMORSCreditIncentiveCampaign(this.$root.MORS);
                        if (creditIncentiveCampaign) {
                            capeData.credit_incentive = createCreditIncentiveContextData(creditIncentiveCampaign);
                        }
                    }
                    var data = {
                        creditData: capeData,
                        newUserSignup: isSignupFlow
                    };
                    return this.creditDataModel.action("createCreditKey", {
                        data: data,
                        success: function success(res) {
                            var capeUrl = (0, _squid.$feature)("capeUrl") + res.capeKey + "&token=" + _this.props.token;
                            if (_this.creditDataModel.isChangeStatus()) {
                                capeUrl += "&status=changeInstallment";
                            }
                            _this.creditDataModel.setCapeRedirectUri(capeUrl);
                            _logger.$logger.info("CAPE_redirect_url_locale", {
                                buyerCountry: _squid.$locale.country,
                                capeUrl: capeUrl
                            });
                            _squid.$util.redirect(capeUrl);
                        }
                    });
                }
            }
        });
        _logger.$logger;
        _squid.$Component;
        _squid.$util;
        _squid.$config;
        _squid.$locale;
        _squid.$feature;
        _index.$DeviceInfo;
        _auth.$AuthModel;
        _index2.$CheckoutAppDataModel;
        _index2.$CheckoutCartModel;
        _index3.$CreditDataModel;
        _model.$CalDataModel;
        _angular.$rootScope;
        module.exports = exports["default"];
    },
    "./components/xo-credit-components/src/redirect-to-cape/template.html": function(module, exports) {
        module.exports = '<div class="capeRedirect">\n</div>\n';
    },
    "./pages/xo-pay-with-selection/route.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        exports.$PayWithSelectionRoute = undefined;
        __webpack_require__("./pages/xo-pay-with-selection/directive.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var $PayWithSelectionRoute = exports.$PayWithSelectionRoute = _squid.$ComponentRoute.extend("$PayWithSelectionRoute", {
            path: "payWithSelection",
            directive: "xo-pay-with-selection-page",
            params: {
                targetPage: null,
                source: null,
                showNotYou: null
            },
            auth: false,
            titleContent: "base.logIn",
            venmoHeaders: {
                venmoTabs: true
            },
            trackingData: {
                fptiState: "choose_payment_method",
                templateName: "login.dust",
                trackStateExit: false,
                pageGoal: "Select a payment scheme",
                buzname: {
                    fullpage: {
                        pagename: "%::fullpage-login",
                        pagename2: "%::fullpage-login:member:hermes:",
                        version: "member:%:"
                    },
                    ulLogin: {
                        pagename: "%::fullpage-ullogin",
                        pagename2: "%::fullpage-ullogin:member:hermes:",
                        version: "member:%:"
                    }
                }
            },
            children: []
        });
        angular.value("$PayWithSelectionRoute", $PayWithSelectionRoute);
        _squid.$ComponentRoute;
    },
    "./pages/xo-pay-with-selection/directive.js": function(module, exports, __webpack_require__) {
        (function($) {
            exports.__esModule = true;
            exports.$xoPayWithSelectionPageComponent = undefined;
            var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
            var _miniBrowser = __webpack_require__("./js/lib/miniBrowser.js");
            var _integration = __webpack_require__("./js/lib/integration.js");
            var _template = __webpack_require__("./pages/xo-pay-with-selection/template.html");
            var _template2 = _interopRequireDefault(_template);
            __webpack_require__("./pages/xo-pay-with-selection/style.less");
            __webpack_require__("./js/lib/index.js");
            __webpack_require__("./pages/xo-login/loginEligibility.js");
            __webpack_require__("./pages/xo-login/onboarding/directive.js");
            __webpack_require__("./pages/xo-login/util.js");
            var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
            var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
            __webpack_require__("./components/xo-models/src/app/index.js");
            __webpack_require__("./components/xo-ui-components/src/message/directive.js");
            __webpack_require__("./components/xo-title/dist/directive.js");
            __webpack_require__("./components/xo-login-components/src/login/handler/directive.js");
            __webpack_require__("./components/xo-page-components/src/value-props/directive.js");
            __webpack_require__("./components/xo-form-components/src/language-options/directive.js");
            __webpack_require__("./components/xo-login-components/src/unified-login/directive.js");
            __webpack_require__("./components/xo-device-info/dist/index.js");
            __webpack_require__("./components/xo-login-components/src/onetouch-interstitial/kmliUpsell.js");
            __webpack_require__("./pages/xo-landing/route.js");
            __webpack_require__("./components/xo-ui-components/src/card-loader/directive.js");
            var _squid = __webpack_require__("./components/squid/dist/index.js");
            var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
            var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
            var _factory = __webpack_require__("./pages/xo-login/tokenized-wallet-loader/factory.js");
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            var $xoPayWithSelectionPageComponent = exports.$xoPayWithSelectionPageComponent = _squid.$Component.extend("$xoPayWithSelectionPageComponent", {
                tag: "xo-pay-with-selection-page",
                template: _template2["default"],
                scope: {
                    token: "="
                },
                link: function link($scope) {
                    _logger.$logger.info("login_link");
                },
                lifecycle: {
                    enter: function enter() {
                        $("#contents").addClass("payWithSelection");
                    },
                    populate: function populate() {
                        var $scope = this;
                        (0, _squid.$populate)($scope, {
                            checkoutAppData: _index.$CheckoutAppDataModel.instance($scope.token)
                        }).then(function() {
                            var country = $scope.checkoutAppData.merchant.merchant_country;
                            (0, _squid.$pxp)("xo_hermesnode_config", {
                                "ctx.COUNTRY": country
                            }, "xo_hermesnode_hide_cart_logo_treatment").then(function(result) {
                                var treatmentName = result && result.treatment_name || "";
                                if (treatmentName) {
                                    _logger.$logger.info("xo_hermesnode_hide_cart_logo_treatment");
                                    $(".cartContainer").hide();
                                    $(".merchantHeader > .headerWrapper").hide();
                                }
                            });
                        });
                    },
                    exit: function exit() {
                        $("#contents").removeClass("payWithSelection");
                        var $scope = this;
                        (0, _squid.$populate)($scope, {
                            checkoutAppData: _index.$CheckoutAppDataModel.instance($scope.token)
                        }).then(function() {
                            var country = $scope.checkoutAppData.merchant.merchant_country;
                            (0, _squid.$pxp)("xo_hermesnode_config", {
                                "ctx.COUNTRY": country
                            }, "xo_hermesnode_hide_cart_logo_treatment").then(function(result) {
                                var treatmentName = result && result.treatment_name || "";
                                if (treatmentName) {
                                    $(".cartContainer").show();
                                    $(".merchantHeader > .headerWrapper").show();
                                }
                            });
                        });
                    }
                },
                rootEvents: {
                    allLoaded: function allLoaded() {
                        if (!_integration.$integration.getConfig("ALLOW_AUTH")) {
                            if (_integration.$integration.getConfig("CAN_FRAMEBUST")) {
                                if (window.xchild) {
                                    var isWebView = window.paypal && window.paypal.isWebView && window.paypal.isWebView();
                                    if (!isWebView) {
                                        _uiRouter.$state.go("checkout.framebust", {
                                            action: "open",
                                            url: window.location.href.split("#")[0]
                                        });
                                    }
                                } else {
                                    return _miniBrowser.$miniBrowser.frameBust(this.props.token);
                                }
                            } else {
                                throw _integration.$integration.error("Can not framebust");
                            }
                        }
                    }
                },
                controller: function controller($scope, $FallbackError, $window, $location, $locale, $FlowEligibilityModel, $CheckoutSessionModel, $BuyerEligibilityModel, $EConsentModel, $AuthModel, $feature, $AppDataModel, $config, $logger, $q, $pxp, $pxpFactors, $timeout, $util, $experiment, $loginEligibility, $dispatch, $DeviceInfo, $KmliUpsell, $ReturnToMerchant, $meta, $stateParams, $CheckoutCartModel, $CreditDataModel, $capeRedirectUtil, $TokenizedWalletEligibilityModel) {
                    $scope.expandPaypalDrawer = false;
                    $scope.expandVenmoDrawer = false;
                    $scope.expandBaiduDrawer = false;
                    $scope.hideLoginHandlerTitle = true;
                    $scope.clickPaypalDrawer = function() {
                        $scope.expandPaypalDrawer = !$scope.expandPaypalDrawer;
                        $scope.closeVenmoDrawer();
                        $scope.closeBaiduDrawer();
                        return $scope.expandPaypalDrawer;
                    };
                    $scope.clickVenmoDrawer = function() {
                        $scope.expandVenmoDrawer = !$scope.expandVenmoDrawer;
                        $scope.closePaypalDrawer();
                        $scope.closeBaiduDrawer();
                        return $scope.expandVenmoDrawer;
                    };
                    $scope.clickBaiduDrawer = function() {
                        $scope.expandBaiduDrawer = !$scope.expandBaiduDrawer;
                        $scope.closePaypalDrawer();
                        $scope.closeVenmoDrawer();
                        return $scope.expandBaiduDrawer;
                    };
                    $scope.closePaypalDrawer = function() {
                        if ($scope.expandPaypalDrawer) {
                            $scope.expandPaypalDrawer = !$scope.expandPaypalDrawer;
                        }
                    };
                    $scope.closeVenmoDrawer = function() {
                        if ($scope.expandVenmoDrawer) {
                            $scope.expandVenmoDrawer = !$scope.expandVenmoDrawer;
                        }
                    };
                    $scope.closeBaiduDrawer = function() {
                        if ($scope.expandBaiduDrawer) {
                            $scope.expandBaiduDrawer = !$scope.expandBaiduDrawer;
                        }
                    };
                    $scope.displayBaiduDrawer = _thirdPartyInfo.thirdPartyInfo.isBaiduEligible();
                    $scope.displayVenmoDrawer = _thirdPartyInfo.thirdPartyInfo.isVenmoEligible();
                    $scope.sendToVenmo = function() {
                        window.location.href = _thirdPartyInfo.venmoInfo.buildVenmoURL();
                    };
                    $scope.proceedWithBaidu = function() {
                        _uiRouter.$state.go("checkout.thirdPartyWalletFlow");
                    };
                    if ($scope.displayBaiduDrawer && $scope.displayVenmoDrawer) {
                        $locale.choose("US", "en", false);
                        $timeout($scope.clickBaiduDrawer, 800);
                    } else if ($scope.displayVenmoDrawer) {
                        $locale.choose("US", "en", false);
                        $timeout($scope.clickVenmoDrawer, 800);
                    } else {
                        $locale.choose("C2", "zh", false);
                        $timeout($scope.clickBaiduDrawer, 800);
                    }
                    $logger.info("login_controller");
                    var fptiHardErrors = [ "RESTRICTED_USER", "PAYEE_BLOCKED_TRANSACTION", "PAYMENT_ALREADY_DONE", "PAYMENT_DENIED", "PAYEE_ACCOUNT_RESTRICTED", "INVALID_RESOURCE_ID", "EXPIRED_SESSION", "PAYER_COUNTRY_NOT_ALLOWED", "PAYER_LOGIN_COUNTRY_NOT_ALLOWED", "GAMING_FUNDING_SOURCE_VALIDATION_FAILED" ];
                    $scope.ulEligibility = false;
                    $scope.useTokenizationAnimation = false;
                    if (window.performance && window.performance.navigation && window.performance.navigation.type === 2) {
                        _angular.$rootScope.forceLogin = true;
                    }
                    if (!_angular.$rootScope.forceLogin) {
                        $scope.autoLogin = true;
                    }
                    _angular.$rootScope.forceLogin = true;
                    $scope.hideGuest = $stateParams.targetPage === "PAYER_AUTHENTICATION_REQUIRED" || $stateParams.showNotYou;
                    $scope.promptlogin = $scope.hideGuest && !$feature("riskyLoginContingency");
                    if ($DeviceInfo.isApp()) {
                        $logger.debug("HERMES_IN_MOBILE_WEBVIEW");
                    }
                    if (!_miniBrowser.$miniBrowser.isMiniBrowser() && $locale.country === "BR") {
                        var brPxp = $config.pxpExperiments.BR.xo_br_hermesnode_login_design;
                        $pxpFactors(brPxp.pgName, brPxp.params, brPxp.pattern).then(function(result) {
                            $scope.loginDesignExp = result;
                        });
                    }
                    var ROUTE_MAPPING = {
                        ECONSENT_REQUIRED: "checkout.econsent"
                    };
                    $scope.onContingency = function(name, contingency) {
                        if (!ROUTE_MAPPING[name]) {
                            throw new $FallbackError({
                                reason: name.toLowerCase(),
                                product: "ux"
                            });
                        }
                        _uiRouter.$state.go(ROUTE_MAPPING[name]);
                    };
                    $scope.buyerEligibility = $BuyerEligibilityModel.instance($scope.token);
                    $scope.checkoutSession = $CheckoutSessionModel.instance($scope.token);
                    $scope.eConsent = $EConsentModel.instance($scope.token);
                    $scope.tokenizedWalletEligibility = $TokenizedWalletEligibilityModel.instance($scope.token);
                    $scope.dependencyEligibility = true;
                    function isWalletTokenizationEligible() {
                        if ($scope.auth.country === "US") {
                            return true;
                        }
                        return false;
                    }
                    $scope.setBuyer = function() {
                        var fptiData = {
                            from: "CREATE_XO_SESSION",
                            to: "process_create_xo_session"
                        };
                        function handleContingency(name, err) {
                            if (!$scope.dependencyEligibility) {
                                return;
                            }
                            fptiData.int_error_code = err.cause;
                            fptiData.error_source = "paymentapiplatformserv";
                            fptiData.error_type = fptiHardErrors.indexOf(err.cause) > -1 ? "hard_decline" : "soft_decline";
                            $logger.info("checkout_fpti", fptiData);
                            throw err;
                        }
                        function handleNoValidTopupFiContingency(name, err) {
                            if (!$scope.dependencyEligibility) {
                                return;
                            }
                            if ($scope.checkoutCart.isWalletTokenization()) {
                                $scope.checkoutSession.contingency = name;
                                _factory.$TokenizedWalledLoaderFactory.goToTokenizationInfoPage();
                            } else {
                                handleContingency(name, err);
                            }
                        }
                        $logger.info("checkout_fpti", {
                            from: "CREATE_XO_SESSION",
                            to: "prepare_create_xo_session"
                        });
                        $scope.useTokenizationAnimation = $scope.checkoutCart.isWalletTokenization();
                        var walletTokenization = $scope.checkoutCart.isWalletTokenization();
                        if ($scope.useTokenizationAnimation) {
                            _angular.$rootScope.$emit("allLoaded");
                            $scope.setbuyerProgress = "notStarted";
                            $logger.info("tokenized_wallet", {
                                from: "adding_pp_ap_animation",
                                to: "prepare_adding_pp_ap_animation",
                                context_id: $scope.token,
                                context_type: "EC-Token",
                                billing_token: $meta.baToken
                            });
                            $timeout(function() {
                                $scope.setbuyerProgress = "pending";
                                $logger.info("tokenized_wallet", {
                                    from: "adding_pp_ap_animation",
                                    to: "process_adding_pp_ap_animation",
                                    context_id: $scope.token,
                                    context_type: "EC-Token",
                                    billing_token: $meta.baToken
                                });
                            }, 300);
                        }
                        $scope.eConsent.reload({
                            batch: {
                                name: "setbuyer",
                                silent: $scope.useTokenizationAnimation,
                                id: "eConsent",
                                dependencies: [ "buyerEligibility" ]
                            },
                            contingencies: {
                                ECONSENT_REQUIRED: function ECONSENT_REQUIRED(name, err) {
                                    if ($scope.dependencyEligibility) {
                                        $scope.dependencyEligibility = false;
                                        $logger.debug("ULLOGIN_ECONSENT_REQUIRED");
                                        _uiRouter.$state.go("checkout.econsent");
                                    }
                                }
                            }
                        });
                        $scope.buyerEligibility.reload({
                            batch: {
                                name: "setbuyer",
                                id: "buyerEligibility",
                                silent: $scope.useTokenizationAnimation,
                                dependencies: $scope.ulEligibility ? [ "securityCtx" ] : []
                            },
                            success: function success(result) {
                                $logger.info(result.eligible ? "buyer_eligible" : "buyer_ineligible");
                                if ($config.blockStudentAccount && $scope.auth.student_account) {
                                    $scope.dependencyEligibility = false;
                                    $logger.info("blocking_student_account");
                                    _uiRouter.$state.go("checkout.genericError", {
                                        code: "STUDENT_ACCOUNT"
                                    });
                                    return;
                                }
                                if (walletTokenization && !isWalletTokenizationEligible()) {
                                    $scope.dependencyEligibility = false;
                                    var msg = "ineligible_tokenized_wallet_" + $scope.auth.country + "_account";
                                    $logger.info(msg);
                                    _uiRouter.$state.go("checkout.genericError", {
                                        code: "ANDROID_PAY_ELIGIBILITY_ERROR"
                                    });
                                    return;
                                }
                                if (result.clearedRT) {
                                    $logger.info("checkout_fpti", {
                                        from: "CONTINGENCY",
                                        to: "process_fallback",
                                        routing_reason: "BUYER_INELIGIBLE"
                                    });
                                }
                                if (!result.eligible) {
                                    $scope.dependencyEligibility = false;
                                    throw new $FallbackError({
                                        reason: "buyer_ineligible",
                                        product: "ux"
                                    });
                                }
                            }
                        });
                        if (walletTokenization) {
                            var params = {
                                wallet_brand: "APAY",
                                tenant_id: "Hermes"
                            };
                            if ($meta.query && $meta.query.wallet_id) {
                                params.wallet_id = $meta.query.wallet_id;
                            }
                            if ($meta.query && $meta.query.jwt) {
                                params.jwt = $meta.query.jwt;
                            }
                            $scope.tokenizedWalletEligibility.reload({
                                params: params,
                                batch: {
                                    name: "setbuyer",
                                    id: "tokenizedWalletLightEligibility",
                                    silent: $scope.useTokenizationAnimation,
                                    dependencies: [ "eConsent", "buyerEligibility" ]
                                },
                                success: function success(result) {
                                    if (!result.eligible) {
                                        var msg = "tokenized_wallet_ineligible_for_provisioning";
                                        $logger.info(msg);
                                        if ($scope.dependencyEligibility) {
                                            $scope.dependencyEligibility = false;
                                            _uiRouter.$state.go("checkout.genericError", {
                                                code: "ANDROID_PAY_ELIGIBILITY_ERROR"
                                            });
                                        }
                                    }
                                }
                            });
                        }
                        var isPayPalCredit = $scope.checkoutAppData.is_second_button_txn || _squid.$Class.get(window, "xprops.fundingSource") === "credit";
                        $scope.checkoutSession.action("create", {
                            data: {
                                baToken: $scope.checkoutCart.billing && $scope.checkoutCart.billing.ba_token,
                                preselected_fi_type: isPayPalCredit ? "credit" : undefined
                            },
                            batch: {
                                name: "setbuyer",
                                id: "createCheckoutSession",
                                silent: $scope.useTokenizationAnimation,
                                dependencies: walletTokenization ? [ "eConsent", "buyerEligibility", "tokenizedWalletLightEligibility" ] : [ "eConsent", "buyerEligibility" ]
                            },
                            success: function success(result) {
                                fptiData.available_plan_count = $scope.checkoutSession.getPlanList() ? $scope.checkoutSession.getPlanList().length : "0";
                                $logger.info("checkout_fpti", fptiData);
                                if (!$scope.dependencyEligibility) {
                                    return;
                                }
                                if ($scope.auth.password_less && $scope.checkoutCart.isBilling()) {
                                    if ($feature("pomaPasswordRecovery")) {
                                        _uiRouter.$state.go("checkout.createPassword", {
                                            targetPage: "BILLING_AGREEMENTS"
                                        });
                                    }
                                    return;
                                }
                                if (isPayPalCredit) {
                                    return $capeRedirectUtil.handleCapeRouting(result, $scope.checkoutCart, $scope.token);
                                }
                                return $KmliUpsell.eligible($scope.token).then(function(isEligible) {
                                    if (isEligible.eligible) {
                                        var stateName = isEligible.type === "member" ? "KMLI_UPSELL" : "KMLI_reactivation";
                                        $logger.info("checkout_fpti", {
                                            from: stateName,
                                            to: "prepare_kmli_upsell"
                                        });
                                        var path = $DeviceInfo.isMobile() ? "checkout.FullpageOnetouchUpsell" : "checkout.review.oneTouchUpsell";
                                        return _uiRouter.$state.go(path, {
                                            oneTouchFlowName: "checkout"
                                        });
                                    }
                                    if ($scope.auth.rtExchanged && $feature("rmSpinnerText")) {
                                        $scope.checkoutSession.message = {
                                            type: "success",
                                            msgKeys: [ "login.loggedInWithOneTouch" ]
                                        };
                                    }
                                    if ($scope.checkoutSession.negBals) {
                                        return _uiRouter.$state.go("checkout.negativeBalanceRecovery");
                                    }
                                    if ($scope.checkoutCart.isWalletTokenization()) {
                                        _factory.$TokenizedWalledLoaderFactory.goToTokenizationInfoPage();
                                    } else {
                                        _uiRouter.$state.go("checkout.review");
                                    }
                                });
                            },
                            contingencies: {
                                NEED_AUTHENTICATED_CARD: function NEED_AUTHENTICATED_CARD(name, err) {
                                    if (!$scope.dependencyEligibility) {
                                        return;
                                    }
                                    if ($util.param("redirectToHermesOnUpopCancel") === "xoon" || err && err.resolution && err.resolution.data && err.resolution.data.alternate_options) {
                                        _uiRouter.$state.go("checkout.review");
                                    } else {
                                        _uiRouter.$state.go("checkout.updateCard.addCardFlow.addCard");
                                    }
                                },
                                NEED_DEBIT_CARD: handleNoValidTopupFiContingency,
                                EXPIRED_DEBIT_CARD: handleNoValidTopupFiContingency,
                                DEFAULT: handleContingency
                            }
                        });
                    };
                    $scope.preAuth = function() {
                        if ($scope.ulEligibility) {
                            $scope.setBuyer();
                        }
                    };
                    $scope.onSuccess = function() {
                        $logger.info("checkout_fpti", {
                            from: "CHOOSE_PAYMENT_METHOD",
                            to: "process_continue_with_paypal"
                        });
                        if ($scope.ulEligibility) {
                            return;
                        }
                        $scope.setBuyer();
                    };
                    function fetchGuestButtonPxpVarients() {
                        $scope.guestVariant = {};
                        return $pxp("xo_hermesnode_guest_cta", {
                            "ctx.COUNTRY": $locale.country
                        }, "(xo_hermesnode_guest_cta_)(.*)").then(function(result) {
                            var treatmentName = result && result.treatment_name || "";
                            switch (treatmentName) {
                              case "xo_hermesnode_guest_cta_standard_label_treatment":
                                $scope.guestVariant.standardGuestBtn = true;
                                $scope.guestVariant.test = true;
                                break;

                              case "xo_hermesnode_guest_cta_card_icons_treatment":
                                $scope.guestVariant.cardIconsAboveGuestBtn = true;
                                $scope.guestVariant.test = true;
                                break;

                              default:                            }
                        });
                    }
                    (0, _squid.$populate)($scope, {
                        flowEligibility: $FlowEligibilityModel.instance($scope.token).retrieve({
                            params: {
                                geolocation: $meta.geolocation,
                                localeCountry: $locale.country
                            }
                        }),
                        auth: $AuthModel.instance(),
                        checkoutAppData: _index.$CheckoutAppDataModel.instance($scope.token),
                        checkoutCart: $CheckoutCartModel.instance(_angular.$rootScope.token)
                    }).then(function() {
                        if ($scope.flowEligibility.guest) {
                            return fetchGuestButtonPxpVarients();
                        }
                        $(".paypalHeaderWrapper").removeClass("paypalCredit");
                        $(".paypalHeaderWrapper").removeClass("paypalCreditTnc");
                    }).then(function() {
                        if ($scope.auth.accessToken()) {
                            return $scope.auth.reload({
                                headers: {
                                    "x-paypal-internal-euat": $scope.auth.accessToken()
                                },
                                resultModel: $scope.auth,
                                success: function success() {
                                    delete $scope.auth.access_token;
                                },
                                contingencies: {
                                    DEFAULT: function DEFAULT(name) {
                                        throw new $FallbackError({
                                            reason: name.toLowerCase(),
                                            product: "ux"
                                        });
                                    }
                                }
                            });
                        }
                    }).then(function() {
                        return $loginEligibility($scope.token, !$scope.autoLogin).then(function(result) {
                            if (result === "unifiedLogin") {
                                $scope.ulEligibility = true;
                            } else if (result === "apsIntegration") {
                                $scope.apsIntegration = "apsIntegration";
                            } else if (result === "apsIntegrationRM") {
                                $scope.apsIntegration = "apsIntegrationRM";
                            }
                        }).then(function() {
                            var reinitDisplay = function reinitDisplay() {
                                $scope.promptlogin = false;
                                $scope.hideGuest = false;
                                $scope.autoLogin = true;
                                delete $stateParams.targetPage;
                                delete $stateParams.showNotYou;
                            };
                            $scope.logout = $scope.promptlogin ? function() {
                                $logger.info("not_you_logout");
                                $logger.info("checkout_fpti", {
                                    from: "LOGIN_UL",
                                    to: "login_with_diff_user"
                                });
                                $scope.auth.logout().then(function() {
                                    $scope.auth.reload().then(function() {
                                        reinitDisplay();
                                        $scope.reload();
                                    });
                                });
                            } : function() {
                                $logger.info("logout_switch_display");
                                reinitDisplay();
                            };
                        });
                    });
                }
            });
            angular.value("$xoPayWithSelectionPageComponent", $xoPayWithSelectionPageComponent);
            _angular.$rootScope;
            _miniBrowser.$miniBrowser;
            _integration.$integration;
            _squid.$Component;
            _squid.$pxp;
            _squid.$populate;
            _squid.$Class;
            _logger.$logger;
            _index.$CheckoutAppDataModel;
            _thirdPartyInfo.venmoInfo;
            _thirdPartyInfo.thirdPartyInfo;
            _uiRouter.$state;
            _factory.$TokenizedWalledLoaderFactory;
        }).call(exports, __webpack_require__("./components/jquery/dist/jquery.min.js"));
    },
    "./pages/xo-pay-with-selection/template.html": function(module, exports) {
        module.exports = '<section id="payWithSelection" ng-class="{standardGuestBtn: guestVariant.standardGuestBtn, guestBtnOnTop: guestVariant.guestBtnOnTop, cardIconsAboveGuestBtn: guestVariant.cardIconsAboveGuestBtn}" content>\n    <div class="row-fluid">\n        <div class="span14 trayInner" id="selectPaymentMethodAccordion">\n\n            <section id="paypalDrawer" class="drawer" ng-class="{hidden: !expandPaypalDrawer}" ng-click="clickPaypalDrawer()" content>\n                <xo-title title-txt="{{content(\'login.loginTitle\')}}" class="span17"></xo-title>\n                <span class="arrow" ng-class="{expand: expandPaypalDrawer }"></span>\n\n                <xo-login-handler ng-click="$event.stopPropagation()" ng-show="expandPaypalDrawer" token=token auto-login="autoLogin" success-callback="onSuccess"\n                                  contingency-callback="onContingency" ul-eligibility="ulEligibility" pre-auth="preAuth"\n                                  aps-integration="apsIntegration" batch="batch"\n                                  login-submit="loginSubmit" flowcontext="flowcontext" logout="logout" export="loginHandler" hide-title="hideLoginHandlerTitle"></xo-login-handler>\n                <xo-onboarding-section ng-show="expandPaypalDrawer" ng-click="$event.stopPropagation()" token=token ng-hide="hideGuest"></xo-onboarding-section>\n            </section>\n\n            <section ng-if="displayVenmoDrawer" id="venmoDrawer" class="drawer" ng-class="{hidden: !expandVenmoDrawer}" ng-click="clickVenmoDrawer()" content>\n                <xo-title title-txt="{{\'Pay with \'}}" class="span17"></xo-title>\n                <span class="venmoLogo"></span>\n                <span class="arrow" ng-class="{expand: expandVenmoDrawer, paypalExpanded: expandPaypalDrawer}"></span>\n                <p ng-click="$event.stopPropagation()" class="legal" bind-html-compile="htmlContent(\'landing.venmoLegal\')"></p>\n                <a track-link="choose_venmo" class="btn full venmoBtn" link-button ng-click="sendToVenmo()">{{content(\'landing.venmoButton\')}}</a>\n            </section>\n\n            <section ng-if="displayBaiduDrawer" id="baiduDrawer" class="drawer" ng-class="{hidden: !expandBaiduDrawer}" ng-click="clickBaiduDrawer()" content>\n                <xo-title title-txt="{{content(\'landing.payWithBaidu\')}}" class="span17"></xo-title>\n                <span class="baiduLogo"></span>\n                <span class="arrow" ng-class="{expand: expandBaiduDrawer, paypalExpanded: expandPaypalDrawer}"></span>\n                <p ng-click="$event.stopPropagation()" class="legal" ></p>\n                <a track-link="choose_baidu" class="full baiduBtn" link-button ng-click="proceedWithBaidu()"></a>\n            </section>\n\n\n            <div ng-if="promptlogin" class="centerText">\n                <hr class="sepPlain" />\n\n                <a track-link="login_with_diff_user" href="" ng-click="logout(auth)" class="ng-binding" tabindex="0">{{ content(\'memberReview.notYou\')}}</a>\n            </div>\n\n        </div>\n        <div class="span10" ng-if="!loginDesignExp">\n            <xo-value-props type="login" title="{{content(\'login.propHead\')}}"\n                            text-content="login.propVal"></xo-value-props>\n        </div>\n\n        <div class="span10" ng-if="loginDesignExp">\n            <xo-value-props type="login" title="{{content(loginDesignExp.propHeader)}}"\n                            text-content="{{loginDesignExp.propText}}"\n                            image-url="{{loginDesignExp.propImage}}"></xo-value-props>\n        </div>\n    </div>\n    <div class="infoLoader"  ng-if=\'useTokenizationAnimation\'>\n        <div class=\'logo_wrapper\'>\n            <div class=\'partner_logo\'></div>\n        </div>\n        <div class="loader">\n            <xo-card-loader state="setbuyerProgress" auth="auth" message="{{content(\'topup.addingAndroidPay\')}}"></xo-card-loader>\n        </div>\n    </div>\n</section>\n';
    },
    "./pages/xo-pay-with-selection/style.less": "./css/app.less",
    "./pages/xo-checkout/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _integration = __webpack_require__("./js/lib/integration.js");
        var _index = __webpack_require__("./components/xo-models/src/auth/index.js");
        var _index2 = __webpack_require__("./components/xo-device-info/dist/index.js");
        var _thirdPartyInfo = __webpack_require__("./components/xo-third-party-components/src/thirdParty-info/index.js");
        var _fn = __webpack_require__("./components/xo-login-components/src/login/fn.js");
        __webpack_require__("./components/xo-ui-components/src/spinner/directive.js");
        __webpack_require__("./components/xo-page-components/src/merchant-header/directive.js");
        __webpack_require__("./components/xo-page-components/src/header/directive.js");
        __webpack_require__("./components/xo-page-components/src/footer/directive.js");
        __webpack_require__("./components/xo-page-components/src/cart/directive.js");
        __webpack_require__("./components/xo-ui-components/src/directionality/directive.js");
        __webpack_require__("./components/xo-ui-components/src/error-tooltip/directive.js");
        __webpack_require__("./components/xo-validation/dist/directive.js");
        __webpack_require__("./components/xo-login-components/src/login-overlay/directive.js");
        var _template = __webpack_require__("./pages/xo-checkout/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoCheckoutComponent", {
            tag: "xo-checkout",
            template: _template2["default"],
            resolve: {
                pxp: function pxp() {
                    var pxp = _squid.$config.purchaseProtectionProp.pxp;
                    return {
                        purchaseProtectionAlt: (0, _squid.$pxp)(pxp.pgName, pxp.patterns)
                    };
                }
            },
            controller: function controller() {
                if (_angular.$location.path() === "/checkout") {
                    _uiRouter.$state.go("checkout.review");
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    this.isMessengerBAIntegration = _integration.$integration.getConfig("IS_MESSENGER_BA_INTEGRATION");
                    this.token = _angular.$rootScope.token;
                    this.locale = _squid.$locale;
                    this.redirectiframe = _angular.$rootScope.partnerIntegration;
                    this.redirectLightbox = true;
                    this.escapeHatchInContext = !_angular.$rootScope.partnerIntegration;
                    this.displayHeader = true;
                    this.reviewUrl = "checkout.review";
                    this.isApp = _index2.$DeviceInfo.isApp();
                    _angular.$document.bind("click", function(event) {
                        _this.$broadcast("clickBody", event.target);
                    });
                    function rtl() {
                        if ((0, _squid.$feature)("rtl")) {
                            _angular.$document.prop("documentElement").setAttribute("dir", _squid.$locale.metadata.directionality);
                        }
                    }
                    this.$on("metadataChange", rtl);
                    rtl();
                    _fn.$fn.trigger();
                },
                populate: function populate() {
                    var _this2 = this;
                    if (this.pxp.purchaseProtectionAlt) {
                        _squid.$config.features.DEFAULT.propValue = false;
                    }
                    function requiresRiskyLogin(state) {
                        var auth = _index.$AuthModel.instance();
                        return state.loginRequired && auth.remembered;
                    }
                    function displayRiskyLogin(oldState, newState, newParams) {
                        if (!_integration.$integration.getConfig("ALLOW_AUTH")) {
                            _logger.$logger.info("login_overlay_suppressed");
                            return;
                        }
                        var isUserinitiated = oldState.template && !oldState.name.match(/checkout\.login/);
                        if (isUserinitiated) {
                            var stateName = newState && newState.name;
                            var subFlowName = stateName && stateName.replace(/^.*\./, "");
                            if (subFlowName === "sepaAgreement") {
                                _uiRouter.$state.go("checkout.review");
                            }
                            _angular.$rootScope.$broadcast("$insufficientPermission", {
                                oldState: oldState.name,
                                newState: newState.name,
                                pageOnOverlay: newState.pageOnOverlay
                            });
                        } else {
                            var auth = _index.$AuthModel.instance();
                            var cause = newParams && newParams.message ? newParams.message : newState.name.replace(/^.*\./, "");
                            _logger.$logger.info("RISKY_LOGIN_TRANSITION_" + cause);
                            var showPasswordRecovery = (0, _squid.$feature)("pomaPasswordRecovery") && auth.password_less;
                            var transition = showPasswordRecovery ? "checkout.createPassword" : "checkout.login";
                            _uiRouter.$state.go(transition, {
                                targetPage: cause,
                                showNotYou: true
                            });
                        }
                        return false;
                    }
                    function displayHeader(stateName) {
                        return !(stateName === "checkout.thirdPartyWalletFlow");
                    }
                    var cancelStateChangeEventListener = _angular.$rootScope.$on("$stateChangeStart", function(event, newState, newParams, oldState) {
                        _this2.showVenmoExperience = _thirdPartyInfo.thirdPartyExperience.getExperience(_this2.token) === "VENMO_EXPERIENCE";
                        if (_this2.showVenmoExperience) {
                            _logger.$logger.info("checkout_fpti", {
                                is_venmo_branding: "1"
                            });
                        }
                        _this2.displayHeader = displayHeader(newState && newState.name);
                        if (requiresRiskyLogin(newState)) {
                            event.preventDefault();
                            displayRiskyLogin(oldState, newState, newParams);
                        }
                    });
                    this.$on("$destroy", cancelStateChangeEventListener);
                    if (requiresRiskyLogin(_uiRouter.$state.current)) {
                        displayRiskyLogin(_uiRouter.$state.current, _uiRouter.$state.current);
                    }
                }
            }
        });
        _angular.$rootScope;
        _angular.$document;
        _angular.$location;
        _squid.$Component;
        _squid.$config;
        _squid.$feature;
        _squid.$pxp;
        _squid.$locale;
        _logger.$logger;
        _uiRouter.$state;
        _integration.$integration;
        _index.$AuthModel;
        _index2.$DeviceInfo;
        _thirdPartyInfo.thirdPartyExperience;
        _fn.$fn;
        module.exports = exports["default"];
    },
    "./components/xo-ui-components/src/spinner/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-ui-components/src/spinner/template.html"), __webpack_require__("./components/xo-beaver/dist/logger.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, squid, template) {
            squid.module("xo-spinner.directive", [ "squid", "beaver" ]).directive("xoSpinner", function() {
                return {
                    scope: {},
                    template: template,
                    controller: function controller($scope, $element, $rootScope, $Api, $locale, $logger, $loader, $timeout) {
                        var $body = angular.element(document.getElementsByTagName("body"));
                        var $priorActiveElement = $();
                        var $capturedElement = $();
                        var $header = $("header");
                        var $slidingArea = $("#main");
                        var $footer = $("footer");
                        function hidePageContentFromScreenReader(toggle) {
                            $header.attr("aria-disabled", toggle);
                            $slidingArea.attr("aria-disabled", toggle);
                            $footer.attr("aria-disabled", toggle);
                        }
                        function preventDefault(event) {
                            event.preventDefault();
                        }
                        function captureFocus(event) {
                            if (!$element.has(event.target).length) {
                                $capturedElement = $(event.target);
                            }
                        }
                        function setLoadingMessage(message) {
                            if (angular.isObject(message)) {
                                $scope.message = message.heading;
                                $("#spinnerMessage").css("font-size", "17.5px");
                                $("#spinnerMessage").html(message.heading);
                                $("#spinnerSubHeading").html(message.subHeading);
                            } else {
                                $scope.message = message;
                                $("#spinnerMessage").html(message);
                            }
                        }
                        function showSpinner() {
                            $scope.loading = true;
                            $logger.info("show_loading_spinner");
                            $body.addClass("loading");
                            $priorActiveElement = $(":focus");
                            $(":input, a").blur();
                            hidePageContentFromScreenReader(true);
                            if ($loader.firstLoad()) {
                                setLoadingMessage($locale.content.get("base.processing"));
                            }
                            $(document).on("keydown", preventDefault);
                            $(document).on("focusin", captureFocus);
                            $timeout(function() {
                                $("#spinner-message").focus();
                            });
                        }
                        function hideSpinner() {
                            $scope.loading = false;
                            $logger.info("hide_loading_spinner");
                            $("#preloaderSpinner").hide();
                            $body.removeClass("loading");
                            $(document).off("keydown", preventDefault);
                            $(document).off("focusin", captureFocus);
                            hidePageContentFromScreenReader(false);
                            if ($capturedElement.length && $(document.body).has($capturedElement).length) {
                                $capturedElement.focus();
                            } else if ($priorActiveElement.length && $(document.body).has($priorActiveElement).length) {
                                $priorActiveElement.focus();
                            } else {
                                $slidingArea.focus();
                            }
                            $priorActiveElement = $();
                            $capturedElement = $();
                        }
                        var cancelStartLoad = $rootScope.$on("startLoad", showSpinner);
                        var cancelAllLoaded = $rootScope.$on("allLoaded", hideSpinner);
                        var cancelSetLoadingMessage = $rootScope.$on("loadingMessage", function(event, text) {
                            setLoadingMessage(text);
                        });
                        $scope.$on("$destroy", function() {
                            hideSpinner();
                            cancelStartLoad();
                            cancelAllLoaded();
                            cancelSetLoadingMessage();
                        });
                        if ($loader.isLoading()) {
                            showSpinner();
                        }
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-ui-components/src/spinner/template.html": function(module, exports) {
        module.exports = '<div ng-if="loading" id="spinner" class="spinner">\n    <div class="spinWrap">\n        <p class="spinnerImage"></p>\n        <p class="loader"></p>\n        <p id="spinner-message" tabIndex="0" role="alert" class="loadingMessage">{{message}}</p>\n    </div>\n</div>\n';
    },
    "./components/xo-page-components/src/merchant-header/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _index = __webpack_require__("./components/xo-models/src/checkout/index.js");
        var _index2 = __webpack_require__("./components/xo-models/src/user/index.js");
        var _template = __webpack_require__("./components/xo-page-components/src/merchant-header/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoMerchantHeaderDirective", {
            tag: "xo-merchant-header",
            template: _template2["default"],
            props: {
                token: {
                    type: "var",
                    required: false
                },
                merchant: {
                    type: "var",
                    required: false
                }
            },
            resolve: {
                models: function models() {
                    if (this.props.token) {
                        return {
                            checkoutAppData: _index.$CheckoutAppDataModel.instance(this.props.token).retrieve()
                        };
                    }
                }
            },
            lifecycle: {
                populate: function populate() {
                    if (this.props.token && !_index2.$CheckoutInputDataModel.instance(this.props.token).isEbayTxn()) {
                        this.merchant = this.models.checkoutAppData.merchant;
                    }
                }
            }
        });
        (0, _squid.$registerDirective)("xoMerchantImageResize", function() {
            return {
                restrict: "A",
                link: function link(scope, element) {
                    element.bind("load", function() {
                        var MAX_WIDTH = 780;
                        var MAX_HEIGHT = 90;
                        if (this.width > MAX_WIDTH) {
                            var ratio = MAX_WIDTH / this.width;
                            var height = this.height * ratio;
                            this.width = MAX_WIDTH;
                            this.height = height > MAX_HEIGHT ? MAX_HEIGHT : height;
                        }
                    });
                }
            };
        });
        _squid.$Component;
        _squid.$registerDirective;
        _index.$CheckoutAppDataModel;
        _index2.$CheckoutInputDataModel;
        module.exports = exports["default"];
    },
    "./components/xo-page-components/src/merchant-header/template.html": function(module, exports) {
        module.exports = '<header role="banner">\n    <div id="header" class="merchantHeader clearfix">\n        <div class="headerWrapper">\n            <span class="merchantName" directionality-text="merchant.brand_name || merchant.merchant_name || merchant.merchant_email" ng-if="!(merchant.logo_url || merchant.imageUrl)">\n             {{ merchant.brand_name || merchant.merchant_name || merchant.merchant_email }}\n         \t</span>\n            <img ng-src="{{merchant.logo_url || merchant.imageUrl}}" alt="{{ merchant.brand_name || merchant.merchant_name || merchant.merchant_email }}" ng-if="merchant.logo_url || merchant.imageUrl" xo-merchant-image-resize/>\n        </div>\n    </div>\n</header>\n';
    },
    "./components/xo-page-components/src/footer/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-page-components/src/footer/template.html"), __webpack_require__("./components/xo-page-components/src/footer/opinionlab.js"), __webpack_require__("./components/xo-page-components/src/footer/footerMap.js"), __webpack_require__("./components/xo-models/src/checkout/index.js"), __webpack_require__("./components/xo-ui-components/src/modal/directive.js"), __webpack_require__("./components/xo-return-to-merchant/dist/util.js"), __webpack_require__("./components/xo-ui-components/src/escape-hatch/escapeHatch/directive.js"), __webpack_require__("./components/xo-device-info/dist/index.js"), __webpack_require__("./components/xo-form-components/src/language-options/directive.js"), __webpack_require__("./components/xo-models/src/user/index.js"), __webpack_require__("./components/xo-models/src/auth/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template, opinionlab, footerMap) {
            squid.module("xo-footer.directive", [ "squid", "xomodel.checkout", "xo-modal.directive", "xo-return-to-merchant", "xo-escape-hatch.escapeHatch.directive", "xo-device-info", "xo-language-options.directive", "xomodel.user" ]).directive("xoFooter", function() {
                return {
                    template: template,
                    restrict: "EA",
                    scope: {
                        token: "=",
                        escapeHatchIncontext: "=",
                        cancel: "@",
                        merchant: "@",
                        languageSwitch: "=?",
                        showVenmoLegalLinks: "="
                    },
                    controller: function controller($scope, $populate, $rootScope, $CheckoutAppDataModel, $CheckoutPayeeModel, $ReturnToMerchant, $util, $integration, $locale, $window, $DeviceInfo, $feature, $config, $state, $CheckoutInputDataModel, $AuthModel) {
                        $scope.isIFrame = $util.isIFrame();
                        if ($scope.escapeHatchIncontext) {
                            $scope.showEscapeHatch = $scope.isIFrame;
                        }
                        $scope.locale = $locale;
                        $scope.proxSignUpFlow = $CheckoutInputDataModel.instance($scope.token).isEbayTxn();
                        $scope.year = new Date().getFullYear();
                        $scope.isApac = function() {
                            return $config.apacCountries && $config.apacCountries.indexOf($scope.locale.country) > -1;
                        };
                        var getRegion = function getRegion(country) {
                            var regions = $config.regions;
                            for (var region in regions) {
                                if (regions[region].indexOf(country) > -1) {
                                    return region;
                                }
                            }
                            return false;
                        };
                        function isDESecondButtonFlow() {
                            return $scope.locale.country === "DE" && $scope.checkoutAppData && $scope.checkoutAppData.is_second_button_txn;
                        }
                        $scope.footerLinks = function() {
                            if ($scope.isApac()) {
                                return footerMap.APAC;
                            }
                            if (isDESecondButtonFlow()) {
                                return footerMap["DESecondButton"];
                            }
                            return footerMap[$scope.locale.country] || footerMap[getRegion($scope.locale.country)] || footerMap.DEFAULT;
                        };
                        $scope.showPolicyInfo = function() {
                            return $scope.isApac() || $scope.locale.country === "AU";
                        };
                        $scope.cancelRedirect = function($event) {
                            $event.preventDefault();
                            var cancelUri = $scope.cancel;
                            var redirectUri;
                            if ($integration.getConfig("REDIRECT_QUERY_PARAM")) {
                                redirectUri = $util.param("redirect_uri");
                                cancelUri = $util.buildURL(redirectUri, {
                                    opType: "cancel",
                                    return_uri: $scope.cancel,
                                    token: $scope.token
                                });
                            }
                            $ReturnToMerchant.goTo(cancelUri);
                        };
                        $scope.isIndiaLegalEntity = function() {
                            return $scope.auth && $scope.auth.logged_in && $scope.auth.legalEntity === 84;
                        };
                        if ($scope.token) {
                            $populate($scope, {
                                checkoutAppData: $CheckoutAppDataModel.instance($scope.token),
                                checkoutPayee: $CheckoutPayeeModel.instance($scope.token),
                                auth: $AuthModel.instance()
                            }).then(function() {
                                var merchant = $scope.checkoutAppData.merchant;
                                var payee = $scope.checkoutPayee;
                                if (payee && payee.merchant && payee.merchant.id) {
                                    var hcl = $config.hideCancelLinkForMerchant;
                                    var shouldHide = hcl && hcl.indexOf(payee.merchant.id) !== -1;
                                    if (shouldHide) {
                                        $scope.hideCancel = true;
                                    }
                                }
                                $scope.cancel = $scope.checkoutAppData.urls.cancel_url;
                                $scope.merchant = merchant.brand_name || merchant.merchant_name || merchant.merchant_email;
                            });
                        }
                        var cancelShowModal = $rootScope.$on("showModal", function(event, config) {
                            $scope.popupUrl = config && config.popupUrl;
                            $scope.show = true;
                            $scope.$digest();
                        });
                        $scope.$on("$destroy", cancelShowModal);
                        $scope.showOL = function showOL(event) {
                            event.preventDefault();
                            var placeholder = "main:ec:hermes";
                            var page = $state.current.get("trackingData.buzname.fullpage.pagename2", "unknown").replace("%", placeholder);
                            var data = {
                                opVars: {
                                    rlogId: $window.meta.rlogId || "",
                                    page: page || window.location.hash,
                                    csci: "Unknown",
                                    calc: $window.meta.correlationId,
                                    custId: "Unknown",
                                    merchantId: "Unknown",
                                    token: $scope.token || "Unknown"
                                },
                                locale: {
                                    country: $locale.country,
                                    languageCode: $locale.lang + "_" + $locale.country
                                }
                            };
                            opinionlab(data);
                        };
                        $scope.showFeedback = function() {
                            return !$DeviceInfo.isDevice() && !isDESecondButtonFlow();
                        };
                        $scope.hideReturnCancelUrl = function() {
                            return !$scope.cancel || $state.current && $state.current.name === "checkout.done";
                        };
                        $scope.showVenmoLinks = function() {
                            if ($state.current && $state.current.name === "checkout.payWithSelection") {
                                return true;
                            } else {
                                return Boolean($scope.showVenmoLegalLinks);
                            }
                        };
                        $scope.showPaypalLinks = function() {
                            if ($state.current && $state.current.name === "checkout.payWithSelection") {
                                return true;
                            } else {
                                return !Boolean($scope.showVenmoLegalLinks);
                            }
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./components/xo-page-components/src/footer/opinionlab.js": "./components/xo-ui-components/src/user-assist-banner/popupHandler.js",
    "./components/xo-page-components/src/footer/footerMap.js": function(module, exports, __webpack_require__) {
        !(module.exports = {
            CA: [ {
                id: "policy",
                content: "footer.policiesCA"
            }, {
                id: "terms",
                content: "footer.termsCA"
            }, {
                id: "privacy",
                content: "footer.privacyCA"
            } ],
            BE: [ {
                id: "legal",
                content: "footer.legal"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            DE: [ {
                id: "imprint",
                content: "footer.DEImprint"
            }, {
                id: "legal",
                content: "footer.DELegal"
            }, {
                id: "privacy",
                content: "footer.DEPrivacy"
            }, {
                id: "paymentdesc",
                content: "footer.DEKeyPaymentDesc"
            } ],
            ES: [ {
                id: "legal",
                content: "footer.legal"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            FR: [ {
                id: "legal",
                content: "footer.FRLegal"
            }, {
                id: "useragreement",
                content: "footer.FRUserAgreement"
            }, {
                id: "privacy",
                content: "footer.FRPrivacy"
            } ],
            IT: [ {
                id: "legal",
                content: "footer.legal"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            NL: [ {
                id: "legal",
                content: "footer.legal"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            IE: [ {
                id: "terms",
                content: "footer.terms"
            }, {
                id: "useragreement",
                content: "footer.userAgreement"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            APAC: [ {
                id: "terms",
                content: "footer.terms"
            }, {
                id: "useragreement",
                content: "footer.userAgreement"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            EMEA: [ {
                id: "terms",
                content: "footer.terms"
            }, {
                id: "useragreement",
                content: "footer.userAgreement"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            EM: [ {
                id: "terms",
                content: "footer.terms"
            }, {
                id: "useragreement",
                content: "footer.userAgreement"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            LATAM: [ {
                id: "help",
                content: "footer.help"
            }, {
                id: "terms",
                content: "footer.terms"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            AU: [ {
                id: "terms",
                content: "footer.terms"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            AT: [ {
                id: "imprint",
                content: "footer.ATImprint"
            }, {
                id: "terms",
                content: "footer.terms"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            CH: [ {
                id: "imprint",
                content: "footer.CHImprint"
            }, {
                id: "terms",
                content: "footer.terms"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            DK: [ {
                id: "useragreement",
                content: "footer.DKUserAgreement"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            SE: [ {
                id: "useragreement",
                content: "footer.SEUserAgreement"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            PL: [ {
                id: "useragreement",
                content: "footer.PLUserAgreement"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            NO: [ {
                id: "useragreement",
                content: "footer.NOUserAgreement"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            TR: [ {
                id: "useragreement",
                content: "footer.TRUserAgreement"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            BR: [ {
                id: "help",
                content: "footer.help"
            }, {
                id: "terms",
                content: "footer.terms"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            MX: [ {
                id: "help",
                content: "footer.help"
            }, {
                id: "terms",
                content: "footer.terms"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            RU: [ {
                id: "terms",
                content: "footer.terms"
            }, {
                id: "privacy",
                content: "footer.privacy"
            } ],
            DESecondButton: [ {
                id: "imprint",
                content: "footer.DEImprint"
            }, {
                id: "privacy",
                content: "footer.DEPrivacy"
            } ],
            DEFAULT: [ {
                id: "policy",
                content: "footer.policies",
                venmoContent: "footer.venmo_policies"
            }, {
                id: "terms",
                content: "footer.terms",
                venmoContent: "footer.venmo_terms"
            }, {
                id: "privacy",
                content: "footer.privacy",
                venmoContent: "footer.venmo_privacy"
            } ]
        });
    },
    "../node_modules/noop-loader/index.js!./components/xo-page-components/src/footer/template.html": function(module, exports) {
        module.exports = '<footer content>\n    <div class="footer clearfix commonFooter" role="contentinfo" ng-class="{APAC: isApac()}">\n        <p ng-if="!hideCancel" id="defaultCancelLink" class="cancelUrl">\n            <a track-link="cancel_and_return_to_merchant" href="{{cancel}}" ng-click="cancelRedirect($event)" role="button" id="cancelLink" ng-hide="hideReturnCancelUrl()">\n               <span ng-bind-html="merchant ? content(\'base.cancelUrl\', { merchantName: merchant, modelName: \'merchant\' }) : content(\'common.cancelAndReturnToMerchant\')"></span>\n            </a>\n        </p>\n\n        <div class="footerWrapper">\n            <table class="footerLinks">\n                <tr ng-if="showPaypalLinks()">\n                    <th ng-repeat="link in footerLinks()" id ="footer_{{link.id}}" bind-html-compile="htmlContent(link.content, {country: locale.country.toLowerCase(), lang: locale.lang})"></th>\n                    <th ng-if="showFeedback()"><a href="#" id="footer_sfLink" ng-click="showOL($event)">{{content(\'OpinionLab.SiteFeedback\')}}</a></th>\n                </tr>\n                <tr ng-if="showVenmoLinks()">\n                    <td ng-repeat="link in footerLinks()" id ="venmoFooter_{{link.id}}" bind-html-compile="htmlContent(link.venmoContent, {country: locale.country.toLowerCase(), lang: locale.lang})"></td>\n                    <td ng-if="showFeedback()"></td>\n                </tr>\n            </table>\n            <p class="copyright">\n                {{ content(\'footer.copyright\', {year: year}) }}\n                <span class="secureIcon"></span>\n                <span class="accessAid">{{ content(\'memberReview.propHead\') }}</span>\n            </p>\n\n            <xo-language-options ng-if="languageSwitch && languageSwitch.show"></xo-language-options>\n        </div>\n\n        <div class="policyInfoWrapper" ng-if="showPolicyInfo()">\n            <p class="moreInfo" ng-if="isIndiaLegalEntity()" ng-bind-html="htmlContent(\'footer.4plpolicyInformation\', {country: locale.country})"> </p>\n            <p class="moreInfo" ng-if="!isIndiaLegalEntity()" ng-bind-html="htmlContent(\'footer.policyInformation\', {country: locale.country})"> </p>\n            <p class="moreCopyRight" ng-if="locale.country === \'AU\'">{{ content(\'footer.moreCopyright\', {year: year}) }}</P>\n        </div>\n\n    </div>\n    <xo-modal>\n        <p>{{ content(\'footer.openLinks\') }}</p>\n        <p class="popLink">{{popupUrl}}</p>\n        <input class="btn btn-submit full" type="button" ng-click="hideModal()" value="{{ content(\'footer.okBtn\') }}">\n    </xo-modal>\n</footer>\n';
    },
    "./components/xo-ui-components/src/escape-hatch/escapeHatch/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-ui-components/src/escape-hatch/escapeHatch/template.html") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function(squid, template) {
            squid.module("xo-escape-hatch.escapeHatch.directive", [ "squid" ]).directive("xoEscapeHatch", function() {
                return {
                    template: template,
                    restrict: "E",
                    controller: function controller($scope, $rootScope, $window, $util, $logger) {
                        $scope.isIFrame = $util.isIFrame();
                        $scope.closeFrame = function(event) {
                            var url = $window.location.href && $window.location.href.split("#")[0] || "";
                            if (url.indexOf("proxflow") > -1) {
                                url = url.replace("proxflow", "webapps/helios");
                            }
                            url += url.slice(-1) === "&" ? "escape_hatch=1" : "&escape_hatch=1";
                            if (url.indexOf("hermes") > -1 || url.indexOf("checkoutnow")) {
                                $logger.info("HERMES_ESCAPE_HATCH_CLICKED");
                            } else {
                                $logger.info("HELIOS_ESCAPE_HATCH_CLICKED");
                            }
                            $window.top.location = url;
                            $scope.$emit("exitFrame");
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "../node_modules/noop-loader/index.js!./components/xo-ui-components/src/escape-hatch/escapeHatch/template.html": function(module, exports) {
        module.exports = '<button ng-show="isIFrame" title="{{content(\'footer.escHatch\')}}" class=\'btn escapeHatch\' ng-click="closeFrame()"><span class="accessAid">{{content(\'footer.escHatch\')}}</span></button>\n';
    },
    "./components/xo-login-components/src/login-overlay/directive.js": function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        __webpack_require__("./components/xo-login-components/src/create-password/directive.js");
        __webpack_require__("./components/xo-login-components/src/password-recovery/directive.js");
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__("./components/jquery/dist/jquery.min.js"), __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js"), __webpack_require__("./components/squid/dist/index.js"), __webpack_require__("../node_modules/noop-loader/index.js!./components/xo-login-components/src/login-overlay/template.html"), __webpack_require__("./components/xo-models/src/auth/index.js"), __webpack_require__("./components/xo-models/src/checkout/index.js") ], 
        __WEBPACK_AMD_DEFINE_RESULT__ = function($, angular, squid, template) {
            return angular.module("xo-login-overlay.directive", [ "squid", "xomodel.checkout" ]).directive("xoLoginOverlay", function() {
                return {
                    template: template,
                    scope: {
                        token: "=",
                        stateInfo: "=",
                        modalCallback: "="
                    },
                    controller: function controller($scope, $rootScope, $state, $element, $feature, $timeout, $logger, $util, $AuthModel, $CheckoutSessionModel, $CheckoutCartModel) {
                        $scope.autoLogin = false;
                        $scope.ulEligibility = true;
                        $scope.auth = $AuthModel.instance();
                        var stateInfo = {};
                        var subFlowTitles = {
                            addCard: "loginAddCard",
                            bank: "loginAddBank",
                            addShipping: "loginAddAddress",
                            deleteShipping: "loginDeleteAddress",
                            confirmUpop: "loginConfirmUpop",
                            redirectToCape: "loginApplyCredit",
                            sepaAgreement: "riskyLoginSepa",
                            DEFAULT: "loginTitle"
                        };
                        function getFptiStateName() {
                            if ($scope.createPassword) {
                                return "quick_security_check";
                            } else if ($scope.passwordRecovery) {
                                return "password_recovery";
                            } else {
                                return "LOGIN_STEP_UP_AUTH";
                            }
                        }
                        var cancelInsufficientPermission = $rootScope.$on("$insufficientPermission", function(event, data) {
                            $scope.showOverlay = true;
                            $("#wrapper #spinner").hide();
                            stateInfo = data;
                            var subFlowName = (stateInfo.newState || "").replace(/^.*\./, "");
                            if (subFlowName) {
                                $scope.subFlowName = subFlowName;
                                $scope.subFlowTitleKey = "login." + subFlowTitles[subFlowName] || subFlowTitles.DEFAULT;
                            }
                            $scope.createPassword = $feature("pomaPasswordRecovery") && $scope.auth.password_less;
                            $scope.passwordRecovery = false;
                            if ($scope.createPassword) {
                                $logger.info("checkout_fpti", {
                                    from: getFptiStateName(),
                                    to: "prepare_quick_security_check"
                                });
                            } else {
                                $logger.info("checkout_fpti", {
                                    from: getFptiStateName(),
                                    to: "prepare_login_step_up_AUTH"
                                });
                            }
                            $timeout(function() {
                                $element.addClass("overlayOpen");
                            });
                        });
                        $scope.$on("$destroy", cancelInsufficientPermission);
                        var hideOverlay = function hideOverlay() {
                            $("#wrapper #spinner").attr("style", "");
                            $element.removeClass("overlayOpen");
                            return $timeout(function() {
                                $scope.showOverlay = false;
                            }, 300);
                        };
                        function logCancel() {
                            $logger.info("checkout_fpti", {
                                from: getFptiStateName(),
                                to: "process_user_cancel"
                            });
                        }
                        $scope.hideModal = function(event) {
                            event.preventDefault();
                            logCancel();
                            hideOverlay();
                            $state.go(stateInfo.oldState);
                        };
                        $scope.onCreatePassword = function() {
                            $rootScope.$emit("loading");
                            $scope.passwordRecovery = true;
                        };
                        $scope.onPasswordRecoveryReady = function() {
                            $rootScope.$emit("loaded");
                            $scope.createPassword = false;
                        };
                        $scope.onCompletePasswordRecovery = function() {
                            $scope.passwordRecovery = false;
                        };
                        $scope.onPasswordRecovery = function() {
                            $scope.auth.password_less = false;
                        };
                        $scope.onSuccess = function() {
                            var checkoutSession = $CheckoutSessionModel.instance($scope.token);
                            var checkoutCart = $CheckoutCartModel.instance($rootScope.token);
                            return checkoutSession.action("create", {
                                data: {
                                    baToken: checkoutCart.billing && checkoutCart.billing.ba_token
                                },
                                success: function success() {
                                    if (stateInfo.pageOnOverlay) {
                                        $state.go(stateInfo.newState, {
                                            fromLoginOverlay: true
                                        });
                                        $scope.showOverlay = false;
                                    } else {
                                        hideOverlay().then(function() {
                                            $state.go(stateInfo.newState);
                                        });
                                    }
                                    $logger.info("checkout_fpti", {
                                        from: getFptiStateName(),
                                        to: "process_login_step_up_AUTH"
                                    });
                                }
                            })["finally"](function() {
                                hideOverlay();
                            });
                        };
                    }
                };
            });
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    },
    "./components/xo-login-components/src/password-recovery/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _model = __webpack_require__("./components/xo-tracking/dist/model.js");
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _logger = __webpack_require__("./components/xo-beaver/dist/logger.js");
        var _template = __webpack_require__("./components/xo-login-components/src/password-recovery/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoPasswordRecoveryDirective", {
            tag: "xo-password-recovery",
            template: _template2["default"],
            props: {
                token: {
                    type: "var"
                },
                onContinue: {
                    type: "var"
                },
                onPasswordRecovery: {
                    type: "var"
                },
                onLoad: {
                    type: "var"
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    var PAYPAL = window.PAYPAL;
                    this.loaded = false;
                    var postMessageHandler = function postMessageHandler(response) {
                        (0, _angular.$timeout)(function() {
                            switch (response.event) {
                              case "render":
                                if (response.pageName === "authflow/password-recovery/done") {
                                    _this.onPasswordRecovery();
                                    _logger.$logger.info("checkout_fpti", {
                                        from: "password_recovery",
                                        to: "process_password_recovery"
                                    });
                                } else if (response.pageName === "authflow/password-recovery") {
                                    _this.onLoad();
                                    _this.loaded = true;
                                    _logger.$logger.info("checkout_fpti", {
                                        from: "password_recovery",
                                        to: "prepare_password_recovery"
                                    });
                                } else {}
                                break;

                              case "passwordSetSuccess":
                                _this.onContinue();
                                break;

                              default:
                                break;
                            }
                        });
                    };
                    this.loadPasswordRecoveryFlow = function() {
                        var isHermesInsideIframe = _squid.$util.isIFrame();
                        if (isHermesInsideIframe) {
                            _logger.$logger.info("MERCHANT_IFRAME_INTEGRATION");
                        }
                        var options = {
                            targetElement: document.getElementById("injectedPasswordRecovery"),
                            xhrRequest: isHermesInsideIframe,
                            iframePathname: "/authflow/password-recovery",
                            caller: "secondaryIframe",
                            queryParams: {
                                "country.x": _squid.$locale.country,
                                "locale.x": _squid.$locale.getLocaleCode(),
                                contextId: _this.token,
                                correlationId: _model.$CalDataModel.getCalCorrId()
                            },
                            onPostMessage: postMessageHandler
                        };
                        if (_squid.$config.deploy.isLocal()) {
                            options.origin = "https://" + _squid.$meta.stage;
                        }
                        if (PAYPAL && PAYPAL.unifiedLogin) {
                            PAYPAL.unifiedLogin.inject(options);
                        }
                    };
                    (0, _angular.$timeout)(this.loadPasswordRecoveryFlow);
                }
            }
        });
        _squid.$Component;
        _squid.$config;
        _squid.$locale;
        _squid.$meta;
        _squid.$util;
        _model.$CalDataModel;
        _angular.$timeout;
        _logger.$logger;
        module.exports = exports["default"];
    },
    "./components/xo-login-components/src/password-recovery/template.html": function(module, exports) {
        module.exports = '<div id="injectedPasswordRecovery" ng-show="loaded">\n</div>\n';
    },
    "../node_modules/noop-loader/index.js!./components/xo-login-components/src/login-overlay/template.html": function(module, exports) {
        module.exports = '<div ng-if="showOverlay" class="pageOverlay" ng-class="{mobile: isDevice}">\n    <div class="overlayMask"></div>\n    <div class="overlayWrapper">\n        <div class="overlayContainer">\n            <xo-spinner></xo-spinner>\n            <div class="aside">\n                <a class="close" href="#" ng-click="hideModal($event)"></a>\n                <section class="login" id="login">\n                    <xo-login-handler ng-if="!passwordRecovery && !createPassword" token=token auto-login="autoLogin" success-callback="onSuccess" ul-eligibility="ulEligibility" sub-flow-title-key="subFlowTitleKey" hideloginpp="true"></xo-login-handler>\n                    <xo-create-password ng-if="createPassword" token="token" reason="subFlowName" on-continue="onCreatePassword" on-cancel="hideModal"></xo-create-password>\n                    <xo-password-recovery ng-if="passwordRecovery" token="token" on-password-recovery="onPasswordRecovery" on-load="onPasswordRecoveryReady" on-continue="onCompletePasswordRecovery" on-cancel="onCancel"></xo-password-recovery>\n                </section>\n            </div>\n            <div class="pushLogo"></div>\n        </div>\n        <div class="logo"></div>\n    </div>\n</div>\n\n';
    },
    "./pages/xo-sidebar/directive.js": function(module, exports, __webpack_require__) {
        exports.__esModule = true;
        var _angular = __webpack_require__("./components/angularjs-ie8-build/dist/angular.min.js");
        var _uiRouter = __webpack_require__("./components/angular-ui-router/release/angular-ui-router.min.js");
        var _squid = __webpack_require__("./components/squid/dist/index.js");
        var _jquery = __webpack_require__("./components/jquery/dist/jquery.min.js");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _template = __webpack_require__("./pages/xo-sidebar/template.html");
        var _template2 = _interopRequireDefault(_template);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports["default"] = _squid.$Component.extend("$xoSidebarComponent", {
            tag: "xo-sidebar",
            template: _template2["default"],
            props: {
                token: {
                    required: true,
                    type: "var"
                },
                backUri: {
                    required: true,
                    type: "var"
                },
                doneUri: {
                    required: false,
                    type: "var"
                },
                promotion: {
                    required: false,
                    type: "var"
                },
                update: {
                    required: false,
                    type: "var"
                },
                installment: {
                    required: false,
                    type: "var"
                }
            },
            lifecycle: {
                enter: function enter() {
                    var _this = this;
                    _squid.$util.assert(this.props.backUri, "Expected backUri");
                    this.sidebar = true;
                    this.backUri = this.props.backUri;
                    this.doneUri = this.props.doneUri;
                    this.onPageClick = function($event) {
                        $event.stopPropagation();
                    };
                    this.history = [ this.props.backUri ];
                    this.cancelStateListener = _angular.$rootScope.$on("$stateChangeSuccess", function(event, to, toParams, from, fromParams) {
                        var index = _this.history.indexOf(to.name);
                        if (index === -1) {
                            _this.history.push(from.name);
                        } else {
                            _this.history = _this.history.slice(0, index);
                        }
                    });
                    this.back = function() {
                        _uiRouter.$state.go(_this.history[_this.history.length - 1]);
                    };
                    this.close = function() {
                        _uiRouter.$state.go(_this.props.backUri);
                    };
                    this.callbacks = {
                        done: function done() {
                            _uiRouter.$state.go(this.doneUri || "checkout.review");
                        }
                    };
                },
                populate: function populate() {
                    (0, _jquery2["default"])("body").addClass("trayOpen");
                    (0, _jquery2["default"])("#wrapper").addClass("maskMember");
                    var payButton = (0, _jquery2["default"])(".confirmButton");
                    if (payButton) {
                        payButton.attr("disabled", true);
                    }
                },
                exit: function exit() {
                    (0, _jquery2["default"])("body").removeClass("trayOpen");
                    var payButton = (0, _jquery2["default"])(".confirmButton");
                    if (payButton) {
                        payButton.attr("disabled", false);
                    }
                    this.cancelStateListener();
                }
            }
        });
        _angular.$rootScope;
        _uiRouter.$state;
        _squid.$Component;
        _squid.$util;
        module.exports = exports["default"];
    }
});
//# sourceMappingURL=main.js.map